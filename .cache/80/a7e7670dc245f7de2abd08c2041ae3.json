{"id":"../node_modules/@azure/core-http/dist-esm/src/policies/exponentialRetryPolicy.js","dependencies":[{"name":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\policies\\exponentialRetryPolicy.js.map","includedInParent":true,"mtime":1656031344688},{"name":"C:\\Users\\rodne\\azuremongotut\\package.json","includedInParent":true,"mtime":1657925171107},{"name":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\package.json","includedInParent":true,"mtime":1656031344383},{"name":"./requestPolicy","loc":{"line":3,"column":35,"index":110},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\policies\\exponentialRetryPolicy.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\policies\\requestPolicy.js"},{"name":"../util/exponentialBackoffStrategy","loc":{"line":4,"column":150,"index":279},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\policies\\exponentialRetryPolicy.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\util\\exponentialBackoffStrategy.js"},{"name":"../util/constants","loc":{"line":5,"column":26,"index":343},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\policies\\exponentialRetryPolicy.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\util\\constants.js"},{"name":"../restError","loc":{"line":6,"column":26,"index":390},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\policies\\exponentialRetryPolicy.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\restError.js"},{"name":"../util/delay","loc":{"line":7,"column":22,"index":428},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\policies\\exponentialRetryPolicy.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\util\\delay.js"},{"name":"../log","loc":{"line":8,"column":23,"index":468},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\policies\\exponentialRetryPolicy.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\log.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RetryMode = exports.ExponentialRetryPolicy = exports.DefaultRetryOptions = void 0;\nexports.exponentialRetryPolicy = exponentialRetryPolicy;\n\nvar _requestPolicy = require(\"./requestPolicy\");\n\nvar _exponentialBackoffStrategy = require(\"../util/exponentialBackoffStrategy\");\n\nvar _constants = require(\"../util/constants\");\n\nvar _restError = require(\"../restError\");\n\nvar _delay = require(\"../util/delay\");\n\nvar _log = require(\"../log\");\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/**\n * Policy that retries the request as many times as configured for as long as the max retry time interval specified, each retry waiting longer to begin than the last time.\n * @param retryCount - Maximum number of retries.\n * @param retryInterval - Base time between retries.\n * @param maxRetryInterval - Maximum time to wait between retries.\n */\nfunction exponentialRetryPolicy(retryCount, retryInterval, maxRetryInterval) {\n  return {\n    create: function create(nextPolicy, options) {\n      return new ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval);\n    }\n  };\n}\n/**\n * Describes the Retry Mode type. Currently supporting only Exponential.\n */\n\n\nvar RetryMode;\nexports.RetryMode = RetryMode;\n\n(function (RetryMode) {\n  /**\n   * Currently supported retry mode.\n   * Each time a retry happens, it will take exponentially more time than the last time.\n   */\n  RetryMode[RetryMode[\"Exponential\"] = 0] = \"Exponential\";\n})(RetryMode || (exports.RetryMode = RetryMode = {}));\n\nvar DefaultRetryOptions = {\n  maxRetries: _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_COUNT,\n  retryDelayInMs: _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_INTERVAL,\n  maxRetryDelayInMs: _exponentialBackoffStrategy.DEFAULT_CLIENT_MAX_RETRY_INTERVAL\n};\n/**\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n */\n\nexports.DefaultRetryOptions = DefaultRetryOptions;\n\nvar ExponentialRetryPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(ExponentialRetryPolicy, _BaseRequestPolicy);\n\n  var _super = _createSuper(ExponentialRetryPolicy);\n\n  /**\n   * @param nextPolicy - The next RequestPolicy in the pipeline chain.\n   * @param options - The options for this RequestPolicy.\n   * @param retryCount - The client retry count.\n   * @param retryInterval - The client retry interval, in milliseconds.\n   * @param minRetryInterval - The minimum retry interval, in milliseconds.\n   * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n   */\n  function ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval) {\n    var _this;\n\n    _classCallCheck(this, ExponentialRetryPolicy);\n\n    _this = _super.call(this, nextPolicy, options);\n    _this.retryCount = (0, _exponentialBackoffStrategy.isNumber)(retryCount) ? retryCount : _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_COUNT;\n    _this.retryInterval = (0, _exponentialBackoffStrategy.isNumber)(retryInterval) ? retryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_INTERVAL;\n    _this.maxRetryInterval = (0, _exponentialBackoffStrategy.isNumber)(maxRetryInterval) ? maxRetryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n    return _this;\n  }\n\n  _createClass(ExponentialRetryPolicy, [{\n    key: \"sendRequest\",\n    value: function sendRequest(request) {\n      var _this2 = this;\n\n      return this._nextPolicy.sendRequest(request.clone()).then(function (response) {\n        return retry(_this2, request, response);\n      }).catch(function (error) {\n        return retry(_this2, request, error.response, undefined, error);\n      });\n    }\n  }]);\n\n  return ExponentialRetryPolicy;\n}(_requestPolicy.BaseRequestPolicy);\n\nexports.ExponentialRetryPolicy = ExponentialRetryPolicy;\n\nfunction retry(_x, _x2, _x3, _x4, _x5) {\n  return _retry.apply(this, arguments);\n}\n\nfunction _retry() {\n  _retry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(policy, request, response, retryData, requestError) {\n    var shouldPolicyRetry, isAborted, res, err;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            shouldPolicyRetry = function _shouldPolicyRetry(responseParam) {\n              var statusCode = responseParam === null || responseParam === void 0 ? void 0 : responseParam.status;\n\n              if (statusCode === 503 && (response === null || response === void 0 ? void 0 : response.headers.get(_constants.Constants.HeaderConstants.RETRY_AFTER))) {\n                return false;\n              }\n\n              if (statusCode === undefined || statusCode < 500 && statusCode !== 408 || statusCode === 501 || statusCode === 505) {\n                return false;\n              }\n\n              return true;\n            };\n\n            retryData = (0, _exponentialBackoffStrategy.updateRetryData)({\n              retryInterval: policy.retryInterval,\n              minRetryInterval: 0,\n              maxRetryInterval: policy.maxRetryInterval\n            }, retryData, requestError);\n            isAborted = request.abortSignal && request.abortSignal.aborted;\n\n            if (!(!isAborted && (0, _exponentialBackoffStrategy.shouldRetry)(policy.retryCount, shouldPolicyRetry, retryData, response))) {\n              _context.next = 19;\n              break;\n            }\n\n            _log.logger.info(\"Retrying request in \".concat(retryData.retryInterval));\n\n            _context.prev = 5;\n            _context.next = 8;\n            return (0, _delay.delay)(retryData.retryInterval);\n\n          case 8:\n            _context.next = 10;\n            return policy._nextPolicy.sendRequest(request.clone());\n\n          case 10:\n            res = _context.sent;\n            return _context.abrupt(\"return\", retry(policy, request, res, retryData));\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](5);\n            return _context.abrupt(\"return\", retry(policy, request, response, retryData, _context.t0));\n\n          case 17:\n            _context.next = 25;\n            break;\n\n          case 19:\n            if (!(isAborted || requestError || !response)) {\n              _context.next = 24;\n              break;\n            }\n\n            // If the operation failed in the end, return all errors instead of just the last one\n            err = retryData.error || new _restError.RestError(\"Failed to send the request.\", _restError.RestError.REQUEST_SEND_ERROR, response && response.status, response && response.request, response);\n            throw err;\n\n          case 24:\n            return _context.abrupt(\"return\", response);\n\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 14]]);\n  }));\n  return _retry.apply(this, arguments);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":23,"column":47}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":49,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":33,"column":6},"generated":{"line":55,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":33,"column":16},"generated":{"line":55,"column":9}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":33,"column":6},"generated":{"line":55,"column":31}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":55,"column":32}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":33,"column":6},"generated":{"line":55,"column":42}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":35,"column":2},"generated":{"line":55,"column":44}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":33,"column":6},"generated":{"line":55,"column":57}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":36,"column":2},"generated":{"line":55,"column":59}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":33,"column":6},"generated":{"line":55,"column":75}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":36,"column":27},"generated":{"line":55,"column":77}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":38,"column":2},"generated":{"line":56,"column":2}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":38,"column":9},"generated":{"line":56,"column":9}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":39,"column":4},"generated":{"line":57,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":39,"column":10},"generated":{"line":57,"column":10}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":39,"column":12},"generated":{"line":57,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":39,"column":13},"generated":{"line":57,"column":28}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":39,"column":12},"generated":{"line":57,"column":38}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":39,"column":40},"generated":{"line":57,"column":40}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":39,"column":12},"generated":{"line":57,"column":47}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":39,"column":73},"generated":{"line":57,"column":49}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":40,"column":6},"generated":{"line":58,"column":6}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":40,"column":13},"generated":{"line":58,"column":13}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":40,"column":17},"generated":{"line":58,"column":17}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":40,"column":13},"generated":{"line":58,"column":39}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":41,"column":8},"generated":{"line":58,"column":40}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":40,"column":13},"generated":{"line":58,"column":50}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":42,"column":8},"generated":{"line":58,"column":52}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":40,"column":13},"generated":{"line":58,"column":59}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":43,"column":8},"generated":{"line":58,"column":61}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":40,"column":13},"generated":{"line":58,"column":71}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":44,"column":8},"generated":{"line":58,"column":73}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":40,"column":13},"generated":{"line":58,"column":86}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":45,"column":8},"generated":{"line":58,"column":88}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":40,"column":13},"generated":{"line":58,"column":104}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":40,"column":6},"generated":{"line":58,"column":105}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":47,"column":5},"generated":{"line":59,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":38,"column":9},"generated":{"line":60,"column":2}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":38,"column":2},"generated":{"line":60,"column":3}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":49,"column":1},"generated":{"line":61,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":51,"column":0},"generated":{"line":62,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":0},"generated":{"line":67,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":12},"generated":{"line":67,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":0},"generated":{"line":67,"column":13}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":0},"generated":{"line":70,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":0},"generated":{"line":70,"column":1}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":12},"generated":{"line":70,"column":11}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":0},"generated":{"line":70,"column":20}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":21},"generated":{"line":70,"column":22}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":71,"column":2}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":59,"column":2},"generated":{"line":75,"column":2}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":59,"column":2},"generated":{"line":75,"column":11}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":59,"column":2},"generated":{"line":75,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":59,"column":2},"generated":{"line":75,"column":21}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":59,"column":2},"generated":{"line":75,"column":22}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":59,"column":2},"generated":{"line":75,"column":35}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":59,"column":2},"generated":{"line":75,"column":36}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":59,"column":2},"generated":{"line":75,"column":39}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":59,"column":2},"generated":{"line":75,"column":40}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":59,"column":2},"generated":{"line":75,"column":41}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":59,"column":2},"generated":{"line":75,"column":44}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":59,"column":2},"generated":{"line":75,"column":57}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":60,"column":1},"generated":{"line":76,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":0},"generated":{"line":76,"column":1}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":12},"generated":{"line":76,"column":3}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":21},"generated":{"line":76,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":12},"generated":{"line":76,"column":37}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":21},"generated":{"line":76,"column":46}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":21},"generated":{"line":76,"column":49}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":21},"generated":{"line":76,"column":51}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":54,"column":0},"generated":{"line":76,"column":52}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":90,"column":7},"generated":{"line":78,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":90,"column":13},"generated":{"line":78,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":90,"column":32},"generated":{"line":78,"column":23}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":90,"column":49},"generated":{"line":78,"column":26}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":91,"column":2},"generated":{"line":79,"column":2}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":91,"column":12},"generated":{"line":79,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":91,"column":14},"generated":{"line":79,"column":14}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":90,"column":49},"generated":{"line":79,"column":68}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":92,"column":2},"generated":{"line":80,"column":2}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":92,"column":16},"generated":{"line":80,"column":16}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":92,"column":18},"generated":{"line":80,"column":18}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":90,"column":49},"generated":{"line":80,"column":75}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":81,"column":2}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":93,"column":19},"generated":{"line":81,"column":19}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":93,"column":21},"generated":{"line":81,"column":21}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":90,"column":49},"generated":{"line":82,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":90,"column":7},"generated":{"line":82,"column":1}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":96,"column":0},"generated":{"line":83,"column":0}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":99,"column":13},"generated":{"line":89,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":113,"column":2},"generated":{"line":94,"column":2}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":121,"column":2},"generated":{"line":102,"column":2}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":122,"column":4},"generated":{"line":102,"column":34}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":121,"column":2},"generated":{"line":102,"column":44}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":123,"column":4},"generated":{"line":102,"column":46}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":121,"column":2},"generated":{"line":102,"column":53}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":124,"column":4},"generated":{"line":102,"column":55}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":121,"column":2},"generated":{"line":102,"column":65}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":125,"column":4},"generated":{"line":102,"column":67}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":121,"column":2},"generated":{"line":102,"column":80}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":126,"column":4},"generated":{"line":102,"column":82}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":121,"column":2},"generated":{"line":102,"column":98}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":126,"column":29},"generated":{"line":102,"column":100}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":126,"column":29},"generated":{"line":103,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":126,"column":29},"generated":{"line":105,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":128,"column":4},"generated":{"line":107,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":128,"column":10},"generated":{"line":107,"column":30}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":128,"column":4},"generated":{"line":107,"column":40}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":128,"column":22},"generated":{"line":107,"column":42}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":128,"column":4},"generated":{"line":107,"column":49}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":129,"column":4},"generated":{"line":108,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":129,"column":9},"generated":{"line":108,"column":10}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":129,"column":4},"generated":{"line":108,"column":20}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":129,"column":22},"generated":{"line":108,"column":23}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":129,"column":22},"generated":{"line":108,"column":27}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":129,"column":22},"generated":{"line":108,"column":63}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":129,"column":31},"generated":{"line":108,"column":65}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":129,"column":22},"generated":{"line":108,"column":75}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":129,"column":45},"generated":{"line":108,"column":79}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":129,"column":22},"generated":{"line":108,"column":89}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":129,"column":58},"generated":{"line":108,"column":92}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":129,"column":4},"generated":{"line":108,"column":146}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":130,"column":4},"generated":{"line":109,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":130,"column":9},"generated":{"line":109,"column":10}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":130,"column":4},"generated":{"line":109,"column":23}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":130,"column":25},"generated":{"line":109,"column":26}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":130,"column":25},"generated":{"line":109,"column":30}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":130,"column":25},"generated":{"line":109,"column":66}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":130,"column":34},"generated":{"line":109,"column":68}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":130,"column":25},"generated":{"line":109,"column":81}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":130,"column":51},"generated":{"line":109,"column":85}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":130,"column":25},"generated":{"line":109,"column":98}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":130,"column":67},"generated":{"line":109,"column":101}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":130,"column":4},"generated":{"line":109,"column":158}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":131,"column":4},"generated":{"line":110,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":131,"column":9},"generated":{"line":110,"column":10}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":131,"column":4},"generated":{"line":110,"column":26}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":131,"column":28},"generated":{"line":110,"column":29}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":131,"column":28},"generated":{"line":110,"column":33}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":131,"column":28},"generated":{"line":110,"column":69}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":131,"column":37},"generated":{"line":110,"column":71}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":131,"column":28},"generated":{"line":110,"column":87}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":132,"column":8},"generated":{"line":110,"column":91}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":131,"column":28},"generated":{"line":110,"column":107}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":133,"column":8},"generated":{"line":110,"column":110}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":131,"column":4},"generated":{"line":110,"column":171}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":126,"column":29},"generated":{"line":111,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":134,"column":3},"generated":{"line":112,"column":2}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":136,"column":9},"generated":{"line":116,"column":11}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":136,"column":21},"generated":{"line":116,"column":32}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":136,"column":9},"generated":{"line":116,"column":39}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":136,"column":45},"generated":{"line":116,"column":41}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":136,"column":45},"generated":{"line":117,"column":6}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":137,"column":4},"generated":{"line":119,"column":6}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":137,"column":11},"generated":{"line":119,"column":13}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":137,"column":16},"generated":{"line":119,"column":18}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":137,"column":11},"generated":{"line":119,"column":29}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":138,"column":7},"generated":{"line":119,"column":30}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":137,"column":11},"generated":{"line":119,"column":41}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":138,"column":19},"generated":{"line":119,"column":42}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":138,"column":26},"generated":{"line":119,"column":49}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":138,"column":27},"generated":{"line":119,"column":50}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":138,"column":19},"generated":{"line":119,"column":55}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":137,"column":11},"generated":{"line":119,"column":57}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":139,"column":7},"generated":{"line":119,"column":59}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":137,"column":11},"generated":{"line":119,"column":63}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":139,"column":12},"generated":{"line":119,"column":64}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":139,"column":13},"generated":{"line":119,"column":74}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":139,"column":12},"generated":{"line":119,"column":82}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":139,"column":12},"generated":{"line":120,"column":8}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":139,"column":26},"generated":{"line":120,"column":15}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":139,"column":31},"generated":{"line":120,"column":20}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":139,"column":32},"generated":{"line":120,"column":21}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":139,"column":31},"generated":{"line":120,"column":27}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":139,"column":38},"generated":{"line":120,"column":29}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":139,"column":31},"generated":{"line":120,"column":36}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":139,"column":47},"generated":{"line":120,"column":38}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":139,"column":31},"generated":{"line":120,"column":46}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":139,"column":12},"generated":{"line":120,"column":47}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":139,"column":12},"generated":{"line":121,"column":6}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":137,"column":11},"generated":{"line":121,"column":7}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":7},"generated":{"line":121,"column":9}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":137,"column":11},"generated":{"line":121,"column":14}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":13},"generated":{"line":121,"column":15}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":14},"generated":{"line":121,"column":25}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":13},"generated":{"line":121,"column":30}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":13},"generated":{"line":122,"column":8}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":24},"generated":{"line":122,"column":15}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":29},"generated":{"line":122,"column":20}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":30},"generated":{"line":122,"column":21}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":29},"generated":{"line":122,"column":27}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":36},"generated":{"line":122,"column":29}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":29},"generated":{"line":122,"column":36}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":45},"generated":{"line":122,"column":38}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":50},"generated":{"line":122,"column":43}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":51},"generated":{"line":122,"column":44}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":29},"generated":{"line":122,"column":52}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":61},"generated":{"line":122,"column":54}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":29},"generated":{"line":122,"column":63}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":72},"generated":{"line":122,"column":65}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":29},"generated":{"line":122,"column":70}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":13},"generated":{"line":122,"column":71}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":140,"column":13},"generated":{"line":123,"column":6}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":137,"column":11},"generated":{"line":123,"column":7}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":137,"column":4},"generated":{"line":123,"column":8}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":141,"column":3},"generated":{"line":124,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":99,"column":44},"generated":{"line":128,"column":2}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":15},"generated":{"line":132,"column":9}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":137,"column":70}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":145,"column":2},"generated":{"line":137,"column":87}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":137,"column":93}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":146,"column":2},"generated":{"line":137,"column":95}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":137,"column":102}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":147,"column":2},"generated":{"line":137,"column":104}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":137,"column":112}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":148,"column":2},"generated":{"line":137,"column":114}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":137,"column":123}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":149,"column":2},"generated":{"line":137,"column":125}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":137,"column":137}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":138,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":151,"column":11},"generated":{"line":138,"column":8}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":138,"column":25}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":139,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":140,"column":6}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":141,"column":8}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":142,"column":10}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":151,"column":11},"generated":{"line":143,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":143,"column":29}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":151,"column":29},"generated":{"line":143,"column":60}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":143,"column":73}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":151,"column":66},"generated":{"line":143,"column":75}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":4},"generated":{"line":144,"column":14}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":10},"generated":{"line":144,"column":18}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":20},"generated":{"line":144,"column":28}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":23},"generated":{"line":144,"column":31}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":36},"generated":{"line":144,"column":44}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":36},"generated":{"line":144,"column":49}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":23},"generated":{"line":144,"column":53}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":23},"generated":{"line":144,"column":57}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":36},"generated":{"line":144,"column":70}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":36},"generated":{"line":144,"column":75}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":36},"generated":{"line":144,"column":80}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":23},"generated":{"line":144,"column":81}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":36},"generated":{"line":144,"column":84}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":36},"generated":{"line":144,"column":89}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":23},"generated":{"line":144,"column":90}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":23},"generated":{"line":144,"column":93}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":36},"generated":{"line":144,"column":106}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":38},"generated":{"line":144,"column":107}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":152,"column":4},"generated":{"line":144,"column":113}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":4},"generated":{"line":146,"column":14}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":8},"generated":{"line":146,"column":18}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":18},"generated":{"line":146,"column":28}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":23},"generated":{"line":146,"column":33}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":8},"generated":{"line":146,"column":36}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":30},"generated":{"line":146,"column":41}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":38},"generated":{"line":146,"column":49}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":38},"generated":{"line":146,"column":54}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":30},"generated":{"line":146,"column":58}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":30},"generated":{"line":146,"column":62}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":38},"generated":{"line":146,"column":70}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":38},"generated":{"line":146,"column":75}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":38},"generated":{"line":146,"column":80}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":30},"generated":{"line":146,"column":81}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":38},"generated":{"line":146,"column":84}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":38},"generated":{"line":146,"column":89}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":30},"generated":{"line":146,"column":90}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":30},"generated":{"line":146,"column":93}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":38},"generated":{"line":146,"column":101}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":40},"generated":{"line":146,"column":102}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":30},"generated":{"line":146,"column":109}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":48},"generated":{"line":146,"column":110}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":30},"generated":{"line":146,"column":113}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":52},"generated":{"line":146,"column":114}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":52},"generated":{"line":146,"column":134}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":62},"generated":{"line":146,"column":135}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":52},"generated":{"line":146,"column":150}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":78},"generated":{"line":146,"column":151}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":30},"generated":{"line":146,"column":162}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":8},"generated":{"line":146,"column":163}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":4},"generated":{"line":146,"column":164}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":153,"column":92},"generated":{"line":146,"column":166}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":154,"column":6},"generated":{"line":147,"column":16}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":154,"column":13},"generated":{"line":147,"column":23}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":154,"column":6},"generated":{"line":147,"column":28}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":155,"column":5},"generated":{"line":148,"column":14}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":157,"column":4},"generated":{"line":150,"column":14}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":158,"column":6},"generated":{"line":150,"column":18}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":158,"column":16},"generated":{"line":150,"column":28}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":158,"column":21},"generated":{"line":150,"column":33}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":158,"column":6},"generated":{"line":150,"column":42}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":159,"column":7},"generated":{"line":150,"column":46}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":159,"column":17},"generated":{"line":150,"column":56}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":159,"column":20},"generated":{"line":150,"column":59}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":159,"column":7},"generated":{"line":150,"column":62}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":159,"column":27},"generated":{"line":150,"column":66}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":159,"column":37},"generated":{"line":150,"column":76}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":159,"column":42},"generated":{"line":150,"column":81}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":158,"column":6},"generated":{"line":150,"column":84}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":160,"column":6},"generated":{"line":150,"column":88}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":160,"column":16},"generated":{"line":150,"column":98}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":160,"column":21},"generated":{"line":150,"column":103}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":158,"column":6},"generated":{"line":150,"column":106}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":161,"column":6},"generated":{"line":150,"column":110}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":161,"column":16},"generated":{"line":150,"column":120}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":161,"column":21},"generated":{"line":150,"column":125}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":157,"column":4},"generated":{"line":150,"column":128}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":162,"column":6},"generated":{"line":150,"column":130}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":163,"column":6},"generated":{"line":151,"column":16}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":163,"column":13},"generated":{"line":151,"column":23}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":163,"column":6},"generated":{"line":151,"column":28}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":164,"column":5},"generated":{"line":152,"column":14}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":165,"column":4},"generated":{"line":154,"column":14}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":165,"column":11},"generated":{"line":154,"column":21}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":165,"column":4},"generated":{"line":154,"column":25}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":166,"column":3},"generated":{"line":155,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":155,"column":13}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":168,"column":2},"generated":{"line":157,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":168,"column":11},"generated":{"line":157,"column":21}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":168,"column":14},"generated":{"line":157,"column":24}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":168,"column":14},"generated":{"line":157,"column":28}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":168,"column":14},"generated":{"line":157,"column":71}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":169,"column":4},"generated":{"line":157,"column":73}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":170,"column":6},"generated":{"line":158,"column":14}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":170,"column":19},"generated":{"line":158,"column":27}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":170,"column":21},"generated":{"line":158,"column":29}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":170,"column":27},"generated":{"line":158,"column":35}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":170,"column":28},"generated":{"line":158,"column":36}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":169,"column":4},"generated":{"line":158,"column":49}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":171,"column":6},"generated":{"line":159,"column":14}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":171,"column":22},"generated":{"line":159,"column":30}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":171,"column":24},"generated":{"line":159,"column":32}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":169,"column":4},"generated":{"line":159,"column":33}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":172,"column":6},"generated":{"line":160,"column":14}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":172,"column":22},"generated":{"line":160,"column":30}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":172,"column":24},"generated":{"line":160,"column":32}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":172,"column":30},"generated":{"line":160,"column":38}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":172,"column":31},"generated":{"line":160,"column":39}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":169,"column":4},"generated":{"line":161,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":168,"column":14},"generated":{"line":161,"column":13}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":174,"column":4},"generated":{"line":161,"column":15}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":168,"column":14},"generated":{"line":161,"column":24}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":175,"column":4},"generated":{"line":161,"column":26}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":168,"column":14},"generated":{"line":161,"column":38}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":168,"column":2},"generated":{"line":161,"column":39}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":178,"column":8},"generated":{"line":162,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":162,"column":21}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":178,"column":41},"generated":{"line":162,"column":24}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":178,"column":48},"generated":{"line":162,"column":31}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":178,"column":49},"generated":{"line":162,"column":32}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":178,"column":41},"generated":{"line":162,"column":43}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":178,"column":64},"generated":{"line":162,"column":47}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":178,"column":71},"generated":{"line":162,"column":54}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":178,"column":72},"generated":{"line":162,"column":55}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":178,"column":64},"generated":{"line":162,"column":66}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":178,"column":84},"generated":{"line":162,"column":67}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":162,"column":74}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":164,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":6},"generated":{"line":164,"column":18}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":7},"generated":{"line":164,"column":19}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":6},"generated":{"line":164,"column":28}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":20},"generated":{"line":164,"column":32}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":20},"generated":{"line":164,"column":36}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":20},"generated":{"line":164,"column":75}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":32},"generated":{"line":164,"column":77}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":38},"generated":{"line":164,"column":83}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":39},"generated":{"line":164,"column":84}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":20},"generated":{"line":164,"column":94}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":51},"generated":{"line":164,"column":96}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":20},"generated":{"line":164,"column":113}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":70},"generated":{"line":164,"column":115}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":20},"generated":{"line":164,"column":124}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":81},"generated":{"line":164,"column":126}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":179,"column":20},"generated":{"line":164,"column":134}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":164,"column":135}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":165,"column":14}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":166,"column":14}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":167,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":180,"column":4},"generated":{"line":169,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":180,"column":4},"generated":{"line":169,"column":23}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":180,"column":11},"generated":{"line":169,"column":24}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":180,"column":4},"generated":{"line":169,"column":28}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":180,"column":39},"generated":{"line":169,"column":59}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":180,"column":48},"generated":{"line":169,"column":68}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":180,"column":49},"generated":{"line":169,"column":69}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":180,"column":4},"generated":{"line":169,"column":82}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":171,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":172,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":173,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":182,"column":12},"generated":{"line":173,"column":19}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":182,"column":12},"generated":{"line":173,"column":23}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":182,"column":12},"generated":{"line":173,"column":35}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":182,"column":18},"generated":{"line":173,"column":37}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":182,"column":27},"generated":{"line":173,"column":46}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":182,"column":28},"generated":{"line":173,"column":47}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":182,"column":12},"generated":{"line":173,"column":60}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":173,"column":61}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":175,"column":10}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":176,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":177,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":183,"column":24},"generated":{"line":177,"column":19}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":183,"column":30},"generated":{"line":177,"column":25}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":183,"column":31},"generated":{"line":177,"column":26}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":183,"column":24},"generated":{"line":177,"column":37}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":183,"column":43},"generated":{"line":177,"column":38}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":183,"column":24},"generated":{"line":177,"column":49}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":183,"column":55},"generated":{"line":177,"column":50}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":183,"column":62},"generated":{"line":177,"column":57}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":183,"column":63},"generated":{"line":177,"column":58}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":183,"column":55},"generated":{"line":177,"column":63}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":183,"column":24},"generated":{"line":177,"column":65}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":177,"column":66}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":179,"column":10}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":183,"column":12},"generated":{"line":180,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":180,"column":15}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":181,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":184,"column":13},"generated":{"line":181,"column":45}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":184,"column":18},"generated":{"line":181,"column":50}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":184,"column":19},"generated":{"line":181,"column":51}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":184,"column":18},"generated":{"line":181,"column":57}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":184,"column":27},"generated":{"line":181,"column":59}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":184,"column":18},"generated":{"line":181,"column":66}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":184,"column":36},"generated":{"line":181,"column":68}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":184,"column":18},"generated":{"line":181,"column":71}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":184,"column":41},"generated":{"line":181,"column":73}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":184,"column":18},"generated":{"line":181,"column":82}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":181,"column":83}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":183,"column":10}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":184,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":185,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":186,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":186,"column":13},"generated":{"line":186,"column":45}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":186,"column":18},"generated":{"line":186,"column":50}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":186,"column":19},"generated":{"line":186,"column":51}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":186,"column":18},"generated":{"line":186,"column":57}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":186,"column":27},"generated":{"line":186,"column":59}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":186,"column":18},"generated":{"line":186,"column":66}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":186,"column":36},"generated":{"line":186,"column":68}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":186,"column":18},"generated":{"line":186,"column":76}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":186,"column":46},"generated":{"line":186,"column":78}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":186,"column":18},"generated":{"line":186,"column":87}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":186,"column":101}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":188,"column":10}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":189,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":190,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":192,"column":10}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":193,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":188,"column":13},"generated":{"line":193,"column":18}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":188,"column":22},"generated":{"line":193,"column":27}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":188,"column":26},"generated":{"line":193,"column":31}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":188,"column":13},"generated":{"line":193,"column":43}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":188,"column":42},"generated":{"line":193,"column":47}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":188,"column":43},"generated":{"line":193,"column":48}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":193,"column":56}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":194,"column":14}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":195,"column":14}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":196,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":189,"column":4},"generated":{"line":198,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":190,"column":10},"generated":{"line":199,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":199,"column":15}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":191,"column":6},"generated":{"line":199,"column":18}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":191,"column":15},"generated":{"line":199,"column":27}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":191,"column":16},"generated":{"line":199,"column":28}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":191,"column":6},"generated":{"line":199,"column":33}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":192,"column":6},"generated":{"line":199,"column":37}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":192,"column":10},"generated":{"line":199,"column":41}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":192,"column":6},"generated":{"line":199,"column":61}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":193,"column":8},"generated":{"line":199,"column":62}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":192,"column":6},"generated":{"line":199,"column":91}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":194,"column":8},"generated":{"line":199,"column":93}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":194,"column":8},"generated":{"line":199,"column":113}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":194,"column":18},"generated":{"line":199,"column":114}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":192,"column":6},"generated":{"line":199,"column":132}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":195,"column":8},"generated":{"line":199,"column":134}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":195,"column":16},"generated":{"line":199,"column":142}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":195,"column":20},"generated":{"line":199,"column":146}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":195,"column":28},"generated":{"line":199,"column":154}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":195,"column":29},"generated":{"line":199,"column":155}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":192,"column":6},"generated":{"line":199,"column":161}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":196,"column":8},"generated":{"line":199,"column":163}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":196,"column":16},"generated":{"line":199,"column":171}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":196,"column":20},"generated":{"line":199,"column":175}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":196,"column":28},"generated":{"line":199,"column":183}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":196,"column":29},"generated":{"line":199,"column":184}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":192,"column":6},"generated":{"line":199,"column":191}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":197,"column":8},"generated":{"line":199,"column":193}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":192,"column":6},"generated":{"line":199,"column":201}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":199,"column":202}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":200,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":199,"column":10},"generated":{"line":200,"column":18}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":200,"column":21}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":202,"column":10}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":203,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":201,"column":11},"generated":{"line":203,"column":45}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":203,"column":53}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":205,"column":10}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":206,"column":10}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":207,"column":12}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":208,"column":8}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":209,"column":6}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":210,"column":4}},{"source":"../../../src/policies/exponentialRetryPolicy.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":211,"column":2}}],"sources":{"../../../src/policies/exponentialRetryPolicy.ts":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport {\n  DEFAULT_CLIENT_MAX_RETRY_INTERVAL,\n  DEFAULT_CLIENT_RETRY_COUNT,\n  DEFAULT_CLIENT_RETRY_INTERVAL,\n  RetryData,\n  RetryError,\n  isNumber,\n  shouldRetry,\n  updateRetryData,\n} from \"../util/exponentialBackoffStrategy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { RestError } from \"../restError\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"../util/delay\";\nimport { logger } from \"../log\";\n\n/**\n * Policy that retries the request as many times as configured for as long as the max retry time interval specified, each retry waiting longer to begin than the last time.\n * @param retryCount - Maximum number of retries.\n * @param retryInterval - Base time between retries.\n * @param maxRetryInterval - Maximum time to wait between retries.\n */\nexport function exponentialRetryPolicy(\n  retryCount?: number,\n  retryInterval?: number,\n  maxRetryInterval?: number\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ExponentialRetryPolicy(\n        nextPolicy,\n        options,\n        retryCount,\n        retryInterval,\n        maxRetryInterval\n      );\n    },\n  };\n}\n\n/**\n * Describes the Retry Mode type. Currently supporting only Exponential.\n */\nexport enum RetryMode {\n  /**\n   * Currently supported retry mode.\n   * Each time a retry happens, it will take exponentially more time than the last time.\n   */\n  Exponential,\n}\n\n/**\n * Options that control how to retry failed requests.\n */\nexport interface RetryOptions {\n  /**\n   * The maximum number of retry attempts.  Defaults to 3.\n   */\n  maxRetries?: number;\n\n  /**\n   * The amount of delay in milliseconds between retry attempts. Defaults to 30000\n   * (30 seconds). The delay increases exponentially with each retry up to a maximum\n   * specified by maxRetryDelayInMs.\n   */\n  retryDelayInMs?: number;\n\n  /**\n   * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n   * to 90000 (90 seconds).\n   */\n  maxRetryDelayInMs?: number;\n\n  /**\n   * Currently supporting only Exponential mode.\n   */\n  mode?: RetryMode;\n}\n\nexport const DefaultRetryOptions: RetryOptions = {\n  maxRetries: DEFAULT_CLIENT_RETRY_COUNT,\n  retryDelayInMs: DEFAULT_CLIENT_RETRY_INTERVAL,\n  maxRetryDelayInMs: DEFAULT_CLIENT_MAX_RETRY_INTERVAL,\n};\n\n/**\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n */\nexport class ExponentialRetryPolicy extends BaseRequestPolicy {\n  /**\n   * The client retry count.\n   */\n  retryCount: number;\n  /**\n   * The client retry interval in milliseconds.\n   */\n  retryInterval: number;\n  /**\n   * The maximum retry interval in milliseconds.\n   */\n  maxRetryInterval: number;\n\n  /**\n   * @param nextPolicy - The next RequestPolicy in the pipeline chain.\n   * @param options - The options for this RequestPolicy.\n   * @param retryCount - The client retry count.\n   * @param retryInterval - The client retry interval, in milliseconds.\n   * @param minRetryInterval - The minimum retry interval, in milliseconds.\n   * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryCount?: number,\n    retryInterval?: number,\n    maxRetryInterval?: number\n  ) {\n    super(nextPolicy, options);\n    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.maxRetryInterval = isNumber(maxRetryInterval)\n      ? maxRetryInterval\n      : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => retry(this, request, response))\n      .catch((error) => retry(this, request, error.response, undefined, error));\n  }\n}\n\nasync function retry(\n  policy: ExponentialRetryPolicy,\n  request: WebResourceLike,\n  response?: HttpOperationResponse,\n  retryData?: RetryData,\n  requestError?: RetryError\n): Promise<HttpOperationResponse> {\n  function shouldPolicyRetry(responseParam?: HttpOperationResponse): boolean {\n    const statusCode = responseParam?.status;\n    if (statusCode === 503 && response?.headers.get(Constants.HeaderConstants.RETRY_AFTER)) {\n      return false;\n    }\n\n    if (\n      statusCode === undefined ||\n      (statusCode < 500 && statusCode !== 408) ||\n      statusCode === 501 ||\n      statusCode === 505\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  retryData = updateRetryData(\n    {\n      retryInterval: policy.retryInterval,\n      minRetryInterval: 0,\n      maxRetryInterval: policy.maxRetryInterval,\n    },\n    retryData,\n    requestError\n  );\n\n  const isAborted: boolean | undefined = request.abortSignal && request.abortSignal.aborted;\n  if (!isAborted && shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, response)) {\n    logger.info(`Retrying request in ${retryData.retryInterval}`);\n    try {\n      await delay(retryData.retryInterval);\n      const res = await policy._nextPolicy.sendRequest(request.clone());\n      return retry(policy, request, res, retryData);\n    } catch (err: any) {\n      return retry(policy, request, response, retryData, err);\n    }\n  } else if (isAborted || requestError || !response) {\n    // If the operation failed in the end, return all errors instead of just the last one\n    const err =\n      retryData.error ||\n      new RestError(\n        \"Failed to send the request.\",\n        RestError.REQUEST_SEND_ERROR,\n        response && response.status,\n        response && response.request,\n        response\n      );\n    throw err;\n  } else {\n    return response;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"743a0b9191ee4c9cac0651cde498c885","cacheData":{"env":{}}}