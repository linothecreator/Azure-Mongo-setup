{"id":"../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js","dependencies":[{"name":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BatchResponseParser.js.map","includedInParent":true,"mtime":1656031344816},{"name":"C:\\Users\\rodne\\azuremongotut\\package.json","includedInParent":true,"mtime":1657925171107},{"name":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\package.json","includedInParent":true,"mtime":1656031344714},{"name":"@azure/core-http","loc":{"line":3,"column":28,"index":103},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BatchResponseParser.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\coreHttp.js"},{"name":"./utils/constants","loc":{"line":4,"column":88,"index":211},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BatchResponseParser.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\utils\\constants.js"},{"name":"./BatchUtils","loc":{"line":5,"column":30,"index":262},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BatchResponseParser.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BatchUtils.browser.js"},{"name":"./log","loc":{"line":6,"column":23,"index":301},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BatchResponseParser.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\log.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BatchResponseParser = void 0;\n\nvar _coreHttp = require(\"@azure/core-http\");\n\nvar _constants = require(\"./utils/constants\");\n\nvar _BatchUtils = require(\"./BatchUtils\");\n\nvar _log = require(\"./log\");\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar HTTP_HEADER_DELIMITER = \": \";\nvar SPACE_DELIMITER = \" \";\nvar NOT_FOUND = -1;\n/**\n * Util class for parsing batch response.\n */\n\nvar BatchResponseParser = /*#__PURE__*/function () {\n  function BatchResponseParser(batchResponse, subRequests) {\n    _classCallCheck(this, BatchResponseParser);\n\n    if (!batchResponse || !batchResponse.contentType) {\n      // In special case(reported), server may return invalid content-type which could not be parsed.\n      throw new RangeError(\"batchResponse is malformed or doesn't contain valid content-type.\");\n    }\n\n    if (!subRequests || subRequests.size === 0) {\n      // This should be prevent during coding.\n      throw new RangeError(\"Invalid state: subRequests is not provided or size is 0.\");\n    }\n\n    this.batchResponse = batchResponse;\n    this.subRequests = subRequests;\n    this.responseBatchBoundary = this.batchResponse.contentType.split(\"=\")[1];\n    this.perResponsePrefix = \"--\".concat(this.responseBatchBoundary).concat(_constants.HTTP_LINE_ENDING);\n    this.batchResponseEnding = \"--\".concat(this.responseBatchBoundary, \"--\");\n  } // For example of response, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#response\n\n\n  _createClass(BatchResponseParser, [{\n    key: \"parseBatchResponse\",\n    value: function () {\n      var _parseBatchResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var responseBodyAsText, subResponses, subResponseCount, deserializedSubResponses, subResponsesSucceededCount, subResponsesFailedCount, index, subResponse, deserializedSubResponse, responseLines, subRespHeaderStartFound, subRespHeaderEndFound, subRespFailed, contentId, _iterator, _step, responseLine, tokens, _tokens;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.batchResponse._response.status !== _constants.HTTPURLConnection.HTTP_ACCEPTED)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Invalid state: batch request failed with status: '\".concat(this.batchResponse._response.status, \"'.\"));\n\n              case 2:\n                _context.next = 4;\n                return (0, _BatchUtils.getBodyAsText)(this.batchResponse);\n\n              case 4:\n                responseBodyAsText = _context.sent;\n                subResponses = responseBodyAsText.split(this.batchResponseEnding)[0] // string after ending is useless\n                .split(this.perResponsePrefix).slice(1); // string before first response boundary is useless\n\n                subResponseCount = subResponses.length; // Defensive coding in case of potential error parsing.\n                // Note: subResponseCount == 1 is special case where sub request is invalid.\n                // We try to prevent such cases through early validation, e.g. validate sub request count >= 1.\n                // While in unexpected sub request invalid case, we allow sub response to be parsed and return to user.\n\n                if (!(subResponseCount !== this.subRequests.size && subResponseCount !== 1)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                throw new Error(\"Invalid state: sub responses' count is not equal to sub requests' count.\");\n\n              case 9:\n                deserializedSubResponses = new Array(subResponseCount);\n                subResponsesSucceededCount = 0;\n                subResponsesFailedCount = 0; // Parse sub subResponses.\n\n                index = 0;\n\n              case 13:\n                if (!(index < subResponseCount)) {\n                  _context.next = 59;\n                  break;\n                }\n\n                subResponse = subResponses[index];\n                deserializedSubResponse = {};\n                deserializedSubResponse.headers = new _coreHttp.HttpHeaders();\n                responseLines = subResponse.split(\"\".concat(_constants.HTTP_LINE_ENDING));\n                subRespHeaderStartFound = false;\n                subRespHeaderEndFound = false;\n                subRespFailed = false;\n                contentId = NOT_FOUND;\n                _iterator = _createForOfIteratorHelper(responseLines);\n                _context.prev = 23;\n\n                _iterator.s();\n\n              case 25:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 46;\n                  break;\n                }\n\n                responseLine = _step.value;\n\n                if (subRespHeaderStartFound) {\n                  _context.next = 31;\n                  break;\n                }\n\n                // Convention line to indicate content ID\n                if (responseLine.startsWith(_constants.HeaderConstants.CONTENT_ID)) {\n                  contentId = parseInt(responseLine.split(HTTP_HEADER_DELIMITER)[1]);\n                } // Http version line with status code indicates the start of sub request's response.\n                // Example: HTTP/1.1 202 Accepted\n\n\n                if (responseLine.startsWith(_constants.HTTP_VERSION_1_1)) {\n                  subRespHeaderStartFound = true;\n                  tokens = responseLine.split(SPACE_DELIMITER);\n                  deserializedSubResponse.status = parseInt(tokens[1]);\n                  deserializedSubResponse.statusMessage = tokens.slice(2).join(SPACE_DELIMITER);\n                }\n\n                return _context.abrupt(\"continue\", 44);\n\n              case 31:\n                if (!(responseLine.trim() === \"\")) {\n                  _context.next = 34;\n                  break;\n                }\n\n                // Sub response's header start line already found, and the first empty line indicates header end line found.\n                if (!subRespHeaderEndFound) {\n                  subRespHeaderEndFound = true;\n                }\n\n                return _context.abrupt(\"continue\", 44);\n\n              case 34:\n                if (subRespHeaderEndFound) {\n                  _context.next = 42;\n                  break;\n                }\n\n                if (!(responseLine.indexOf(HTTP_HEADER_DELIMITER) === -1)) {\n                  _context.next = 37;\n                  break;\n                }\n\n                throw new Error(\"Invalid state: find non-empty line '\".concat(responseLine, \"' without HTTP header delimiter '\").concat(HTTP_HEADER_DELIMITER, \"'.\"));\n\n              case 37:\n                // Parse headers of sub response.\n                _tokens = responseLine.split(HTTP_HEADER_DELIMITER);\n                deserializedSubResponse.headers.set(_tokens[0], _tokens[1]);\n\n                if (_tokens[0] === _constants.HeaderConstants.X_MS_ERROR_CODE) {\n                  deserializedSubResponse.errorCode = _tokens[1];\n                  subRespFailed = true;\n                }\n\n                _context.next = 44;\n                break;\n\n              case 42:\n                // Assemble body of sub response.\n                if (!deserializedSubResponse.bodyAsText) {\n                  deserializedSubResponse.bodyAsText = \"\";\n                }\n\n                deserializedSubResponse.bodyAsText += responseLine;\n\n              case 44:\n                _context.next = 25;\n                break;\n\n              case 46:\n                _context.next = 51;\n                break;\n\n              case 48:\n                _context.prev = 48;\n                _context.t0 = _context[\"catch\"](23);\n\n                _iterator.e(_context.t0);\n\n              case 51:\n                _context.prev = 51;\n\n                _iterator.f();\n\n                return _context.finish(51);\n\n              case 54:\n                // Inner for end\n                // The response will contain the Content-ID header for each corresponding subrequest response to use for tracking.\n                // The Content-IDs are set to a valid index in the subrequests we sent. In the status code 202 path, we could expect it\n                // to be 1-1 mapping from the [0, subRequests.size) to the Content-IDs returned. If not, we simply don't return that\n                // unexpected subResponse in the parsed reponse and we can always look it up in the raw response for debugging purpose.\n                if (contentId !== NOT_FOUND && Number.isInteger(contentId) && contentId >= 0 && contentId < this.subRequests.size && deserializedSubResponses[contentId] === undefined) {\n                  deserializedSubResponse._request = this.subRequests.get(contentId);\n                  deserializedSubResponses[contentId] = deserializedSubResponse;\n                } else {\n                  _log.logger.error(\"subResponses[\".concat(index, \"] is dropped as the Content-ID is not found or invalid, Content-ID: \").concat(contentId));\n                }\n\n                if (subRespFailed) {\n                  subResponsesFailedCount++;\n                } else {\n                  subResponsesSucceededCount++;\n                }\n\n              case 56:\n                index++;\n                _context.next = 13;\n                break;\n\n              case 59:\n                return _context.abrupt(\"return\", {\n                  subResponses: deserializedSubResponses,\n                  subResponsesSucceededCount: subResponsesSucceededCount,\n                  subResponsesFailedCount: subResponsesFailedCount\n                });\n\n              case 60:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[23, 48, 51, 54]]);\n      }));\n\n      function parseBatchResponse() {\n        return _parseBatchResponse.apply(this, arguments);\n      }\n\n      return parseBatchResponse;\n    }()\n  }]);\n\n  return BatchResponseParser;\n}();\n\nexports.BatchResponseParser = BatchResponseParser;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":18,"column":47}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":36,"column":0}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":18,"column":6},"generated":{"line":36,"column":4}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":18,"column":27},"generated":{"line":36,"column":25}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":18,"column":30},"generated":{"line":36,"column":28}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":36,"column":32}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":37,"column":0}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":19,"column":6},"generated":{"line":37,"column":4}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":19,"column":21},"generated":{"line":37,"column":19}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":19,"column":24},"generated":{"line":37,"column":22}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":37,"column":25}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":38,"column":0}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":38,"column":4}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":20,"column":15},"generated":{"line":38,"column":13}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":20,"column":18},"generated":{"line":38,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":20,"column":19},"generated":{"line":38,"column":17}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":38,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":39,"column":0}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":25,"column":13},"generated":{"line":43,"column":4}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":32,"column":2},"generated":{"line":44,"column":2}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":33,"column":4},"generated":{"line":44,"column":31}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":32,"column":2},"generated":{"line":44,"column":44}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":44,"column":46}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":32,"column":2},"generated":{"line":44,"column":57}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":34,"column":45},"generated":{"line":44,"column":59}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":34,"column":45},"generated":{"line":45,"column":4}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":36,"column":4},"generated":{"line":47,"column":4}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":36,"column":8},"generated":{"line":47,"column":8}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":36,"column":9},"generated":{"line":47,"column":9}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":36,"column":8},"generated":{"line":47,"column":22}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":36,"column":26},"generated":{"line":47,"column":26}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":36,"column":27},"generated":{"line":47,"column":27}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":36,"column":40},"generated":{"line":47,"column":40}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":36,"column":41},"generated":{"line":47,"column":41}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":36,"column":4},"generated":{"line":47,"column":52}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":36,"column":54},"generated":{"line":47,"column":54}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":37,"column":6},"generated":{"line":48,"column":6}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":38,"column":6},"generated":{"line":49,"column":6}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":38,"column":12},"generated":{"line":49,"column":12}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":38,"column":16},"generated":{"line":49,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":38,"column":12},"generated":{"line":49,"column":26}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":38,"column":27},"generated":{"line":49,"column":27}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":38,"column":12},"generated":{"line":49,"column":94}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":38,"column":6},"generated":{"line":49,"column":95}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":39,"column":5},"generated":{"line":50,"column":4}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":41,"column":4},"generated":{"line":52,"column":4}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":41,"column":8},"generated":{"line":52,"column":8}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":41,"column":9},"generated":{"line":52,"column":9}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":41,"column":8},"generated":{"line":52,"column":20}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":41,"column":24},"generated":{"line":52,"column":24}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":41,"column":35},"generated":{"line":52,"column":35}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":41,"column":36},"generated":{"line":52,"column":36}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":41,"column":24},"generated":{"line":52,"column":40}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":41,"column":45},"generated":{"line":52,"column":45}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":41,"column":4},"generated":{"line":52,"column":46}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":41,"column":48},"generated":{"line":52,"column":48}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":42,"column":6},"generated":{"line":53,"column":6}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":43,"column":6},"generated":{"line":54,"column":6}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":43,"column":12},"generated":{"line":54,"column":12}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":43,"column":16},"generated":{"line":54,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":43,"column":12},"generated":{"line":54,"column":26}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":43,"column":27},"generated":{"line":54,"column":27}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":43,"column":12},"generated":{"line":54,"column":85}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":43,"column":6},"generated":{"line":54,"column":86}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":44,"column":5},"generated":{"line":55,"column":4}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":46,"column":4},"generated":{"line":57,"column":4}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":46,"column":9},"generated":{"line":57,"column":9}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":46,"column":4},"generated":{"line":57,"column":22}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":46,"column":25},"generated":{"line":57,"column":25}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":46,"column":4},"generated":{"line":57,"column":38}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":47,"column":4},"generated":{"line":58,"column":4}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":47,"column":9},"generated":{"line":58,"column":9}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":47,"column":4},"generated":{"line":58,"column":20}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":47,"column":23},"generated":{"line":58,"column":23}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":47,"column":4},"generated":{"line":58,"column":34}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":48,"column":4},"generated":{"line":59,"column":4}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":48,"column":9},"generated":{"line":59,"column":9}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":48,"column":4},"generated":{"line":59,"column":30}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":48,"column":33},"generated":{"line":59,"column":33}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":48,"column":38},"generated":{"line":59,"column":38}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":48,"column":33},"generated":{"line":59,"column":51}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":48,"column":52},"generated":{"line":59,"column":52}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":48,"column":33},"generated":{"line":59,"column":63}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":48,"column":65},"generated":{"line":59,"column":64}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":48,"column":33},"generated":{"line":59,"column":69}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":48,"column":71},"generated":{"line":59,"column":70}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":48,"column":33},"generated":{"line":59,"column":73}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":48,"column":76},"generated":{"line":59,"column":75}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":48,"column":33},"generated":{"line":59,"column":76}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":48,"column":4},"generated":{"line":59,"column":77}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":49,"column":4},"generated":{"line":60,"column":4}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":49,"column":9},"generated":{"line":60,"column":9}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":49,"column":4},"generated":{"line":60,"column":26}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":49,"column":34},"generated":{"line":60,"column":41}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":49,"column":39},"generated":{"line":60,"column":46}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":49,"column":4},"generated":{"line":60,"column":67}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":49,"column":63},"generated":{"line":60,"column":76}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":49,"column":4},"generated":{"line":60,"column":103}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":50,"column":4},"generated":{"line":61,"column":4}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":61,"column":9}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":50,"column":4},"generated":{"line":61,"column":28}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":50,"column":36},"generated":{"line":61,"column":43}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":50,"column":41},"generated":{"line":61,"column":48}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":50,"column":4},"generated":{"line":61,"column":69}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":51,"column":3},"generated":{"line":62,"column":2}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":53,"column":2},"generated":{"line":62,"column":4}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":68,"column":91}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":69,"column":8}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":71,"column":8}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":72,"column":10}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":73,"column":12}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":74,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":75,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":57,"column":8},"generated":{"line":75,"column":22}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":57,"column":13},"generated":{"line":75,"column":27}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":57,"column":8},"generated":{"line":75,"column":40}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":57,"column":27},"generated":{"line":75,"column":41}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":57,"column":8},"generated":{"line":75,"column":50}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":57,"column":37},"generated":{"line":75,"column":51}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":57,"column":8},"generated":{"line":75,"column":57}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":57,"column":48},"generated":{"line":75,"column":62}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":57,"column":48},"generated":{"line":75,"column":90}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":57,"column":66},"generated":{"line":75,"column":91}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":75,"column":104}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":76,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":77,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":78,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":80,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":58,"column":12},"generated":{"line":80,"column":22}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":58,"column":16},"generated":{"line":80,"column":26}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":58,"column":12},"generated":{"line":80,"column":31}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":59,"column":61},"generated":{"line":80,"column":92}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":59,"column":66},"generated":{"line":80,"column":97}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":59,"column":61},"generated":{"line":80,"column":110}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":59,"column":80},"generated":{"line":80,"column":111}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":59,"column":61},"generated":{"line":80,"column":120}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":59,"column":90},"generated":{"line":80,"column":121}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":58,"column":12},"generated":{"line":80,"column":127}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":80,"column":135}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":82,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":83,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":84,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":63,"column":37},"generated":{"line":84,"column":23}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":63,"column":37},"generated":{"line":84,"column":27}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":63,"column":37},"generated":{"line":84,"column":52}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":63,"column":51},"generated":{"line":84,"column":54}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":63,"column":56},"generated":{"line":84,"column":59}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":63,"column":37},"generated":{"line":84,"column":72}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":84,"column":73}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":86,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":63,"column":10},"generated":{"line":87,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":87,"column":34}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":65,"column":10},"generated":{"line":88,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":88,"column":28}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":65,"column":25},"generated":{"line":88,"column":31}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":65,"column":43},"generated":{"line":88,"column":49}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":66,"column":7},"generated":{"line":88,"column":50}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":65,"column":25},"generated":{"line":88,"column":55}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":66,"column":13},"generated":{"line":88,"column":56}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":66,"column":18},"generated":{"line":88,"column":61}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":65,"column":25},"generated":{"line":88,"column":80}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":66,"column":39},"generated":{"line":88,"column":82}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":65,"column":25},"generated":{"line":88,"column":83}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":66,"column":42},"generated":{"line":88,"column":85}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":65,"column":25},"generated":{"line":89,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":67,"column":7},"generated":{"line":89,"column":17}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":65,"column":25},"generated":{"line":89,"column":22}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":67,"column":13},"generated":{"line":89,"column":23}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":67,"column":18},"generated":{"line":89,"column":28}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":65,"column":25},"generated":{"line":89,"column":45}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":68,"column":7},"generated":{"line":89,"column":47}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":65,"column":25},"generated":{"line":89,"column":52}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":68,"column":13},"generated":{"line":89,"column":53}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":65,"column":25},"generated":{"line":89,"column":54}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":89,"column":55}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":68,"column":17},"generated":{"line":89,"column":57}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":69,"column":10},"generated":{"line":91,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":91,"column":32}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":69,"column":29},"generated":{"line":91,"column":35}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":69,"column":41},"generated":{"line":91,"column":47}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":69,"column":42},"generated":{"line":91,"column":48}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":91,"column":54}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":71,"column":4},"generated":{"line":91,"column":56}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":72,"column":4},"generated":{"line":92,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":73,"column":4},"generated":{"line":93,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":74,"column":4},"generated":{"line":94,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":96,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":75,"column":8},"generated":{"line":96,"column":22}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":75,"column":24},"generated":{"line":96,"column":38}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":75,"column":29},"generated":{"line":96,"column":43}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":75,"column":34},"generated":{"line":96,"column":48}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":75,"column":29},"generated":{"line":96,"column":59}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":75,"column":46},"generated":{"line":96,"column":60}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":75,"column":8},"generated":{"line":96,"column":64}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":75,"column":54},"generated":{"line":96,"column":68}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":75,"column":70},"generated":{"line":96,"column":84}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":75,"column":75},"generated":{"line":96,"column":89}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":96,"column":90}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":97,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":98,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":99,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":101,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":76,"column":12},"generated":{"line":101,"column":22}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":76,"column":16},"generated":{"line":101,"column":26}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":76,"column":12},"generated":{"line":101,"column":31}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":76,"column":22},"generated":{"line":101,"column":32}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":76,"column":12},"generated":{"line":101,"column":106}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":101,"column":107}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":103,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":79,"column":10},"generated":{"line":104,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":104,"column":40}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":79,"column":62},"generated":{"line":104,"column":43}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":79,"column":66},"generated":{"line":104,"column":47}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":79,"column":62},"generated":{"line":104,"column":52}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":79,"column":72},"generated":{"line":104,"column":53}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":79,"column":62},"generated":{"line":104,"column":69}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":104,"column":70}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":80,"column":8},"generated":{"line":105,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":105,"column":42}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":80,"column":45},"generated":{"line":105,"column":45}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":105,"column":46}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":81,"column":8},"generated":{"line":106,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":106,"column":39}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":81,"column":42},"generated":{"line":106,"column":42}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":106,"column":43}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":83,"column":4},"generated":{"line":106,"column":45}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":84,"column":13},"generated":{"line":108,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":108,"column":21}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":84,"column":21},"generated":{"line":108,"column":24}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":108,"column":25}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":110,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":111,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":84,"column":24},"generated":{"line":111,"column":22}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":84,"column":29},"generated":{"line":111,"column":27}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":84,"column":32},"generated":{"line":111,"column":30}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":111,"column":46}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":112,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":113,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":114,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":85,"column":12},"generated":{"line":116,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":116,"column":27}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":85,"column":26},"generated":{"line":116,"column":30}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":85,"column":38},"generated":{"line":116,"column":42}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":85,"column":39},"generated":{"line":116,"column":43}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":85,"column":38},"generated":{"line":116,"column":48}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":116,"column":49}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":86,"column":12},"generated":{"line":117,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":117,"column":39}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":86,"column":38},"generated":{"line":117,"column":42}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":117,"column":44}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":87,"column":6},"generated":{"line":118,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":87,"column":29},"generated":{"line":118,"column":39}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":87,"column":30},"generated":{"line":118,"column":40}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":87,"column":6},"generated":{"line":118,"column":47}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":87,"column":40},"generated":{"line":118,"column":50}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":87,"column":44},"generated":{"line":118,"column":54}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":87,"column":40},"generated":{"line":118,"column":75}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":87,"column":6},"generated":{"line":118,"column":77}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":89,"column":12},"generated":{"line":119,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":119,"column":29}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":89,"column":28},"generated":{"line":119,"column":32}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":89,"column":39},"generated":{"line":119,"column":43}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":89,"column":40},"generated":{"line":119,"column":44}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":89,"column":28},"generated":{"line":119,"column":49}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":89,"column":49},"generated":{"line":119,"column":60}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":89,"column":28},"generated":{"line":119,"column":87}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":119,"column":89}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":90,"column":10},"generated":{"line":120,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":120,"column":39}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":90,"column":36},"generated":{"line":120,"column":42}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":120,"column":47}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":91,"column":10},"generated":{"line":121,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":121,"column":37}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":91,"column":34},"generated":{"line":121,"column":40}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":121,"column":45}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":92,"column":10},"generated":{"line":122,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":122,"column":29}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":92,"column":26},"generated":{"line":122,"column":32}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":122,"column":37}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":93,"column":10},"generated":{"line":123,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":123,"column":25}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":93,"column":22},"generated":{"line":123,"column":28}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":123,"column":37}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":124,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":95,"column":33},"generated":{"line":124,"column":55}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":124,"column":68}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":125,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":127,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":129,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":130,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":131,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":132,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":133,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":95,"column":17},"generated":{"line":135,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":135,"column":28}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":137,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":96,"column":13},"generated":{"line":137,"column":20}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":137,"column":43}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":138,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":139,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":140,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":97,"column":10},"generated":{"line":142,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":98,"column":10},"generated":{"line":143,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":98,"column":14},"generated":{"line":143,"column":20}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":98,"column":26},"generated":{"line":143,"column":32}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":98,"column":27},"generated":{"line":143,"column":33}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":98,"column":14},"generated":{"line":143,"column":43}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":98,"column":38},"generated":{"line":143,"column":44}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":98,"column":38},"generated":{"line":143,"column":70}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":98,"column":54},"generated":{"line":143,"column":71}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":98,"column":14},"generated":{"line":143,"column":81}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":98,"column":10},"generated":{"line":143,"column":82}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":98,"column":67},"generated":{"line":143,"column":84}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":99,"column":12},"generated":{"line":144,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":99,"column":21},"generated":{"line":144,"column":27}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":99,"column":24},"generated":{"line":144,"column":30}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":99,"column":32},"generated":{"line":144,"column":38}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":99,"column":33},"generated":{"line":144,"column":39}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":99,"column":45},"generated":{"line":144,"column":51}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":99,"column":46},"generated":{"line":144,"column":52}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":99,"column":33},"generated":{"line":144,"column":57}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":99,"column":52},"generated":{"line":144,"column":58}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":99,"column":33},"generated":{"line":144,"column":79}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":99,"column":75},"generated":{"line":144,"column":81}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":99,"column":33},"generated":{"line":144,"column":82}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":99,"column":32},"generated":{"line":144,"column":83}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":99,"column":12},"generated":{"line":144,"column":84}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":100,"column":11},"generated":{"line":145,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":145,"column":17}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":102,"column":10},"generated":{"line":145,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":103,"column":10},"generated":{"line":146,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":104,"column":10},"generated":{"line":149,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":104,"column":14},"generated":{"line":149,"column":20}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":104,"column":26},"generated":{"line":149,"column":32}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":104,"column":27},"generated":{"line":149,"column":33}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":104,"column":14},"generated":{"line":149,"column":43}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":104,"column":38},"generated":{"line":149,"column":44}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":104,"column":14},"generated":{"line":149,"column":71}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":104,"column":10},"generated":{"line":149,"column":72}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":104,"column":57},"generated":{"line":149,"column":74}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":105,"column":12},"generated":{"line":150,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":105,"column":35},"generated":{"line":150,"column":41}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":105,"column":38},"generated":{"line":150,"column":44}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":105,"column":12},"generated":{"line":150,"column":48}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":107,"column":18},"generated":{"line":151,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":104,"column":57},"generated":{"line":151,"column":24}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":107,"column":27},"generated":{"line":151,"column":27}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":107,"column":39},"generated":{"line":151,"column":39}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":107,"column":40},"generated":{"line":151,"column":40}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":107,"column":27},"generated":{"line":151,"column":45}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":107,"column":46},"generated":{"line":151,"column":46}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":107,"column":27},"generated":{"line":151,"column":61}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":104,"column":57},"generated":{"line":151,"column":62}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":108,"column":12},"generated":{"line":152,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":108,"column":35},"generated":{"line":152,"column":41}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":108,"column":36},"generated":{"line":152,"column":42}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":108,"column":12},"generated":{"line":152,"column":48}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":108,"column":45},"generated":{"line":152,"column":51}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":108,"column":53},"generated":{"line":152,"column":59}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":108,"column":54},"generated":{"line":152,"column":60}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":108,"column":60},"generated":{"line":152,"column":66}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":108,"column":61},"generated":{"line":152,"column":67}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":108,"column":60},"generated":{"line":152,"column":68}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":108,"column":53},"generated":{"line":152,"column":69}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":108,"column":12},"generated":{"line":152,"column":70}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":109,"column":12},"generated":{"line":153,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":109,"column":35},"generated":{"line":153,"column":41}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":109,"column":36},"generated":{"line":153,"column":42}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":109,"column":12},"generated":{"line":153,"column":55}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":109,"column":52},"generated":{"line":153,"column":58}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":109,"column":58},"generated":{"line":153,"column":64}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":109,"column":59},"generated":{"line":153,"column":65}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":109,"column":52},"generated":{"line":153,"column":70}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":109,"column":65},"generated":{"line":153,"column":71}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":109,"column":52},"generated":{"line":153,"column":72}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":109,"column":68},"generated":{"line":153,"column":74}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":109,"column":52},"generated":{"line":153,"column":78}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":109,"column":73},"generated":{"line":153,"column":79}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":109,"column":52},"generated":{"line":153,"column":94}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":109,"column":12},"generated":{"line":153,"column":95}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":110,"column":11},"generated":{"line":154,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":156,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":158,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":159,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":115,"column":12},"generated":{"line":159,"column":22}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":115,"column":24},"generated":{"line":159,"column":34}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":115,"column":25},"generated":{"line":159,"column":35}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":115,"column":12},"generated":{"line":159,"column":39}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":115,"column":36},"generated":{"line":159,"column":46}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":159,"column":48}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":160,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":161,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":162,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":116,"column":10},"generated":{"line":164,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":117,"column":10},"generated":{"line":165,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":117,"column":14},"generated":{"line":165,"column":20}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":117,"column":15},"generated":{"line":165,"column":21}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":117,"column":10},"generated":{"line":165,"column":42}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":117,"column":38},"generated":{"line":165,"column":44}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":118,"column":12},"generated":{"line":166,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":118,"column":33},"generated":{"line":166,"column":39}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":118,"column":36},"generated":{"line":166,"column":42}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":118,"column":12},"generated":{"line":166,"column":46}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":119,"column":11},"generated":{"line":167,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":169,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":171,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":172,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":125,"column":13},"generated":{"line":172,"column":20}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":172,"column":41}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":173,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":174,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":175,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":177,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":126,"column":14},"generated":{"line":177,"column":22}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":126,"column":26},"generated":{"line":177,"column":34}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":126,"column":27},"generated":{"line":177,"column":35}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":126,"column":14},"generated":{"line":177,"column":42}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":126,"column":35},"generated":{"line":177,"column":43}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":126,"column":14},"generated":{"line":177,"column":64}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":126,"column":62},"generated":{"line":177,"column":70}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":126,"column":63},"generated":{"line":177,"column":71}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":177,"column":72}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":178,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":179,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":180,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":182,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":128,"column":18},"generated":{"line":182,"column":22}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":128,"column":22},"generated":{"line":182,"column":26}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":128,"column":18},"generated":{"line":182,"column":31}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":129,"column":53},"generated":{"line":182,"column":78}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":128,"column":18},"generated":{"line":182,"column":90}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":129,"column":101},"generated":{"line":182,"column":136}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":128,"column":18},"generated":{"line":182,"column":157}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":182,"column":165}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":184,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":133,"column":10},"generated":{"line":185,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":134,"column":16},"generated":{"line":186,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":186,"column":23}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":134,"column":25},"generated":{"line":186,"column":26}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":134,"column":37},"generated":{"line":186,"column":38}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":134,"column":38},"generated":{"line":186,"column":39}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":134,"column":25},"generated":{"line":186,"column":44}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":134,"column":44},"generated":{"line":186,"column":45}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":134,"column":25},"generated":{"line":186,"column":66}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":186,"column":67}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":10},"generated":{"line":187,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":33},"generated":{"line":187,"column":39}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":34},"generated":{"line":187,"column":40}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":10},"generated":{"line":187,"column":47}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":42},"generated":{"line":187,"column":48}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":10},"generated":{"line":187,"column":51}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":46},"generated":{"line":187,"column":52}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":52},"generated":{"line":187,"column":59}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":53},"generated":{"line":187,"column":60}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":52},"generated":{"line":187,"column":61}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":10},"generated":{"line":187,"column":62}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":57},"generated":{"line":187,"column":64}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":63},"generated":{"line":187,"column":71}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":64},"generated":{"line":187,"column":72}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":63},"generated":{"line":187,"column":73}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":135,"column":10},"generated":{"line":187,"column":74}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":136,"column":10},"generated":{"line":189,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":136,"column":14},"generated":{"line":189,"column":20}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":136,"column":20},"generated":{"line":189,"column":27}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":136,"column":21},"generated":{"line":189,"column":28}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":136,"column":20},"generated":{"line":189,"column":29}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":136,"column":14},"generated":{"line":189,"column":30}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":136,"column":28},"generated":{"line":189,"column":35}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":136,"column":28},"generated":{"line":189,"column":61}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":136,"column":44},"generated":{"line":189,"column":62}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":136,"column":10},"generated":{"line":189,"column":77}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":136,"column":61},"generated":{"line":189,"column":79}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":137,"column":12},"generated":{"line":190,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":137,"column":35},"generated":{"line":190,"column":41}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":137,"column":36},"generated":{"line":190,"column":42}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":137,"column":12},"generated":{"line":190,"column":51}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":137,"column":48},"generated":{"line":190,"column":54}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":137,"column":54},"generated":{"line":190,"column":61}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":137,"column":55},"generated":{"line":190,"column":62}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":137,"column":54},"generated":{"line":190,"column":63}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":137,"column":12},"generated":{"line":190,"column":64}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":138,"column":12},"generated":{"line":191,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":138,"column":25},"generated":{"line":191,"column":31}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":138,"column":28},"generated":{"line":191,"column":34}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":138,"column":12},"generated":{"line":191,"column":38}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":139,"column":11},"generated":{"line":192,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":194,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":195,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":197,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":141,"column":10},"generated":{"line":198,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":142,"column":10},"generated":{"line":199,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":142,"column":14},"generated":{"line":199,"column":20}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":142,"column":15},"generated":{"line":199,"column":21}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":142,"column":38},"generated":{"line":199,"column":44}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":142,"column":39},"generated":{"line":199,"column":45}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":142,"column":10},"generated":{"line":199,"column":55}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":142,"column":51},"generated":{"line":199,"column":57}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":143,"column":12},"generated":{"line":200,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":143,"column":35},"generated":{"line":200,"column":41}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":143,"column":36},"generated":{"line":200,"column":42}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":143,"column":12},"generated":{"line":200,"column":52}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":143,"column":49},"generated":{"line":200,"column":55}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":143,"column":12},"generated":{"line":200,"column":57}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":144,"column":11},"generated":{"line":201,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":146,"column":10},"generated":{"line":203,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":146,"column":33},"generated":{"line":203,"column":39}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":146,"column":34},"generated":{"line":203,"column":40}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":146,"column":10},"generated":{"line":203,"column":50}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":146,"column":48},"generated":{"line":203,"column":54}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":146,"column":10},"generated":{"line":203,"column":66}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":205,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":206,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":207,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":209,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":210,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":211,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":213,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":214,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":215,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":217,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":219,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":220,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":222,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":224,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":226,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":148,"column":8},"generated":{"line":227,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":150,"column":6},"generated":{"line":228,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":151,"column":6},"generated":{"line":229,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":152,"column":6},"generated":{"line":230,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":153,"column":6},"generated":{"line":231,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":154,"column":6},"generated":{"line":232,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":155,"column":8},"generated":{"line":232,"column":20}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":155,"column":17},"generated":{"line":232,"column":29}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":155,"column":22},"generated":{"line":232,"column":34}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":155,"column":8},"generated":{"line":232,"column":43}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":156,"column":8},"generated":{"line":232,"column":47}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":156,"column":14},"generated":{"line":232,"column":53}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":156,"column":15},"generated":{"line":232,"column":54}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":156,"column":8},"generated":{"line":232,"column":63}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":156,"column":25},"generated":{"line":232,"column":64}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":156,"column":8},"generated":{"line":232,"column":73}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":155,"column":8},"generated":{"line":232,"column":74}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":157,"column":8},"generated":{"line":232,"column":78}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":157,"column":17},"generated":{"line":232,"column":87}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":157,"column":21},"generated":{"line":232,"column":91}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":155,"column":8},"generated":{"line":232,"column":92}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":158,"column":8},"generated":{"line":232,"column":96}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":158,"column":17},"generated":{"line":232,"column":105}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":158,"column":20},"generated":{"line":232,"column":108}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":158,"column":25},"generated":{"line":232,"column":113}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":158,"column":20},"generated":{"line":232,"column":124}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":158,"column":37},"generated":{"line":232,"column":125}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":155,"column":8},"generated":{"line":232,"column":129}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":159,"column":8},"generated":{"line":232,"column":133}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":159,"column":32},"generated":{"line":232,"column":157}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":159,"column":33},"generated":{"line":232,"column":158}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":159,"column":32},"generated":{"line":232,"column":167}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":159,"column":8},"generated":{"line":232,"column":168}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":159,"column":48},"generated":{"line":232,"column":173}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":154,"column":6},"generated":{"line":232,"column":182}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":160,"column":8},"generated":{"line":232,"column":184}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":161,"column":8},"generated":{"line":233,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":161,"column":31},"generated":{"line":233,"column":41}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":161,"column":32},"generated":{"line":233,"column":42}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":161,"column":8},"generated":{"line":233,"column":50}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":161,"column":43},"generated":{"line":233,"column":53}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":161,"column":48},"generated":{"line":233,"column":58}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":161,"column":43},"generated":{"line":233,"column":69}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":161,"column":60},"generated":{"line":233,"column":70}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":161,"column":43},"generated":{"line":233,"column":73}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":161,"column":64},"generated":{"line":233,"column":74}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":161,"column":43},"generated":{"line":233,"column":83}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":161,"column":8},"generated":{"line":233,"column":84}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":162,"column":8},"generated":{"line":234,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":162,"column":32},"generated":{"line":234,"column":42}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":162,"column":33},"generated":{"line":234,"column":43}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":162,"column":32},"generated":{"line":234,"column":52}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":162,"column":8},"generated":{"line":234,"column":53}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":162,"column":46},"generated":{"line":234,"column":56}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":162,"column":8},"generated":{"line":234,"column":79}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":163,"column":7},"generated":{"line":235,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":154,"column":6},"generated":{"line":235,"column":17}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":163,"column":13},"generated":{"line":235,"column":23}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":164,"column":8},"generated":{"line":236,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":164,"column":8},"generated":{"line":236,"column":29}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":164,"column":15},"generated":{"line":236,"column":30}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":164,"column":8},"generated":{"line":236,"column":35}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":165,"column":26},"generated":{"line":236,"column":59}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":164,"column":8},"generated":{"line":236,"column":64}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":165,"column":102},"generated":{"line":236,"column":145}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":164,"column":8},"generated":{"line":236,"column":154}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":167,"column":7},"generated":{"line":237,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":169,"column":6},"generated":{"line":239,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":169,"column":10},"generated":{"line":239,"column":20}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":169,"column":6},"generated":{"line":239,"column":33}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":169,"column":25},"generated":{"line":239,"column":35}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":170,"column":8},"generated":{"line":240,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":170,"column":31},"generated":{"line":240,"column":41}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":171,"column":7},"generated":{"line":241,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":169,"column":6},"generated":{"line":241,"column":17}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":171,"column":13},"generated":{"line":241,"column":23}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":172,"column":8},"generated":{"line":242,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":172,"column":34},"generated":{"line":242,"column":44}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":173,"column":7},"generated":{"line":243,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":245,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":84,"column":50},"generated":{"line":246,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":84,"column":55},"generated":{"line":246,"column":21}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":246,"column":23}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":247,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":248,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":250,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":251,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":176,"column":11},"generated":{"line":251,"column":49}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":177,"column":6},"generated":{"line":252,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":177,"column":18},"generated":{"line":252,"column":30}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":177,"column":20},"generated":{"line":252,"column":32}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":176,"column":11},"generated":{"line":252,"column":56}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":178,"column":6},"generated":{"line":253,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":178,"column":32},"generated":{"line":253,"column":44}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":178,"column":34},"generated":{"line":253,"column":46}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":176,"column":11},"generated":{"line":253,"column":72}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":179,"column":6},"generated":{"line":254,"column":18}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":179,"column":29},"generated":{"line":254,"column":41}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":179,"column":31},"generated":{"line":254,"column":43}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":176,"column":11},"generated":{"line":255,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":255,"column":17}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":257,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":258,"column":14}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":259,"column":16}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":260,"column":12}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":261,"column":10}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":262,"column":8}},{"source":"../../../src/BatchResponseParser.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":263,"column":6}}],"sources":{"../../../src/BatchResponseParser.ts":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpHeaders } from \"@azure/core-http\";\n\nimport { ServiceSubmitBatchResponseModel } from \"./generatedModels\";\nimport {\n  HTTP_VERSION_1_1,\n  HTTP_LINE_ENDING,\n  HeaderConstants,\n  HTTPURLConnection,\n} from \"./utils/constants\";\nimport { getBodyAsText } from \"./BatchUtils\";\nimport { BatchSubRequest } from \"./BlobBatch\";\nimport { BatchSubResponse, ParsedBatchResponse } from \"./BatchResponse\";\nimport { logger } from \"./log\";\n\nconst HTTP_HEADER_DELIMITER = \": \";\nconst SPACE_DELIMITER = \" \";\nconst NOT_FOUND = -1;\n\n/**\n * Util class for parsing batch response.\n */\nexport class BatchResponseParser {\n  private readonly batchResponse: ServiceSubmitBatchResponseModel;\n  private readonly responseBatchBoundary: string;\n  private readonly perResponsePrefix: string;\n  private readonly batchResponseEnding: string;\n  private readonly subRequests: Map<number, BatchSubRequest>;\n\n  constructor(\n    batchResponse: ServiceSubmitBatchResponseModel,\n    subRequests: Map<number, BatchSubRequest>\n  ) {\n    if (!batchResponse || !batchResponse.contentType) {\n      // In special case(reported), server may return invalid content-type which could not be parsed.\n      throw new RangeError(\"batchResponse is malformed or doesn't contain valid content-type.\");\n    }\n\n    if (!subRequests || subRequests.size === 0) {\n      // This should be prevent during coding.\n      throw new RangeError(\"Invalid state: subRequests is not provided or size is 0.\");\n    }\n\n    this.batchResponse = batchResponse;\n    this.subRequests = subRequests;\n    this.responseBatchBoundary = this.batchResponse.contentType!.split(\"=\")[1];\n    this.perResponsePrefix = `--${this.responseBatchBoundary}${HTTP_LINE_ENDING}`;\n    this.batchResponseEnding = `--${this.responseBatchBoundary}--`;\n  }\n\n  // For example of response, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#response\n  public async parseBatchResponse(): Promise<ParsedBatchResponse> {\n    // When logic reach here, suppose batch request has already succeeded with 202, so we can further parse\n    // sub request's response.\n    if (this.batchResponse._response.status !== HTTPURLConnection.HTTP_ACCEPTED) {\n      throw new Error(\n        `Invalid state: batch request failed with status: '${this.batchResponse._response.status}'.`\n      );\n    }\n\n    const responseBodyAsText = await getBodyAsText(this.batchResponse);\n\n    const subResponses = responseBodyAsText\n      .split(this.batchResponseEnding)[0] // string after ending is useless\n      .split(this.perResponsePrefix)\n      .slice(1); // string before first response boundary is useless\n    const subResponseCount = subResponses.length;\n\n    // Defensive coding in case of potential error parsing.\n    // Note: subResponseCount == 1 is special case where sub request is invalid.\n    // We try to prevent such cases through early validation, e.g. validate sub request count >= 1.\n    // While in unexpected sub request invalid case, we allow sub response to be parsed and return to user.\n    if (subResponseCount !== this.subRequests.size && subResponseCount !== 1) {\n      throw new Error(\"Invalid state: sub responses' count is not equal to sub requests' count.\");\n    }\n\n    const deserializedSubResponses: Array<BatchSubResponse> = new Array(subResponseCount);\n    let subResponsesSucceededCount: number = 0;\n    let subResponsesFailedCount: number = 0;\n\n    // Parse sub subResponses.\n    for (let index = 0; index < subResponseCount; index++) {\n      const subResponse = subResponses[index];\n      const deserializedSubResponse = {} as BatchSubResponse;\n      deserializedSubResponse.headers = new HttpHeaders();\n\n      const responseLines = subResponse.split(`${HTTP_LINE_ENDING}`);\n      let subRespHeaderStartFound = false;\n      let subRespHeaderEndFound = false;\n      let subRespFailed = false;\n      let contentId = NOT_FOUND;\n\n      for (const responseLine of responseLines) {\n        if (!subRespHeaderStartFound) {\n          // Convention line to indicate content ID\n          if (responseLine.startsWith(HeaderConstants.CONTENT_ID)) {\n            contentId = parseInt(responseLine.split(HTTP_HEADER_DELIMITER)[1]);\n          }\n\n          // Http version line with status code indicates the start of sub request's response.\n          // Example: HTTP/1.1 202 Accepted\n          if (responseLine.startsWith(HTTP_VERSION_1_1)) {\n            subRespHeaderStartFound = true;\n\n            const tokens = responseLine.split(SPACE_DELIMITER);\n            deserializedSubResponse.status = parseInt(tokens[1]);\n            deserializedSubResponse.statusMessage = tokens.slice(2).join(SPACE_DELIMITER);\n          }\n\n          continue; // Skip convention headers not specifically for sub request i.e. Content-Type: application/http and Content-ID: *\n        }\n\n        if (responseLine.trim() === \"\") {\n          // Sub response's header start line already found, and the first empty line indicates header end line found.\n          if (!subRespHeaderEndFound) {\n            subRespHeaderEndFound = true;\n          }\n\n          continue; // Skip empty line\n        }\n\n        // Note: when code reach here, it indicates subRespHeaderStartFound == true\n        if (!subRespHeaderEndFound) {\n          if (responseLine.indexOf(HTTP_HEADER_DELIMITER) === -1) {\n            // Defensive coding to prevent from missing valuable lines.\n            throw new Error(\n              `Invalid state: find non-empty line '${responseLine}' without HTTP header delimiter '${HTTP_HEADER_DELIMITER}'.`\n            );\n          }\n\n          // Parse headers of sub response.\n          const tokens = responseLine.split(HTTP_HEADER_DELIMITER);\n          deserializedSubResponse.headers.set(tokens[0], tokens[1]);\n          if (tokens[0] === HeaderConstants.X_MS_ERROR_CODE) {\n            deserializedSubResponse.errorCode = tokens[1];\n            subRespFailed = true;\n          }\n        } else {\n          // Assemble body of sub response.\n          if (!deserializedSubResponse.bodyAsText) {\n            deserializedSubResponse.bodyAsText = \"\";\n          }\n\n          deserializedSubResponse.bodyAsText += responseLine;\n        }\n      } // Inner for end\n\n      // The response will contain the Content-ID header for each corresponding subrequest response to use for tracking.\n      // The Content-IDs are set to a valid index in the subrequests we sent. In the status code 202 path, we could expect it\n      // to be 1-1 mapping from the [0, subRequests.size) to the Content-IDs returned. If not, we simply don't return that\n      // unexpected subResponse in the parsed reponse and we can always look it up in the raw response for debugging purpose.\n      if (\n        contentId !== NOT_FOUND &&\n        Number.isInteger(contentId) &&\n        contentId >= 0 &&\n        contentId < this.subRequests.size &&\n        deserializedSubResponses[contentId] === undefined\n      ) {\n        deserializedSubResponse._request = this.subRequests.get(contentId)!;\n        deserializedSubResponses[contentId] = deserializedSubResponse;\n      } else {\n        logger.error(\n          `subResponses[${index}] is dropped as the Content-ID is not found or invalid, Content-ID: ${contentId}`\n        );\n      }\n\n      if (subRespFailed) {\n        subResponsesFailedCount++;\n      } else {\n        subResponsesSucceededCount++;\n      }\n    }\n\n    return {\n      subResponses: deserializedSubResponses,\n      subResponsesSucceededCount: subResponsesSucceededCount,\n      subResponsesFailedCount: subResponsesFailedCount,\n    };\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"117f4ae77e449ef2aff1d482423dc3df","cacheData":{"env":{}}}