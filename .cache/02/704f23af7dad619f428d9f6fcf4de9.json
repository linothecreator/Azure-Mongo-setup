{"id":"../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js","dependencies":[{"name":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\utils\\Batch.js.map","includedInParent":true,"mtime":1656031344807},{"name":"C:\\Users\\rodne\\azuremongotut\\package.json","includedInParent":true,"mtime":1657925171107},{"name":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\package.json","includedInParent":true,"mtime":1656031344714},{"name":"events","loc":{"line":5,"column":29,"index":235},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\utils\\Batch.js","resolved":"C:\\Users\\rodne\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\events\\events.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Batch = void 0;\n\nvar _events = require(\"events\");\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n/**\n * States for Batch.\n */\nvar BatchStates;\n\n(function (BatchStates) {\n  BatchStates[BatchStates[\"Good\"] = 0] = \"Good\";\n  BatchStates[BatchStates[\"Error\"] = 1] = \"Error\";\n})(BatchStates || (BatchStates = {}));\n/**\n * Batch provides basic parallel execution with concurrency limits.\n * Will stop execute left operations when one of the executed operation throws an error.\n * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.\n */\n\n\nvar Batch = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of Batch.\n   * @param concurrency -\n   */\n  function Batch() {\n    var concurrency = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n\n    _classCallCheck(this, Batch);\n\n    /**\n     * Number of active operations under execution.\n     */\n    this.actives = 0;\n    /**\n     * Number of completed operations under execution.\n     */\n\n    this.completed = 0;\n    /**\n     * Offset of next operation to be executed.\n     */\n\n    this.offset = 0;\n    /**\n     * Operation array to be executed.\n     */\n\n    this.operations = [];\n    /**\n     * States of Batch. When an error happens, state will turn into error.\n     * Batch will stop execute left operations.\n     */\n\n    this.state = BatchStates.Good;\n\n    if (concurrency < 1) {\n      throw new RangeError(\"concurrency must be larger than 0\");\n    }\n\n    this.concurrency = concurrency;\n    this.emitter = new _events.EventEmitter();\n  }\n  /**\n   * Add a operation into queue.\n   *\n   * @param operation -\n   */\n\n\n  _createClass(Batch, [{\n    key: \"addOperation\",\n    value: function addOperation(operation) {\n      var _this = this;\n\n      this.operations.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _this.actives++;\n                _context.next = 4;\n                return operation();\n\n              case 4:\n                _this.actives--;\n                _this.completed++;\n\n                _this.parallelExecute();\n\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](0);\n\n                _this.emitter.emit(\"error\", _context.t0);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 9]]);\n      })));\n    }\n    /**\n     * Start execute operations in the queue.\n     *\n     */\n\n  }, {\n    key: \"do\",\n    value: function () {\n      var _do2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this2 = this;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.operations.length === 0)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", Promise.resolve());\n\n              case 2:\n                this.parallelExecute();\n                return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this2.emitter.on(\"finish\", resolve);\n\n                  _this2.emitter.on(\"error\", function (error) {\n                    _this2.state = BatchStates.Error;\n                    reject(error);\n                  });\n                }));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _do() {\n        return _do2.apply(this, arguments);\n      }\n\n      return _do;\n    }()\n    /**\n     * Get next operation to be executed. Return null when reaching ends.\n     *\n     */\n\n  }, {\n    key: \"nextOperation\",\n    value: function nextOperation() {\n      if (this.offset < this.operations.length) {\n        return this.operations[this.offset++];\n      }\n\n      return null;\n    }\n    /**\n     * Start execute operations. One one the most important difference between\n     * this method with do() is that do() wraps as an sync method.\n     *\n     */\n\n  }, {\n    key: \"parallelExecute\",\n    value: function parallelExecute() {\n      if (this.state === BatchStates.Error) {\n        return;\n      }\n\n      if (this.completed >= this.operations.length) {\n        this.emitter.emit(\"finish\");\n        return;\n      }\n\n      while (this.actives < this.concurrency) {\n        var operation = this.nextOperation();\n\n        if (operation) {\n          operation();\n        } else {\n          return;\n        }\n      }\n    }\n  }]);\n\n  return Batch;\n}();\n\nexports.Batch = Batch;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":12,"column":47}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":27,"column":0}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":5},"generated":{"line":27,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":27,"column":15}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":29,"column":0}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":29,"column":1}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":5},"generated":{"line":29,"column":11}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":29,"column":22}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":16},"generated":{"line":29,"column":24}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":17,"column":2},"generated":{"line":30,"column":2}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":17,"column":2},"generated":{"line":30,"column":13}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":17,"column":2},"generated":{"line":30,"column":14}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":17,"column":2},"generated":{"line":30,"column":25}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":17,"column":2},"generated":{"line":30,"column":26}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":17,"column":2},"generated":{"line":30,"column":32}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":17,"column":2},"generated":{"line":30,"column":33}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":17,"column":2},"generated":{"line":30,"column":36}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":17,"column":2},"generated":{"line":30,"column":37}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":17,"column":2},"generated":{"line":30,"column":38}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":17,"column":2},"generated":{"line":30,"column":41}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":17,"column":2},"generated":{"line":30,"column":47}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":18,"column":2},"generated":{"line":31,"column":2}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":18,"column":2},"generated":{"line":31,"column":13}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":18,"column":2},"generated":{"line":31,"column":14}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":18,"column":2},"generated":{"line":31,"column":25}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":18,"column":2},"generated":{"line":31,"column":26}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":18,"column":2},"generated":{"line":31,"column":33}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":18,"column":2},"generated":{"line":31,"column":34}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":18,"column":2},"generated":{"line":31,"column":37}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":18,"column":2},"generated":{"line":31,"column":38}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":18,"column":2},"generated":{"line":31,"column":39}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":18,"column":2},"generated":{"line":31,"column":42}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":18,"column":2},"generated":{"line":31,"column":49}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":19,"column":1},"generated":{"line":32,"column":0}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":32,"column":1}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":5},"generated":{"line":32,"column":3}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":16},"generated":{"line":32,"column":14}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":5},"generated":{"line":32,"column":19}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":16},"generated":{"line":32,"column":30}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":16},"generated":{"line":32,"column":33}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":16},"generated":{"line":32,"column":35}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":32,"column":36}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":33,"column":0}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":26,"column":13},"generated":{"line":40,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":63,"column":2},"generated":{"line":41,"column":2}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":67,"column":2},"generated":{"line":45,"column":2}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":67,"column":44},"generated":{"line":45,"column":19}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":67,"column":44},"generated":{"line":46,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":67,"column":21},"generated":{"line":46,"column":8}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":67,"column":44},"generated":{"line":46,"column":19}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":67,"column":43},"generated":{"line":46,"column":90}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":67,"column":44},"generated":{"line":46,"column":91}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":67,"column":44},"generated":{"line":48,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":32,"column":2},"generated":{"line":50,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":35,"column":10},"generated":{"line":53,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":35,"column":10},"generated":{"line":53,"column":9}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":35,"column":10},"generated":{"line":53,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":35,"column":28},"generated":{"line":53,"column":19}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":35,"column":10},"generated":{"line":53,"column":20}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":37,"column":2},"generated":{"line":54,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":40,"column":10},"generated":{"line":58,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":40,"column":10},"generated":{"line":58,"column":9}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":40,"column":10},"generated":{"line":58,"column":18}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":40,"column":30},"generated":{"line":58,"column":21}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":40,"column":10},"generated":{"line":58,"column":22}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":42,"column":2},"generated":{"line":59,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":45,"column":10},"generated":{"line":63,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":45,"column":10},"generated":{"line":63,"column":9}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":45,"column":10},"generated":{"line":63,"column":15}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":45,"column":27},"generated":{"line":63,"column":18}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":45,"column":10},"generated":{"line":63,"column":19}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":47,"column":2},"generated":{"line":64,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":50,"column":10},"generated":{"line":68,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":50,"column":10},"generated":{"line":68,"column":9}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":50,"column":10},"generated":{"line":68,"column":19}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":50,"column":36},"generated":{"line":68,"column":22}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":50,"column":10},"generated":{"line":68,"column":24}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":52,"column":2},"generated":{"line":69,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":56,"column":10},"generated":{"line":74,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":56,"column":10},"generated":{"line":74,"column":9}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":56,"column":10},"generated":{"line":74,"column":14}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":56,"column":31},"generated":{"line":74,"column":17}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":56,"column":42},"generated":{"line":74,"column":28}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":56,"column":43},"generated":{"line":74,"column":29}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":56,"column":10},"generated":{"line":74,"column":33}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":68,"column":4},"generated":{"line":76,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":68,"column":8},"generated":{"line":76,"column":8}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":68,"column":19},"generated":{"line":76,"column":19}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":68,"column":22},"generated":{"line":76,"column":22}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":68,"column":4},"generated":{"line":76,"column":23}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":68,"column":25},"generated":{"line":76,"column":25}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":69,"column":6},"generated":{"line":77,"column":6}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":69,"column":12},"generated":{"line":77,"column":12}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":69,"column":16},"generated":{"line":77,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":69,"column":12},"generated":{"line":77,"column":26}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":69,"column":27},"generated":{"line":77,"column":27}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":69,"column":12},"generated":{"line":77,"column":62}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":69,"column":6},"generated":{"line":77,"column":63}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":70,"column":5},"generated":{"line":78,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":71,"column":4},"generated":{"line":80,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":71,"column":9},"generated":{"line":80,"column":9}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":71,"column":4},"generated":{"line":80,"column":20}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":71,"column":23},"generated":{"line":80,"column":23}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":71,"column":4},"generated":{"line":80,"column":34}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":72,"column":4},"generated":{"line":81,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":72,"column":9},"generated":{"line":81,"column":9}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":72,"column":4},"generated":{"line":81,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":72,"column":19},"generated":{"line":81,"column":19}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":72,"column":23},"generated":{"line":81,"column":23}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":72,"column":19},"generated":{"line":81,"column":43}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":72,"column":4},"generated":{"line":81,"column":45}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":73,"column":3},"generated":{"line":82,"column":2}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":75,"column":2},"generated":{"line":83,"column":2}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":80,"column":9},"generated":{"line":92,"column":11}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":80,"column":22},"generated":{"line":92,"column":33}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":80,"column":9},"generated":{"line":92,"column":42}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":80,"column":42},"generated":{"line":92,"column":44}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":80,"column":42},"generated":{"line":93,"column":6}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":95,"column":6}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":9},"generated":{"line":95,"column":11}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":95,"column":21}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":20},"generated":{"line":95,"column":22}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":95,"column":26}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":95,"column":100}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":96,"column":8}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":97,"column":10}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":98,"column":12}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":99,"column":14}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":100,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":83,"column":8},"generated":{"line":101,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":83,"column":12},"generated":{"line":101,"column":21}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":83,"column":13},"generated":{"line":101,"column":22}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":83,"column":8},"generated":{"line":101,"column":29}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":102,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":103,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":84,"column":14},"generated":{"line":103,"column":23}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":84,"column":23},"generated":{"line":103,"column":32}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":103,"column":34}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":105,"column":14}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":85,"column":8},"generated":{"line":106,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":85,"column":12},"generated":{"line":106,"column":21}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":85,"column":13},"generated":{"line":106,"column":22}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":85,"column":8},"generated":{"line":106,"column":29}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":86,"column":8},"generated":{"line":107,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":86,"column":12},"generated":{"line":107,"column":21}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":86,"column":13},"generated":{"line":107,"column":22}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":86,"column":8},"generated":{"line":107,"column":31}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":87,"column":8},"generated":{"line":109,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":87,"column":12},"generated":{"line":109,"column":21}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":87,"column":13},"generated":{"line":109,"column":22}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":87,"column":8},"generated":{"line":109,"column":37}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":111,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":112,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":114,"column":14}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":115,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":116,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":89,"column":8},"generated":{"line":118,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":89,"column":12},"generated":{"line":118,"column":21}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":89,"column":13},"generated":{"line":118,"column":22}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":89,"column":8},"generated":{"line":118,"column":29}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":89,"column":21},"generated":{"line":118,"column":30}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":89,"column":8},"generated":{"line":118,"column":34}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":89,"column":26},"generated":{"line":118,"column":35}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":89,"column":8},"generated":{"line":118,"column":42}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":120,"column":14}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":121,"column":14}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":122,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":123,"column":12}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":124,"column":10}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":125,"column":8}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":126,"column":6}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":126,"column":7}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":92,"column":3},"generated":{"line":127,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":94,"column":2},"generated":{"line":128,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":136,"column":76}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":137,"column":8}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":139,"column":8}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":140,"column":10}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":141,"column":12}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":142,"column":14}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":143,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":99,"column":8},"generated":{"line":143,"column":22}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":99,"column":13},"generated":{"line":143,"column":27}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":99,"column":8},"generated":{"line":143,"column":37}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":99,"column":24},"generated":{"line":143,"column":38}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":99,"column":8},"generated":{"line":143,"column":44}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":99,"column":35},"generated":{"line":143,"column":49}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":143,"column":50}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":144,"column":18}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":145,"column":18}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":146,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":148,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":100,"column":13},"generated":{"line":148,"column":50}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":100,"column":20},"generated":{"line":148,"column":57}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":100,"column":21},"generated":{"line":148,"column":58}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":100,"column":13},"generated":{"line":148,"column":65}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":148,"column":67}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":150,"column":14}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":103,"column":4},"generated":{"line":151,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":103,"column":9},"generated":{"line":151,"column":21}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":103,"column":4},"generated":{"line":151,"column":36}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":152,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":105,"column":11},"generated":{"line":152,"column":50}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":105,"column":15},"generated":{"line":152,"column":54}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":105,"column":11},"generated":{"line":152,"column":61}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":105,"column":29},"generated":{"line":152,"column":62}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":105,"column":30},"generated":{"line":152,"column":72}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":105,"column":29},"generated":{"line":152,"column":79}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":105,"column":39},"generated":{"line":152,"column":81}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":105,"column":29},"generated":{"line":152,"column":87}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":105,"column":49},"generated":{"line":152,"column":89}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":153,"column":18}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":106,"column":10},"generated":{"line":153,"column":24}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":106,"column":11},"generated":{"line":153,"column":25}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":153,"column":32}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":106,"column":19},"generated":{"line":153,"column":33}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":153,"column":35}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":106,"column":22},"generated":{"line":153,"column":36}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":153,"column":44}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":106,"column":32},"generated":{"line":153,"column":46}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":153,"column":53}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":108,"column":6},"generated":{"line":155,"column":18}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":108,"column":10},"generated":{"line":155,"column":24}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":108,"column":11},"generated":{"line":155,"column":25}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":108,"column":6},"generated":{"line":155,"column":32}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":108,"column":19},"generated":{"line":155,"column":33}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":108,"column":6},"generated":{"line":155,"column":35}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":108,"column":22},"generated":{"line":155,"column":36}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":108,"column":6},"generated":{"line":155,"column":43}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":108,"column":31},"generated":{"line":155,"column":45}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":108,"column":32},"generated":{"line":155,"column":55}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":108,"column":31},"generated":{"line":155,"column":60}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":108,"column":41},"generated":{"line":155,"column":62}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":109,"column":8},"generated":{"line":156,"column":20}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":109,"column":12},"generated":{"line":156,"column":26}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":109,"column":13},"generated":{"line":156,"column":27}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":109,"column":8},"generated":{"line":156,"column":32}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":109,"column":21},"generated":{"line":156,"column":35}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":109,"column":32},"generated":{"line":156,"column":46}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":109,"column":33},"generated":{"line":156,"column":47}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":109,"column":8},"generated":{"line":156,"column":52}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":110,"column":8},"generated":{"line":157,"column":20}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":110,"column":14},"generated":{"line":157,"column":26}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":110,"column":15},"generated":{"line":157,"column":27}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":110,"column":14},"generated":{"line":157,"column":32}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":110,"column":8},"generated":{"line":157,"column":33}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":111,"column":7},"generated":{"line":158,"column":18}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":108,"column":6},"generated":{"line":158,"column":19}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":112,"column":5},"generated":{"line":159,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":105,"column":11},"generated":{"line":159,"column":17}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":159,"column":18}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":161,"column":14}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":162,"column":14}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":163,"column":16}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":164,"column":12}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":165,"column":10}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":166,"column":8}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":167,"column":6}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":175,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":119,"column":10},"generated":{"line":182,"column":11}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":119,"column":23},"generated":{"line":182,"column":36}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":120,"column":4},"generated":{"line":183,"column":6}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":120,"column":8},"generated":{"line":183,"column":10}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":120,"column":13},"generated":{"line":183,"column":15}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":120,"column":8},"generated":{"line":183,"column":21}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":120,"column":22},"generated":{"line":183,"column":24}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":120,"column":27},"generated":{"line":183,"column":29}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":120,"column":22},"generated":{"line":183,"column":39}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":120,"column":38},"generated":{"line":183,"column":40}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":120,"column":4},"generated":{"line":183,"column":46}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":120,"column":46},"generated":{"line":183,"column":48}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":121,"column":6},"generated":{"line":184,"column":8}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":121,"column":13},"generated":{"line":184,"column":15}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":121,"column":18},"generated":{"line":184,"column":20}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":121,"column":13},"generated":{"line":184,"column":30}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":121,"column":29},"generated":{"line":184,"column":31}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":121,"column":34},"generated":{"line":184,"column":36}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":121,"column":29},"generated":{"line":184,"column":42}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":121,"column":13},"generated":{"line":184,"column":44}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":121,"column":6},"generated":{"line":184,"column":45}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":122,"column":5},"generated":{"line":185,"column":6}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":123,"column":4},"generated":{"line":187,"column":6}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":123,"column":11},"generated":{"line":187,"column":13}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":123,"column":4},"generated":{"line":187,"column":17}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":124,"column":3},"generated":{"line":188,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":126,"column":2},"generated":{"line":189,"column":4}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":131,"column":10},"generated":{"line":197,"column":11}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":131,"column":25},"generated":{"line":197,"column":38}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":132,"column":4},"generated":{"line":198,"column":6}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":132,"column":8},"generated":{"line":198,"column":10}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":132,"column":13},"generated":{"line":198,"column":15}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":132,"column":8},"generated":{"line":198,"column":20}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":132,"column":23},"generated":{"line":198,"column":25}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":132,"column":34},"generated":{"line":198,"column":36}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":132,"column":35},"generated":{"line":198,"column":37}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":132,"column":4},"generated":{"line":198,"column":42}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":132,"column":42},"generated":{"line":198,"column":44}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":133,"column":6},"generated":{"line":199,"column":8}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":134,"column":5},"generated":{"line":200,"column":6}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":136,"column":4},"generated":{"line":202,"column":6}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":136,"column":8},"generated":{"line":202,"column":10}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":136,"column":13},"generated":{"line":202,"column":15}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":136,"column":8},"generated":{"line":202,"column":24}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":136,"column":26},"generated":{"line":202,"column":28}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":136,"column":31},"generated":{"line":202,"column":33}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":136,"column":26},"generated":{"line":202,"column":43}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":136,"column":42},"generated":{"line":202,"column":44}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":136,"column":4},"generated":{"line":202,"column":50}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":136,"column":50},"generated":{"line":202,"column":52}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":137,"column":6},"generated":{"line":203,"column":8}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":137,"column":11},"generated":{"line":203,"column":13}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":137,"column":6},"generated":{"line":203,"column":20}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":137,"column":19},"generated":{"line":203,"column":21}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":137,"column":6},"generated":{"line":203,"column":25}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":137,"column":24},"generated":{"line":203,"column":26}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":137,"column":6},"generated":{"line":203,"column":34}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":138,"column":6},"generated":{"line":204,"column":8}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":139,"column":5},"generated":{"line":205,"column":6}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":141,"column":4},"generated":{"line":207,"column":6}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":141,"column":11},"generated":{"line":207,"column":13}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":141,"column":16},"generated":{"line":207,"column":18}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":141,"column":11},"generated":{"line":207,"column":25}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":141,"column":26},"generated":{"line":207,"column":28}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":141,"column":31},"generated":{"line":207,"column":33}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":141,"column":4},"generated":{"line":207,"column":44}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":141,"column":44},"generated":{"line":207,"column":46}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":142,"column":6},"generated":{"line":208,"column":8}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":142,"column":12},"generated":{"line":208,"column":12}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":142,"column":21},"generated":{"line":208,"column":21}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":142,"column":24},"generated":{"line":208,"column":24}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":142,"column":29},"generated":{"line":208,"column":29}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":142,"column":24},"generated":{"line":208,"column":42}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":142,"column":6},"generated":{"line":208,"column":44}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":143,"column":6},"generated":{"line":210,"column":8}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":143,"column":10},"generated":{"line":210,"column":12}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":143,"column":6},"generated":{"line":210,"column":21}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":143,"column":21},"generated":{"line":210,"column":23}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":144,"column":8},"generated":{"line":211,"column":10}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":144,"column":17},"generated":{"line":211,"column":19}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":145,"column":7},"generated":{"line":212,"column":8}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":143,"column":6},"generated":{"line":212,"column":9}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":145,"column":13},"generated":{"line":212,"column":15}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":146,"column":8},"generated":{"line":213,"column":10}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":147,"column":7},"generated":{"line":214,"column":8}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":148,"column":5},"generated":{"line":215,"column":6}},{"source":"../../../../src/utils/Batch.ts","name":null,"original":{"line":149,"column":3},"generated":{"line":216,"column":4}}],"sources":{"../../../../src/utils/Batch.ts":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// In browser, during webpack or browserify bundling, this module will be replaced by 'events'\n// https://github.com/Gozala/events\nimport { EventEmitter } from \"events\";\n\n/**\n * Operation is an async function to be executed and managed by Batch.\n */\nexport declare type Operation = () => Promise<any>;\n\n/**\n * States for Batch.\n */\nenum BatchStates {\n  Good,\n  Error,\n}\n\n/**\n * Batch provides basic parallel execution with concurrency limits.\n * Will stop execute left operations when one of the executed operation throws an error.\n * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.\n */\nexport class Batch {\n  /**\n   * Concurrency. Must be lager than 0.\n   */\n  private concurrency: number;\n\n  /**\n   * Number of active operations under execution.\n   */\n  private actives: number = 0;\n\n  /**\n   * Number of completed operations under execution.\n   */\n  private completed: number = 0;\n\n  /**\n   * Offset of next operation to be executed.\n   */\n  private offset: number = 0;\n\n  /**\n   * Operation array to be executed.\n   */\n  private operations: Operation[] = [];\n\n  /**\n   * States of Batch. When an error happens, state will turn into error.\n   * Batch will stop execute left operations.\n   */\n  private state: BatchStates = BatchStates.Good;\n\n  /**\n   * A private emitter used to pass events inside this class.\n   */\n  private emitter: EventEmitter;\n\n  /**\n   * Creates an instance of Batch.\n   * @param concurrency -\n   */\n  public constructor(concurrency: number = 5) {\n    if (concurrency < 1) {\n      throw new RangeError(\"concurrency must be larger than 0\");\n    }\n    this.concurrency = concurrency;\n    this.emitter = new EventEmitter();\n  }\n\n  /**\n   * Add a operation into queue.\n   *\n   * @param operation -\n   */\n  public addOperation(operation: Operation): void {\n    this.operations.push(async () => {\n      try {\n        this.actives++;\n        await operation();\n        this.actives--;\n        this.completed++;\n        this.parallelExecute();\n      } catch (error: any) {\n        this.emitter.emit(\"error\", error);\n      }\n    });\n  }\n\n  /**\n   * Start execute operations in the queue.\n   *\n   */\n  public async do(): Promise<void> {\n    if (this.operations.length === 0) {\n      return Promise.resolve();\n    }\n\n    this.parallelExecute();\n\n    return new Promise<void>((resolve, reject) => {\n      this.emitter.on(\"finish\", resolve);\n\n      this.emitter.on(\"error\", (error) => {\n        this.state = BatchStates.Error;\n        reject(error);\n      });\n    });\n  }\n\n  /**\n   * Get next operation to be executed. Return null when reaching ends.\n   *\n   */\n  private nextOperation(): Operation | null {\n    if (this.offset < this.operations.length) {\n      return this.operations[this.offset++];\n    }\n    return null;\n  }\n\n  /**\n   * Start execute operations. One one the most important difference between\n   * this method with do() is that do() wraps as an sync method.\n   *\n   */\n  private parallelExecute(): void {\n    if (this.state === BatchStates.Error) {\n      return;\n    }\n\n    if (this.completed >= this.operations.length) {\n      this.emitter.emit(\"finish\");\n      return;\n    }\n\n    while (this.actives < this.concurrency) {\n      const operation = this.nextOperation();\n      if (operation) {\n        operation();\n      } else {\n        return;\n      }\n    }\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"55411706bba6aa2c87e89f4f418c3ca2","cacheData":{"env":{}}}