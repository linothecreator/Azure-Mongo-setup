{"id":"../node_modules/@azure/core-http/dist-esm/src/operationSpec.js","dependencies":[{"name":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\operationSpec.js.map","includedInParent":true,"mtime":1656031344962},{"name":"C:\\Users\\rodne\\azuremongotut\\package.json","includedInParent":true,"mtime":1657925171107},{"name":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\package.json","includedInParent":true,"mtime":1656031344383},{"name":"./serializer","loc":{"line":3,"column":27,"index":102},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\operationSpec.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-http\\dist-esm\\src\\serializer.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStreamResponseStatusCodes = getStreamResponseStatusCodes;\n\nvar _serializer = require(\"./serializer\");\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nfunction getStreamResponseStatusCodes(operationSpec) {\n  var result = new Set();\n\n  for (var statusCode in operationSpec.responses) {\n    var operationResponse = operationSpec.responses[statusCode];\n\n    if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === _serializer.MapperType.Stream) {\n      result.add(Number(statusCode));\n    }\n  }\n\n  return result;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/operationSpec.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":11,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":98,"column":0},"generated":{"line":13,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":102,"column":6},"generated":{"line":17,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":102,"column":16},"generated":{"line":17,"column":9}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":102,"column":6},"generated":{"line":17,"column":37}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":102,"column":45},"generated":{"line":17,"column":38}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":102,"column":6},"generated":{"line":17,"column":51}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":102,"column":73},"generated":{"line":17,"column":53}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":18,"column":2}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":103,"column":8},"generated":{"line":18,"column":6}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":103,"column":14},"generated":{"line":18,"column":12}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":103,"column":17},"generated":{"line":18,"column":15}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":103,"column":21},"generated":{"line":18,"column":19}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":103,"column":17},"generated":{"line":18,"column":22}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":18,"column":24}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":2},"generated":{"line":20,"column":2}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":7},"generated":{"line":20,"column":7}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":13},"generated":{"line":20,"column":11}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":2},"generated":{"line":20,"column":21}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":27},"generated":{"line":20,"column":25}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":40},"generated":{"line":20,"column":38}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":41},"generated":{"line":20,"column":39}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":2},"generated":{"line":20,"column":48}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":52},"generated":{"line":20,"column":50}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":105,"column":4},"generated":{"line":21,"column":4}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":105,"column":10},"generated":{"line":21,"column":8}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":105,"column":27},"generated":{"line":21,"column":25}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":105,"column":30},"generated":{"line":21,"column":28}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":105,"column":43},"generated":{"line":21,"column":41}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":105,"column":44},"generated":{"line":21,"column":42}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":105,"column":30},"generated":{"line":21,"column":51}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":105,"column":54},"generated":{"line":21,"column":52}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":105,"column":30},"generated":{"line":21,"column":62}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":105,"column":4},"generated":{"line":21,"column":63}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":106,"column":4},"generated":{"line":23,"column":4}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":107,"column":6},"generated":{"line":23,"column":8}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":107,"column":23},"generated":{"line":23,"column":25}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":107,"column":24},"generated":{"line":23,"column":26}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":107,"column":6},"generated":{"line":23,"column":36}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":108,"column":6},"generated":{"line":23,"column":40}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":108,"column":23},"generated":{"line":23,"column":57}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":108,"column":24},"generated":{"line":23,"column":58}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":108,"column":6},"generated":{"line":23,"column":68}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":108,"column":35},"generated":{"line":23,"column":69}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":108,"column":6},"generated":{"line":23,"column":73}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":108,"column":40},"generated":{"line":23,"column":74}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":108,"column":6},"generated":{"line":23,"column":78}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":108,"column":49},"generated":{"line":23,"column":83}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":108,"column":49},"generated":{"line":23,"column":105}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":108,"column":60},"generated":{"line":23,"column":106}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":106,"column":4},"generated":{"line":23,"column":112}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":109,"column":6},"generated":{"line":23,"column":114}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":110,"column":6},"generated":{"line":24,"column":6}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":110,"column":12},"generated":{"line":24,"column":12}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":110,"column":13},"generated":{"line":24,"column":13}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":110,"column":6},"generated":{"line":24,"column":16}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":110,"column":17},"generated":{"line":24,"column":17}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":110,"column":23},"generated":{"line":24,"column":23}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":110,"column":24},"generated":{"line":24,"column":24}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":110,"column":23},"generated":{"line":24,"column":34}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":110,"column":6},"generated":{"line":24,"column":35}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":111,"column":5},"generated":{"line":25,"column":4}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":112,"column":3},"generated":{"line":26,"column":2}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":113,"column":2},"generated":{"line":28,"column":2}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":113,"column":9},"generated":{"line":28,"column":9}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":113,"column":2},"generated":{"line":28,"column":15}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":29,"column":0}}],"sources":{"../../src/operationSpec.ts":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { MapperType, Serializer } from \"./serializer\";\nimport {\n  OperationParameter,\n  OperationQueryParameter,\n  OperationURLParameter,\n} from \"./operationParameter\";\nimport { HttpMethods } from \"./webResource\";\nimport { OperationResponse } from \"./operationResponse\";\n\n/**\n * A specification that defines how to perform a particular service operation over HTTP, including how to properly serialize request information into and deserialize response information into an object payload returnable by the {@link ServiceClient}.\n */\nexport interface OperationSpec {\n  /**\n   * The serializer to use in this operation.\n   */\n  readonly serializer: Serializer;\n\n  /**\n   * The HTTP method that should be used by requests for this operation.\n   */\n  readonly httpMethod: HttpMethods;\n\n  /**\n   * The URL that was provided in the service's specification. This will still have all of the URL\n   * template variables in it. If this is not provided when the OperationSpec is created, then it\n   * will be populated by a \"baseUri\" property on the ServiceClient.\n   */\n  readonly baseUrl?: string;\n\n  /**\n   * The fixed path for this operation's URL. This will still have all of the URL template variables\n   * in it.\n   */\n  readonly path?: string;\n\n  /**\n   * The content type of the request body. This value will be used as the \"Content-Type\" header if\n   * it is provided.\n   */\n  readonly contentType?: string;\n\n  /**\n   * The media type of the request body.\n   * This value can be used to aide in serialization if it is provided.\n   */\n  readonly mediaType?:\n    | \"json\"\n    | \"xml\"\n    | \"form\"\n    | \"binary\"\n    | \"multipart\"\n    | \"text\"\n    | \"unknown\"\n    | string;\n  /**\n   * The parameter that will be used to construct the HTTP request's body.\n   */\n  readonly requestBody?: OperationParameter;\n\n  /**\n   * Whether or not this operation uses XML request and response bodies.\n   */\n  readonly isXML?: boolean;\n\n  /**\n   * The parameters to the operation method that will be substituted into the constructed URL.\n   */\n  readonly urlParameters?: ReadonlyArray<OperationURLParameter>;\n\n  /**\n   * The parameters to the operation method that will be added to the constructed URL's query.\n   */\n  readonly queryParameters?: ReadonlyArray<OperationQueryParameter>;\n\n  /**\n   * The parameters to the operation method that will be converted to headers on the operation's\n   * HTTP request.\n   */\n  readonly headerParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The parameters to the operation method that will be used to create a formdata body for the\n   * operation's HTTP request.\n   */\n  readonly formDataParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The different types of responses that this operation can return based on what status code is\n   * returned.\n   */\n  readonly responses: { [responseCode: string]: OperationResponse };\n}\n\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nexport function getStreamResponseStatusCodes(operationSpec: OperationSpec): Set<number> {\n  const result = new Set<number>();\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse = operationSpec.responses[statusCode];\n    if (\n      operationResponse.bodyMapper &&\n      operationResponse.bodyMapper.type.name === MapperType.Stream\n    ) {\n      result.add(Number(statusCode));\n    }\n  }\n  return result;\n}\n"},"lineCount":null}},"error":null,"hash":"b126e6f42b61b9da9574c17fc0292275","cacheData":{"env":{}}}