{"id":"../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js","dependencies":[{"name":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BlobBatchClient.js.map","includedInParent":true,"mtime":1656031344849},{"name":"C:\\Users\\rodne\\azuremongotut\\package.json","includedInParent":true,"mtime":1657925171107},{"name":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\package.json","includedInParent":true,"mtime":1656031344714},{"name":"./BatchResponseParser","loc":{"line":3,"column":36,"index":111},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BlobBatchClient.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BatchResponseParser.js"},{"name":"./BatchUtils","loc":{"line":4,"column":31,"index":167},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BlobBatchClient.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BatchUtils.browser.js"},{"name":"./BlobBatch","loc":{"line":5,"column":26,"index":209},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BlobBatchClient.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BlobBatch.js"},{"name":"@azure/core-tracing","loc":{"line":6,"column":31,"index":255},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BlobBatchClient.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\core-tracing\\dist-esm\\src\\index.js"},{"name":"./utils/tracing","loc":{"line":7,"column":63,"index":341},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BlobBatchClient.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\utils\\tracing.js"},{"name":"./generated/src/operations","loc":{"line":8,"column":35,"index":395},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BlobBatchClient.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\generated\\src\\operations\\index.js"},{"name":"./credentials/AnonymousCredential","loc":{"line":9,"column":36,"index":461},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BlobBatchClient.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\credentials\\AnonymousCredential.js"},{"name":"./generated/src/storageClientContext","loc":{"line":10,"column":37,"index":535},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BlobBatchClient.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\generated\\src\\storageClientContext.js"},{"name":"./Pipeline","loc":{"line":11,"column":44,"index":619},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BlobBatchClient.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\Pipeline.js"},{"name":"./utils/utils.common","loc":{"line":12,"column":27,"index":660},"parent":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\BlobBatchClient.js","resolved":"C:\\Users\\rodne\\azuremongotut\\node_modules\\@azure\\storage-blob\\dist-esm\\storage-blob\\src\\utils\\utils.common.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BlobBatchClient = void 0;\n\nvar _BatchResponseParser = require(\"./BatchResponseParser\");\n\nvar _BatchUtils = require(\"./BatchUtils\");\n\nvar _BlobBatch = require(\"./BlobBatch\");\n\nvar _coreTracing = require(\"@azure/core-tracing\");\n\nvar _tracing = require(\"./utils/tracing\");\n\nvar _operations = require(\"./generated/src/operations\");\n\nvar _AnonymousCredential = require(\"./credentials/AnonymousCredential\");\n\nvar _storageClientContext = require(\"./generated/src/storageClientContext\");\n\nvar _Pipeline = require(\"./Pipeline\");\n\nvar _utils = require(\"./utils/utils.common\");\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\nvar BlobBatchClient = /*#__PURE__*/function () {\n  function BlobBatchClient(url, credentialOrPipeline, // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    _classCallCheck(this, BlobBatchClient);\n\n    var pipeline;\n\n    if ((0, _Pipeline.isPipelineLike)(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (!credentialOrPipeline) {\n      // no credential provided\n      pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);\n    } else {\n      pipeline = (0, _Pipeline.newPipeline)(credentialOrPipeline, options);\n    }\n\n    var storageClientContext = new _storageClientContext.StorageClientContext(url, pipeline.toServiceClientOptions());\n    var path = (0, _utils.getURLPath)(url);\n\n    if (path && path !== \"/\") {\n      // Container scoped.\n      this.serviceOrContainerContext = new _operations.Container(storageClientContext);\n    } else {\n      this.serviceOrContainerContext = new _operations.Service(storageClientContext);\n    }\n  }\n  /**\n   * Creates a {@link BlobBatch}.\n   * A BlobBatch represents an aggregated set of operations on blobs.\n   */\n\n\n  _createClass(BlobBatchClient, [{\n    key: \"createBatch\",\n    value: function createBatch() {\n      return new _BlobBatch.BlobBatch();\n    }\n  }, {\n    key: \"deleteBlobs\",\n    value: function () {\n      var _deleteBlobs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(urlsOrBlobClients, credentialOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n\n      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n      options) {\n        var batch, _iterator, _step, urlOrBlobClient;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                batch = new _BlobBatch.BlobBatch();\n                _iterator = _createForOfIteratorHelper(urlsOrBlobClients);\n                _context.prev = 2;\n\n                _iterator.s();\n\n              case 4:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 15;\n                  break;\n                }\n\n                urlOrBlobClient = _step.value;\n\n                if (!(typeof urlOrBlobClient === \"string\")) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 9;\n                return batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);\n\n              case 9:\n                _context.next = 13;\n                break;\n\n              case 11:\n                _context.next = 13;\n                return batch.deleteBlob(urlOrBlobClient, credentialOrOptions);\n\n              case 13:\n                _context.next = 4;\n                break;\n\n              case 15:\n                _context.next = 20;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](2);\n\n                _iterator.e(_context.t0);\n\n              case 20:\n                _context.prev = 20;\n\n                _iterator.f();\n\n                return _context.finish(20);\n\n              case 23:\n                return _context.abrupt(\"return\", this.submitBatch(batch));\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 17, 20, 23]]);\n      }));\n\n      function deleteBlobs(_x, _x2, _x3) {\n        return _deleteBlobs.apply(this, arguments);\n      }\n\n      return deleteBlobs;\n    }()\n  }, {\n    key: \"setBlobsAccessTier\",\n    value: function () {\n      var _setBlobsAccessTier = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(urlsOrBlobClients, credentialOrTier, tierOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n\n      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n      options) {\n        var batch, _iterator2, _step2, urlOrBlobClient;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                batch = new _BlobBatch.BlobBatch();\n                _iterator2 = _createForOfIteratorHelper(urlsOrBlobClients);\n                _context2.prev = 2;\n\n                _iterator2.s();\n\n              case 4:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                urlOrBlobClient = _step2.value;\n\n                if (!(typeof urlOrBlobClient === \"string\")) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                _context2.next = 9;\n                return batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);\n\n              case 9:\n                _context2.next = 13;\n                break;\n\n              case 11:\n                _context2.next = 13;\n                return batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);\n\n              case 13:\n                _context2.next = 4;\n                break;\n\n              case 15:\n                _context2.next = 20;\n                break;\n\n              case 17:\n                _context2.prev = 17;\n                _context2.t0 = _context2[\"catch\"](2);\n\n                _iterator2.e(_context2.t0);\n\n              case 20:\n                _context2.prev = 20;\n\n                _iterator2.f();\n\n                return _context2.finish(20);\n\n              case 23:\n                return _context2.abrupt(\"return\", this.submitBatch(batch));\n\n              case 24:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 17, 20, 23]]);\n      }));\n\n      function setBlobsAccessTier(_x4, _x5, _x6, _x7) {\n        return _setBlobsAccessTier.apply(this, arguments);\n      }\n\n      return setBlobsAccessTier;\n    }()\n    /**\n     * Submit batch request which consists of multiple subrequests.\n     *\n     * Get `blobBatchClient` and other details before running the snippets.\n     * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n     *\n     * Example usage:\n     *\n     * ```js\n     * let batchRequest = new BlobBatch();\n     * await batchRequest.deleteBlob(urlInString0, credential0);\n     * await batchRequest.deleteBlob(urlInString1, credential1, {\n     *  deleteSnapshots: \"include\"\n     * });\n     * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n     * console.log(batchResp.subResponsesSucceededCount);\n     * ```\n     *\n     * Example using a lease:\n     *\n     * ```js\n     * let batchRequest = new BlobBatch();\n     * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n     * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n     *  conditions: { leaseId: leaseId }\n     * });\n     * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n     * console.log(batchResp.subResponsesSucceededCount);\n     * ```\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @param batchRequest - A set of Delete or SetTier operations.\n     * @param options -\n     */\n\n  }, {\n    key: \"submitBatch\",\n    value: function () {\n      var _submitBatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(batchRequest) {\n        var options,\n            _createSpan,\n            span,\n            updatedOptions,\n            batchRequestBody,\n            rawBatchResponse,\n            batchResponseParser,\n            responseSummary,\n            res,\n            _args3 = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n\n                if (!(!batchRequest || batchRequest.getSubRequests().size === 0)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw new RangeError(\"Batch request should contain one or more sub requests.\");\n\n              case 3:\n                _createSpan = (0, _tracing.createSpan)(\"BlobBatchClient-submitBatch\", options), span = _createSpan.span, updatedOptions = _createSpan.updatedOptions;\n                _context3.prev = 4;\n                batchRequestBody = batchRequest.getHttpRequestBody(); // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n\n                _context3.next = 8;\n                return this.serviceOrContainerContext.submitBatch((0, _BatchUtils.utf8ByteLength)(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign(Object.assign({}, options), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));\n\n              case 8:\n                rawBatchResponse = _context3.sent;\n                // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n                batchResponseParser = new _BatchResponseParser.BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());\n                _context3.next = 12;\n                return batchResponseParser.parseBatchResponse();\n\n              case 12:\n                responseSummary = _context3.sent;\n                res = {\n                  _response: rawBatchResponse._response,\n                  contentType: rawBatchResponse.contentType,\n                  errorCode: rawBatchResponse.errorCode,\n                  requestId: rawBatchResponse.requestId,\n                  clientRequestId: rawBatchResponse.clientRequestId,\n                  version: rawBatchResponse.version,\n                  subResponses: responseSummary.subResponses,\n                  subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n                  subResponsesFailedCount: responseSummary.subResponsesFailedCount\n                };\n                return _context3.abrupt(\"return\", res);\n\n              case 17:\n                _context3.prev = 17;\n                _context3.t0 = _context3[\"catch\"](4);\n                span.setStatus({\n                  code: _coreTracing.SpanStatusCode.ERROR,\n                  message: _context3.t0.message\n                });\n                throw _context3.t0;\n\n              case 21:\n                _context3.prev = 21;\n                span.end();\n                return _context3.finish(21);\n\n              case 24:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[4, 17, 21, 24]]);\n      }));\n\n      function submitBatch(_x8) {\n        return _submitBatch.apply(this, arguments);\n      }\n\n      return submitBatch;\n    }()\n  }]);\n\n  return BlobBatchClient;\n}();\n\nexports.BlobBatchClient = BlobBatchClient;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":30,"column":47}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":56,"column":0},"generated":{"line":48,"column":0}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":61,"column":13},"generated":{"line":53,"column":4}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":91,"column":2},"generated":{"line":54,"column":2}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":92,"column":4},"generated":{"line":54,"column":27}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":91,"column":2},"generated":{"line":54,"column":30}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":93,"column":4},"generated":{"line":54,"column":32}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":91,"column":2},"generated":{"line":54,"column":52}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":98,"column":4},"generated":{"line":54,"column":54}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":99,"column":4},"generated":{"line":56,"column":2}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":100,"column":4},"generated":{"line":57,"column":2}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":91,"column":2},"generated":{"line":57,"column":9}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":100,"column":36},"generated":{"line":57,"column":11}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":100,"column":36},"generated":{"line":58,"column":4}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":102,"column":4},"generated":{"line":60,"column":4}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":102,"column":8},"generated":{"line":60,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":102,"column":4},"generated":{"line":60,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":103,"column":4},"generated":{"line":62,"column":4}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":103,"column":8},"generated":{"line":62,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":103,"column":8},"generated":{"line":62,"column":12}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":103,"column":8},"generated":{"line":62,"column":36}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":103,"column":23},"generated":{"line":62,"column":38}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":103,"column":8},"generated":{"line":62,"column":58}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":103,"column":4},"generated":{"line":62,"column":59}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":103,"column":46},"generated":{"line":62,"column":61}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":104,"column":6},"generated":{"line":63,"column":6}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":104,"column":14},"generated":{"line":63,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":104,"column":17},"generated":{"line":63,"column":17}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":104,"column":6},"generated":{"line":63,"column":37}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":105,"column":5},"generated":{"line":64,"column":4}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":103,"column":4},"generated":{"line":64,"column":5}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":105,"column":11},"generated":{"line":64,"column":11}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":105,"column":15},"generated":{"line":64,"column":15}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":105,"column":16},"generated":{"line":64,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":105,"column":11},"generated":{"line":64,"column":36}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":105,"column":38},"generated":{"line":64,"column":38}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":65,"column":6}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":107,"column":6},"generated":{"line":66,"column":6}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":107,"column":14},"generated":{"line":66,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":107,"column":17},"generated":{"line":66,"column":17}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":107,"column":17},"generated":{"line":66,"column":21}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":107,"column":17},"generated":{"line":66,"column":42}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":107,"column":29},"generated":{"line":66,"column":44}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":107,"column":33},"generated":{"line":66,"column":48}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":107,"column":29},"generated":{"line":66,"column":88}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":107,"column":17},"generated":{"line":66,"column":90}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":107,"column":56},"generated":{"line":66,"column":92}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":107,"column":17},"generated":{"line":66,"column":99}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":107,"column":6},"generated":{"line":66,"column":100}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":108,"column":5},"generated":{"line":67,"column":4}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":105,"column":11},"generated":{"line":67,"column":5}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":108,"column":11},"generated":{"line":67,"column":11}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":109,"column":6},"generated":{"line":68,"column":6}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":109,"column":14},"generated":{"line":68,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":109,"column":17},"generated":{"line":68,"column":17}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":109,"column":17},"generated":{"line":68,"column":21}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":109,"column":17},"generated":{"line":68,"column":42}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":109,"column":29},"generated":{"line":68,"column":44}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":109,"column":17},"generated":{"line":68,"column":64}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":109,"column":51},"generated":{"line":68,"column":66}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":109,"column":17},"generated":{"line":68,"column":73}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":109,"column":6},"generated":{"line":68,"column":74}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":110,"column":5},"generated":{"line":69,"column":4}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":112,"column":4},"generated":{"line":71,"column":4}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":112,"column":10},"generated":{"line":71,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":112,"column":30},"generated":{"line":71,"column":28}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":112,"column":33},"generated":{"line":71,"column":31}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":112,"column":37},"generated":{"line":71,"column":35}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":112,"column":33},"generated":{"line":71,"column":77}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":112,"column":58},"generated":{"line":71,"column":78}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":112,"column":33},"generated":{"line":71,"column":81}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":112,"column":63},"generated":{"line":71,"column":83}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":112,"column":71},"generated":{"line":71,"column":91}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":112,"column":72},"generated":{"line":71,"column":92}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":112,"column":63},"generated":{"line":71,"column":114}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":112,"column":33},"generated":{"line":71,"column":116}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":112,"column":4},"generated":{"line":71,"column":117}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":114,"column":4},"generated":{"line":72,"column":4}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":114,"column":10},"generated":{"line":72,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":114,"column":14},"generated":{"line":72,"column":12}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":114,"column":17},"generated":{"line":72,"column":15}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":114,"column":17},"generated":{"line":72,"column":19}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":114,"column":17},"generated":{"line":72,"column":36}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":114,"column":28},"generated":{"line":72,"column":38}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":114,"column":17},"generated":{"line":72,"column":41}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":114,"column":4},"generated":{"line":72,"column":42}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":115,"column":4},"generated":{"line":74,"column":4}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":115,"column":8},"generated":{"line":74,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":115,"column":12},"generated":{"line":74,"column":12}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":115,"column":16},"generated":{"line":74,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":115,"column":20},"generated":{"line":74,"column":20}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":115,"column":25},"generated":{"line":74,"column":25}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":115,"column":4},"generated":{"line":74,"column":28}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":115,"column":30},"generated":{"line":74,"column":30}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":116,"column":6},"generated":{"line":75,"column":6}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":117,"column":6},"generated":{"line":76,"column":6}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":117,"column":11},"generated":{"line":76,"column":11}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":117,"column":6},"generated":{"line":76,"column":36}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":117,"column":39},"generated":{"line":76,"column":39}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":117,"column":43},"generated":{"line":76,"column":43}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":117,"column":39},"generated":{"line":76,"column":64}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":117,"column":53},"generated":{"line":76,"column":65}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":117,"column":39},"generated":{"line":76,"column":85}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":117,"column":6},"generated":{"line":76,"column":86}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":118,"column":5},"generated":{"line":77,"column":4}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":115,"column":4},"generated":{"line":77,"column":5}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":118,"column":11},"generated":{"line":77,"column":11}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":119,"column":6},"generated":{"line":78,"column":6}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":119,"column":11},"generated":{"line":78,"column":11}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":119,"column":6},"generated":{"line":78,"column":36}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":119,"column":39},"generated":{"line":78,"column":39}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":119,"column":43},"generated":{"line":78,"column":43}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":119,"column":39},"generated":{"line":78,"column":62}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":119,"column":51},"generated":{"line":78,"column":63}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":119,"column":39},"generated":{"line":78,"column":83}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":119,"column":6},"generated":{"line":78,"column":84}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":120,"column":5},"generated":{"line":79,"column":4}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":121,"column":3},"generated":{"line":80,"column":2}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":81,"column":2}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":127,"column":9},"generated":{"line":89,"column":11}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":127,"column":20},"generated":{"line":89,"column":34}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":128,"column":4},"generated":{"line":90,"column":6}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":128,"column":11},"generated":{"line":90,"column":13}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":128,"column":15},"generated":{"line":90,"column":17}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":128,"column":11},"generated":{"line":90,"column":37}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":128,"column":4},"generated":{"line":90,"column":39}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":129,"column":3},"generated":{"line":91,"column":4}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":95,"column":84}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":168,"column":4},"generated":{"line":95,"column":101}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":95,"column":118}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":169,"column":4},"generated":{"line":95,"column":120}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":95,"column":139}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":175,"column":4},"generated":{"line":95,"column":141}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":176,"column":4},"generated":{"line":97,"column":6}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":177,"column":4},"generated":{"line":98,"column":6}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":98,"column":13}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":99,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":101,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":102,"column":10}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":103,"column":12}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":104,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":179,"column":10},"generated":{"line":105,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":105,"column":21}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":179,"column":18},"generated":{"line":105,"column":24}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":179,"column":22},"generated":{"line":105,"column":28}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":179,"column":18},"generated":{"line":105,"column":48}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":105,"column":50}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":106,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":180,"column":34},"generated":{"line":106,"column":55}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":106,"column":72}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":107,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":109,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":111,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":112,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":113,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":114,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":115,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":180,"column":15},"generated":{"line":117,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":117,"column":31}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":119,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":181,"column":10},"generated":{"line":119,"column":22}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":181,"column":17},"generated":{"line":119,"column":29}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":181,"column":10},"generated":{"line":119,"column":44}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":181,"column":37},"generated":{"line":119,"column":49}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":119,"column":57}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":120,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":121,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":122,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":124,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":125,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":182,"column":14},"generated":{"line":125,"column":23}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":182,"column":19},"generated":{"line":125,"column":28}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":182,"column":20},"generated":{"line":125,"column":29}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":182,"column":14},"generated":{"line":125,"column":39}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":182,"column":31},"generated":{"line":125,"column":40}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":182,"column":14},"generated":{"line":125,"column":55}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":182,"column":48},"generated":{"line":125,"column":57}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":182,"column":14},"generated":{"line":125,"column":76}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":182,"column":88},"generated":{"line":125,"column":78}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":182,"column":14},"generated":{"line":125,"column":85}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":125,"column":86}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":127,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":128,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":129,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":131,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":132,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":133,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":184,"column":14},"generated":{"line":133,"column":23}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":184,"column":19},"generated":{"line":133,"column":28}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":184,"column":20},"generated":{"line":133,"column":29}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":184,"column":14},"generated":{"line":133,"column":39}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":184,"column":31},"generated":{"line":133,"column":40}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":184,"column":14},"generated":{"line":133,"column":55}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":184,"column":48},"generated":{"line":133,"column":57}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":184,"column":14},"generated":{"line":133,"column":76}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":133,"column":77}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":135,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":136,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":137,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":139,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":140,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":141,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":143,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":144,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":145,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":147,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":149,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":150,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":152,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":154,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":156,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":157,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":187,"column":11},"generated":{"line":157,"column":49}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":187,"column":16},"generated":{"line":157,"column":54}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":187,"column":11},"generated":{"line":157,"column":65}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":187,"column":28},"generated":{"line":157,"column":66}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":187,"column":11},"generated":{"line":157,"column":71}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":157,"column":72}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":159,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":160,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":161,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":162,"column":12}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":163,"column":10}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":164,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":167,"column":9},"generated":{"line":165,"column":6}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":176,"column":91}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":239,"column":4},"generated":{"line":176,"column":109}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":176,"column":126}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":240,"column":4},"generated":{"line":176,"column":128}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":176,"column":144}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":245,"column":4},"generated":{"line":176,"column":146}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":176,"column":159}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":246,"column":4},"generated":{"line":176,"column":161}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":247,"column":4},"generated":{"line":178,"column":6}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":248,"column":4},"generated":{"line":179,"column":6}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":179,"column":13}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":180,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":182,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":183,"column":10}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":184,"column":12}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":185,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":250,"column":10},"generated":{"line":186,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":186,"column":21}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":250,"column":18},"generated":{"line":186,"column":24}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":250,"column":22},"generated":{"line":186,"column":28}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":250,"column":18},"generated":{"line":186,"column":48}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":186,"column":50}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":187,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":251,"column":34},"generated":{"line":187,"column":56}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":187,"column":73}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":188,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":190,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":192,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":193,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":194,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":195,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":196,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":251,"column":15},"generated":{"line":198,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":198,"column":31}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":200,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":252,"column":10},"generated":{"line":200,"column":22}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":252,"column":17},"generated":{"line":200,"column":29}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":252,"column":10},"generated":{"line":200,"column":44}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":252,"column":37},"generated":{"line":200,"column":49}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":200,"column":57}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":201,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":202,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":203,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":205,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":206,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":253,"column":14},"generated":{"line":206,"column":23}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":253,"column":19},"generated":{"line":206,"column":28}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":253,"column":20},"generated":{"line":206,"column":29}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":253,"column":14},"generated":{"line":206,"column":46}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":254,"column":10},"generated":{"line":206,"column":47}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":253,"column":14},"generated":{"line":206,"column":62}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":255,"column":10},"generated":{"line":206,"column":64}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":253,"column":14},"generated":{"line":206,"column":80}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":256,"column":10},"generated":{"line":206,"column":82}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":253,"column":14},"generated":{"line":206,"column":95}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":257,"column":10},"generated":{"line":206,"column":97}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":253,"column":14},"generated":{"line":206,"column":104}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":206,"column":105}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":208,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":209,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":210,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":212,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":213,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":214,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":260,"column":14},"generated":{"line":214,"column":23}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":260,"column":19},"generated":{"line":214,"column":28}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":260,"column":20},"generated":{"line":214,"column":29}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":260,"column":14},"generated":{"line":214,"column":46}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":261,"column":10},"generated":{"line":214,"column":47}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":260,"column":14},"generated":{"line":214,"column":62}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":262,"column":10},"generated":{"line":214,"column":64}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":260,"column":14},"generated":{"line":214,"column":80}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":263,"column":10},"generated":{"line":214,"column":82}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":260,"column":14},"generated":{"line":214,"column":95}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":214,"column":96}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":216,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":217,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":218,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":220,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":221,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":222,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":224,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":225,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":226,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":228,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":230,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":231,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":233,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":235,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":237,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":238,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":267,"column":11},"generated":{"line":238,"column":50}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":267,"column":16},"generated":{"line":238,"column":55}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":267,"column":11},"generated":{"line":238,"column":66}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":267,"column":28},"generated":{"line":238,"column":67}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":267,"column":11},"generated":{"line":238,"column":72}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":238,"column":73}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":240,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":241,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":242,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":243,"column":12}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":244,"column":10}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":245,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":238,"column":9},"generated":{"line":246,"column":6}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":270,"column":2},"generated":{"line":254,"column":4}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":293,"column":84}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":306,"column":4},"generated":{"line":293,"column":102}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":293,"column":114}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":294,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":295,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":296,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":297,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":298,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":299,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":300,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":301,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":302,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":303,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":305,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":306,"column":10}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":307,"column":12}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":308,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":307,"column":4},"generated":{"line":309,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":309,"column":23}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":307,"column":50},"generated":{"line":309,"column":85}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":309,"column":87}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":311,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":309,"column":8},"generated":{"line":311,"column":22}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":309,"column":9},"generated":{"line":311,"column":23}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":309,"column":8},"generated":{"line":311,"column":35}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":309,"column":25},"generated":{"line":311,"column":39}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":309,"column":37},"generated":{"line":311,"column":51}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":309,"column":38},"generated":{"line":311,"column":52}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":309,"column":25},"generated":{"line":311,"column":66}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":309,"column":55},"generated":{"line":311,"column":69}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":309,"column":25},"generated":{"line":311,"column":73}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":309,"column":64},"generated":{"line":311,"column":78}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":311,"column":79}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":312,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":313,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":314,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":316,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":310,"column":12},"generated":{"line":316,"column":22}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":310,"column":16},"generated":{"line":316,"column":26}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":310,"column":12},"generated":{"line":316,"column":36}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":310,"column":27},"generated":{"line":316,"column":37}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":310,"column":12},"generated":{"line":316,"column":93}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":316,"column":94}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":318,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":319,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":313,"column":37},"generated":{"line":319,"column":30}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":313,"column":37},"generated":{"line":319,"column":34}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":313,"column":37},"generated":{"line":319,"column":53}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":313,"column":48},"generated":{"line":319,"column":55}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":313,"column":37},"generated":{"line":319,"column":84}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":313,"column":79},"generated":{"line":319,"column":86}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":313,"column":37},"generated":{"line":319,"column":93}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":319,"column":94}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":313,"column":12},"generated":{"line":319,"column":96}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":319,"column":100}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":313,"column":12},"generated":{"line":319,"column":115}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":319,"column":119}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":313,"column":18},"generated":{"line":319,"column":121}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":319,"column":135}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":313,"column":18},"generated":{"line":319,"column":150}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":319,"column":164}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":320,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":315,"column":12},"generated":{"line":321,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":321,"column":32}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":315,"column":31},"generated":{"line":321,"column":35}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":315,"column":43},"generated":{"line":321,"column":47}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":315,"column":44},"generated":{"line":321,"column":48}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":315,"column":31},"generated":{"line":321,"column":66}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":321,"column":68}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":317,"column":6},"generated":{"line":321,"column":70}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":323,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":324,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":319,"column":14},"generated":{"line":324,"column":23}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":319,"column":19},"generated":{"line":324,"column":28}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":319,"column":14},"generated":{"line":324,"column":53}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":319,"column":45},"generated":{"line":324,"column":54}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":319,"column":14},"generated":{"line":324,"column":65}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":320,"column":10},"generated":{"line":324,"column":66}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":320,"column":10},"generated":{"line":324,"column":70}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":320,"column":10},"generated":{"line":324,"column":96}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":320,"column":25},"generated":{"line":324,"column":98}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":320,"column":10},"generated":{"line":324,"column":114}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":319,"column":14},"generated":{"line":324,"column":115}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":321,"column":10},"generated":{"line":324,"column":117}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":321,"column":22},"generated":{"line":324,"column":129}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":321,"column":23},"generated":{"line":324,"column":130}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":321,"column":10},"generated":{"line":324,"column":153}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":319,"column":14},"generated":{"line":324,"column":155}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":322,"column":10},"generated":{"line":324,"column":157}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":319,"column":14},"generated":{"line":324,"column":173}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":322,"column":26},"generated":{"line":324,"column":175}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":322,"column":26},"generated":{"line":324,"column":181}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":322,"column":26},"generated":{"line":324,"column":182}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":322,"column":26},"generated":{"line":324,"column":188}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":322,"column":26},"generated":{"line":324,"column":189}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":322,"column":26},"generated":{"line":324,"column":195}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":322,"column":26},"generated":{"line":324,"column":196}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":322,"column":26},"generated":{"line":324,"column":202}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":322,"column":26},"generated":{"line":324,"column":203}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":322,"column":26},"generated":{"line":324,"column":205}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":324,"column":15},"generated":{"line":324,"column":207}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":322,"column":26},"generated":{"line":324,"column":214}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":322,"column":26},"generated":{"line":324,"column":215}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":325,"column":15},"generated":{"line":324,"column":217}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":325,"column":15},"generated":{"line":324,"column":221}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":325,"column":15},"generated":{"line":324,"column":264}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":325,"column":50},"generated":{"line":324,"column":266}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":325,"column":15},"generated":{"line":324,"column":280}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":322,"column":26},"generated":{"line":324,"column":281}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":319,"column":14},"generated":{"line":324,"column":282}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":324,"column":283}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":326,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":318,"column":12},"generated":{"line":327,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":327,"column":32}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":329,"column":6},"generated":{"line":328,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":330,"column":12},"generated":{"line":329,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":329,"column":35}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":330,"column":34},"generated":{"line":329,"column":38}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":330,"column":38},"generated":{"line":329,"column":42}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":330,"column":34},"generated":{"line":329,"column":82}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":331,"column":8},"generated":{"line":329,"column":83}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":330,"column":34},"generated":{"line":329,"column":99}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":332,"column":8},"generated":{"line":329,"column":101}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":332,"column":20},"generated":{"line":329,"column":113}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":332,"column":21},"generated":{"line":329,"column":114}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":332,"column":8},"generated":{"line":329,"column":128}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":330,"column":34},"generated":{"line":329,"column":130}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":329,"column":131}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":330,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":331,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":334,"column":36},"generated":{"line":331,"column":23}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":334,"column":55},"generated":{"line":331,"column":42}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":334,"column":56},"generated":{"line":331,"column":43}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":334,"column":36},"generated":{"line":331,"column":61}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":331,"column":63}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":333,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":334,"column":12},"generated":{"line":334,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":334,"column":31}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":336,"column":12},"generated":{"line":335,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":335,"column":19}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":336,"column":48},"generated":{"line":335,"column":22}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":337,"column":8},"generated":{"line":336,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":337,"column":17},"generated":{"line":336,"column":27}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":337,"column":19},"generated":{"line":336,"column":29}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":337,"column":35},"generated":{"line":336,"column":45}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":337,"column":36},"generated":{"line":336,"column":46}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":336,"column":48},"generated":{"line":336,"column":55}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":338,"column":8},"generated":{"line":337,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":338,"column":19},"generated":{"line":337,"column":29}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":338,"column":21},"generated":{"line":337,"column":31}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":338,"column":37},"generated":{"line":337,"column":47}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":338,"column":38},"generated":{"line":337,"column":48}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":336,"column":48},"generated":{"line":337,"column":59}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":339,"column":8},"generated":{"line":338,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":339,"column":17},"generated":{"line":338,"column":27}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":339,"column":19},"generated":{"line":338,"column":29}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":339,"column":35},"generated":{"line":338,"column":45}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":339,"column":36},"generated":{"line":338,"column":46}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":336,"column":48},"generated":{"line":338,"column":55}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":340,"column":8},"generated":{"line":339,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":340,"column":17},"generated":{"line":339,"column":27}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":340,"column":19},"generated":{"line":339,"column":29}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":340,"column":35},"generated":{"line":339,"column":45}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":340,"column":36},"generated":{"line":339,"column":46}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":336,"column":48},"generated":{"line":339,"column":55}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":341,"column":8},"generated":{"line":340,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":341,"column":23},"generated":{"line":340,"column":33}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":341,"column":25},"generated":{"line":340,"column":35}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":341,"column":41},"generated":{"line":340,"column":51}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":341,"column":42},"generated":{"line":340,"column":52}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":336,"column":48},"generated":{"line":340,"column":67}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":342,"column":8},"generated":{"line":341,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":342,"column":15},"generated":{"line":341,"column":25}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":342,"column":17},"generated":{"line":341,"column":27}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":342,"column":33},"generated":{"line":341,"column":43}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":342,"column":34},"generated":{"line":341,"column":44}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":336,"column":48},"generated":{"line":341,"column":51}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":343,"column":8},"generated":{"line":342,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":343,"column":20},"generated":{"line":342,"column":30}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":343,"column":22},"generated":{"line":342,"column":32}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":343,"column":37},"generated":{"line":342,"column":47}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":343,"column":38},"generated":{"line":342,"column":48}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":336,"column":48},"generated":{"line":342,"column":60}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":344,"column":8},"generated":{"line":343,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":344,"column":34},"generated":{"line":343,"column":44}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":344,"column":36},"generated":{"line":343,"column":46}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":344,"column":51},"generated":{"line":343,"column":61}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":344,"column":52},"generated":{"line":343,"column":62}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":336,"column":48},"generated":{"line":343,"column":88}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":345,"column":8},"generated":{"line":344,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":345,"column":31},"generated":{"line":344,"column":41}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":345,"column":33},"generated":{"line":344,"column":43}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":345,"column":48},"generated":{"line":344,"column":58}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":345,"column":49},"generated":{"line":344,"column":59}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":336,"column":48},"generated":{"line":345,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":345,"column":17}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":346,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":348,"column":13},"generated":{"line":346,"column":50}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":346,"column":53}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":348,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":349,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":350,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":350,"column":6},"generated":{"line":351,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":350,"column":10},"generated":{"line":351,"column":20}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":350,"column":11},"generated":{"line":351,"column":21}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":350,"column":6},"generated":{"line":351,"column":30}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":350,"column":21},"generated":{"line":351,"column":31}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":351,"column":8},"generated":{"line":352,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":351,"column":12},"generated":{"line":352,"column":22}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":351,"column":14},"generated":{"line":352,"column":24}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":351,"column":14},"generated":{"line":352,"column":51}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":351,"column":29},"generated":{"line":352,"column":52}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":350,"column":21},"generated":{"line":352,"column":57}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":352,"column":8},"generated":{"line":353,"column":18}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":352,"column":15},"generated":{"line":353,"column":25}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":352,"column":17},"generated":{"line":353,"column":27}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":352,"column":19},"generated":{"line":353,"column":40}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":350,"column":21},"generated":{"line":354,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":350,"column":6},"generated":{"line":354,"column":17}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":355,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":357,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":358,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":356,"column":6},"generated":{"line":359,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":356,"column":10},"generated":{"line":359,"column":20}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":356,"column":11},"generated":{"line":359,"column":21}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":356,"column":6},"generated":{"line":359,"column":24}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":360,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":362,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":363,"column":14}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":364,"column":16}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":365,"column":12}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":366,"column":10}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":367,"column":8}},{"source":"../../../src/BlobBatchClient.ts","name":null,"original":{"line":305,"column":9},"generated":{"line":368,"column":6}}],"sources":{"../../../src/BlobBatchClient.ts":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AccessTier,\n  ServiceSubmitBatchHeaders,\n  ServiceSubmitBatchOptionalParamsModel,\n  ServiceSubmitBatchResponseModel,\n} from \"./generatedModels\";\nimport { ParsedBatchResponse } from \"./BatchResponse\";\nimport { BatchResponseParser } from \"./BatchResponseParser\";\nimport { utf8ByteLength } from \"./BatchUtils\";\nimport { BlobBatch } from \"./BlobBatch\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { HttpResponse, TokenCredential } from \"@azure/core-http\";\nimport { Service, Container } from \"./generated/src/operations\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { BlobDeleteOptions, BlobClient, BlobSetTierOptions } from \"./Clients\";\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { PipelineLike, StoragePipelineOptions, newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { getURLPath } from \"./utils/utils.common\";\n\n/**\n * Options to configure the Service - Submit Batch Optional Params.\n */\nexport interface BlobBatchSubmitBatchOptionalParams extends ServiceSubmitBatchOptionalParamsModel {}\n\n/**\n * Contains response data for blob batch operations.\n */\nexport declare type BlobBatchSubmitBatchResponse = ParsedBatchResponse &\n  ServiceSubmitBatchHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ServiceSubmitBatchHeaders;\n    };\n  };\n\n/**\n * Contains response data for the {@link deleteBlobs} operation.\n */\nexport declare type BlobBatchDeleteBlobsResponse = BlobBatchSubmitBatchResponse;\n\n/**\n * Contains response data for the {@link setBlobsAccessTier} operation.\n */\nexport declare type BlobBatchSetBlobsAccessTierResponse = BlobBatchSubmitBatchResponse;\n\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\nexport class BlobBatchClient {\n  private serviceOrContainerContext: Service | Container;\n\n  /**\n   * Creates an instance of BlobBatchClient.\n   *\n   * @param url - A url pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Options to configure the HTTP pipeline.\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n\n  /**\n   * Creates an instance of BlobBatchClient.\n   *\n   * @param url - A url pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: PipelineLike);\n  constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | PipelineLike,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ) {\n    let pipeline: PipelineLike;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (!credentialOrPipeline) {\n      // no credential provided\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    }\n\n    const storageClientContext = new StorageClientContext(url, pipeline.toServiceClientOptions());\n\n    const path = getURLPath(url);\n    if (path && path !== \"/\") {\n      // Container scoped.\n      this.serviceOrContainerContext = new Container(storageClientContext);\n    } else {\n      this.serviceOrContainerContext = new Service(storageClientContext);\n    }\n  }\n\n  /**\n   * Creates a {@link BlobBatch}.\n   * A BlobBatch represents an aggregated set of operations on blobs.\n   */\n  public createBatch(): BlobBatch {\n    return new BlobBatch();\n  }\n\n  /**\n   * Create multiple delete operations to mark the specified blobs or snapshots for deletion.\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).\n   * The operations will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param urls - The urls of the blob resources to delete.\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options -\n   */\n  public async deleteBlobs(\n    urls: string[],\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions\n  ): Promise<BlobBatchDeleteBlobsResponse>;\n\n  /**\n   * Create multiple delete operations to mark the specified blobs or snapshots for deletion.\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).\n   * The operation(subrequest) will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClients - The BlobClients for the blobs to delete.\n   * @param options -\n   */\n  public async deleteBlobs(\n    blobClients: BlobClient[],\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions\n  ): Promise<BlobBatchDeleteBlobsResponse>;\n\n  public async deleteBlobs(\n    urlsOrBlobClients: string[] | BlobClient[],\n    credentialOrOptions:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | BlobDeleteOptions\n      | undefined,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions\n  ): Promise<BlobBatchDeleteBlobsResponse> {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions as TokenCredential, options);\n      } else {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions as BlobDeleteOptions);\n      }\n    }\n    return this.submitBatch(batch);\n  }\n\n  /**\n   * Create multiple set tier operations to set the tier on a blob.\n   * The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * See [set blob tier details](https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier).\n   * The operation(subrequest) will be authenticated and authorized\n   * with specified credential.See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param urls - The urls of the blob resource to delete.\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobsAccessTier(\n    urls: string[],\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    tier: AccessTier,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions\n  ): Promise<BlobBatchSetBlobsAccessTierResponse>;\n\n  /**\n   * Create multiple set tier operations to set the tier on a blob.\n   * The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * See [set blob tier details](https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier).\n   * The operation(subrequest) will be authenticated and authorized\n   * with specified credential.See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClients - The BlobClients for the blobs which should have a new tier set.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobsAccessTier(\n    blobClients: BlobClient[],\n    tier: AccessTier,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions\n  ): Promise<BlobBatchSetBlobsAccessTierResponse>;\n\n  public async setBlobsAccessTier(\n    urlsOrBlobClients: string[] | BlobClient[],\n    credentialOrTier:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | AccessTier,\n    tierOrOptions?: AccessTier | BlobSetTierOptions,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions\n  ): Promise<BlobBatchSetBlobsAccessTierResponse> {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.setBlobAccessTier(\n          urlOrBlobClient,\n          credentialOrTier as TokenCredential,\n          tierOrOptions as AccessTier,\n          options\n        );\n      } else {\n        await batch.setBlobAccessTier(\n          urlOrBlobClient,\n          credentialOrTier as AccessTier,\n          tierOrOptions as BlobSetTierOptions\n        );\n      }\n    }\n    return this.submitBatch(batch);\n  }\n\n  /**\n   * Submit batch request which consists of multiple subrequests.\n   *\n   * Get `blobBatchClient` and other details before running the snippets.\n   * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n   *\n   * Example usage:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.deleteBlob(urlInString0, credential0);\n   * await batchRequest.deleteBlob(urlInString1, credential1, {\n   *  deleteSnapshots: \"include\"\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * Example using a lease:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n   * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n   *  conditions: { leaseId: leaseId }\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   *\n   * @param batchRequest - A set of Delete or SetTier operations.\n   * @param options -\n   */\n  public async submitBatch(\n    batchRequest: BlobBatch,\n    options: BlobBatchSubmitBatchOptionalParams = {}\n  ): Promise<BlobBatchSubmitBatchResponse> {\n    if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n      throw new RangeError(\"Batch request should contain one or more sub requests.\");\n    }\n\n    const { span, updatedOptions } = createSpan(\"BlobBatchClient-submitBatch\", options);\n    try {\n      const batchRequestBody = batchRequest.getHttpRequestBody();\n\n      // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n      const rawBatchResponse: ServiceSubmitBatchResponseModel =\n        await this.serviceOrContainerContext.submitBatch(\n          utf8ByteLength(batchRequestBody),\n          batchRequest.getMultiPartContentType(),\n          batchRequestBody,\n          {\n            ...options,\n            ...convertTracingToRequestOptionsBase(updatedOptions),\n          }\n        );\n\n      // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n      const batchResponseParser = new BatchResponseParser(\n        rawBatchResponse,\n        batchRequest.getSubRequests()\n      );\n      const responseSummary = await batchResponseParser.parseBatchResponse();\n\n      const res: BlobBatchSubmitBatchResponse = {\n        _response: rawBatchResponse._response,\n        contentType: rawBatchResponse.contentType,\n        errorCode: rawBatchResponse.errorCode,\n        requestId: rawBatchResponse.requestId,\n        clientRequestId: rawBatchResponse.clientRequestId,\n        version: rawBatchResponse.version,\n        subResponses: responseSummary.subResponses,\n        subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n        subResponsesFailedCount: responseSummary.subResponsesFailedCount,\n      };\n\n      return res;\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"9363466148d12c74b5afd5a6359d067e","cacheData":{"env":{}}}