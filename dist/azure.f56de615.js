// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"node_modules/ieee754/index.js":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"node_modules/node-libs-browser/node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"node_modules/base64-js/index.js","ieee754":"node_modules/ieee754/index.js","isarray":"node_modules/isarray/index.js","buffer":"node_modules/node-libs-browser/node_modules/buffer/index.js"}],"dist/azure.js":[function(require,module,exports) {
var define;
var process = require("process");
var global = arguments[3];
var Buffer = require("buffer").Buffer;
// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;

        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        } // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.


        if (previousRequire) {
          return previousRequire(name, true);
        } // Try the node require function if it exists.


        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};
      var module = cache[name] = new newRequire.Module(name);
      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;

  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;

  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]); // CommonJS

    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports; // RequireJS
    } else if (typeof define === "function" && define.amd) {
      define(function () {
        return mainExports;
      }); // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  } // Override the current require with this new one


  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
}({
  "../node_modules/@azure/core-http/dist-esm/src/httpHeaders.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.HttpHeaders = void 0;
    exports.isHttpHeadersLike = isHttpHeadersLike;

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * A collection of HttpHeaders that can be sent with a HTTP request.
     */


    function getHeaderKey(headerName) {
      return headerName.toLowerCase();
    }

    function isHttpHeadersLike(object) {
      if (object && _typeof(object) === "object") {
        var castObject = object;

        if (typeof castObject.rawHeaders === "function" && typeof castObject.clone === "function" && typeof castObject.get === "function" && typeof castObject.set === "function" && typeof castObject.contains === "function" && typeof castObject.remove === "function" && typeof castObject.headersArray === "function" && typeof castObject.headerValues === "function" && typeof castObject.headerNames === "function" && typeof castObject.toJson === "function") {
          return true;
        }
      }

      return false;
    }
    /**
     * A collection of HTTP header key/value pairs.
     */


    var HttpHeaders = /*#__PURE__*/function () {
      function HttpHeaders(rawHeaders) {
        _classCallCheck(this, HttpHeaders);

        this._headersMap = {};

        if (rawHeaders) {
          for (var headerName in rawHeaders) {
            this.set(headerName, rawHeaders[headerName]);
          }
        }
      }
      /**
       * Set a header in this collection with the provided name and value. The name is
       * case-insensitive.
       * @param headerName - The name of the header to set. This value is case-insensitive.
       * @param headerValue - The value of the header to set.
       */


      _createClass(HttpHeaders, [{
        key: "set",
        value: function set(headerName, headerValue) {
          this._headersMap[getHeaderKey(headerName)] = {
            name: headerName,
            value: headerValue.toString()
          };
        }
        /**
         * Get the header value for the provided header name, or undefined if no header exists in this
         * collection with the provided name.
         * @param headerName - The name of the header.
         */

      }, {
        key: "get",
        value: function get(headerName) {
          var header = this._headersMap[getHeaderKey(headerName)];

          return !header ? undefined : header.value;
        }
        /**
         * Get whether or not this header collection contains a header entry for the provided header name.
         */

      }, {
        key: "contains",
        value: function contains(headerName) {
          return !!this._headersMap[getHeaderKey(headerName)];
        }
        /**
         * Remove the header with the provided headerName. Return whether or not the header existed and
         * was removed.
         * @param headerName - The name of the header to remove.
         */

      }, {
        key: "remove",
        value: function remove(headerName) {
          var result = this.contains(headerName);
          delete this._headersMap[getHeaderKey(headerName)];
          return result;
        }
        /**
         * Get the headers that are contained this collection as an object.
         */

      }, {
        key: "rawHeaders",
        value: function rawHeaders() {
          return this.toJson({
            preserveCase: true
          });
        }
        /**
         * Get the headers that are contained in this collection as an array.
         */

      }, {
        key: "headersArray",
        value: function headersArray() {
          var headers = [];

          for (var headerKey in this._headersMap) {
            headers.push(this._headersMap[headerKey]);
          }

          return headers;
        }
        /**
         * Get the header names that are contained in this collection.
         */

      }, {
        key: "headerNames",
        value: function headerNames() {
          var headerNames = [];
          var headers = this.headersArray();

          for (var i = 0; i < headers.length; ++i) {
            headerNames.push(headers[i].name);
          }

          return headerNames;
        }
        /**
         * Get the header values that are contained in this collection.
         */

      }, {
        key: "headerValues",
        value: function headerValues() {
          var headerValues = [];
          var headers = this.headersArray();

          for (var i = 0; i < headers.length; ++i) {
            headerValues.push(headers[i].value);
          }

          return headerValues;
        }
        /**
         * Get the JSON object representation of this HTTP header collection.
         */

      }, {
        key: "toJson",
        value: function toJson() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var result = {};

          if (options.preserveCase) {
            for (var headerKey in this._headersMap) {
              var header = this._headersMap[headerKey];
              result[header.name] = header.value;
            }
          } else {
            for (var _headerKey in this._headersMap) {
              var _header = this._headersMap[_headerKey];
              result[getHeaderKey(_header.name)] = _header.value;
            }
          }

          return result;
        }
        /**
         * Get the string representation of this HTTP header collection.
         */

      }, {
        key: "toString",
        value: function toString() {
          return JSON.stringify(this.toJson({
            preserveCase: true
          }));
        }
        /**
         * Create a deep clone/copy of this HttpHeaders collection.
         */

      }, {
        key: "clone",
        value: function clone() {
          var resultPreservingCasing = {};

          for (var headerKey in this._headersMap) {
            var header = this._headersMap[headerKey];
            resultPreservingCasing[header.name] = header.value;
          }

          return new HttpHeaders(resultPreservingCasing);
        }
      }]);

      return HttpHeaders;
    }();

    exports.HttpHeaders = HttpHeaders;
  }, {}],
  "../node_modules/@azure/core-http/dist-esm/src/util/base64.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.decodeString = decodeString;
    exports.encodeByteArray = encodeByteArray;
    exports.encodeString = encodeString; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Encodes a string in base64 format.
     * @param value - The string to encode
     */

    function encodeString(value) {
      return btoa(value);
    }
    /**
     * Encodes a byte array in base64 format.
     * @param value - The Uint8Aray to encode
     */


    function encodeByteArray(value) {
      var str = "";

      for (var i = 0; i < value.length; i++) {
        str += String.fromCharCode(value[i]);
      }

      return btoa(str);
    }
    /**
     * Decodes a base64 string into a byte array.
     * @param value - The base64 string to decode
     */


    function decodeString(value) {
      var byteString = atob(value);
      var arr = new Uint8Array(byteString.length);

      for (var i = 0; i < byteString.length; i++) {
        arr[i] = byteString.charCodeAt(i);
      }

      return arr;
    }
  }, {}],
  "../node_modules/@azure/core-http/dist-esm/src/util/constants.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Constants = void 0; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * A set of constants used internally when processing requests.
     */

    var Constants = {
      /**
       * The core-http version
       */
      coreHttpVersion: "2.2.5",

      /**
       * Specifies HTTP.
       */
      HTTP: "http:",

      /**
       * Specifies HTTPS.
       */
      HTTPS: "https:",

      /**
       * Specifies HTTP Proxy.
       */
      HTTP_PROXY: "HTTP_PROXY",

      /**
       * Specifies HTTPS Proxy.
       */
      HTTPS_PROXY: "HTTPS_PROXY",

      /**
       * Specifies NO Proxy.
       */
      NO_PROXY: "NO_PROXY",

      /**
       * Specifies ALL Proxy.
       */
      ALL_PROXY: "ALL_PROXY",
      HttpConstants: {
        /**
         * Http Verbs
         */
        HttpVerbs: {
          PUT: "PUT",
          GET: "GET",
          DELETE: "DELETE",
          POST: "POST",
          MERGE: "MERGE",
          HEAD: "HEAD",
          PATCH: "PATCH"
        },
        StatusCodes: {
          TooManyRequests: 429,
          ServiceUnavailable: 503
        }
      },

      /**
       * Defines constants for use with HTTP headers.
       */
      HeaderConstants: {
        /**
         * The Authorization header.
         */
        AUTHORIZATION: "authorization",
        AUTHORIZATION_SCHEME: "Bearer",

        /**
         * The Retry-After response-header field can be used with a 503 (Service
         * Unavailable) or 349 (Too Many Requests) responses to indicate how long
         * the service is expected to be unavailable to the requesting client.
         */
        RETRY_AFTER: "Retry-After",

        /**
         * The UserAgent header.
         */
        USER_AGENT: "User-Agent"
      }
    };
    exports.Constants = Constants;
  }, {}],
  "../node_modules/@azure/core-http/dist-esm/src/util/serializer.common.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.XML_CHARKEY = exports.XML_ATTRKEY = void 0; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Default key used to access the XML attributes.
     */

    var XML_ATTRKEY = "$";
    /**
     * Default key used to access the XML value content.
     */

    exports.XML_ATTRKEY = XML_ATTRKEY;
    var XML_CHARKEY = "_";
    exports.XML_CHARKEY = XML_CHARKEY;
  }, {}],
  "../node_modules/uuid/dist/esm-browser/rng.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rng; // Unique ID creation requires a high quality random # generator. In the browser we therefore
    // require the crypto API and do not support built-in fallback to lower quality random number
    // generators (like Math.random()).

    var getRandomValues;
    var rnds8 = new Uint8Array(16);

    function rng() {
      // lazy load so that environments that need to polyfill have a chance to do so
      if (!getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
        // find the complete implementation of crypto (msCrypto) on IE11.
        getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

        if (!getRandomValues) {
          throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
        }
      }

      return getRandomValues(rnds8);
    }
  }, {}],
  "../node_modules/uuid/dist/esm-browser/regex.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports.default = _default;
  }, {}],
  "../node_modules/uuid/dist/esm-browser/validate.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _regex = _interopRequireDefault(require("./regex.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function validate(uuid) {
      return typeof uuid === 'string' && _regex.default.test(uuid);
    }

    var _default = validate;
    exports.default = _default;
  }, {
    "./regex.js": "../node_modules/uuid/dist/esm-browser/regex.js"
  }],
  "../node_modules/uuid/dist/esm-browser/stringify.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _validate = _interopRequireDefault(require("./validate.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */


    var byteToHex = [];

    for (var i = 0; i < 256; ++i) {
      byteToHex.push((i + 0x100).toString(16).substr(1));
    }

    function stringify(arr) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance
      // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434

      var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
      // of the following:
      // - One or more input array values don't map to a hex octet (leading to
      // "undefined" in the uuid)
      // - Invalid input values for the RFC `version` or `variant` fields

      if (!(0, _validate.default)(uuid)) {
        throw TypeError('Stringified UUID is invalid');
      }

      return uuid;
    }

    var _default = stringify;
    exports.default = _default;
  }, {
    "./validate.js": "../node_modules/uuid/dist/esm-browser/validate.js"
  }],
  "../node_modules/uuid/dist/esm-browser/v1.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _rng = _interopRequireDefault(require("./rng.js"));

    var _stringify = _interopRequireDefault(require("./stringify.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    } // **`v1()` - Generate time-based UUID**
    //
    // Inspired by https://github.com/LiosK/UUID.js
    // and http://docs.python.org/library/uuid.html


    var _nodeId;

    var _clockseq; // Previous uuid creation time


    var _lastMSecs = 0;
    var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || new Array(16);
      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
      // specified.  We do this lazily to minimize issues related to insufficient
      // system entropy.  See #189

      if (node == null || clockseq == null) {
        var seedBytes = options.random || (options.rng || _rng.default)();

        if (node == null) {
          // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
          node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }

        if (clockseq == null) {
          // Per 4.2.2, randomize (14 bit) clockseq
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
        }
      } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
      // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
      // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
      // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


      var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
      // cycle to simulate higher resolution clock

      var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

      var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

      if (dt < 0 && options.clockseq === undefined) {
        clockseq = clockseq + 1 & 0x3fff;
      } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
      // time interval


      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
        nsecs = 0;
      } // Per 4.2.1.2 Throw error if too many uuids are requested


      if (nsecs >= 10000) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }

      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

      msecs += 12219292800000; // `time_low`

      var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
      b[i++] = tl >>> 24 & 0xff;
      b[i++] = tl >>> 16 & 0xff;
      b[i++] = tl >>> 8 & 0xff;
      b[i++] = tl & 0xff; // `time_mid`

      var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
      b[i++] = tmh >>> 8 & 0xff;
      b[i++] = tmh & 0xff; // `time_high_and_version`

      b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

      b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

      b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

      b[i++] = clockseq & 0xff; // `node`

      for (var n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }

      return buf || (0, _stringify.default)(b);
    }

    var _default = v1;
    exports.default = _default;
  }, {
    "./rng.js": "../node_modules/uuid/dist/esm-browser/rng.js",
    "./stringify.js": "../node_modules/uuid/dist/esm-browser/stringify.js"
  }],
  "../node_modules/uuid/dist/esm-browser/parse.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _validate = _interopRequireDefault(require("./validate.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError('Invalid UUID');
      }

      var v;
      var arr = new Uint8Array(16); // Parse ########-....-....-....-............

      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 0xff;
      arr[2] = v >>> 8 & 0xff;
      arr[3] = v & 0xff; // Parse ........-####-....-....-............

      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 0xff; // Parse ........-....-####-....-............

      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 0xff; // Parse ........-....-....-####-............

      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 0xff; // Parse ........-....-....-....-############
      // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

      arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
      arr[11] = v / 0x100000000 & 0xff;
      arr[12] = v >>> 24 & 0xff;
      arr[13] = v >>> 16 & 0xff;
      arr[14] = v >>> 8 & 0xff;
      arr[15] = v & 0xff;
      return arr;
    }

    var _default = parse;
    exports.default = _default;
  }, {
    "./validate.js": "../node_modules/uuid/dist/esm-browser/validate.js"
  }],
  "../node_modules/uuid/dist/esm-browser/v35.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.URL = exports.DNS = void 0;
    exports.default = _default;

    var _stringify = _interopRequireDefault(require("./stringify.js"));

    var _parse = _interopRequireDefault(require("./parse.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str)); // UTF8 escape

      var bytes = [];

      for (var i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }

      return bytes;
    }

    var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
    exports.DNS = DNS;
    var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
    exports.URL = URL;

    function _default(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        if (typeof value === 'string') {
          value = stringToBytes(value);
        }

        if (typeof namespace === 'string') {
          namespace = (0, _parse.default)(namespace);
        }

        if (namespace.length !== 16) {
          throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
        } // Compute hash of namespace and value, Per 4.3
        // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
        // hashfunc([...namespace, ... value])`


        var bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 0x0f | version;
        bytes[8] = bytes[8] & 0x3f | 0x80;

        if (buf) {
          offset = offset || 0;

          for (var i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }

          return buf;
        }

        return (0, _stringify.default)(bytes);
      } // Function#name is not settable on some platforms (#270)


      try {
        generateUUID.name = name; // eslint-disable-next-line no-empty
      } catch (err) {} // For CommonJS default export support


      generateUUID.DNS = DNS;
      generateUUID.URL = URL;
      return generateUUID;
    }
  }, {
    "./stringify.js": "../node_modules/uuid/dist/esm-browser/stringify.js",
    "./parse.js": "../node_modules/uuid/dist/esm-browser/parse.js"
  }],
  "../node_modules/uuid/dist/esm-browser/md5.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    /*
     * Browser-compatible JavaScript MD5
     *
     * Modification of JavaScript MD5
     * https://github.com/blueimp/JavaScript-MD5
     *
     * Copyright 2011, Sebastian Tschan
     * https://blueimp.net
     *
     * Licensed under the MIT license:
     * https://opensource.org/licenses/MIT
     *
     * Based on
     * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
     * Digest Algorithm, as defined in RFC 1321.
     * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * Distributed under the BSD License
     * See http://pajhome.org.uk/crypt/md5 for more info.
     */

    function md5(bytes) {
      if (typeof bytes === 'string') {
        var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

        bytes = new Uint8Array(msg.length);

        for (var i = 0; i < msg.length; ++i) {
          bytes[i] = msg.charCodeAt(i);
        }
      }

      return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
    }
    /*
     * Convert an array of little-endian words to an array of bytes
     */


    function md5ToHexEncodedArray(input) {
      var output = [];
      var length32 = input.length * 32;
      var hexTab = '0123456789abcdef';

      for (var i = 0; i < length32; i += 8) {
        var x = input[i >> 5] >>> i % 32 & 0xff;
        var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
        output.push(hex);
      }

      return output;
    }
    /**
     * Calculate output length with padding and bit length
     */


    function getOutputLength(inputLength8) {
      return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
    }
    /*
     * Calculate the MD5 of an array of little-endian words, and a bit length.
     */


    function wordsToMd5(x, len) {
      /* append padding */
      x[len >> 5] |= 0x80 << len % 32;
      x[getOutputLength(len) - 1] = len;
      var a = 1732584193;
      var b = -271733879;
      var c = -1732584194;
      var d = 271733878;

      for (var i = 0; i < x.length; i += 16) {
        var olda = a;
        var oldb = b;
        var oldc = c;
        var oldd = d;
        a = md5ff(a, b, c, d, x[i], 7, -680876936);
        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5gg(b, c, d, a, x[i], 20, -373897302);
        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5hh(d, a, b, c, x[i], 11, -358537222);
        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5ii(a, b, c, d, x[i], 6, -198630844);
        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safeAdd(a, olda);
        b = safeAdd(b, oldb);
        c = safeAdd(c, oldc);
        d = safeAdd(d, oldd);
      }

      return [a, b, c, d];
    }
    /*
     * Convert an array bytes to an array of little-endian words
     * Characters >255 have their high-byte silently ignored.
     */


    function bytesToWords(input) {
      if (input.length === 0) {
        return [];
      }

      var length8 = input.length * 8;
      var output = new Uint32Array(getOutputLength(length8));

      for (var i = 0; i < length8; i += 8) {
        output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
      }

      return output;
    }
    /*
     * Add integers, wrapping at 2^32. This uses 16-bit operations internally
     * to work around bugs in some JS interpreters.
     */


    function safeAdd(x, y) {
      var lsw = (x & 0xffff) + (y & 0xffff);
      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return msw << 16 | lsw & 0xffff;
    }
    /*
     * Bitwise rotate a 32-bit number to the left.
     */


    function bitRotateLeft(num, cnt) {
      return num << cnt | num >>> 32 - cnt;
    }
    /*
     * These functions implement the four basic operations the algorithm uses.
     */


    function md5cmn(q, a, b, x, s, t) {
      return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
    }

    function md5ff(a, b, c, d, x, s, t) {
      return md5cmn(b & c | ~b & d, a, b, x, s, t);
    }

    function md5gg(a, b, c, d, x, s, t) {
      return md5cmn(b & d | c & ~d, a, b, x, s, t);
    }

    function md5hh(a, b, c, d, x, s, t) {
      return md5cmn(b ^ c ^ d, a, b, x, s, t);
    }

    function md5ii(a, b, c, d, x, s, t) {
      return md5cmn(c ^ (b | ~d), a, b, x, s, t);
    }

    var _default = md5;
    exports.default = _default;
  }, {}],
  "../node_modules/uuid/dist/esm-browser/v3.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _v = _interopRequireDefault(require("./v35.js"));

    var _md = _interopRequireDefault(require("./md5.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    var v3 = (0, _v.default)('v3', 0x30, _md.default);
    var _default = v3;
    exports.default = _default;
  }, {
    "./v35.js": "../node_modules/uuid/dist/esm-browser/v35.js",
    "./md5.js": "../node_modules/uuid/dist/esm-browser/md5.js"
  }],
  "../node_modules/uuid/dist/esm-browser/v4.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _rng = _interopRequireDefault(require("./rng.js"));

    var _stringify = _interopRequireDefault(require("./stringify.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function v4(options, buf, offset) {
      options = options || {};

      var rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


      rnds[6] = rnds[6] & 0x0f | 0x40;
      rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

      if (buf) {
        offset = offset || 0;

        for (var i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }

        return buf;
      }

      return (0, _stringify.default)(rnds);
    }

    var _default = v4;
    exports.default = _default;
  }, {
    "./rng.js": "../node_modules/uuid/dist/esm-browser/rng.js",
    "./stringify.js": "../node_modules/uuid/dist/esm-browser/stringify.js"
  }],
  "../node_modules/uuid/dist/esm-browser/sha1.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0; // Adapted from Chris Veness' SHA1 code at
    // http://www.movable-type.co.uk/scripts/sha1.html

    function f(s, x, y, z) {
      switch (s) {
        case 0:
          return x & y ^ ~x & z;

        case 1:
          return x ^ y ^ z;

        case 2:
          return x & y ^ x & z ^ y & z;

        case 3:
          return x ^ y ^ z;
      }
    }

    function ROTL(x, n) {
      return x << n | x >>> 32 - n;
    }

    function sha1(bytes) {
      var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
      var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

      if (typeof bytes === 'string') {
        var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

        bytes = [];

        for (var i = 0; i < msg.length; ++i) {
          bytes.push(msg.charCodeAt(i));
        }
      } else if (!Array.isArray(bytes)) {
        // Convert Array-like to Array
        bytes = Array.prototype.slice.call(bytes);
      }

      bytes.push(0x80);
      var l = bytes.length / 4 + 2;
      var N = Math.ceil(l / 16);
      var M = new Array(N);

      for (var _i = 0; _i < N; ++_i) {
        var arr = new Uint32Array(16);

        for (var j = 0; j < 16; ++j) {
          arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
        }

        M[_i] = arr;
      }

      M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
      M[N - 1][14] = Math.floor(M[N - 1][14]);
      M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

      for (var _i2 = 0; _i2 < N; ++_i2) {
        var W = new Uint32Array(80);

        for (var t = 0; t < 16; ++t) {
          W[t] = M[_i2][t];
        }

        for (var _t = 16; _t < 80; ++_t) {
          W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
        }

        var a = H[0];
        var b = H[1];
        var c = H[2];
        var d = H[3];
        var e = H[4];

        for (var _t2 = 0; _t2 < 80; ++_t2) {
          var s = Math.floor(_t2 / 20);
          var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
          e = d;
          d = c;
          c = ROTL(b, 30) >>> 0;
          b = a;
          a = T;
        }

        H[0] = H[0] + a >>> 0;
        H[1] = H[1] + b >>> 0;
        H[2] = H[2] + c >>> 0;
        H[3] = H[3] + d >>> 0;
        H[4] = H[4] + e >>> 0;
      }

      return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
    }

    var _default = sha1;
    exports.default = _default;
  }, {}],
  "../node_modules/uuid/dist/esm-browser/v5.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _v = _interopRequireDefault(require("./v35.js"));

    var _sha = _interopRequireDefault(require("./sha1.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    var v5 = (0, _v.default)('v5', 0x50, _sha.default);
    var _default = v5;
    exports.default = _default;
  }, {
    "./v35.js": "../node_modules/uuid/dist/esm-browser/v35.js",
    "./sha1.js": "../node_modules/uuid/dist/esm-browser/sha1.js"
  }],
  "../node_modules/uuid/dist/esm-browser/nil.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = '00000000-0000-0000-0000-000000000000';
    exports.default = _default;
  }, {}],
  "../node_modules/uuid/dist/esm-browser/version.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _validate = _interopRequireDefault(require("./validate.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function version(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError('Invalid UUID');
      }

      return parseInt(uuid.substr(14, 1), 16);
    }

    var _default = version;
    exports.default = _default;
  }, {
    "./validate.js": "../node_modules/uuid/dist/esm-browser/validate.js"
  }],
  "../node_modules/uuid/dist/esm-browser/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "NIL", {
      enumerable: true,
      get: function () {
        return _nil.default;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function () {
        return _parse.default;
      }
    });
    Object.defineProperty(exports, "stringify", {
      enumerable: true,
      get: function () {
        return _stringify.default;
      }
    });
    Object.defineProperty(exports, "v1", {
      enumerable: true,
      get: function () {
        return _v.default;
      }
    });
    Object.defineProperty(exports, "v3", {
      enumerable: true,
      get: function () {
        return _v2.default;
      }
    });
    Object.defineProperty(exports, "v4", {
      enumerable: true,
      get: function () {
        return _v3.default;
      }
    });
    Object.defineProperty(exports, "v5", {
      enumerable: true,
      get: function () {
        return _v4.default;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function () {
        return _validate.default;
      }
    });
    Object.defineProperty(exports, "version", {
      enumerable: true,
      get: function () {
        return _version.default;
      }
    });

    var _v = _interopRequireDefault(require("./v1.js"));

    var _v2 = _interopRequireDefault(require("./v3.js"));

    var _v3 = _interopRequireDefault(require("./v4.js"));

    var _v4 = _interopRequireDefault(require("./v5.js"));

    var _nil = _interopRequireDefault(require("./nil.js"));

    var _version = _interopRequireDefault(require("./version.js"));

    var _validate = _interopRequireDefault(require("./validate.js"));

    var _stringify = _interopRequireDefault(require("./stringify.js"));

    var _parse = _interopRequireDefault(require("./parse.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }, {
    "./v1.js": "../node_modules/uuid/dist/esm-browser/v1.js",
    "./v3.js": "../node_modules/uuid/dist/esm-browser/v3.js",
    "./v4.js": "../node_modules/uuid/dist/esm-browser/v4.js",
    "./v5.js": "../node_modules/uuid/dist/esm-browser/v5.js",
    "./nil.js": "../node_modules/uuid/dist/esm-browser/nil.js",
    "./version.js": "../node_modules/uuid/dist/esm-browser/version.js",
    "./validate.js": "../node_modules/uuid/dist/esm-browser/validate.js",
    "./stringify.js": "../node_modules/uuid/dist/esm-browser/stringify.js",
    "./parse.js": "../node_modules/uuid/dist/esm-browser/parse.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process/browser.js": [function (require, module, exports) {
    // shim for using process in browser
    var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.

    var cachedSetTimeout;
    var cachedClearTimeout;

    function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
    }

    function defaultClearTimeout() {
      throw new Error('clearTimeout has not been defined');
    }

    (function () {
      try {
        if (typeof setTimeout === 'function') {
          cachedSetTimeout = setTimeout;
        } else {
          cachedSetTimeout = defaultSetTimout;
        }
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }

      try {
        if (typeof clearTimeout === 'function') {
          cachedClearTimeout = clearTimeout;
        } else {
          cachedClearTimeout = defaultClearTimeout;
        }
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    })();

    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
      } // if setTimeout wasn't available but was latter defined


      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }

      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
          return cachedSetTimeout.call(this, fun, 0);
        }
      }
    }

    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
      } // if clearTimeout wasn't available but was latter defined


      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }

      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
          return cachedClearTimeout.call(null, marker);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
          // Some versions of I.E. have different rules for clearTimeout vs setTimeout
          return cachedClearTimeout.call(this, marker);
        }
      }
    }

    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return;
      }

      draining = false;

      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }

      if (queue.length) {
        drainQueue();
      }
    }

    function drainQueue() {
      if (draining) {
        return;
      }

      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
      var len = queue.length;

      while (len) {
        currentQueue = queue;
        queue = [];

        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }

        queueIndex = -1;
        len = queue.length;
      }

      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }

    process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);

      if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
      }

      queue.push(new Item(fun, args));

      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
    }; // v8 likes predictible objects


    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }

    Item.prototype.run = function () {
      this.fun.apply(null, this.array);
    };

    process.title = 'browser';
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues

    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;

    process.listeners = function (name) {
      return [];
    };

    process.binding = function (name) {
      throw new Error('process.binding is not supported');
    };

    process.cwd = function () {
      return '/';
    };

    process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
    };

    process.umask = function () {
      return 0;
    };
  }, {}],
  "../node_modules/@azure/core-http/dist-esm/src/util/utils.js": [function (require, module, exports) {
    var process = require("process");

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.applyMixins = applyMixins;
    exports.encodeUri = encodeUri;
    exports.executePromisesSequentially = executePromisesSequentially;
    exports.generateUuid = generateUuid;
    exports.getEnvironmentValue = getEnvironmentValue;
    exports.isDuration = isDuration;
    exports.isNode = void 0;
    exports.isObject = isObject;
    exports.isPrimitiveType = isPrimitiveType;
    exports.isValidUuid = isValidUuid;
    exports.prepareXMLRootList = prepareXMLRootList;
    exports.promiseToCallback = promiseToCallback;
    exports.promiseToServiceCallback = promiseToServiceCallback;
    exports.replaceAll = replaceAll;
    exports.stripRequest = stripRequest;
    exports.stripResponse = stripResponse;
    exports.urlIsHTTPS = urlIsHTTPS;

    var _constants = require("./constants");

    var _serializer = require("./serializer.common");

    var _uuid = require("uuid");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    var validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;
    /**
     * A constant that indicates whether the environment is node.js or browser based.
     */

    var isNode = typeof process !== "undefined" && !!process.version && !!process.versions && !!process.versions.node;
    /**
     * Checks if a parsed URL is HTTPS
     *
     * @param urlToCheck - The url to check
     * @returns True if the URL is HTTPS; false otherwise.
     */

    exports.isNode = isNode;

    function urlIsHTTPS(urlToCheck) {
      return urlToCheck.protocol.toLowerCase() === _constants.Constants.HTTPS;
    }
    /**
     * Encodes an URI.
     *
     * @param uri - The URI to be encoded.
     * @returns The encoded URI.
     */


    function encodeUri(uri) {
      return encodeURIComponent(uri).replace(/!/g, "%21").replace(/"/g, "%27").replace(/\(/g, "%28").replace(/\)/g, "%29").replace(/\*/g, "%2A");
    }
    /**
     * Returns a stripped version of the Http Response which only contains body,
     * headers and the status.
     *
     * @param response - The Http Response
     * @returns The stripped version of Http Response.
     */


    function stripResponse(response) {
      var strippedResponse = {};
      strippedResponse.body = response.bodyAsText;
      strippedResponse.headers = response.headers;
      strippedResponse.status = response.status;
      return strippedResponse;
    }
    /**
     * Returns a stripped version of the Http Request that does not contain the
     * Authorization header.
     *
     * @param request - The Http Request object
     * @returns The stripped version of Http Request.
     */


    function stripRequest(request) {
      var strippedRequest = request.clone();

      if (strippedRequest.headers) {
        strippedRequest.headers.remove("authorization");
      }

      return strippedRequest;
    }
    /**
     * Validates the given uuid as a string
     *
     * @param uuid - The uuid as a string that needs to be validated
     * @returns True if the uuid is valid; false otherwise.
     */


    function isValidUuid(uuid) {
      return validUuidRegex.test(uuid);
    }
    /**
     * Generated UUID
     *
     * @returns RFC4122 v4 UUID.
     */


    function generateUuid() {
      return (0, _uuid.v4)();
    }
    /**
     * Executes an array of promises sequentially. Inspiration of this method is here:
     * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!
     *
     * @param promiseFactories - An array of promise factories(A function that return a promise)
     * @param kickstart - Input to the first promise that is used to kickstart the promise chain.
     * If not provided then the promise chain starts with undefined.
     * @returns A chain of resolved or rejected promises
     */


    function executePromisesSequentially(promiseFactories, kickstart) {
      var result = Promise.resolve(kickstart);
      promiseFactories.forEach(function (promiseFactory) {
        result = result.then(promiseFactory);
      });
      return result;
    }
    /**
     * Converts a Promise to a callback.
     * @param promise - The Promise to be converted to a callback
     * @returns A function that takes the callback `(cb: Function) => void`
     * @deprecated generated code should instead depend on responseToBody
     */
    // eslint-disable-next-line @typescript-eslint/ban-types


    function promiseToCallback(promise) {
      if (typeof promise.then !== "function") {
        throw new Error("The provided input is not a Promise.");
      } // eslint-disable-next-line @typescript-eslint/ban-types


      return function (cb) {
        promise.then(function (data) {
          // eslint-disable-next-line promise/no-callback-in-promise
          return cb(undefined, data);
        }).catch(function (err) {
          // eslint-disable-next-line promise/no-callback-in-promise
          cb(err);
        });
      };
    }
    /**
     * Converts a Promise to a service callback.
     * @param promise - The Promise of HttpOperationResponse to be converted to a service callback
     * @returns A function that takes the service callback (cb: ServiceCallback<T>): void
     */


    function promiseToServiceCallback(promise) {
      if (typeof promise.then !== "function") {
        throw new Error("The provided input is not a Promise.");
      }

      return function (cb) {
        promise.then(function (data) {
          return process.nextTick(cb, undefined, data.parsedBody, data.request, data);
        }).catch(function (err) {
          process.nextTick(cb, err);
        });
      };
    }

    function prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {
      if (!Array.isArray(obj)) {
        obj = [obj];
      }

      if (!xmlNamespaceKey || !xmlNamespace) {
        return _defineProperty({}, elementName, obj);
      }

      var result = _defineProperty({}, elementName, obj);

      result[_serializer.XML_ATTRKEY] = _defineProperty({}, xmlNamespaceKey, xmlNamespace);
      return result;
    }
    /**
     * Applies the properties on the prototype of sourceCtors to the prototype of targetCtor
     * @param targetCtor - The target object on which the properties need to be applied.
     * @param sourceCtors - An array of source objects from which the properties need to be taken.
     */


    function applyMixins(targetCtorParam, sourceCtors) {
      var castTargetCtorParam = targetCtorParam;
      sourceCtors.forEach(function (sourceCtor) {
        Object.getOwnPropertyNames(sourceCtor.prototype).forEach(function (name) {
          castTargetCtorParam.prototype[name] = sourceCtor.prototype[name];
        });
      });
    }

    var validateISODuration = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    /**
     * Indicates whether the given string is in ISO 8601 format.
     * @param value - The value to be validated for ISO 8601 duration format.
     * @returns `true` if valid, `false` otherwise.
     */

    function isDuration(value) {
      return validateISODuration.test(value);
    }
    /**
     * Replace all of the instances of searchValue in value with the provided replaceValue.
     * @param value - The value to search and replace in.
     * @param searchValue - The value to search for in the value argument.
     * @param replaceValue - The value to replace searchValue with in the value argument.
     * @returns The value where each instance of searchValue was replaced with replacedValue.
     */


    function replaceAll(value, searchValue, replaceValue) {
      return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || "");
    }
    /**
     * Determines whether the given entity is a basic/primitive type
     * (string, number, boolean, null, undefined).
     * @param value - Any entity
     * @returns true is it is primitive type, false otherwise.
     */


    function isPrimitiveType(value) {
      return _typeof(value) !== "object" && typeof value !== "function" || value === null;
    }

    function getEnvironmentValue(name) {
      if (process.env[name]) {
        return process.env[name];
      } else if (process.env[name.toLowerCase()]) {
        return process.env[name.toLowerCase()];
      }

      return undefined;
    }
    /**
     * @internal
     * @returns true when input is an object type that is not null, Array, RegExp, or Date.
     */


    function isObject(input) {
      return _typeof(input) === "object" && input !== null && !Array.isArray(input) && !(input instanceof RegExp) && !(input instanceof Date);
    }
  }, {
    "./constants": "../node_modules/@azure/core-http/dist-esm/src/util/constants.js",
    "./serializer.common": "../node_modules/@azure/core-http/dist-esm/src/util/serializer.common.js",
    "uuid": "../node_modules/uuid/dist/esm-browser/index.js",
    "process": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process/browser.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/serializer.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Serializer = exports.MapperType = void 0;
    exports.serializeObject = serializeObject;

    var base64 = _interopRequireWildcard(require("./util/base64"));

    var utils = _interopRequireWildcard(require("./util/utils"));

    var _serializer = require("./util/serializer.common");

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function (nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj.default = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;

      var _s, _e;

      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e2) {
              throw _e2;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e3) {
          didErr = true;
          err = _e3;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    } // This file contains utility code to serialize and deserialize network operations according to `OperationSpec` objects generated by AutoRest.TypeScript from OpenAPI specifications.

    /**
     * Used to map raw response objects to final shapes.
     * Helps packing and unpacking Dates and other encoded types that are not intrinsic to JSON.
     * Also allows pulling values from headers, as well as inserting default values and constants.
     */


    var Serializer = /*#__PURE__*/function () {
      function Serializer() {
        var modelMappers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var
        /**
         * Whether the contents are XML or not.
         */
        isXML = arguments.length > 1 ? arguments[1] : undefined;

        _classCallCheck(this, Serializer);

        this.modelMappers = modelMappers;
        this.isXML = isXML;
      }
      /**
       * Validates constraints, if any. This function will throw if the provided value does not respect those constraints.
       * @param mapper - The definition of data models.
       * @param value - The value.
       * @param objectName - Name of the object. Used in the error messages.
       */


      _createClass(Serializer, [{
        key: "validateConstraints",
        value: function validateConstraints(mapper, value, objectName) {
          var failValidation = function failValidation(constraintName, constraintValue) {
            throw new Error("\"".concat(objectName, "\" with value \"").concat(value, "\" should satisfy the constraint \"").concat(constraintName, "\": ").concat(constraintValue, "."));
          };

          if (mapper.constraints && value != undefined) {
            var valueAsNumber = value;
            var _mapper$constraints = mapper.constraints,
                ExclusiveMaximum = _mapper$constraints.ExclusiveMaximum,
                ExclusiveMinimum = _mapper$constraints.ExclusiveMinimum,
                InclusiveMaximum = _mapper$constraints.InclusiveMaximum,
                InclusiveMinimum = _mapper$constraints.InclusiveMinimum,
                MaxItems = _mapper$constraints.MaxItems,
                MaxLength = _mapper$constraints.MaxLength,
                MinItems = _mapper$constraints.MinItems,
                MinLength = _mapper$constraints.MinLength,
                MultipleOf = _mapper$constraints.MultipleOf,
                Pattern = _mapper$constraints.Pattern,
                UniqueItems = _mapper$constraints.UniqueItems;

            if (ExclusiveMaximum != undefined && valueAsNumber >= ExclusiveMaximum) {
              failValidation("ExclusiveMaximum", ExclusiveMaximum);
            }

            if (ExclusiveMinimum != undefined && valueAsNumber <= ExclusiveMinimum) {
              failValidation("ExclusiveMinimum", ExclusiveMinimum);
            }

            if (InclusiveMaximum != undefined && valueAsNumber > InclusiveMaximum) {
              failValidation("InclusiveMaximum", InclusiveMaximum);
            }

            if (InclusiveMinimum != undefined && valueAsNumber < InclusiveMinimum) {
              failValidation("InclusiveMinimum", InclusiveMinimum);
            }

            var valueAsArray = value;

            if (MaxItems != undefined && valueAsArray.length > MaxItems) {
              failValidation("MaxItems", MaxItems);
            }

            if (MaxLength != undefined && valueAsArray.length > MaxLength) {
              failValidation("MaxLength", MaxLength);
            }

            if (MinItems != undefined && valueAsArray.length < MinItems) {
              failValidation("MinItems", MinItems);
            }

            if (MinLength != undefined && valueAsArray.length < MinLength) {
              failValidation("MinLength", MinLength);
            }

            if (MultipleOf != undefined && valueAsNumber % MultipleOf !== 0) {
              failValidation("MultipleOf", MultipleOf);
            }

            if (Pattern) {
              var pattern = typeof Pattern === "string" ? new RegExp(Pattern) : Pattern;

              if (typeof value !== "string" || value.match(pattern) === null) {
                failValidation("Pattern", Pattern);
              }
            }

            if (UniqueItems && valueAsArray.some(function (item, i, ar) {
              return ar.indexOf(item) !== i;
            })) {
              failValidation("UniqueItems", UniqueItems);
            }
          }
        }
        /**
         * Serialize the given object based on its metadata defined in the mapper.
         *
         * @param mapper - The mapper which defines the metadata of the serializable object.
         * @param object - A valid Javascript object to be serialized.
         * @param objectName - Name of the serialized object.
         * @param options - additional options to deserialization.
         * @returns A valid serialized Javascript object.
         */

      }, {
        key: "serialize",
        value: function serialize(mapper, object, objectName) {
          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

          var _a, _b, _c;

          var updatedOptions = {
            rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : "",
            includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,
            xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : _serializer.XML_CHARKEY
          };
          var payload = {};
          var mapperType = mapper.type.name;

          if (!objectName) {
            objectName = mapper.serializedName;
          }

          if (mapperType.match(/^Sequence$/i) !== null) {
            payload = [];
          }

          if (mapper.isConstant) {
            object = mapper.defaultValue;
          } // This table of allowed values should help explain
          // the mapper.required and mapper.nullable properties.
          // X means "neither undefined or null are allowed".
          //           || required
          //           || true      | false
          //  nullable || ==========================
          //      true || null      | undefined/null
          //     false || X         | undefined
          // undefined || X         | undefined/null


          var required = mapper.required,
              nullable = mapper.nullable;

          if (required && nullable && object === undefined) {
            throw new Error("".concat(objectName, " cannot be undefined."));
          }

          if (required && !nullable && object == undefined) {
            throw new Error("".concat(objectName, " cannot be null or undefined."));
          }

          if (!required && nullable === false && object === null) {
            throw new Error("".concat(objectName, " cannot be null."));
          }

          if (object == undefined) {
            payload = object;
          } else {
            // Validate Constraints if any
            this.validateConstraints(mapper, object, objectName);

            if (mapperType.match(/^any$/i) !== null) {
              payload = object;
            } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {
              payload = serializeBasicTypes(mapperType, objectName, object);
            } else if (mapperType.match(/^Enum$/i) !== null) {
              var enumMapper = mapper;
              payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);
            } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {
              payload = serializeDateTypes(mapperType, object, objectName);
            } else if (mapperType.match(/^ByteArray$/i) !== null) {
              payload = serializeByteArrayType(objectName, object);
            } else if (mapperType.match(/^Base64Url$/i) !== null) {
              payload = serializeBase64UrlType(objectName, object);
            } else if (mapperType.match(/^Sequence$/i) !== null) {
              payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
            } else if (mapperType.match(/^Dictionary$/i) !== null) {
              payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
            } else if (mapperType.match(/^Composite$/i) !== null) {
              payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
            }
          }

          return payload;
        }
        /**
         * Deserialize the given object based on its metadata defined in the mapper.
         *
         * @param mapper - The mapper which defines the metadata of the serializable object.
         * @param responseBody - A valid Javascript entity to be deserialized.
         * @param objectName - Name of the deserialized object.
         * @param options - Controls behavior of XML parser and builder.
         * @returns A valid deserialized Javascript object.
         */

      }, {
        key: "deserialize",
        value: function deserialize(mapper, responseBody, objectName) {
          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

          var _a, _b, _c;

          var updatedOptions = {
            rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : "",
            includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,
            xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : _serializer.XML_CHARKEY
          };

          if (responseBody == undefined) {
            if (this.isXML && mapper.type.name === "Sequence" && !mapper.xmlIsWrapped) {
              // Edge case for empty XML non-wrapped lists. xml2js can't distinguish
              // between the list being empty versus being missing,
              // so let's do the more user-friendly thing and return an empty list.
              responseBody = [];
            } // specifically check for undefined as default value can be a falsey value `0, "", false, null`


            if (mapper.defaultValue !== undefined) {
              responseBody = mapper.defaultValue;
            }

            return responseBody;
          }

          var payload;
          var mapperType = mapper.type.name;

          if (!objectName) {
            objectName = mapper.serializedName;
          }

          if (mapperType.match(/^Composite$/i) !== null) {
            payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);
          } else {
            if (this.isXML) {
              var xmlCharKey = updatedOptions.xmlCharKey;
              var castResponseBody = responseBody;
              /**
               * If the mapper specifies this as a non-composite type value but the responseBody contains
               * both header ("$" i.e., XML_ATTRKEY) and body ("#" i.e., XML_CHARKEY) properties,
               * then just reduce the responseBody value to the body ("#" i.e., XML_CHARKEY) property.
               */

              if (castResponseBody[_serializer.XML_ATTRKEY] != undefined && castResponseBody[xmlCharKey] != undefined) {
                responseBody = castResponseBody[xmlCharKey];
              }
            }

            if (mapperType.match(/^Number$/i) !== null) {
              payload = parseFloat(responseBody);

              if (isNaN(payload)) {
                payload = responseBody;
              }
            } else if (mapperType.match(/^Boolean$/i) !== null) {
              if (responseBody === "true") {
                payload = true;
              } else if (responseBody === "false") {
                payload = false;
              } else {
                payload = responseBody;
              }
            } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {
              payload = responseBody;
            } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {
              payload = new Date(responseBody);
            } else if (mapperType.match(/^UnixTime$/i) !== null) {
              payload = unixTimeToDate(responseBody);
            } else if (mapperType.match(/^ByteArray$/i) !== null) {
              payload = base64.decodeString(responseBody);
            } else if (mapperType.match(/^Base64Url$/i) !== null) {
              payload = base64UrlToByteArray(responseBody);
            } else if (mapperType.match(/^Sequence$/i) !== null) {
              payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);
            } else if (mapperType.match(/^Dictionary$/i) !== null) {
              payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);
            }
          }

          if (mapper.isConstant) {
            payload = mapper.defaultValue;
          }

          return payload;
        }
      }]);

      return Serializer;
    }();

    exports.Serializer = Serializer;

    function trimEnd(str, ch) {
      var len = str.length;

      while (len - 1 >= 0 && str[len - 1] === ch) {
        --len;
      }

      return str.substr(0, len);
    }

    function bufferToBase64Url(buffer) {
      if (!buffer) {
        return undefined;
      }

      if (!(buffer instanceof Uint8Array)) {
        throw new Error("Please provide an input of type Uint8Array for converting to Base64Url.");
      } // Uint8Array to Base64.


      var str = base64.encodeByteArray(buffer); // Base64 to Base64Url.

      return trimEnd(str, "=").replace(/\+/g, "-").replace(/\//g, "_");
    }

    function base64UrlToByteArray(str) {
      if (!str) {
        return undefined;
      }

      if (str && typeof str.valueOf() !== "string") {
        throw new Error("Please provide an input of type string for converting to Uint8Array");
      } // Base64Url to Base64.


      str = str.replace(/-/g, "+").replace(/_/g, "/"); // Base64 to Uint8Array.

      return base64.decodeString(str);
    }

    function splitSerializeName(prop) {
      var classes = [];
      var partialclass = "";

      if (prop) {
        var subwords = prop.split(".");

        var _iterator = _createForOfIteratorHelper(subwords),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var item = _step.value;

            if (item.charAt(item.length - 1) === "\\") {
              partialclass += item.substr(0, item.length - 1) + ".";
            } else {
              partialclass += item;
              classes.push(partialclass);
              partialclass = "";
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return classes;
    }

    function dateToUnixTime(d) {
      if (!d) {
        return undefined;
      }

      if (typeof d.valueOf() === "string") {
        d = new Date(d);
      }

      return Math.floor(d.getTime() / 1000);
    }

    function unixTimeToDate(n) {
      if (!n) {
        return undefined;
      }

      return new Date(n * 1000);
    }

    function serializeBasicTypes(typeName, objectName, value) {
      if (value !== null && value !== undefined) {
        if (typeName.match(/^Number$/i) !== null) {
          if (typeof value !== "number") {
            throw new Error("".concat(objectName, " with value ").concat(value, " must be of type number."));
          }
        } else if (typeName.match(/^String$/i) !== null) {
          if (typeof value.valueOf() !== "string") {
            throw new Error("".concat(objectName, " with value \"").concat(value, "\" must be of type string."));
          }
        } else if (typeName.match(/^Uuid$/i) !== null) {
          if (!(typeof value.valueOf() === "string" && utils.isValidUuid(value))) {
            throw new Error("".concat(objectName, " with value \"").concat(value, "\" must be of type string and a valid uuid."));
          }
        } else if (typeName.match(/^Boolean$/i) !== null) {
          if (typeof value !== "boolean") {
            throw new Error("".concat(objectName, " with value ").concat(value, " must be of type boolean."));
          }
        } else if (typeName.match(/^Stream$/i) !== null) {
          var objectType = _typeof(value);

          if (objectType !== "string" && objectType !== "function" && !(value instanceof ArrayBuffer) && !ArrayBuffer.isView(value) && !((typeof Blob === "function" || (typeof Blob === "undefined" ? "undefined" : _typeof(Blob)) === "object") && value instanceof Blob)) {
            throw new Error("".concat(objectName, " must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream."));
          }
        }
      }

      return value;
    }

    function serializeEnumType(objectName, allowedValues, value) {
      if (!allowedValues) {
        throw new Error("Please provide a set of allowedValues to validate ".concat(objectName, " as an Enum Type."));
      }

      var isPresent = allowedValues.some(function (item) {
        if (typeof item.valueOf() === "string") {
          return item.toLowerCase() === value.toLowerCase();
        }

        return item === value;
      });

      if (!isPresent) {
        throw new Error("".concat(value, " is not a valid value for ").concat(objectName, ". The valid values are: ").concat(JSON.stringify(allowedValues), "."));
      }

      return value;
    }

    function serializeByteArrayType(objectName, value) {
      var returnValue = "";

      if (value != undefined) {
        if (!(value instanceof Uint8Array)) {
          throw new Error("".concat(objectName, " must be of type Uint8Array."));
        }

        returnValue = base64.encodeByteArray(value);
      }

      return returnValue;
    }

    function serializeBase64UrlType(objectName, value) {
      var returnValue = "";

      if (value != undefined) {
        if (!(value instanceof Uint8Array)) {
          throw new Error("".concat(objectName, " must be of type Uint8Array."));
        }

        returnValue = bufferToBase64Url(value) || "";
      }

      return returnValue;
    }

    function serializeDateTypes(typeName, value, objectName) {
      if (value != undefined) {
        if (typeName.match(/^Date$/i) !== null) {
          if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
            throw new Error("".concat(objectName, " must be an instanceof Date or a string in ISO8601 format."));
          }

          value = value instanceof Date ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);
        } else if (typeName.match(/^DateTime$/i) !== null) {
          if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
            throw new Error("".concat(objectName, " must be an instanceof Date or a string in ISO8601 format."));
          }

          value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();
        } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {
          if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
            throw new Error("".concat(objectName, " must be an instanceof Date or a string in RFC-1123 format."));
          }

          value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();
        } else if (typeName.match(/^UnixTime$/i) !== null) {
          if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
            throw new Error("".concat(objectName, " must be an instanceof Date or a string in RFC-1123/ISO8601 format ") + "for it to be serialized in UnixTime/Epoch format.");
          }

          value = dateToUnixTime(value);
        } else if (typeName.match(/^TimeSpan$/i) !== null) {
          if (!utils.isDuration(value)) {
            throw new Error("".concat(objectName, " must be a string in ISO 8601 format. Instead was \"").concat(value, "\"."));
          }
        }
      }

      return value;
    }

    function serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {
      if (!Array.isArray(object)) {
        throw new Error("".concat(objectName, " must be of type Array."));
      }

      var elementType = mapper.type.element;

      if (!elementType || _typeof(elementType) !== "object") {
        throw new Error("element\" metadata for an Array must be defined in the " + "mapper and it must of type \"object\" in ".concat(objectName, "."));
      }

      var tempArray = [];

      for (var i = 0; i < object.length; i++) {
        var serializedValue = serializer.serialize(elementType, object[i], objectName, options);

        if (isXml && elementType.xmlNamespace) {
          var xmlnsKey = elementType.xmlNamespacePrefix ? "xmlns:".concat(elementType.xmlNamespacePrefix) : "xmlns";

          if (elementType.type.name === "Composite") {
            tempArray[i] = Object.assign({}, serializedValue);
            tempArray[i][_serializer.XML_ATTRKEY] = _defineProperty({}, xmlnsKey, elementType.xmlNamespace);
          } else {
            tempArray[i] = {};
            tempArray[i][options.xmlCharKey] = serializedValue;
            tempArray[i][_serializer.XML_ATTRKEY] = _defineProperty({}, xmlnsKey, elementType.xmlNamespace);
          }
        } else {
          tempArray[i] = serializedValue;
        }
      }

      return tempArray;
    }

    function serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {
      if (_typeof(object) !== "object") {
        throw new Error("".concat(objectName, " must be of type object."));
      }

      var valueType = mapper.type.value;

      if (!valueType || _typeof(valueType) !== "object") {
        throw new Error("\"value\" metadata for a Dictionary must be defined in the " + "mapper and it must of type \"object\" in ".concat(objectName, "."));
      }

      var tempDictionary = {};

      for (var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];
        var serializedValue = serializer.serialize(valueType, object[key], objectName, options); // If the element needs an XML namespace we need to add it within the $ property

        tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);
      } // Add the namespace to the root element if needed


      if (isXml && mapper.xmlNamespace) {
        var xmlnsKey = mapper.xmlNamespacePrefix ? "xmlns:".concat(mapper.xmlNamespacePrefix) : "xmlns";
        var result = tempDictionary;
        result[_serializer.XML_ATTRKEY] = _defineProperty({}, xmlnsKey, mapper.xmlNamespace);
        return result;
      }

      return tempDictionary;
    }
    /**
     * Resolves the additionalProperties property from a referenced mapper.
     * @param serializer - The serializer containing the entire set of mappers.
     * @param mapper - The composite mapper to resolve.
     * @param objectName - Name of the object being serialized.
     */


    function resolveAdditionalProperties(serializer, mapper, objectName) {
      var additionalProperties = mapper.type.additionalProperties;

      if (!additionalProperties && mapper.type.className) {
        var modelMapper = resolveReferencedMapper(serializer, mapper, objectName);
        return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;
      }

      return additionalProperties;
    }
    /**
     * Finds the mapper referenced by `className`.
     * @param serializer - The serializer containing the entire set of mappers
     * @param mapper - The composite mapper to resolve
     * @param objectName - Name of the object being serialized
     */


    function resolveReferencedMapper(serializer, mapper, objectName) {
      var className = mapper.type.className;

      if (!className) {
        throw new Error("Class name for model \"".concat(objectName, "\" is not provided in the mapper \"").concat(JSON.stringify(mapper, undefined, 2), "\"."));
      }

      return serializer.modelMappers[className];
    }
    /**
     * Resolves a composite mapper's modelProperties.
     * @param serializer - The serializer containing the entire set of mappers
     * @param mapper - The composite mapper to resolve
     */


    function resolveModelProperties(serializer, mapper, objectName) {
      var modelProps = mapper.type.modelProperties;

      if (!modelProps) {
        var modelMapper = resolveReferencedMapper(serializer, mapper, objectName);

        if (!modelMapper) {
          throw new Error("mapper() cannot be null or undefined for model \"".concat(mapper.type.className, "\"."));
        }

        modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;

        if (!modelProps) {
          throw new Error("modelProperties cannot be null or undefined in the " + "mapper \"".concat(JSON.stringify(modelMapper), "\" of type \"").concat(mapper.type.className, "\" for object \"").concat(objectName, "\"."));
        }
      }

      return modelProps;
    }

    function serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {
      if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
        mapper = getPolymorphicMapper(serializer, mapper, object, "clientName");
      }

      if (object != undefined) {
        var payload = {};
        var modelProps = resolveModelProperties(serializer, mapper, objectName);

        for (var _i2 = 0, _Object$keys2 = Object.keys(modelProps); _i2 < _Object$keys2.length; _i2++) {
          var key = _Object$keys2[_i2];
          var propertyMapper = modelProps[key];

          if (propertyMapper.readOnly) {
            continue;
          }

          var propName = void 0;
          var parentObject = payload;

          if (serializer.isXML) {
            if (propertyMapper.xmlIsWrapped) {
              propName = propertyMapper.xmlName;
            } else {
              propName = propertyMapper.xmlElementName || propertyMapper.xmlName;
            }
          } else {
            var paths = splitSerializeName(propertyMapper.serializedName);
            propName = paths.pop();

            var _iterator2 = _createForOfIteratorHelper(paths),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var pathName = _step2.value;
                var childObject = parentObject[pathName];

                if (childObject == undefined && (object[key] != undefined || propertyMapper.defaultValue !== undefined)) {
                  parentObject[pathName] = {};
                }

                parentObject = parentObject[pathName];
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }

          if (parentObject != undefined) {
            if (isXml && mapper.xmlNamespace) {
              var xmlnsKey = mapper.xmlNamespacePrefix ? "xmlns:".concat(mapper.xmlNamespacePrefix) : "xmlns";
              parentObject[_serializer.XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[_serializer.XML_ATTRKEY]), _defineProperty({}, xmlnsKey, mapper.xmlNamespace));
            }

            var propertyObjectName = propertyMapper.serializedName !== "" ? objectName + "." + propertyMapper.serializedName : objectName;
            var toSerialize = object[key];
            var polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);

            if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && toSerialize == undefined) {
              toSerialize = mapper.serializedName;
            }

            var serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);

            if (serializedValue !== undefined && propName != undefined) {
              var value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);

              if (isXml && propertyMapper.xmlIsAttribute) {
                // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.
                // This keeps things simple while preventing name collision
                // with names in user documents.
                parentObject[_serializer.XML_ATTRKEY] = parentObject[_serializer.XML_ATTRKEY] || {};
                parentObject[_serializer.XML_ATTRKEY][propName] = serializedValue;
              } else if (isXml && propertyMapper.xmlIsWrapped) {
                parentObject[propName] = _defineProperty({}, propertyMapper.xmlElementName, value);
              } else {
                parentObject[propName] = value;
              }
            }
          }
        }

        var additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);

        if (additionalPropertiesMapper) {
          var propNames = Object.keys(modelProps);

          var _loop = function _loop(clientPropName) {
            var isAdditionalProperty = propNames.every(function (pn) {
              return pn !== clientPropName;
            });

            if (isAdditionalProperty) {
              payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '["' + clientPropName + '"]', options);
            }
          };

          for (var clientPropName in object) {
            _loop(clientPropName);
          }
        }

        return payload;
      }

      return object;
    }

    function getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {
      if (!isXml || !propertyMapper.xmlNamespace) {
        return serializedValue;
      }

      var xmlnsKey = propertyMapper.xmlNamespacePrefix ? "xmlns:".concat(propertyMapper.xmlNamespacePrefix) : "xmlns";

      var xmlNamespace = _defineProperty({}, xmlnsKey, propertyMapper.xmlNamespace);

      if (["Composite"].includes(propertyMapper.type.name)) {
        if (serializedValue[_serializer.XML_ATTRKEY]) {
          return serializedValue;
        } else {
          var _result = Object.assign({}, serializedValue);

          _result[_serializer.XML_ATTRKEY] = xmlNamespace;
          return _result;
        }
      }

      var result = {};
      result[options.xmlCharKey] = serializedValue;
      result[_serializer.XML_ATTRKEY] = xmlNamespace;
      return result;
    }

    function isSpecialXmlProperty(propertyName, options) {
      return [_serializer.XML_ATTRKEY, options.xmlCharKey].includes(propertyName);
    }

    function deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {
      var _a;

      if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
        mapper = getPolymorphicMapper(serializer, mapper, responseBody, "serializedName");
      }

      var modelProps = resolveModelProperties(serializer, mapper, objectName);
      var instance = {};
      var handledPropertyNames = [];

      for (var _i3 = 0, _Object$keys3 = Object.keys(modelProps); _i3 < _Object$keys3.length; _i3++) {
        var key = _Object$keys3[_i3];
        var propertyMapper = modelProps[key];
        var paths = splitSerializeName(modelProps[key].serializedName);
        handledPropertyNames.push(paths[0]);
        var serializedName = propertyMapper.serializedName,
            xmlName = propertyMapper.xmlName,
            xmlElementName = propertyMapper.xmlElementName;
        var propertyObjectName = objectName;

        if (serializedName !== "" && serializedName !== undefined) {
          propertyObjectName = objectName + "." + serializedName;
        }

        var headerCollectionPrefix = propertyMapper.headerCollectionPrefix;

        if (headerCollectionPrefix) {
          var dictionary = {};

          for (var _i4 = 0, _Object$keys4 = Object.keys(responseBody); _i4 < _Object$keys4.length; _i4++) {
            var headerKey = _Object$keys4[_i4];

            if (headerKey.startsWith(headerCollectionPrefix)) {
              dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);
            }

            handledPropertyNames.push(headerKey);
          }

          instance[key] = dictionary;
        } else if (serializer.isXML) {
          if (propertyMapper.xmlIsAttribute && responseBody[_serializer.XML_ATTRKEY]) {
            instance[key] = serializer.deserialize(propertyMapper, responseBody[_serializer.XML_ATTRKEY][xmlName], propertyObjectName, options);
          } else {
            var propertyName = xmlElementName || xmlName || serializedName;

            if (propertyMapper.xmlIsWrapped) {
              /* a list of <xmlElementName> wrapped by <xmlName>
                For the xml example below
                  <Cors>
                    <CorsRule>...</CorsRule>
                    <CorsRule>...</CorsRule>
                  </Cors>
                the responseBody has
                  {
                    Cors: {
                      CorsRule: [{...}, {...}]
                    }
                  }
                xmlName is "Cors" and xmlElementName is"CorsRule".
              */
              var wrapped = responseBody[xmlName];
              var elementList = (_a = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _a !== void 0 ? _a : [];
              instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);
            } else {
              var property = responseBody[propertyName];
              instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);
            }
          }
        } else {
          // deserialize the property if it is present in the provided responseBody instance
          var propertyInstance = void 0;
          var res = responseBody; // traversing the object step by step.

          var _iterator3 = _createForOfIteratorHelper(paths),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var item = _step3.value;
              if (!res) break;
              res = res[item];
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }

          propertyInstance = res;
          var polymorphicDiscriminator = mapper.type.polymorphicDiscriminator; // checking that the model property name (key)(ex: "fishtype") and the
          // clientName of the polymorphicDiscriminator {metadata} (ex: "fishtype")
          // instead of the serializedName of the polymorphicDiscriminator (ex: "fish.type")
          // is a better approach. The generator is not consistent with escaping '\.' in the
          // serializedName of the property (ex: "fish\.type") that is marked as polymorphic discriminator
          // and the serializedName of the metadata polymorphicDiscriminator (ex: "fish.type"). However,
          // the clientName transformation of the polymorphicDiscriminator (ex: "fishtype") and
          // the transformation of model property name (ex: "fishtype") is done consistently.
          // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.

          if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && propertyInstance == undefined) {
            propertyInstance = mapper.serializedName;
          }

          var serializedValue = void 0; // paging

          if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === "") {
            propertyInstance = responseBody[key];
            var arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options); // Copy over any properties that have already been added into the instance, where they do
            // not exist on the newly de-serialized array

            for (var _i5 = 0, _Object$entries = Object.entries(instance); _i5 < _Object$entries.length; _i5++) {
              var _Object$entries$_i = _slicedToArray(_Object$entries[_i5], 2),
                  k = _Object$entries$_i[0],
                  v = _Object$entries$_i[1];

              if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {
                arrayInstance[k] = v;
              }
            }

            instance = arrayInstance;
          } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {
            serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
            instance[key] = serializedValue;
          }
        }
      }

      var additionalPropertiesMapper = mapper.type.additionalProperties;

      if (additionalPropertiesMapper) {
        var isAdditionalProperty = function isAdditionalProperty(responsePropName) {
          for (var clientPropName in modelProps) {
            var _paths = splitSerializeName(modelProps[clientPropName].serializedName);

            if (_paths[0] === responsePropName) {
              return false;
            }
          }

          return true;
        };

        for (var responsePropName in responseBody) {
          if (isAdditionalProperty(responsePropName)) {
            instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '["' + responsePropName + '"]', options);
          }
        }
      } else if (responseBody) {
        for (var _i6 = 0, _Object$keys5 = Object.keys(responseBody); _i6 < _Object$keys5.length; _i6++) {
          var _key = _Object$keys5[_i6];

          if (instance[_key] === undefined && !handledPropertyNames.includes(_key) && !isSpecialXmlProperty(_key, options)) {
            instance[_key] = responseBody[_key];
          }
        }
      }

      return instance;
    }

    function deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {
      var value = mapper.type.value;

      if (!value || _typeof(value) !== "object") {
        throw new Error("\"value\" metadata for a Dictionary must be defined in the " + "mapper and it must of type \"object\" in ".concat(objectName));
      }

      if (responseBody) {
        var tempDictionary = {};

        for (var _i7 = 0, _Object$keys6 = Object.keys(responseBody); _i7 < _Object$keys6.length; _i7++) {
          var key = _Object$keys6[_i7];
          tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);
        }

        return tempDictionary;
      }

      return responseBody;
    }

    function deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {
      var element = mapper.type.element;

      if (!element || _typeof(element) !== "object") {
        throw new Error("element\" metadata for an Array must be defined in the " + "mapper and it must of type \"object\" in ".concat(objectName));
      }

      if (responseBody) {
        if (!Array.isArray(responseBody)) {
          // xml2js will interpret a single element array as just the element, so force it to be an array
          responseBody = [responseBody];
        }

        var tempArray = [];

        for (var i = 0; i < responseBody.length; i++) {
          tempArray[i] = serializer.deserialize(element, responseBody[i], "".concat(objectName, "[").concat(i, "]"), options);
        }

        return tempArray;
      }

      return responseBody;
    }

    function getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {
      var polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);

      if (polymorphicDiscriminator) {
        var discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];

        if (discriminatorName != undefined) {
          var discriminatorValue = object[discriminatorName];

          if (discriminatorValue != undefined) {
            var typeName = mapper.type.uberParent || mapper.type.className;
            var indexDiscriminator = discriminatorValue === typeName ? discriminatorValue : typeName + "." + discriminatorValue;
            var polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];

            if (polymorphicMapper) {
              mapper = polymorphicMapper;
            }
          }
        }
      }

      return mapper;
    }

    function getPolymorphicDiscriminatorRecursively(serializer, mapper) {
      return mapper.type.polymorphicDiscriminator || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);
    }

    function getPolymorphicDiscriminatorSafely(serializer, typeName) {
      return typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator;
    }
    /**
     * Utility function that serializes an object that might contain binary information into a plain object, array or a string.
     */


    function serializeObject(toSerialize) {
      var castToSerialize = toSerialize;
      if (toSerialize == undefined) return undefined;

      if (toSerialize instanceof Uint8Array) {
        toSerialize = base64.encodeByteArray(toSerialize);
        return toSerialize;
      } else if (toSerialize instanceof Date) {
        return toSerialize.toISOString();
      } else if (Array.isArray(toSerialize)) {
        var array = [];

        for (var i = 0; i < toSerialize.length; i++) {
          array.push(serializeObject(toSerialize[i]));
        }

        return array;
      } else if (_typeof(toSerialize) === "object") {
        var dictionary = {};

        for (var property in toSerialize) {
          dictionary[property] = serializeObject(castToSerialize[property]);
        }

        return dictionary;
      }

      return toSerialize;
    }
    /**
     * Utility function to create a K:V from a list of strings
     */


    function strEnum(o) {
      var result = {};

      var _iterator4 = _createForOfIteratorHelper(o),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var key = _step4.value;
          result[key] = key;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return result;
    }
    /**
     * String enum containing the string types of property mappers.
     */
    // eslint-disable-next-line @typescript-eslint/no-redeclare


    var MapperType = strEnum(["Base64Url", "Boolean", "ByteArray", "Composite", "Date", "DateTime", "DateTimeRfc1123", "Dictionary", "Enum", "Number", "Object", "Sequence", "String", "Stream", "TimeSpan", "UnixTime"]);
    exports.MapperType = MapperType;
  }, {
    "./util/base64": "../node_modules/@azure/core-http/dist-esm/src/util/base64.browser.js",
    "./util/utils": "../node_modules/@azure/core-http/dist-esm/src/util/utils.js",
    "./util/serializer.common": "../node_modules/@azure/core-http/dist-esm/src/util/serializer.common.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/webResource.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebResource = void 0;
    exports.isWebResourceLike = isWebResourceLike;

    var _httpHeaders = require("./httpHeaders");

    var _serializer = require("./serializer");

    var _utils = require("./util/utils");

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function isWebResourceLike(object) {
      if (object && _typeof(object) === "object") {
        var castObject = object;

        if (typeof castObject.url === "string" && typeof castObject.method === "string" && _typeof(castObject.headers) === "object" && (0, _httpHeaders.isHttpHeadersLike)(castObject.headers) && typeof castObject.validateRequestProperties === "function" && typeof castObject.prepare === "function" && typeof castObject.clone === "function") {
          return true;
        }
      }

      return false;
    }
    /**
     * Creates a new WebResource object.
     *
     * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary
     * properties to initiate a request.
     */


    var WebResource = /*#__PURE__*/function () {
      function WebResource(url, method, body, query, headers, streamResponseBody, withCredentials, abortSignal, timeout, onUploadProgress, onDownloadProgress, proxySettings, keepAlive, decompressResponse, streamResponseStatusCodes) {
        _classCallCheck(this, WebResource);

        this.streamResponseBody = streamResponseBody;
        this.streamResponseStatusCodes = streamResponseStatusCodes;
        this.url = url || "";
        this.method = method || "GET";
        this.headers = (0, _httpHeaders.isHttpHeadersLike)(headers) ? headers : new _httpHeaders.HttpHeaders(headers);
        this.body = body;
        this.query = query;
        this.formData = undefined;
        this.withCredentials = withCredentials || false;
        this.abortSignal = abortSignal;
        this.timeout = timeout || 0;
        this.onUploadProgress = onUploadProgress;
        this.onDownloadProgress = onDownloadProgress;
        this.proxySettings = proxySettings;
        this.keepAlive = keepAlive;
        this.decompressResponse = decompressResponse;
        this.requestId = this.headers.get("x-ms-client-request-id") || (0, _utils.generateUuid)();
      }
      /**
       * Validates that the required properties such as method, url, headers["Content-Type"],
       * headers["accept-language"] are defined. It will throw an error if one of the above
       * mentioned properties are not defined.
       */


      _createClass(WebResource, [{
        key: "validateRequestProperties",
        value: function validateRequestProperties() {
          if (!this.method) {
            throw new Error("WebResource.method is required.");
          }

          if (!this.url) {
            throw new Error("WebResource.url is required.");
          }
        }
        /**
         * Prepares the request.
         * @param options - Options to provide for preparing the request.
         * @returns Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.
         */

      }, {
        key: "prepare",
        value: function prepare(options) {
          if (!options) {
            throw new Error("options object is required");
          }

          if (options.method === undefined || options.method === null || typeof options.method.valueOf() !== "string") {
            throw new Error("options.method must be a string.");
          }

          if (options.url && options.pathTemplate) {
            throw new Error("options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.");
          }

          if ((options.pathTemplate === undefined || options.pathTemplate === null || typeof options.pathTemplate.valueOf() !== "string") && (options.url === undefined || options.url === null || typeof options.url.valueOf() !== "string")) {
            throw new Error("Please provide exactly one of options.pathTemplate or options.url.");
          } // set the url if it is provided.


          if (options.url) {
            if (typeof options.url !== "string") {
              throw new Error('options.url must be of type "string".');
            }

            this.url = options.url;
          } // set the method


          if (options.method) {
            var validMethods = ["GET", "PUT", "HEAD", "DELETE", "OPTIONS", "POST", "PATCH", "TRACE"];

            if (validMethods.indexOf(options.method.toUpperCase()) === -1) {
              throw new Error('The provided method "' + options.method + '" is invalid. Supported HTTP methods are: ' + JSON.stringify(validMethods));
            }
          }

          this.method = options.method.toUpperCase(); // construct the url if path template is provided

          if (options.pathTemplate) {
            var pathTemplate = options.pathTemplate,
                pathParameters = options.pathParameters;

            if (typeof pathTemplate !== "string") {
              throw new Error('options.pathTemplate must be of type "string".');
            }

            if (!options.baseUrl) {
              options.baseUrl = "https://management.azure.com";
            }

            var baseUrl = options.baseUrl;
            var url = baseUrl + (baseUrl.endsWith("/") ? "" : "/") + (pathTemplate.startsWith("/") ? pathTemplate.slice(1) : pathTemplate);
            var segments = url.match(/({[\w-]*\s*[\w-]*})/gi);

            if (segments && segments.length) {
              if (!pathParameters) {
                throw new Error("pathTemplate: ".concat(pathTemplate, " has been provided. Hence, options.pathParameters must also be provided."));
              }

              segments.forEach(function (item) {
                var pathParamName = item.slice(1, -1);
                var pathParam = pathParameters[pathParamName];

                if (pathParam === null || pathParam === undefined || !(typeof pathParam === "string" || _typeof(pathParam) === "object")) {
                  var stringifiedPathParameters = JSON.stringify(pathParameters, undefined, 2);
                  throw new Error("pathTemplate: ".concat(pathTemplate, " contains the path parameter ").concat(pathParamName) + " however, it is not present in parameters: ".concat(stringifiedPathParameters, ".") + "The value of the path parameter can either be a \"string\" of the form { ".concat(pathParamName, ": \"some sample value\" } or ") + "it can be an \"object\" of the form { \"".concat(pathParamName, "\": { value: \"some sample value\", skipUrlEncoding: true } }."));
                }

                if (typeof pathParam.valueOf() === "string") {
                  url = url.replace(item, encodeURIComponent(pathParam));
                }

                if (_typeof(pathParam.valueOf()) === "object") {
                  if (!pathParam.value) {
                    throw new Error("options.pathParameters[".concat(pathParamName, "] is of type \"object\" but it does not contain a \"value\" property."));
                  }

                  if (pathParam.skipUrlEncoding) {
                    url = url.replace(item, pathParam.value);
                  } else {
                    url = url.replace(item, encodeURIComponent(pathParam.value));
                  }
                }
              });
            }

            this.url = url;
          } // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.


          if (options.queryParameters) {
            var queryParameters = options.queryParameters;

            if (_typeof(queryParameters) !== "object") {
              throw new Error("options.queryParameters must be of type object. It should be a JSON object " + "of \"query-parameter-name\" as the key and the \"query-parameter-value\" as the value. " + "The \"query-parameter-value\" may be fo type \"string\" or an \"object\" of the form { value: \"query-parameter-value\", skipUrlEncoding: true }.");
            } // append question mark if it is not present in the url


            if (this.url && this.url.indexOf("?") === -1) {
              this.url += "?";
            } // construct queryString


            var queryParams = []; // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().

            this.query = {};

            for (var queryParamName in queryParameters) {
              var queryParam = queryParameters[queryParamName];

              if (queryParam) {
                if (typeof queryParam === "string") {
                  queryParams.push(queryParamName + "=" + encodeURIComponent(queryParam));
                  this.query[queryParamName] = encodeURIComponent(queryParam);
                } else if (_typeof(queryParam) === "object") {
                  if (!queryParam.value) {
                    throw new Error("options.queryParameters[".concat(queryParamName, "] is of type \"object\" but it does not contain a \"value\" property."));
                  }

                  if (queryParam.skipUrlEncoding) {
                    queryParams.push(queryParamName + "=" + queryParam.value);
                    this.query[queryParamName] = queryParam.value;
                  } else {
                    queryParams.push(queryParamName + "=" + encodeURIComponent(queryParam.value));
                    this.query[queryParamName] = encodeURIComponent(queryParam.value);
                  }
                }
              }
            } // end-of-for
            // append the queryString


            this.url += queryParams.join("&");
          } // add headers to the request if they are provided


          if (options.headers) {
            var headers = options.headers;

            for (var _i = 0, _Object$keys = Object.keys(options.headers); _i < _Object$keys.length; _i++) {
              var headerName = _Object$keys[_i];
              this.headers.set(headerName, headers[headerName]);
            }
          } // ensure accept-language is set correctly


          if (!this.headers.get("accept-language")) {
            this.headers.set("accept-language", "en-US");
          } // ensure the request-id is set correctly


          if (!this.headers.get("x-ms-client-request-id") && !options.disableClientRequestId) {
            this.headers.set("x-ms-client-request-id", this.requestId);
          } // default


          if (!this.headers.get("Content-Type")) {
            this.headers.set("Content-Type", "application/json; charset=utf-8");
          } // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicitly


          this.body = options.body;

          if (options.body !== undefined && options.body !== null) {
            // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.
            if (options.bodyIsStream) {
              if (!this.headers.get("Transfer-Encoding")) {
                this.headers.set("Transfer-Encoding", "chunked");
              }

              if (this.headers.get("Content-Type") !== "application/octet-stream") {
                this.headers.set("Content-Type", "application/octet-stream");
              }
            } else {
              if (options.serializationMapper) {
                this.body = new _serializer.Serializer(options.mappers).serialize(options.serializationMapper, options.body, "requestBody");
              }

              if (!options.disableJsonStringifyOnBody) {
                this.body = JSON.stringify(options.body);
              }
            }
          }

          if (options.spanOptions) {
            this.spanOptions = options.spanOptions;
          }

          if (options.tracingContext) {
            this.tracingContext = options.tracingContext;
          }

          this.abortSignal = options.abortSignal;
          this.onDownloadProgress = options.onDownloadProgress;
          this.onUploadProgress = options.onUploadProgress;
          return this;
        }
        /**
         * Clone this WebResource HTTP request object.
         * @returns The clone of this WebResource HTTP request object.
         */

      }, {
        key: "clone",
        value: function clone() {
          var result = new WebResource(this.url, this.method, this.body, this.query, this.headers && this.headers.clone(), this.streamResponseBody, this.withCredentials, this.abortSignal, this.timeout, this.onUploadProgress, this.onDownloadProgress, this.proxySettings, this.keepAlive, this.decompressResponse, this.streamResponseStatusCodes);

          if (this.formData) {
            result.formData = this.formData;
          }

          if (this.operationSpec) {
            result.operationSpec = this.operationSpec;
          }

          if (this.shouldDeserialize) {
            result.shouldDeserialize = this.shouldDeserialize;
          }

          if (this.operationResponseGetter) {
            result.operationResponseGetter = this.operationResponseGetter;
          }

          return result;
        }
      }]);

      return WebResource;
    }();

    exports.WebResource = WebResource;
  }, {
    "./httpHeaders": "../node_modules/@azure/core-http/dist-esm/src/httpHeaders.js",
    "./serializer": "../node_modules/@azure/core-http/dist-esm/src/serializer.js",
    "./util/utils": "../node_modules/@azure/core-http/dist-esm/src/util/utils.js"
  }],
  "../node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AbortSignal = void 0;
    exports.abortSignal = abortSignal;

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    /// <reference path="../shims-public.d.ts" />


    var listenersMap = new WeakMap();
    var abortedMap = new WeakMap();
    /**
     * An aborter instance implements AbortSignal interface, can abort HTTP requests.
     *
     * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.
     * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation
     * cannot or will not ever be cancelled.
     *
     * @example
     * Abort without timeout
     * ```ts
     * await doAsyncWork(AbortSignal.none);
     * ```
     */

    var AbortSignal = /*#__PURE__*/function () {
      function AbortSignal() {
        _classCallCheck(this, AbortSignal);
        /**
         * onabort event listener.
         */


        this.onabort = null;
        listenersMap.set(this, []);
        abortedMap.set(this, false);
      }
      /**
       * Status of whether aborted or not.
       *
       * @readonly
       */


      _createClass(AbortSignal, [{
        key: "aborted",
        get: function get() {
          if (!abortedMap.has(this)) {
            throw new TypeError("Expected `this` to be an instance of AbortSignal.");
          }

          return abortedMap.get(this);
        }
        /**
         * Creates a new AbortSignal instance that will never be aborted.
         *
         * @readonly
         */

      }, {
        key: "addEventListener",
        value:
        /**
         * Added new "abort" event listener, only support "abort" event.
         *
         * @param _type - Only support "abort" event
         * @param listener - The listener to be added
         */
        function addEventListener( // tslint:disable-next-line:variable-name
        _type, listener) {
          if (!listenersMap.has(this)) {
            throw new TypeError("Expected `this` to be an instance of AbortSignal.");
          }

          var listeners = listenersMap.get(this);
          listeners.push(listener);
        }
        /**
         * Remove "abort" event listener, only support "abort" event.
         *
         * @param _type - Only support "abort" event
         * @param listener - The listener to be removed
         */

      }, {
        key: "removeEventListener",
        value: function removeEventListener( // tslint:disable-next-line:variable-name
        _type, listener) {
          if (!listenersMap.has(this)) {
            throw new TypeError("Expected `this` to be an instance of AbortSignal.");
          }

          var listeners = listenersMap.get(this);
          var index = listeners.indexOf(listener);

          if (index > -1) {
            listeners.splice(index, 1);
          }
        }
        /**
         * Dispatches a synthetic event to the AbortSignal.
         */

      }, {
        key: "dispatchEvent",
        value: function dispatchEvent(_event) {
          throw new Error("This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.");
        }
      }], [{
        key: "none",
        get: function get() {
          return new AbortSignal();
        }
      }]);

      return AbortSignal;
    }();
    /**
     * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.
     * Will try to trigger abort event for all linked AbortSignal nodes.
     *
     * - If there is a timeout, the timer will be cancelled.
     * - If aborted is true, nothing will happen.
     *
     * @internal
     */
    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters


    exports.AbortSignal = AbortSignal;

    function abortSignal(signal) {
      if (signal.aborted) {
        return;
      }

      if (signal.onabort) {
        signal.onabort.call(signal);
      }

      var listeners = listenersMap.get(signal);

      if (listeners) {
        // Create a copy of listeners so mutations to the array
        // (e.g. via removeListener calls) don't affect the listeners
        // we invoke.
        listeners.slice().forEach(function (listener) {
          listener.call(signal, {
            type: "abort"
          });
        });
      }

      abortedMap.set(signal, true);
    }
  }, {}],
  "../node_modules/@azure/abort-controller/dist-esm/src/AbortController.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AbortError = exports.AbortController = void 0;

    var _AbortSignal = require("./AbortSignal");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? new Map() : undefined;

      _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;

        if (typeof Class !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }

        if (typeof _cache !== "undefined") {
          if (_cache.has(Class)) return _cache.get(Class);

          _cache.set(Class, Wrapper);
        }

        function Wrapper() {
          return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }

        Wrapper.prototype = Object.create(Class.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        return _setPrototypeOf(Wrapper, Class);
      };

      return _wrapNativeSuper(Class);
    }

    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct.bind();
      } else {
        _construct = function _construct(Parent, args, Class) {
          var a = [null];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class) _setPrototypeOf(instance, Class.prototype);
          return instance;
        };
      }

      return _construct.apply(null, arguments);
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * This error is thrown when an asynchronous operation has been aborted.
     * Check for this error by testing the `name` that the name property of the
     * error matches `"AbortError"`.
     *
     * @example
     * ```ts
     * const controller = new AbortController();
     * controller.abort();
     * try {
     *   doAsyncWork(controller.signal)
     * } catch (e) {
     *   if (e.name === 'AbortError') {
     *     // handle abort error here.
     *   }
     * }
     * ```
     */


    var AbortError = /*#__PURE__*/function (_Error) {
      _inherits(AbortError, _Error);

      var _super = _createSuper(AbortError);

      function AbortError(message) {
        var _this;

        _classCallCheck(this, AbortError);

        _this = _super.call(this, message);
        _this.name = "AbortError";
        return _this;
      }

      return _createClass(AbortError);
    }( /*#__PURE__*/_wrapNativeSuper(Error));
    /**
     * An AbortController provides an AbortSignal and the associated controls to signal
     * that an asynchronous operation should be aborted.
     *
     * @example
     * Abort an operation when another event fires
     * ```ts
     * const controller = new AbortController();
     * const signal = controller.signal;
     * doAsyncWork(signal);
     * button.addEventListener('click', () => controller.abort());
     * ```
     *
     * @example
     * Share aborter cross multiple operations in 30s
     * ```ts
     * // Upload the same data to 2 different data centers at the same time,
     * // abort another when any of them is finished
     * const controller = AbortController.withTimeout(30 * 1000);
     * doAsyncWork(controller.signal).then(controller.abort);
     * doAsyncWork(controller.signal).then(controller.abort);
     *```
     *
     * @example
     * Cascaded aborting
     * ```ts
     * // All operations can't take more than 30 seconds
     * const aborter = Aborter.timeout(30 * 1000);
     *
     * // Following 2 operations can't take more than 25 seconds
     * await doAsyncWork(aborter.withTimeout(25 * 1000));
     * await doAsyncWork(aborter.withTimeout(25 * 1000));
     * ```
     */


    exports.AbortError = AbortError;

    var AbortController = /*#__PURE__*/function () {
      // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
      function AbortController(parentSignals) {
        var _this2 = this;

        _classCallCheck(this, AbortController);

        this._signal = new _AbortSignal.AbortSignal();

        if (!parentSignals) {
          return;
        } // coerce parentSignals into an array


        if (!Array.isArray(parentSignals)) {
          // eslint-disable-next-line prefer-rest-params
          parentSignals = arguments;
        }

        var _iterator = _createForOfIteratorHelper(parentSignals),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var parentSignal = _step.value; // if the parent signal has already had abort() called,
            // then call abort on this signal as well.

            if (parentSignal.aborted) {
              this.abort();
            } else {
              // when the parent signal aborts, this signal should as well.
              parentSignal.addEventListener("abort", function () {
                _this2.abort();
              });
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      /**
       * The AbortSignal associated with this controller that will signal aborted
       * when the abort method is called on this controller.
       *
       * @readonly
       */


      _createClass(AbortController, [{
        key: "signal",
        get: function get() {
          return this._signal;
        }
        /**
         * Signal that any operations passed this controller's associated abort signal
         * to cancel any remaining work and throw an `AbortError`.
         */

      }, {
        key: "abort",
        value: function abort() {
          (0, _AbortSignal.abortSignal)(this._signal);
        }
        /**
         * Creates a new AbortSignal instance that will abort after the provided ms.
         * @param ms - Elapsed time in milliseconds to trigger an abort.
         */

      }], [{
        key: "timeout",
        value: function timeout(ms) {
          var signal = new _AbortSignal.AbortSignal();
          var timer = setTimeout(_AbortSignal.abortSignal, ms, signal); // Prevent the active Timer from keeping the Node.js event loop active.

          if (typeof timer.unref === "function") {
            timer.unref();
          }

          return signal;
        }
      }]);

      return AbortController;
    }();

    exports.AbortController = AbortController;
  }, {
    "./AbortSignal": "../node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js"
  }],
  "../node_modules/@azure/abort-controller/dist-esm/src/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "AbortController", {
      enumerable: true,
      get: function () {
        return _AbortController.AbortController;
      }
    });
    Object.defineProperty(exports, "AbortError", {
      enumerable: true,
      get: function () {
        return _AbortController.AbortError;
      }
    });
    Object.defineProperty(exports, "AbortSignal", {
      enumerable: true,
      get: function () {
        return _AbortSignal.AbortSignal;
      }
    });

    var _AbortController = require("./AbortController");

    var _AbortSignal = require("./AbortSignal");
  }, {
    "./AbortController": "../node_modules/@azure/abort-controller/dist-esm/src/AbortController.js",
    "./AbortSignal": "../node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/url.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.URLTokenizer = exports.URLToken = exports.URLQuery = exports.URLBuilder = void 0;
    exports.isAlphaNumericCharacter = isAlphaNumericCharacter;

    var _utils = require("./util/utils");

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /**
     * A class that handles the query portion of a URLBuilder.
     */


    var URLQuery = /*#__PURE__*/function () {
      function URLQuery() {
        _classCallCheck(this, URLQuery);

        this._rawQuery = {};
      }
      /**
       * Get whether or not there any query parameters in this URLQuery.
       */


      _createClass(URLQuery, [{
        key: "any",
        value: function any() {
          return Object.keys(this._rawQuery).length > 0;
        }
        /**
         * Get the keys of the query string.
         */

      }, {
        key: "keys",
        value: function keys() {
          return Object.keys(this._rawQuery);
        }
        /**
         * Set a query parameter with the provided name and value. If the parameterValue is undefined or
         * empty, then this will attempt to remove an existing query parameter with the provided
         * parameterName.
         */

      }, {
        key: "set",
        value: function set(parameterName, parameterValue) {
          var caseParameterValue = parameterValue;

          if (parameterName) {
            if (caseParameterValue !== undefined && caseParameterValue !== null) {
              var newValue = Array.isArray(caseParameterValue) ? caseParameterValue : caseParameterValue.toString();
              this._rawQuery[parameterName] = newValue;
            } else {
              delete this._rawQuery[parameterName];
            }
          }
        }
        /**
         * Get the value of the query parameter with the provided name. If no parameter exists with the
         * provided parameter name, then undefined will be returned.
         */

      }, {
        key: "get",
        value: function get(parameterName) {
          return parameterName ? this._rawQuery[parameterName] : undefined;
        }
        /**
         * Get the string representation of this query. The return value will not start with a "?".
         */

      }, {
        key: "toString",
        value: function toString() {
          var result = "";

          for (var parameterName in this._rawQuery) {
            if (result) {
              result += "&";
            }

            var parameterValue = this._rawQuery[parameterName];

            if (Array.isArray(parameterValue)) {
              var parameterStrings = [];

              var _iterator = _createForOfIteratorHelper(parameterValue),
                  _step;

              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  var parameterValueElement = _step.value;
                  parameterStrings.push("".concat(parameterName, "=").concat(parameterValueElement));
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }

              result += parameterStrings.join("&");
            } else {
              result += "".concat(parameterName, "=").concat(parameterValue);
            }
          }

          return result;
        }
        /**
         * Parse a URLQuery from the provided text.
         */

      }], [{
        key: "parse",
        value: function parse(text) {
          var result = new URLQuery();

          if (text) {
            if (text.startsWith("?")) {
              text = text.substring(1);
            }

            var currentState = "ParameterName";
            var parameterName = "";
            var parameterValue = "";

            for (var i = 0; i < text.length; ++i) {
              var currentCharacter = text[i];

              switch (currentState) {
                case "ParameterName":
                  switch (currentCharacter) {
                    case "=":
                      currentState = "ParameterValue";
                      break;

                    case "&":
                      parameterName = "";
                      parameterValue = "";
                      break;

                    default:
                      parameterName += currentCharacter;
                      break;
                  }

                  break;

                case "ParameterValue":
                  switch (currentCharacter) {
                    case "&":
                      result.set(parameterName, parameterValue);
                      parameterName = "";
                      parameterValue = "";
                      currentState = "ParameterName";
                      break;

                    default:
                      parameterValue += currentCharacter;
                      break;
                  }

                  break;

                default:
                  throw new Error("Unrecognized URLQuery parse state: " + currentState);
              }
            }

            if (currentState === "ParameterValue") {
              result.set(parameterName, parameterValue);
            }
          }

          return result;
        }
      }]);

      return URLQuery;
    }();
    /**
     * A class that handles creating, modifying, and parsing URLs.
     */


    exports.URLQuery = URLQuery;

    var URLBuilder = /*#__PURE__*/function () {
      function URLBuilder() {
        _classCallCheck(this, URLBuilder);
      }

      _createClass(URLBuilder, [{
        key: "setScheme",
        value:
        /**
         * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL
         * (such as a host, port, path, or query), those parts will be added to this URL as well.
         */
        function setScheme(scheme) {
          if (!scheme) {
            this._scheme = undefined;
          } else {
            this.set(scheme, "SCHEME");
          }
        }
        /**
         * Get the scheme that has been set in this URL.
         */

      }, {
        key: "getScheme",
        value: function getScheme() {
          return this._scheme;
        }
        /**
         * Set the host for this URL. If the provided host contains other parts of a URL (such as a
         * port, path, or query), those parts will be added to this URL as well.
         */

      }, {
        key: "setHost",
        value: function setHost(host) {
          if (!host) {
            this._host = undefined;
          } else {
            this.set(host, "SCHEME_OR_HOST");
          }
        }
        /**
         * Get the host that has been set in this URL.
         */

      }, {
        key: "getHost",
        value: function getHost() {
          return this._host;
        }
        /**
         * Set the port for this URL. If the provided port contains other parts of a URL (such as a
         * path or query), those parts will be added to this URL as well.
         */

      }, {
        key: "setPort",
        value: function setPort(port) {
          if (port === undefined || port === null || port === "") {
            this._port = undefined;
          } else {
            this.set(port.toString(), "PORT");
          }
        }
        /**
         * Get the port that has been set in this URL.
         */

      }, {
        key: "getPort",
        value: function getPort() {
          return this._port;
        }
        /**
         * Set the path for this URL. If the provided path contains a query, then it will be added to
         * this URL as well.
         */

      }, {
        key: "setPath",
        value: function setPath(path) {
          if (!path) {
            this._path = undefined;
          } else {
            var schemeIndex = path.indexOf("://");

            if (schemeIndex !== -1) {
              var schemeStart = path.lastIndexOf("/", schemeIndex); // Make sure to only grab the URL part of the path before setting the state back to SCHEME
              // this will handle cases such as "/a/b/c/https://microsoft.com" => "https://microsoft.com"

              this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), "SCHEME");
            } else {
              this.set(path, "PATH");
            }
          }
        }
        /**
         * Append the provided path to this URL's existing path. If the provided path contains a query,
         * then it will be added to this URL as well.
         */

      }, {
        key: "appendPath",
        value: function appendPath(path) {
          if (path) {
            var currentPath = this.getPath();

            if (currentPath) {
              if (!currentPath.endsWith("/")) {
                currentPath += "/";
              }

              if (path.startsWith("/")) {
                path = path.substring(1);
              }

              path = currentPath + path;
            }

            this.set(path, "PATH");
          }
        }
        /**
         * Get the path that has been set in this URL.
         */

      }, {
        key: "getPath",
        value: function getPath() {
          return this._path;
        }
        /**
         * Set the query in this URL.
         */

      }, {
        key: "setQuery",
        value: function setQuery(query) {
          if (!query) {
            this._query = undefined;
          } else {
            this._query = URLQuery.parse(query);
          }
        }
        /**
         * Set a query parameter with the provided name and value in this URL's query. If the provided
         * query parameter value is undefined or empty, then the query parameter will be removed if it
         * existed.
         */

      }, {
        key: "setQueryParameter",
        value: function setQueryParameter(queryParameterName, queryParameterValue) {
          if (queryParameterName) {
            if (!this._query) {
              this._query = new URLQuery();
            }

            this._query.set(queryParameterName, queryParameterValue);
          }
        }
        /**
         * Get the value of the query parameter with the provided query parameter name. If no query
         * parameter exists with the provided name, then undefined will be returned.
         */

      }, {
        key: "getQueryParameterValue",
        value: function getQueryParameterValue(queryParameterName) {
          return this._query ? this._query.get(queryParameterName) : undefined;
        }
        /**
         * Get the query in this URL.
         */

      }, {
        key: "getQuery",
        value: function getQuery() {
          return this._query ? this._query.toString() : undefined;
        }
        /**
         * Set the parts of this URL by parsing the provided text using the provided startState.
         */

      }, {
        key: "set",
        value: function set(text, startState) {
          var tokenizer = new URLTokenizer(text, startState);

          while (tokenizer.next()) {
            var token = tokenizer.current();
            var tokenPath = void 0;

            if (token) {
              switch (token.type) {
                case "SCHEME":
                  this._scheme = token.text || undefined;
                  break;

                case "HOST":
                  this._host = token.text || undefined;
                  break;

                case "PORT":
                  this._port = token.text || undefined;
                  break;

                case "PATH":
                  tokenPath = token.text || undefined;

                  if (!this._path || this._path === "/" || tokenPath !== "/") {
                    this._path = tokenPath;
                  }

                  break;

                case "QUERY":
                  this._query = URLQuery.parse(token.text);
                  break;

                default:
                  throw new Error("Unrecognized URLTokenType: ".concat(token.type));
              }
            }
          }
        }
        /**
         * Serializes the URL as a string.
         * @returns the URL as a string.
         */

      }, {
        key: "toString",
        value: function toString() {
          var result = "";

          if (this._scheme) {
            result += "".concat(this._scheme, "://");
          }

          if (this._host) {
            result += this._host;
          }

          if (this._port) {
            result += ":".concat(this._port);
          }

          if (this._path) {
            if (!this._path.startsWith("/")) {
              result += "/";
            }

            result += this._path;
          }

          if (this._query && this._query.any()) {
            result += "?".concat(this._query.toString());
          }

          return result;
        }
        /**
         * If the provided searchValue is found in this URLBuilder, then replace it with the provided
         * replaceValue.
         */

      }, {
        key: "replaceAll",
        value: function replaceAll(searchValue, replaceValue) {
          if (searchValue) {
            this.setScheme((0, _utils.replaceAll)(this.getScheme(), searchValue, replaceValue));
            this.setHost((0, _utils.replaceAll)(this.getHost(), searchValue, replaceValue));
            this.setPort((0, _utils.replaceAll)(this.getPort(), searchValue, replaceValue));
            this.setPath((0, _utils.replaceAll)(this.getPath(), searchValue, replaceValue));
            this.setQuery((0, _utils.replaceAll)(this.getQuery(), searchValue, replaceValue));
          }
        }
        /**
         * Parses a given string URL into a new {@link URLBuilder}.
         */

      }], [{
        key: "parse",
        value: function parse(text) {
          var result = new URLBuilder();
          result.set(text, "SCHEME_OR_HOST");
          return result;
        }
      }]);

      return URLBuilder;
    }();

    exports.URLBuilder = URLBuilder;

    var URLToken = /*#__PURE__*/function () {
      function URLToken(text, type) {
        _classCallCheck(this, URLToken);

        this.text = text;
        this.type = type;
      }

      _createClass(URLToken, null, [{
        key: "scheme",
        value: function scheme(text) {
          return new URLToken(text, "SCHEME");
        }
      }, {
        key: "host",
        value: function host(text) {
          return new URLToken(text, "HOST");
        }
      }, {
        key: "port",
        value: function port(text) {
          return new URLToken(text, "PORT");
        }
      }, {
        key: "path",
        value: function path(text) {
          return new URLToken(text, "PATH");
        }
      }, {
        key: "query",
        value: function query(text) {
          return new URLToken(text, "QUERY");
        }
      }]);

      return URLToken;
    }();
    /**
     * Get whether or not the provided character (single character string) is an alphanumeric (letter or
     * digit) character.
     */


    exports.URLToken = URLToken;

    function isAlphaNumericCharacter(character) {
      var characterCode = character.charCodeAt(0);
      return 48
      /* '0' */
      <= characterCode && characterCode <= 57
      /* '9' */
      || 65
      /* 'A' */
      <= characterCode && characterCode <= 90
      /* 'Z' */
      || 97
      /* 'a' */
      <= characterCode && characterCode <= 122
      /* 'z' */
      ;
    }
    /**
     * A class that tokenizes URL strings.
     */


    var URLTokenizer = /*#__PURE__*/function () {
      function URLTokenizer(_text, state) {
        _classCallCheck(this, URLTokenizer);

        this._text = _text;
        this._textLength = _text ? _text.length : 0;
        this._currentState = state !== undefined && state !== null ? state : "SCHEME_OR_HOST";
        this._currentIndex = 0;
      }
      /**
       * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer
       * hasn't started or has finished tokenizing.
       */


      _createClass(URLTokenizer, [{
        key: "current",
        value: function current() {
          return this._currentToken;
        }
        /**
         * Advance to the next URLToken and return whether or not a URLToken was found.
         */

      }, {
        key: "next",
        value: function next() {
          if (!hasCurrentCharacter(this)) {
            this._currentToken = undefined;
          } else {
            switch (this._currentState) {
              case "SCHEME":
                nextScheme(this);
                break;

              case "SCHEME_OR_HOST":
                nextSchemeOrHost(this);
                break;

              case "HOST":
                nextHost(this);
                break;

              case "PORT":
                nextPort(this);
                break;

              case "PATH":
                nextPath(this);
                break;

              case "QUERY":
                nextQuery(this);
                break;

              default:
                throw new Error("Unrecognized URLTokenizerState: ".concat(this._currentState));
            }
          }

          return !!this._currentToken;
        }
      }]);

      return URLTokenizer;
    }();
    /**
     * Read the remaining characters from this Tokenizer's character stream.
     */


    exports.URLTokenizer = URLTokenizer;

    function readRemaining(tokenizer) {
      var result = "";

      if (tokenizer._currentIndex < tokenizer._textLength) {
        result = tokenizer._text.substring(tokenizer._currentIndex);
        tokenizer._currentIndex = tokenizer._textLength;
      }

      return result;
    }
    /**
     * Whether or not this URLTokenizer has a current character.
     */


    function hasCurrentCharacter(tokenizer) {
      return tokenizer._currentIndex < tokenizer._textLength;
    }
    /**
     * Get the character in the text string at the current index.
     */


    function getCurrentCharacter(tokenizer) {
      return tokenizer._text[tokenizer._currentIndex];
    }
    /**
     * Advance to the character in text that is "step" characters ahead. If no step value is provided,
     * then step will default to 1.
     */


    function nextCharacter(tokenizer, step) {
      if (hasCurrentCharacter(tokenizer)) {
        if (!step) {
          step = 1;
        }

        tokenizer._currentIndex += step;
      }
    }
    /**
     * Starting with the current character, peek "charactersToPeek" number of characters ahead in this
     * Tokenizer's stream of characters.
     */


    function peekCharacters(tokenizer, charactersToPeek) {
      var endIndex = tokenizer._currentIndex + charactersToPeek;

      if (tokenizer._textLength < endIndex) {
        endIndex = tokenizer._textLength;
      }

      return tokenizer._text.substring(tokenizer._currentIndex, endIndex);
    }
    /**
     * Read characters from this Tokenizer until the end of the stream or until the provided condition
     * is false when provided the current character.
     */


    function readWhile(tokenizer, condition) {
      var result = "";

      while (hasCurrentCharacter(tokenizer)) {
        var currentCharacter = getCurrentCharacter(tokenizer);

        if (!condition(currentCharacter)) {
          break;
        } else {
          result += currentCharacter;
          nextCharacter(tokenizer);
        }
      }

      return result;
    }
    /**
     * Read characters from this Tokenizer until a non-alphanumeric character or the end of the
     * character stream is reached.
     */


    function readWhileLetterOrDigit(tokenizer) {
      return readWhile(tokenizer, function (character) {
        return isAlphaNumericCharacter(character);
      });
    }
    /**
     * Read characters from this Tokenizer until one of the provided terminating characters is read or
     * the end of the character stream is reached.
     */


    function readUntilCharacter(tokenizer) {
      for (var _len = arguments.length, terminatingCharacters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        terminatingCharacters[_key - 1] = arguments[_key];
      }

      return readWhile(tokenizer, function (character) {
        return terminatingCharacters.indexOf(character) === -1;
      });
    }

    function nextScheme(tokenizer) {
      var scheme = readWhileLetterOrDigit(tokenizer);
      tokenizer._currentToken = URLToken.scheme(scheme);

      if (!hasCurrentCharacter(tokenizer)) {
        tokenizer._currentState = "DONE";
      } else {
        tokenizer._currentState = "HOST";
      }
    }

    function nextSchemeOrHost(tokenizer) {
      var schemeOrHost = readUntilCharacter(tokenizer, ":", "/", "?");

      if (!hasCurrentCharacter(tokenizer)) {
        tokenizer._currentToken = URLToken.host(schemeOrHost);
        tokenizer._currentState = "DONE";
      } else if (getCurrentCharacter(tokenizer) === ":") {
        if (peekCharacters(tokenizer, 3) === "://") {
          tokenizer._currentToken = URLToken.scheme(schemeOrHost);
          tokenizer._currentState = "HOST";
        } else {
          tokenizer._currentToken = URLToken.host(schemeOrHost);
          tokenizer._currentState = "PORT";
        }
      } else {
        tokenizer._currentToken = URLToken.host(schemeOrHost);

        if (getCurrentCharacter(tokenizer) === "/") {
          tokenizer._currentState = "PATH";
        } else {
          tokenizer._currentState = "QUERY";
        }
      }
    }

    function nextHost(tokenizer) {
      if (peekCharacters(tokenizer, 3) === "://") {
        nextCharacter(tokenizer, 3);
      }

      var host = readUntilCharacter(tokenizer, ":", "/", "?");
      tokenizer._currentToken = URLToken.host(host);

      if (!hasCurrentCharacter(tokenizer)) {
        tokenizer._currentState = "DONE";
      } else if (getCurrentCharacter(tokenizer) === ":") {
        tokenizer._currentState = "PORT";
      } else if (getCurrentCharacter(tokenizer) === "/") {
        tokenizer._currentState = "PATH";
      } else {
        tokenizer._currentState = "QUERY";
      }
    }

    function nextPort(tokenizer) {
      if (getCurrentCharacter(tokenizer) === ":") {
        nextCharacter(tokenizer);
      }

      var port = readUntilCharacter(tokenizer, "/", "?");
      tokenizer._currentToken = URLToken.port(port);

      if (!hasCurrentCharacter(tokenizer)) {
        tokenizer._currentState = "DONE";
      } else if (getCurrentCharacter(tokenizer) === "/") {
        tokenizer._currentState = "PATH";
      } else {
        tokenizer._currentState = "QUERY";
      }
    }

    function nextPath(tokenizer) {
      var path = readUntilCharacter(tokenizer, "?");
      tokenizer._currentToken = URLToken.path(path);

      if (!hasCurrentCharacter(tokenizer)) {
        tokenizer._currentState = "DONE";
      } else {
        tokenizer._currentState = "QUERY";
      }
    }

    function nextQuery(tokenizer) {
      if (getCurrentCharacter(tokenizer) === "?") {
        nextCharacter(tokenizer);
      }

      var query = readRemaining(tokenizer);
      tokenizer._currentToken = URLToken.query(query);
      tokenizer._currentState = "DONE";
    }
  }, {
    "./util/utils": "../node_modules/@azure/core-http/dist-esm/src/util/utils.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/util/sanitizer.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Sanitizer = void 0;

    var _url = require("../url");

    var _utils = require("./utils");

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    var RedactedString = "REDACTED";
    var defaultAllowedHeaderNames = ["x-ms-client-request-id", "x-ms-return-client-request-id", "x-ms-useragent", "x-ms-correlation-request-id", "x-ms-request-id", "client-request-id", "ms-cv", "return-client-request-id", "traceparent", "Access-Control-Allow-Credentials", "Access-Control-Allow-Headers", "Access-Control-Allow-Methods", "Access-Control-Allow-Origin", "Access-Control-Expose-Headers", "Access-Control-Max-Age", "Access-Control-Request-Headers", "Access-Control-Request-Method", "Origin", "Accept", "Accept-Encoding", "Cache-Control", "Connection", "Content-Length", "Content-Type", "Date", "ETag", "Expires", "If-Match", "If-Modified-Since", "If-None-Match", "If-Unmodified-Since", "Last-Modified", "Pragma", "Request-Id", "Retry-After", "Server", "Transfer-Encoding", "User-Agent", "WWW-Authenticate"];
    var defaultAllowedQueryParameters = ["api-version"];

    var Sanitizer = /*#__PURE__*/function () {
      function Sanitizer() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$allowedHeaderNam = _ref.allowedHeaderNames,
            allowedHeaderNames = _ref$allowedHeaderNam === void 0 ? [] : _ref$allowedHeaderNam,
            _ref$allowedQueryPara = _ref.allowedQueryParameters,
            allowedQueryParameters = _ref$allowedQueryPara === void 0 ? [] : _ref$allowedQueryPara;

        _classCallCheck(this, Sanitizer);

        allowedHeaderNames = Array.isArray(allowedHeaderNames) ? defaultAllowedHeaderNames.concat(allowedHeaderNames) : defaultAllowedHeaderNames;
        allowedQueryParameters = Array.isArray(allowedQueryParameters) ? defaultAllowedQueryParameters.concat(allowedQueryParameters) : defaultAllowedQueryParameters;
        this.allowedHeaderNames = new Set(allowedHeaderNames.map(function (n) {
          return n.toLowerCase();
        }));
        this.allowedQueryParameters = new Set(allowedQueryParameters.map(function (p) {
          return p.toLowerCase();
        }));
      }

      _createClass(Sanitizer, [{
        key: "sanitize",
        value: function sanitize(obj) {
          var _this = this;

          var seen = new Set();
          return JSON.stringify(obj, function (key, value) {
            // Ensure Errors include their interesting non-enumerable members
            if (value instanceof Error) {
              return Object.assign(Object.assign({}, value), {
                name: value.name,
                message: value.message
              });
            }

            if (key === "_headersMap") {
              return _this.sanitizeHeaders(value);
            } else if (key === "url") {
              return _this.sanitizeUrl(value);
            } else if (key === "query") {
              return _this.sanitizeQuery(value);
            } else if (key === "body") {
              // Don't log the request body
              return undefined;
            } else if (key === "response") {
              // Don't log response again
              return undefined;
            } else if (key === "operationSpec") {
              // When using sendOperationRequest, the request carries a massive
              // field with the autorest spec. No need to log it.
              return undefined;
            } else if (Array.isArray(value) || (0, _utils.isObject)(value)) {
              if (seen.has(value)) {
                return "[Circular]";
              }

              seen.add(value);
            }

            return value;
          }, 2);
        }
      }, {
        key: "sanitizeHeaders",
        value: function sanitizeHeaders(value) {
          return this.sanitizeObject(value, this.allowedHeaderNames, function (v, k) {
            return v[k].value;
          });
        }
      }, {
        key: "sanitizeQuery",
        value: function sanitizeQuery(value) {
          return this.sanitizeObject(value, this.allowedQueryParameters, function (v, k) {
            return v[k];
          });
        }
      }, {
        key: "sanitizeObject",
        value: function sanitizeObject(value, allowedKeys, accessor) {
          if (_typeof(value) !== "object" || value === null) {
            return value;
          }

          var sanitized = {};

          for (var _i = 0, _Object$keys = Object.keys(value); _i < _Object$keys.length; _i++) {
            var k = _Object$keys[_i];

            if (allowedKeys.has(k.toLowerCase())) {
              sanitized[k] = accessor(value, k);
            } else {
              sanitized[k] = RedactedString;
            }
          }

          return sanitized;
        }
      }, {
        key: "sanitizeUrl",
        value: function sanitizeUrl(value) {
          if (typeof value !== "string" || value === null) {
            return value;
          }

          var urlBuilder = _url.URLBuilder.parse(value);

          var queryString = urlBuilder.getQuery();

          if (!queryString) {
            return value;
          }

          var query = _url.URLQuery.parse(queryString);

          var _iterator = _createForOfIteratorHelper(query.keys()),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var k = _step.value;

              if (!this.allowedQueryParameters.has(k.toLowerCase())) {
                query.set(k, RedactedString);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          urlBuilder.setQuery(query.toString());
          return urlBuilder.toString();
        }
      }]);

      return Sanitizer;
    }();

    exports.Sanitizer = Sanitizer;
  }, {
    "../url": "../node_modules/@azure/core-http/dist-esm/src/url.js",
    "./utils": "../node_modules/@azure/core-http/dist-esm/src/util/utils.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/util/inspect.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.custom = void 0; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    var custom = {};
    exports.custom = custom;
  }, {}],
  "../node_modules/@azure/core-http/dist-esm/src/restError.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RestError = void 0;

    var _sanitizer = require("./util/sanitizer");

    var _inspect = require("./util/inspect");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? new Map() : undefined;

      _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;

        if (typeof Class !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }

        if (typeof _cache !== "undefined") {
          if (_cache.has(Class)) return _cache.get(Class);

          _cache.set(Class, Wrapper);
        }

        function Wrapper() {
          return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }

        Wrapper.prototype = Object.create(Class.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        return _setPrototypeOf(Wrapper, Class);
      };

      return _wrapNativeSuper(Class);
    }

    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct.bind();
      } else {
        _construct = function _construct(Parent, args, Class) {
          var a = [null];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class) _setPrototypeOf(instance, Class.prototype);
          return instance;
        };
      }

      return _construct.apply(null, arguments);
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    var errorSanitizer = new _sanitizer.Sanitizer();
    /**
     * An error resulting from an HTTP request to a service endpoint.
     */

    var RestError = /*#__PURE__*/function (_Error) {
      _inherits(RestError, _Error);

      var _super = _createSuper(RestError);

      function RestError(message, code, statusCode, request, response) {
        var _this;

        _classCallCheck(this, RestError);

        _this = _super.call(this, message);
        _this.name = "RestError";
        _this.code = code;
        _this.statusCode = statusCode;
        _this.request = request;
        _this.response = response;
        Object.setPrototypeOf(_assertThisInitialized(_this), RestError.prototype);
        return _this;
      }
      /**
       * Logging method for util.inspect in Node
       */


      _createClass(RestError, [{
        key: _inspect.custom,
        value: function value() {
          return "RestError: ".concat(this.message, " \n ").concat(errorSanitizer.sanitize(this));
        }
      }]);

      return RestError;
    }( /*#__PURE__*/_wrapNativeSuper(Error));
    /**
     * A constant string to identify errors that may arise when making an HTTP request that indicates an issue with the transport layer (e.g. the hostname of the URL cannot be resolved via DNS.)
     */


    exports.RestError = RestError;
    RestError.REQUEST_SEND_ERROR = "REQUEST_SEND_ERROR";
    /**
     * A constant string to identify errors that may arise from parsing an incoming HTTP response. Usually indicates a malformed HTTP body, such as an encoded JSON payload that is incomplete.
     */

    RestError.PARSE_ERROR = "PARSE_ERROR";
  }, {
    "./util/sanitizer": "../node_modules/@azure/core-http/dist-esm/src/util/sanitizer.js",
    "./util/inspect": "../node_modules/@azure/core-http/dist-esm/src/util/inspect.browser.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/xhrHttpClient.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.XhrHttpClient = void 0;
    exports.parseHeaders = parseHeaders;

    var _httpHeaders = require("./httpHeaders");

    var _abortController = require("@azure/abort-controller");

    var _restError = require("./restError");

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e2) {
              throw _e2;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e3) {
          didErr = true;
          err = _e3;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /**
     * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.
     */


    var XhrHttpClient = /*#__PURE__*/function () {
      function XhrHttpClient() {
        _classCallCheck(this, XhrHttpClient);
      }

      _createClass(XhrHttpClient, [{
        key: "sendRequest",
        value: function sendRequest(request) {
          var _a;

          var xhr = new XMLHttpRequest();

          if (request.proxySettings) {
            throw new Error("HTTP proxy is not supported in browser environment");
          }

          var abortSignal = request.abortSignal;

          if (abortSignal) {
            if (abortSignal.aborted) {
              return Promise.reject(new _abortController.AbortError("The operation was aborted."));
            }

            var listener = function listener() {
              xhr.abort();
            };

            abortSignal.addEventListener("abort", listener);
            xhr.addEventListener("readystatechange", function () {
              if (xhr.readyState === XMLHttpRequest.DONE) {
                abortSignal.removeEventListener("abort", listener);
              }
            });
          }

          addProgressListener(xhr.upload, request.onUploadProgress);
          addProgressListener(xhr, request.onDownloadProgress);

          if (request.formData) {
            var formData = request.formData;
            var requestForm = new FormData();

            var appendFormValue = function appendFormValue(key, value) {
              if (value && Object.prototype.hasOwnProperty.call(value, "value") && Object.prototype.hasOwnProperty.call(value, "options")) {
                requestForm.append(key, value.value, value.options);
              } else {
                requestForm.append(key, value);
              }
            };

            for (var _i = 0, _Object$keys = Object.keys(formData); _i < _Object$keys.length; _i++) {
              var formKey = _Object$keys[_i];
              var formValue = formData[formKey];

              if (Array.isArray(formValue)) {
                for (var j = 0; j < formValue.length; j++) {
                  appendFormValue(formKey, formValue[j]);
                }
              } else {
                appendFormValue(formKey, formValue);
              }
            }

            request.body = requestForm;
            request.formData = undefined;
            var contentType = request.headers.get("Content-Type");

            if (contentType && contentType.indexOf("multipart/form-data") !== -1) {
              // browser will automatically apply a suitable content-type header
              request.headers.remove("Content-Type");
            }
          }

          xhr.open(request.method, request.url);
          xhr.timeout = request.timeout;
          xhr.withCredentials = request.withCredentials;

          var _iterator = _createForOfIteratorHelper(request.headers.headersArray()),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var header = _step.value;
              xhr.setRequestHeader(header.name, header.value);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          xhr.responseType = ((_a = request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.size) || request.streamResponseBody ? "blob" : "text"; // tslint:disable-next-line:no-null-keyword

          xhr.send(request.body === undefined ? null : request.body);

          if (xhr.responseType === "blob") {
            return new Promise(function (resolve, reject) {
              handleBlobResponse(xhr, request, resolve, reject);
              rejectOnTerminalEvent(request, xhr, reject);
            });
          } else {
            return new Promise(function (resolve, reject) {
              xhr.addEventListener("load", function () {
                return resolve({
                  request: request,
                  status: xhr.status,
                  headers: parseHeaders(xhr),
                  bodyAsText: xhr.responseText
                });
              });
              rejectOnTerminalEvent(request, xhr, reject);
            });
          }
        }
      }]);

      return XhrHttpClient;
    }();

    exports.XhrHttpClient = XhrHttpClient;

    function handleBlobResponse(xhr, request, res, rej) {
      xhr.addEventListener("readystatechange", function () {
        var _a; // Resolve as soon as headers are loaded


        if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {
          if (request.streamResponseBody || ((_a = request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(xhr.status))) {
            var blobBody = new Promise(function (resolve, reject) {
              xhr.addEventListener("load", function () {
                resolve(xhr.response);
              });
              rejectOnTerminalEvent(request, xhr, reject);
            });
            res({
              request: request,
              status: xhr.status,
              headers: parseHeaders(xhr),
              blobBody: blobBody
            });
          } else {
            xhr.addEventListener("load", function () {
              // xhr.response is of Blob type if the request is sent with xhr.responseType === "blob"
              // but the status code is not one of the stream response status codes,
              // so treat it as text and convert from Blob to text
              if (xhr.response) {
                // Blob.text() is not supported in IE so using FileReader instead
                var reader = new FileReader();

                reader.onload = function (e) {
                  var _a;

                  var text = (_a = e.target) === null || _a === void 0 ? void 0 : _a.result;
                  res({
                    request: request,
                    status: xhr.status,
                    headers: parseHeaders(xhr),
                    bodyAsText: text
                  });
                };

                reader.onerror = function (_e) {
                  rej(reader.error);
                };

                reader.readAsText(xhr.response, "UTF-8");
              } else {
                res({
                  request: request,
                  status: xhr.status,
                  headers: parseHeaders(xhr)
                });
              }
            });
          }
        }
      });
    }

    function addProgressListener(xhr, listener) {
      if (listener) {
        xhr.addEventListener("progress", function (rawEvent) {
          return listener({
            loadedBytes: rawEvent.loaded
          });
        });
      }
    } // exported locally for testing


    function parseHeaders(xhr) {
      var responseHeaders = new _httpHeaders.HttpHeaders();
      var headerLines = xhr.getAllResponseHeaders().trim().split(/[\r\n]+/);

      var _iterator2 = _createForOfIteratorHelper(headerLines),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var line = _step2.value;
          var index = line.indexOf(":");
          var headerName = line.slice(0, index);
          var headerValue = line.slice(index + 2);
          responseHeaders.set(headerName, headerValue);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return responseHeaders;
    }

    function rejectOnTerminalEvent(request, xhr, reject) {
      xhr.addEventListener("error", function () {
        return reject(new _restError.RestError("Failed to send request to ".concat(request.url), _restError.RestError.REQUEST_SEND_ERROR, undefined, request));
      });
      var abortError = new _abortController.AbortError("The operation was aborted.");
      xhr.addEventListener("abort", function () {
        return reject(abortError);
      });
      xhr.addEventListener("timeout", function () {
        return reject(abortError);
      });
    }
  }, {
    "./httpHeaders": "../node_modules/@azure/core-http/dist-esm/src/httpHeaders.js",
    "@azure/abort-controller": "../node_modules/@azure/abort-controller/dist-esm/src/index.js",
    "./restError": "../node_modules/@azure/core-http/dist-esm/src/restError.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/defaultHttpClient.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "DefaultHttpClient", {
      enumerable: true,
      get: function () {
        return _xhrHttpClient.XhrHttpClient;
      }
    });

    var _xhrHttpClient = require("./xhrHttpClient");
  }, {
    "./xhrHttpClient": "../node_modules/@azure/core-http/dist-esm/src/xhrHttpClient.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/httpPipelineLogLevel.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.HttpPipelineLogLevel = void 0; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * The different levels of logs that can be used with the HttpPipelineLogger.
     */

    var HttpPipelineLogLevel;
    exports.HttpPipelineLogLevel = HttpPipelineLogLevel;

    (function (HttpPipelineLogLevel) {
      /**
       * A log level that indicates that no logs will be logged.
       */
      HttpPipelineLogLevel[HttpPipelineLogLevel["OFF"] = 0] = "OFF";
      /**
       * An error log.
       */

      HttpPipelineLogLevel[HttpPipelineLogLevel["ERROR"] = 1] = "ERROR";
      /**
       * A warning log.
       */

      HttpPipelineLogLevel[HttpPipelineLogLevel["WARNING"] = 2] = "WARNING";
      /**
       * An information log.
       */

      HttpPipelineLogLevel[HttpPipelineLogLevel["INFO"] = 3] = "INFO";
    })(HttpPipelineLogLevel || (exports.HttpPipelineLogLevel = HttpPipelineLogLevel = {}));
  }, {}],
  "../node_modules/tslib/tslib.es6.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.__assign = void 0;
    exports.__asyncDelegator = __asyncDelegator;
    exports.__asyncGenerator = __asyncGenerator;
    exports.__asyncValues = __asyncValues;
    exports.__await = __await;
    exports.__awaiter = __awaiter;
    exports.__classPrivateFieldGet = __classPrivateFieldGet;
    exports.__classPrivateFieldIn = __classPrivateFieldIn;
    exports.__classPrivateFieldSet = __classPrivateFieldSet;
    exports.__createBinding = void 0;
    exports.__decorate = __decorate;
    exports.__exportStar = __exportStar;
    exports.__extends = __extends;
    exports.__generator = __generator;
    exports.__importDefault = __importDefault;
    exports.__importStar = __importStar;
    exports.__makeTemplateObject = __makeTemplateObject;
    exports.__metadata = __metadata;
    exports.__param = __param;
    exports.__read = __read;
    exports.__rest = __rest;
    exports.__spread = __spread;
    exports.__spreadArray = __spreadArray;
    exports.__spreadArrays = __spreadArrays;
    exports.__values = __values;
    /******************************************************************************
    Copyright (c) Microsoft Corporation.
    
    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.
    
    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    /* global Reflect, Promise */

    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    function __extends(d, b) {
      if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function () {
      exports.__assign = __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }

        return t;
      };

      return __assign.apply(this, arguments);
    };

    exports.__assign = __assign;

    function __rest(s, e) {
      var t = {};

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

      if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
      }
      return t;
    }

    function __decorate(decorators, target, key, desc) {
      var c = arguments.length,
          r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
          d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
      return function (target, key) {
        decorator(target, key, paramIndex);
      };
    }

    function __metadata(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
          resolve(value);
        });
      }

      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }

        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }

        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }

    function __generator(thisArg, body) {
      var _ = {
        label: 0,
        sent: function () {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      },
          f,
          y,
          t,
          g;
      return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
      }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
      }), g;

      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }

      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");

        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];

          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;

            case 4:
              _.label++;
              return {
                value: op[1],
                done: false
              };

            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;

            case 7:
              op = _.ops.pop();

              _.trys.pop();

              continue;

            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }

              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }

              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }

              if (t && _.label < t[2]) {
                _.label = t[2];

                _.ops.push(op);

                break;
              }

              if (t[2]) _.ops.pop();

              _.trys.pop();

              continue;
          }

          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }

        if (op[0] & 5) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    }

    var __createBinding = Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);

      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function () {
            return m[k];
          }
        };
      }

      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    };

    exports.__createBinding = __createBinding;

    function __exportStar(m, o) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
    }

    function __values(o) {
      var s = typeof Symbol === "function" && Symbol.iterator,
          m = s && o[s],
          i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function () {
          if (o && i >= o.length) o = void 0;
          return {
            value: o && o[i++],
            done: !o
          };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
          r,
          ar = [],
          e;

      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = {
          error: error
        };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }

      return ar;
    }
    /** @deprecated */


    function __spread() {
      for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

      return ar;
    }
    /** @deprecated */


    function __spreadArrays() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

      for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

      return r;
    }

    function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    }

    function __await(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
        return this;
      }, i;

      function verb(n) {
        if (g[n]) i[n] = function (v) {
          return new Promise(function (a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
      }

      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }

      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }

      function fulfill(value) {
        resume("next", value);
      }

      function reject(value) {
        resume("throw", value);
      }

      function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
      }
    }

    function __asyncDelegator(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function (e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function () {
        return this;
      }, i;

      function verb(n, f) {
        i[n] = o[n] ? function (v) {
          return (p = !p) ? {
            value: __await(o[n](v)),
            done: n === "return"
          } : f ? f(v) : v;
        } : f;
      }
    }

    function __asyncValues(o) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator],
          i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
        return this;
      }, i);

      function verb(n) {
        i[n] = o[n] && function (v) {
          return new Promise(function (resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }

      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function (v) {
          resolve({
            value: v,
            done: d
          });
        }, reject);
      }
    }

    function __makeTemplateObject(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {
          value: raw
        });
      } else {
        cooked.raw = raw;
      }

      return cooked;
    }

    ;

    var __setModuleDefault = Object.create ? function (o, v) {
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
      });
    } : function (o, v) {
      o["default"] = v;
    };

    function __importStar(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

      __setModuleDefault(result, mod);

      return result;
    }

    function __importDefault(mod) {
      return mod && mod.__esModule ? mod : {
        default: mod
      };
    }

    function __classPrivateFieldGet(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }

    function __classPrivateFieldSet(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }

    function __classPrivateFieldIn(state, receiver) {
      if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
      return typeof state === "function" ? receiver === state : state.has(receiver);
    }
  }, {}],
  "../node_modules/@azure/core-http/dist-esm/src/operationOptions.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.operationOptionsToRequestOptionsBase = operationOptionsToRequestOptionsBase;

    var _tslib = require("tslib"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Converts an OperationOptions to a RequestOptionsBase
     *
     * @param opts - OperationOptions object to convert to RequestOptionsBase
     */


    function operationOptionsToRequestOptionsBase(opts) {
      var requestOptions = opts.requestOptions,
          tracingOptions = opts.tracingOptions,
          additionalOptions = (0, _tslib.__rest)(opts, ["requestOptions", "tracingOptions"]);
      var result = additionalOptions;

      if (requestOptions) {
        result = Object.assign(Object.assign({}, result), requestOptions);
      }

      if (tracingOptions) {
        result.tracingContext = tracingOptions.tracingContext; // By passing spanOptions if they exist at runtime, we're backwards compatible with @azure/core-tracing@preview.13 and earlier.

        result.spanOptions = tracingOptions === null || tracingOptions === void 0 ? void 0 : tracingOptions.spanOptions;
      }

      return result;
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RequestPolicyOptions = exports.BaseRequestPolicy = void 0;

    var _httpPipelineLogLevel = require("../httpPipelineLogLevel");

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /**
     * The base class from which all request policies derive.
     */


    var BaseRequestPolicy = /*#__PURE__*/function () {
      /**
       * The main method to implement that manipulates a request/response.
       */
      function BaseRequestPolicy(
      /**
       * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.
       */
      _nextPolicy,
      /**
       * The options that can be passed to a given request policy.
       */
      _options) {
        _classCallCheck(this, BaseRequestPolicy);

        this._nextPolicy = _nextPolicy;
        this._options = _options;
      }
      /**
       * Get whether or not a log with the provided log level should be logged.
       * @param logLevel - The log level of the log that will be logged.
       * @returns Whether or not a log with the provided log level should be logged.
       */


      _createClass(BaseRequestPolicy, [{
        key: "shouldLog",
        value: function shouldLog(logLevel) {
          return this._options.shouldLog(logLevel);
        }
        /**
         * Attempt to log the provided message to the provided logger. If no logger was provided or if
         * the log level does not meat the logger's threshold, then nothing will be logged.
         * @param logLevel - The log level of this log.
         * @param message - The message of this log.
         */

      }, {
        key: "log",
        value: function log(logLevel, message) {
          this._options.log(logLevel, message);
        }
      }]);

      return BaseRequestPolicy;
    }();
    /**
     * Optional properties that can be used when creating a RequestPolicy.
     */


    exports.BaseRequestPolicy = BaseRequestPolicy;

    var RequestPolicyOptions = /*#__PURE__*/function () {
      function RequestPolicyOptions(_logger) {
        _classCallCheck(this, RequestPolicyOptions);

        this._logger = _logger;
      }
      /**
       * Get whether or not a log with the provided log level should be logged.
       * @param logLevel - The log level of the log that will be logged.
       * @returns Whether or not a log with the provided log level should be logged.
       */


      _createClass(RequestPolicyOptions, [{
        key: "shouldLog",
        value: function shouldLog(logLevel) {
          return !!this._logger && logLevel !== _httpPipelineLogLevel.HttpPipelineLogLevel.OFF && logLevel <= this._logger.minimumLogLevel;
        }
        /**
         * Attempt to log the provided message to the provided logger. If no logger was provided or if
         * the log level does not meet the logger's threshold, then nothing will be logged.
         * @param logLevel - The log level of this log.
         * @param message - The message of this log.
         */

      }, {
        key: "log",
        value: function log(logLevel, message) {
          if (this._logger && this.shouldLog(logLevel)) {
            this._logger.log(logLevel, message);
          }
        }
      }]);

      return RequestPolicyOptions;
    }();

    exports.RequestPolicyOptions = RequestPolicyOptions;
  }, {
    "../httpPipelineLogLevel": "../node_modules/@azure/core-http/dist-esm/src/httpPipelineLogLevel.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/util/xml.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.parseXML = parseXML;
    exports.stringifyXML = stringifyXML;

    var _serializer = require("./serializer.common");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    if (!self.document || !self.DOMParser || !self.Node || !self.XMLSerializer) {
      throw new Error("This library depends on the following DOM objects: [\"document\", \"DOMParser\", \"Node\", \"XMLSerializer\"] to parse XML, but some of these are undefined. You may provide a polyfill to make these globally available in order to support your environment. For more information, please refer to https://aka.ms/azsdk/js/web-workers. ");
    }

    var cachedDoc;

    function getDoc() {
      if (!cachedDoc) {
        cachedDoc = document.implementation.createDocument(null, null, null);
      }

      return cachedDoc;
    }

    var cachedParser;

    function getParser() {
      if (!cachedParser) {
        cachedParser = new DOMParser();
      }

      return cachedParser;
    }

    var cachedSerializer;

    function getSerializer() {
      if (!cachedSerializer) {
        cachedSerializer = new XMLSerializer();
      }

      return cachedSerializer;
    }

    function parseXML(str) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var _a, _b, _c;

      try {
        var updatedOptions = {
          rootName: (_a = opts.rootName) !== null && _a !== void 0 ? _a : "",
          includeRoot: (_b = opts.includeRoot) !== null && _b !== void 0 ? _b : false,
          xmlCharKey: (_c = opts.xmlCharKey) !== null && _c !== void 0 ? _c : _serializer.XML_CHARKEY
        };
        var dom = getParser().parseFromString(str, "application/xml");
        throwIfError(dom);
        var obj;

        if (updatedOptions.includeRoot) {
          obj = domToObject(dom, updatedOptions);
        } else {
          obj = domToObject(dom.childNodes[0], updatedOptions);
        }

        return Promise.resolve(obj);
      } catch (err) {
        return Promise.reject(err);
      }
    }

    var errorNS;

    function getErrorNamespace() {
      var _a;

      if (errorNS === undefined) {
        try {
          errorNS = (_a = getParser().parseFromString("INVALID", "text/xml").getElementsByTagName("parsererror")[0].namespaceURI) !== null && _a !== void 0 ? _a : "";
        } catch (ignored) {
          // Most browsers will return a document containing <parsererror>, but IE will throw.
          errorNS = "";
        }
      }

      return errorNS;
    }

    function throwIfError(dom) {
      var parserErrors = dom.getElementsByTagName("parsererror");

      if (parserErrors.length > 0 && getErrorNamespace()) {
        for (var i = 0; i < parserErrors.length; i++) {
          if (parserErrors[i].namespaceURI === errorNS) {
            throw new Error(parserErrors[i].innerHTML);
          }
        }
      }
    }

    function isElement(node) {
      return !!node.attributes;
    }
    /**
     * Get the Element-typed version of the provided Node if the provided node is an element with
     * attributes. If it isn't, then undefined is returned.
     */


    function asElementWithAttributes(node) {
      return isElement(node) && node.hasAttributes() ? node : undefined;
    }

    function domToObject(node, options) {
      var result = {};
      var childNodeCount = node.childNodes.length;
      var firstChildNode = node.childNodes[0];
      var onlyChildTextValue = firstChildNode && childNodeCount === 1 && firstChildNode.nodeType === Node.TEXT_NODE && firstChildNode.nodeValue || undefined;
      var elementWithAttributes = asElementWithAttributes(node);

      if (elementWithAttributes) {
        result[_serializer.XML_ATTRKEY] = {};

        for (var i = 0; i < elementWithAttributes.attributes.length; i++) {
          var attr = elementWithAttributes.attributes[i];
          result[_serializer.XML_ATTRKEY][attr.nodeName] = attr.nodeValue;
        }

        if (onlyChildTextValue) {
          result[options.xmlCharKey] = onlyChildTextValue;
        }
      } else if (childNodeCount === 0) {
        result = "";
      } else if (onlyChildTextValue) {
        result = onlyChildTextValue;
      }

      if (!onlyChildTextValue) {
        for (var _i = 0; _i < childNodeCount; _i++) {
          var child = node.childNodes[_i]; // Ignore leading/trailing whitespace nodes

          if (child.nodeType !== Node.TEXT_NODE) {
            var childObject = domToObject(child, options);

            if (!result[child.nodeName]) {
              result[child.nodeName] = childObject;
            } else if (Array.isArray(result[child.nodeName])) {
              result[child.nodeName].push(childObject);
            } else {
              result[child.nodeName] = [result[child.nodeName], childObject];
            }
          }
        }
      }

      return result;
    }

    function stringifyXML(content) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var _a, _b, _c;

      var updatedOptions = {
        rootName: (_a = opts.rootName) !== null && _a !== void 0 ? _a : "root",
        includeRoot: (_b = opts.includeRoot) !== null && _b !== void 0 ? _b : false,
        xmlCharKey: (_c = opts.xmlCharKey) !== null && _c !== void 0 ? _c : _serializer.XML_CHARKEY
      };
      var dom = buildNode(content, updatedOptions.rootName, updatedOptions)[0];
      return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + getSerializer().serializeToString(dom);
    }

    function buildAttributes(attrs) {
      var result = [];

      for (var _i2 = 0, _Object$keys = Object.keys(attrs); _i2 < _Object$keys.length; _i2++) {
        var key = _Object$keys[_i2];
        var attr = getDoc().createAttribute(key);
        attr.value = attrs[key].toString();
        result.push(attr);
      }

      return result;
    }

    function buildNode(obj, elementName, options) {
      if (obj === undefined || obj === null || typeof obj === "string" || typeof obj === "number" || typeof obj === "boolean") {
        var elem = getDoc().createElement(elementName);
        elem.textContent = obj === undefined || obj === null ? "" : obj.toString();
        return [elem];
      } else if (Array.isArray(obj)) {
        var result = [];

        var _iterator = _createForOfIteratorHelper(obj),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var arrayElem = _step.value;

            var _iterator2 = _createForOfIteratorHelper(buildNode(arrayElem, elementName, options)),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var child = _step2.value;
                result.push(child);
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return result;
      } else if (_typeof(obj) === "object") {
        var _elem = getDoc().createElement(elementName);

        for (var _i3 = 0, _Object$keys2 = Object.keys(obj); _i3 < _Object$keys2.length; _i3++) {
          var key = _Object$keys2[_i3];

          if (key === _serializer.XML_ATTRKEY) {
            var _iterator3 = _createForOfIteratorHelper(buildAttributes(obj[key])),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var attr = _step3.value;

                _elem.attributes.setNamedItem(attr);
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          } else if (key === options.xmlCharKey) {
            _elem.textContent = obj[key].toString();
          } else {
            var _iterator4 = _createForOfIteratorHelper(buildNode(obj[key], key, options)),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var _child = _step4.value;

                _elem.appendChild(_child);
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
        }

        return [_elem];
      } else {
        throw new Error("Illegal value passed to buildObject: ".concat(obj));
      }
    }
  }, {
    "./serializer.common": "../node_modules/@azure/core-http/dist-esm/src/util/serializer.common.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/policies/deserializationPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.defaultXmlContentTypes = exports.defaultJsonContentTypes = exports.DeserializationPolicy = exports.DefaultDeserializationOptions = void 0;
    exports.deserializationPolicy = deserializationPolicy;
    exports.deserializeResponseBody = deserializeResponseBody;

    var _requestPolicy = require("./requestPolicy");

    var _serializer = require("../util/serializer.common");

    var _serializer2 = require("../serializer");

    var _restError = require("../restError");

    var _xml = require("../util/xml");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they
     * pass through the HTTP pipeline.
     */


    function deserializationPolicy(deserializationContentTypes, parsingOptions) {
      return {
        create: function create(nextPolicy, options) {
          return new DeserializationPolicy(nextPolicy, options, deserializationContentTypes, parsingOptions);
        }
      };
    }

    var defaultJsonContentTypes = ["application/json", "text/json"];
    exports.defaultJsonContentTypes = defaultJsonContentTypes;
    var defaultXmlContentTypes = ["application/xml", "application/atom+xml"];
    exports.defaultXmlContentTypes = defaultXmlContentTypes;
    var DefaultDeserializationOptions = {
      expectedContentTypes: {
        json: defaultJsonContentTypes,
        xml: defaultXmlContentTypes
      }
    };
    /**
     * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the
     * HTTP pipeline.
     */

    exports.DefaultDeserializationOptions = DefaultDeserializationOptions;

    var DeserializationPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(DeserializationPolicy, _BaseRequestPolicy);

      var _super = _createSuper(DeserializationPolicy);

      function DeserializationPolicy(nextPolicy, requestPolicyOptions, deserializationContentTypes) {
        var _this;

        var parsingOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

        _classCallCheck(this, DeserializationPolicy);

        var _a;

        _this = _super.call(this, nextPolicy, requestPolicyOptions);
        _this.jsonContentTypes = deserializationContentTypes && deserializationContentTypes.json || defaultJsonContentTypes;
        _this.xmlContentTypes = deserializationContentTypes && deserializationContentTypes.xml || defaultXmlContentTypes;
        _this.xmlCharKey = (_a = parsingOptions.xmlCharKey) !== null && _a !== void 0 ? _a : _serializer.XML_CHARKEY;
        return _this;
      }

      _createClass(DeserializationPolicy, [{
        key: "sendRequest",
        value: function () {
          var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {
            var _this2 = this;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    return _context.abrupt("return", this._nextPolicy.sendRequest(request).then(function (response) {
                      return deserializeResponseBody(_this2.jsonContentTypes, _this2.xmlContentTypes, response, {
                        xmlCharKey: _this2.xmlCharKey
                      });
                    }));

                  case 1:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function sendRequest(_x) {
            return _sendRequest.apply(this, arguments);
          }

          return sendRequest;
        }()
      }]);

      return DeserializationPolicy;
    }(_requestPolicy.BaseRequestPolicy);

    exports.DeserializationPolicy = DeserializationPolicy;

    function getOperationResponse(parsedResponse) {
      var result;
      var request = parsedResponse.request;
      var operationSpec = request.operationSpec;

      if (operationSpec) {
        var operationResponseGetter = request.operationResponseGetter;

        if (!operationResponseGetter) {
          result = operationSpec.responses[parsedResponse.status];
        } else {
          result = operationResponseGetter(operationSpec, parsedResponse);
        }
      }

      return result;
    }

    function shouldDeserializeResponse(parsedResponse) {
      var shouldDeserialize = parsedResponse.request.shouldDeserialize;
      var result;

      if (shouldDeserialize === undefined) {
        result = true;
      } else if (typeof shouldDeserialize === "boolean") {
        result = shouldDeserialize;
      } else {
        result = shouldDeserialize(parsedResponse);
      }

      return result;
    }
    /**
     * Given a particular set of content types to parse as either JSON or XML, consumes the HTTP response to produce the result object defined by the request's {@link OperationSpec}.
     * @param jsonContentTypes - Response content types to parse the body as JSON.
     * @param xmlContentTypes  - Response content types to parse the body as XML.
     * @param response - HTTP Response from the pipeline.
     * @param options  - Options to the serializer, mostly for configuring the XML parser if needed.
     * @returns A parsed {@link HttpOperationResponse} object that can be returned by the {@link ServiceClient}.
     */


    function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      var _a, _b, _c;

      var updatedOptions = {
        rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : "",
        includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,
        xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : _serializer.XML_CHARKEY
      };
      return parse(jsonContentTypes, xmlContentTypes, response, updatedOptions).then(function (parsedResponse) {
        if (!shouldDeserializeResponse(parsedResponse)) {
          return parsedResponse;
        }

        var operationSpec = parsedResponse.request.operationSpec;

        if (!operationSpec || !operationSpec.responses) {
          return parsedResponse;
        }

        var responseSpec = getOperationResponse(parsedResponse);

        var _handleErrorResponse = handleErrorResponse(parsedResponse, operationSpec, responseSpec),
            error = _handleErrorResponse.error,
            shouldReturnResponse = _handleErrorResponse.shouldReturnResponse;

        if (error) {
          throw error;
        } else if (shouldReturnResponse) {
          return parsedResponse;
        } // An operation response spec does exist for current status code, so
        // use it to deserialize the response.


        if (responseSpec) {
          if (responseSpec.bodyMapper) {
            var valueToDeserialize = parsedResponse.parsedBody;

            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === _serializer2.MapperType.Sequence) {
              valueToDeserialize = _typeof(valueToDeserialize) === "object" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];
            }

            try {
              parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, "operationRes.parsedBody", options);
            } catch (innerError) {
              var restError = new _restError.RestError("Error ".concat(innerError, " occurred in deserializing the responseBody - ").concat(parsedResponse.bodyAsText), undefined, parsedResponse.status, parsedResponse.request, parsedResponse);
              throw restError;
            }
          } else if (operationSpec.httpMethod === "HEAD") {
            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource
            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;
          }

          if (responseSpec.headersMapper) {
            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.rawHeaders(), "operationRes.parsedHeaders", options);
          }
        }

        return parsedResponse;
      });
    }

    function isOperationSpecEmpty(operationSpec) {
      var expectedStatusCodes = Object.keys(operationSpec.responses);
      return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === "default";
    }

    function handleErrorResponse(parsedResponse, operationSpec, responseSpec) {
      var _a;

      var isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;
      var isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;

      if (isExpectedStatusCode) {
        if (responseSpec) {
          if (!responseSpec.isError) {
            return {
              error: null,
              shouldReturnResponse: false
            };
          }
        } else {
          return {
            error: null,
            shouldReturnResponse: false
          };
        }
      }

      var errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;
      var streaming = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status)) || parsedResponse.request.streamResponseBody;
      var initialErrorMessage = streaming ? "Unexpected status code: ".concat(parsedResponse.status) : parsedResponse.bodyAsText;
      var error = new _restError.RestError(initialErrorMessage, undefined, parsedResponse.status, parsedResponse.request, parsedResponse); // If the item failed but there's no error spec or default spec to deserialize the error,
      // we should fail so we just throw the parsed response

      if (!errorResponseSpec) {
        throw error;
      }

      var defaultBodyMapper = errorResponseSpec.bodyMapper;
      var defaultHeadersMapper = errorResponseSpec.headersMapper;

      try {
        // If error response has a body, try to deserialize it using default body mapper.
        // Then try to extract error code & message from it
        if (parsedResponse.parsedBody) {
          var parsedBody = parsedResponse.parsedBody;
          var parsedError;

          if (defaultBodyMapper) {
            var valueToDeserialize = parsedBody;

            if (operationSpec.isXML && defaultBodyMapper.type.name === _serializer2.MapperType.Sequence) {
              valueToDeserialize = _typeof(parsedBody) === "object" ? parsedBody[defaultBodyMapper.xmlElementName] : [];
            }

            parsedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, "error.response.parsedBody");
          }

          var internalError = parsedBody.error || parsedError || parsedBody;
          error.code = internalError.code;

          if (internalError.message) {
            error.message = internalError.message;
          }

          if (defaultBodyMapper) {
            error.response.parsedBody = parsedError;
          }
        } // If error response has headers, try to deserialize it using default header mapper


        if (parsedResponse.headers && defaultHeadersMapper) {
          error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.rawHeaders(), "operationRes.parsedHeaders");
        }
      } catch (defaultError) {
        error.message = "Error \"".concat(defaultError.message, "\" occurred in deserializing the responseBody - \"").concat(parsedResponse.bodyAsText, "\" for the default response.");
      }

      return {
        error: error,
        shouldReturnResponse: false
      };
    }

    function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts) {
      var _a;

      var errorHandler = function errorHandler(err) {
        var msg = "Error \"".concat(err, "\" occurred while parsing the response body - ").concat(operationResponse.bodyAsText, ".");
        var errCode = err.code || _restError.RestError.PARSE_ERROR;
        var e = new _restError.RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse);
        return Promise.reject(e);
      };

      var streaming = ((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) || operationResponse.request.streamResponseBody;

      if (!streaming && operationResponse.bodyAsText) {
        var text = operationResponse.bodyAsText;
        var contentType = operationResponse.headers.get("Content-Type") || "";
        var contentComponents = !contentType ? [] : contentType.split(";").map(function (component) {
          return component.toLowerCase();
        });

        if (contentComponents.length === 0 || contentComponents.some(function (component) {
          return jsonContentTypes.indexOf(component) !== -1;
        })) {
          return new Promise(function (resolve) {
            operationResponse.parsedBody = JSON.parse(text);
            resolve(operationResponse);
          }).catch(errorHandler);
        } else if (contentComponents.some(function (component) {
          return xmlContentTypes.indexOf(component) !== -1;
        })) {
          return (0, _xml.parseXML)(text, opts).then(function (body) {
            operationResponse.parsedBody = body;
            return operationResponse;
          }).catch(errorHandler);
        }
      }

      return Promise.resolve(operationResponse);
    }
  }, {
    "./requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js",
    "../util/serializer.common": "../node_modules/@azure/core-http/dist-esm/src/util/serializer.common.js",
    "../serializer": "../node_modules/@azure/core-http/dist-esm/src/serializer.js",
    "../restError": "../node_modules/@azure/core-http/dist-esm/src/restError.js",
    "../util/xml": "../node_modules/@azure/core-http/dist-esm/src/util/xml.browser.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/policies/keepAlivePolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.KeepAlivePolicy = exports.DefaultKeepAliveOptions = void 0;
    exports.keepAlivePolicy = keepAlivePolicy;

    var _requestPolicy = require("./requestPolicy");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * By default, HTTP connections are maintained for future requests.
     */


    var DefaultKeepAliveOptions = {
      enable: true
    };
    /**
     * Creates a policy that controls whether HTTP connections are maintained on future requests.
     * @param keepAliveOptions - Keep alive options. By default, HTTP connections are maintained for future requests.
     * @returns An instance of the {@link KeepAlivePolicy}
     */

    exports.DefaultKeepAliveOptions = DefaultKeepAliveOptions;

    function keepAlivePolicy(keepAliveOptions) {
      return {
        create: function create(nextPolicy, options) {
          return new KeepAlivePolicy(nextPolicy, options, keepAliveOptions || DefaultKeepAliveOptions);
        }
      };
    }
    /**
     * KeepAlivePolicy is a policy used to control keep alive settings for every request.
     */


    var KeepAlivePolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(KeepAlivePolicy, _BaseRequestPolicy);

      var _super = _createSuper(KeepAlivePolicy);
      /**
       * Creates an instance of KeepAlivePolicy.
       *
       * @param nextPolicy -
       * @param options -
       * @param keepAliveOptions -
       */


      function KeepAlivePolicy(nextPolicy, options, keepAliveOptions) {
        var _this;

        _classCallCheck(this, KeepAlivePolicy);

        _this = _super.call(this, nextPolicy, options);
        _this.keepAliveOptions = keepAliveOptions;
        return _this;
      }
      /**
       * Sends out request.
       *
       * @param request -
       * @returns
       */


      _createClass(KeepAlivePolicy, [{
        key: "sendRequest",
        value: function () {
          var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    request.keepAlive = this.keepAliveOptions.enable;
                    return _context.abrupt("return", this._nextPolicy.sendRequest(request));

                  case 2:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function sendRequest(_x) {
            return _sendRequest.apply(this, arguments);
          }

          return sendRequest;
        }()
      }]);

      return KeepAlivePolicy;
    }(_requestPolicy.BaseRequestPolicy);

    exports.KeepAlivePolicy = KeepAlivePolicy;
  }, {
    "./requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/policies/redirectPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RedirectPolicy = exports.DefaultRedirectOptions = void 0;
    exports.redirectPolicy = redirectPolicy;

    var _requestPolicy = require("./requestPolicy");

    var _url = require("../url");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * Methods that are allowed to follow redirects 301 and 302
     */


    var allowedRedirect = ["GET", "HEAD"];
    var DefaultRedirectOptions = {
      handleRedirects: true,
      maxRetries: 20
    };
    /**
     * Creates a redirect policy, which sends a repeats the request to a new destination if a response arrives with a "location" header, and a status code between 300 and 307.
     * @param maximumRetries - Maximum number of redirects to follow.
     * @returns An instance of the {@link RedirectPolicy}
     */

    exports.DefaultRedirectOptions = DefaultRedirectOptions;

    function redirectPolicy() {
      var maximumRetries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;
      return {
        create: function create(nextPolicy, options) {
          return new RedirectPolicy(nextPolicy, options, maximumRetries);
        }
      };
    }
    /**
     * Resends the request to a new destination if a response arrives with a "location" header, and a status code between 300 and 307.
     */


    var RedirectPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(RedirectPolicy, _BaseRequestPolicy);

      var _super = _createSuper(RedirectPolicy);

      function RedirectPolicy(nextPolicy, options) {
        var _this;

        var maxRetries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;

        _classCallCheck(this, RedirectPolicy);

        _this = _super.call(this, nextPolicy, options);
        _this.maxRetries = maxRetries;
        return _this;
      }

      _createClass(RedirectPolicy, [{
        key: "sendRequest",
        value: function sendRequest(request) {
          var _this2 = this;

          return this._nextPolicy.sendRequest(request).then(function (response) {
            return handleRedirect(_this2, response, 0);
          });
        }
      }]);

      return RedirectPolicy;
    }(_requestPolicy.BaseRequestPolicy);

    exports.RedirectPolicy = RedirectPolicy;

    function handleRedirect(policy, response, currentRetries) {
      var request = response.request,
          status = response.status;
      var locationHeader = response.headers.get("location");

      if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === "POST" || status === 307) && (!policy.maxRetries || currentRetries < policy.maxRetries)) {
        var builder = _url.URLBuilder.parse(request.url);

        builder.setPath(locationHeader);
        request.url = builder.toString(); // POST request with Status code 303 should be converted into a
        // redirected GET request if the redirect url is present in the location header

        if (status === 303) {
          request.method = "GET";
          delete request.body;
        }

        return policy._nextPolicy.sendRequest(request).then(function (res) {
          return handleRedirect(policy, res, currentRetries + 1);
        });
      }

      return Promise.resolve(response);
    }
  }, {
    "./requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js",
    "../url": "../node_modules/@azure/core-http/dist-esm/src/url.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/util/exponentialBackoffStrategy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DEFAULT_CLIENT_RETRY_INTERVAL = exports.DEFAULT_CLIENT_RETRY_COUNT = exports.DEFAULT_CLIENT_MIN_RETRY_INTERVAL = exports.DEFAULT_CLIENT_MAX_RETRY_INTERVAL = void 0;
    exports.isNumber = isNumber;
    exports.shouldRetry = shouldRetry;
    exports.updateRetryData = updateRetryData; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    var DEFAULT_CLIENT_RETRY_COUNT = 3; // intervals are in ms

    exports.DEFAULT_CLIENT_RETRY_COUNT = DEFAULT_CLIENT_RETRY_COUNT;
    var DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;
    exports.DEFAULT_CLIENT_RETRY_INTERVAL = DEFAULT_CLIENT_RETRY_INTERVAL;
    var DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;
    exports.DEFAULT_CLIENT_MAX_RETRY_INTERVAL = DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
    var DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;
    exports.DEFAULT_CLIENT_MIN_RETRY_INTERVAL = DEFAULT_CLIENT_MIN_RETRY_INTERVAL;

    function isNumber(n) {
      return typeof n === "number";
    }
    /**
     * @internal
     * Determines if the operation should be retried.
     *
     * @param retryLimit - Specifies the max number of retries.
     * @param predicate - Initial chekck on whether to retry based on given responses or errors
     * @param retryData -  The retry data.
     * @returns True if the operation qualifies for a retry; false otherwise.
     */


    function shouldRetry(retryLimit, predicate, retryData, response, error) {
      if (!predicate(response, error)) {
        return false;
      }

      return retryData.retryCount < retryLimit;
    }
    /**
     * @internal
     * Updates the retry data for the next attempt.
     *
     * @param retryOptions - specifies retry interval, and its lower bound and upper bound.
     * @param retryData -  The retry data.
     * @param err - The operation"s error, if any.
     */


    function updateRetryData(retryOptions) {
      var retryData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        retryCount: 0,
        retryInterval: 0
      };
      var err = arguments.length > 2 ? arguments[2] : undefined;

      if (err) {
        if (retryData.error) {
          err.innerError = retryData.error;
        }

        retryData.error = err;
      } // Adjust retry count


      retryData.retryCount++; // Adjust retry interval

      var incrementDelta = Math.pow(2, retryData.retryCount - 1) - 1;
      var boundedRandDelta = retryOptions.retryInterval * 0.8 + Math.floor(Math.random() * (retryOptions.retryInterval * 0.4));
      incrementDelta *= boundedRandDelta;
      retryData.retryInterval = Math.min(retryOptions.minRetryInterval + incrementDelta, retryOptions.maxRetryInterval);
      return retryData;
    }
  }, {}],
  "../node_modules/@azure/core-http/dist-esm/src/util/typeguards.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isDefined = isDefined; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Helper TypeGuard that checks if the value is not null or undefined.
     * @param thing - Anything
     * @internal
     */

    function isDefined(thing) {
      return typeof thing !== "undefined" && thing !== null;
    }
  }, {}],
  "../node_modules/@azure/core-http/dist-esm/src/util/delay.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.delay = delay;

    var _abortController = require("@azure/abort-controller");

    var _typeguards = require("./typeguards"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.


    var StandardAbortMessage = "The operation was aborted.";
    /**
     * A wrapper for setTimeout that resolves a promise after delayInMs milliseconds.
     * @param delayInMs - The number of milliseconds to be delayed.
     * @param value - The value to be resolved with after a timeout of t milliseconds.
     * @param options - The options for delay - currently abort options
     *   @param abortSignal - The abortSignal associated with containing operation.
     *   @param abortErrorMsg - The abort error message associated with containing operation.
     * @returns - Resolved promise
     */

    function delay(delayInMs, value, options) {
      return new Promise(function (resolve, reject) {
        var timer = undefined;
        var onAborted = undefined;

        var rejectOnAbort = function rejectOnAbort() {
          return reject(new _abortController.AbortError((options === null || options === void 0 ? void 0 : options.abortErrorMsg) ? options === null || options === void 0 ? void 0 : options.abortErrorMsg : StandardAbortMessage));
        };

        var removeListeners = function removeListeners() {
          if ((options === null || options === void 0 ? void 0 : options.abortSignal) && onAborted) {
            options.abortSignal.removeEventListener("abort", onAborted);
          }
        };

        onAborted = function onAborted() {
          if ((0, _typeguards.isDefined)(timer)) {
            clearTimeout(timer);
          }

          removeListeners();
          return rejectOnAbort();
        };

        if ((options === null || options === void 0 ? void 0 : options.abortSignal) && options.abortSignal.aborted) {
          return rejectOnAbort();
        }

        timer = setTimeout(function () {
          removeListeners();
          resolve(value);
        }, delayInMs);

        if (options === null || options === void 0 ? void 0 : options.abortSignal) {
          options.abortSignal.addEventListener("abort", onAborted);
        }
      });
    }
  }, {
    "@azure/abort-controller": "../node_modules/@azure/abort-controller/dist-esm/src/index.js",
    "./typeguards": "../node_modules/@azure/core-http/dist-esm/src/util/typeguards.js"
  }],
  "../node_modules/@azure/logger/dist-esm/src/log.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.log = log; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    function log() {
      if (arguments.length > 0) {
        var firstArg = String(arguments.length <= 0 ? undefined : arguments[0]);

        if (firstArg.includes(":error")) {
          var _console;

          (_console = console).error.apply(_console, arguments);
        } else if (firstArg.includes(":warning")) {
          var _console2;

          (_console2 = console).warn.apply(_console2, arguments);
        } else if (firstArg.includes(":info")) {
          var _console3;

          (_console3 = console).info.apply(_console3, arguments);
        } else if (firstArg.includes(":verbose")) {
          var _console4;

          (_console4 = console).debug.apply(_console4, arguments);
        } else {
          var _console5;

          (_console5 = console).debug.apply(_console5, arguments);
        }
      }
    }
  }, {}],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/_empty.js": [function (require, module, exports) {}, {}],
  "../node_modules/@azure/logger/dist-esm/src/debug.js": [function (require, module, exports) {
    var process = require("process");

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _log = require("./log");

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    var debugEnvVariable = typeof process !== "undefined" && process.env && undefined || undefined;
    var enabledString;
    var enabledNamespaces = [];
    var skippedNamespaces = [];
    var debuggers = [];

    if (debugEnvVariable) {
      enable(debugEnvVariable);
    }

    var debugObj = Object.assign(function (namespace) {
      return createDebugger(namespace);
    }, {
      enable: enable,
      enabled: enabled,
      disable: disable,
      log: _log.log
    });

    function enable(namespaces) {
      enabledString = namespaces;
      enabledNamespaces = [];
      skippedNamespaces = [];
      var wildcard = /\*/g;
      var namespaceList = namespaces.split(",").map(function (ns) {
        return ns.trim().replace(wildcard, ".*?");
      });

      var _iterator = _createForOfIteratorHelper(namespaceList),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var ns = _step.value;

          if (ns.startsWith("-")) {
            skippedNamespaces.push(new RegExp("^".concat(ns.substr(1), "$")));
          } else {
            enabledNamespaces.push(new RegExp("^".concat(ns, "$")));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var _iterator2 = _createForOfIteratorHelper(debuggers),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var instance = _step2.value;
          instance.enabled = enabled(instance.namespace);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    function enabled(namespace) {
      if (namespace.endsWith("*")) {
        return true;
      }

      var _iterator3 = _createForOfIteratorHelper(skippedNamespaces),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var skipped = _step3.value;

          if (skipped.test(namespace)) {
            return false;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      var _iterator4 = _createForOfIteratorHelper(enabledNamespaces),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var enabledNamespace = _step4.value;

          if (enabledNamespace.test(namespace)) {
            return true;
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return false;
    }

    function disable() {
      var result = enabledString || "";
      enable("");
      return result;
    }

    function createDebugger(namespace) {
      var newDebugger = Object.assign(debug, {
        enabled: enabled(namespace),
        destroy: destroy,
        log: debugObj.log,
        namespace: namespace,
        extend: extend
      });

      function debug() {
        if (!newDebugger.enabled) {
          return;
        }

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (args.length > 0) {
          args[0] = "".concat(namespace, " ").concat(args[0]);
        }

        newDebugger.log.apply(newDebugger, args);
      }

      debuggers.push(newDebugger);
      return newDebugger;
    }

    function destroy() {
      var index = debuggers.indexOf(this);

      if (index >= 0) {
        debuggers.splice(index, 1);
        return true;
      }

      return false;
    }

    function extend(namespace) {
      var newDebugger = createDebugger("".concat(this.namespace, ":").concat(namespace));
      newDebugger.log = this.log;
      return newDebugger;
    }

    var _default = debugObj;
    exports.default = _default;
  }, {
    "./log": "../node_modules/@azure/logger/dist-esm/src/log.browser.js",
    "process": "../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/_empty.js"
  }],
  "../node_modules/@azure/logger/dist-esm/src/index.js": [function (require, module, exports) {
    var process = require("process");

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AzureLogger = void 0;
    exports.createClientLogger = createClientLogger;
    exports.getLogLevel = getLogLevel;
    exports.setLogLevel = setLogLevel;

    var _debug = _interopRequireDefault(require("./debug"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    var registeredLoggers = new Set();
    var logLevelFromEnv = typeof process !== "undefined" && process.env && undefined || undefined;
    var azureLogLevel;
    /**
     * The AzureLogger provides a mechanism for overriding where logs are output to.
     * By default, logs are sent to stderr.
     * Override the `log` method to redirect logs to another location.
     */

    var AzureLogger = (0, _debug.default)("azure");
    exports.AzureLogger = AzureLogger;

    AzureLogger.log = function () {
      _debug.default.log.apply(_debug.default, arguments);
    };

    var AZURE_LOG_LEVELS = ["verbose", "info", "warning", "error"];

    if (logLevelFromEnv) {
      // avoid calling setLogLevel because we don't want a mis-set environment variable to crash
      if (isAzureLogLevel(logLevelFromEnv)) {
        setLogLevel(logLevelFromEnv);
      } else {
        console.error("AZURE_LOG_LEVEL set to unknown log level '".concat(logLevelFromEnv, "'; logging is not enabled. Acceptable values: ").concat(AZURE_LOG_LEVELS.join(", "), "."));
      }
    }
    /**
     * Immediately enables logging at the specified log level.
     * @param level - The log level to enable for logging.
     * Options from most verbose to least verbose are:
     * - verbose
     * - info
     * - warning
     * - error
     */


    function setLogLevel(level) {
      if (level && !isAzureLogLevel(level)) {
        throw new Error("Unknown log level '".concat(level, "'. Acceptable values: ").concat(AZURE_LOG_LEVELS.join(",")));
      }

      azureLogLevel = level;
      var enabledNamespaces = [];

      var _iterator = _createForOfIteratorHelper(registeredLoggers),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var logger = _step.value;

          if (shouldEnable(logger)) {
            enabledNamespaces.push(logger.namespace);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      _debug.default.enable(enabledNamespaces.join(","));
    }
    /**
     * Retrieves the currently specified log level.
     */


    function getLogLevel() {
      return azureLogLevel;
    }

    var levelMap = {
      verbose: 400,
      info: 300,
      warning: 200,
      error: 100
    };
    /**
     * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.
     * @param namespace - The name of the SDK package.
     * @hidden
     */

    function createClientLogger(namespace) {
      var clientRootLogger = AzureLogger.extend(namespace);
      patchLogMethod(AzureLogger, clientRootLogger);
      return {
        error: createLogger(clientRootLogger, "error"),
        warning: createLogger(clientRootLogger, "warning"),
        info: createLogger(clientRootLogger, "info"),
        verbose: createLogger(clientRootLogger, "verbose")
      };
    }

    function patchLogMethod(parent, child) {
      child.log = function () {
        parent.log.apply(parent, arguments);
      };
    }

    function createLogger(parent, level) {
      var logger = Object.assign(parent.extend(level), {
        level: level
      });
      patchLogMethod(parent, logger);

      if (shouldEnable(logger)) {
        var enabledNamespaces = _debug.default.disable();

        _debug.default.enable(enabledNamespaces + "," + logger.namespace);
      }

      registeredLoggers.add(logger);
      return logger;
    }

    function shouldEnable(logger) {
      if (azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]) {
        return true;
      } else {
        return false;
      }
    }

    function isAzureLogLevel(logLevel) {
      return AZURE_LOG_LEVELS.includes(logLevel);
    }
  }, {
    "./debug": "../node_modules/@azure/logger/dist-esm/src/debug.js",
    "process": "../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/_empty.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/log.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.logger = void 0;

    var _logger = require("@azure/logger"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.


    var logger = (0, _logger.createClientLogger)("core-http");
    exports.logger = logger;
  }, {
    "@azure/logger": "../node_modules/@azure/logger/dist-esm/src/index.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/policies/exponentialRetryPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RetryMode = exports.ExponentialRetryPolicy = exports.DefaultRetryOptions = void 0;
    exports.exponentialRetryPolicy = exponentialRetryPolicy;

    var _requestPolicy = require("./requestPolicy");

    var _exponentialBackoffStrategy = require("../util/exponentialBackoffStrategy");

    var _constants = require("../util/constants");

    var _restError = require("../restError");

    var _delay = require("../util/delay");

    var _log = require("../log");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * Policy that retries the request as many times as configured for as long as the max retry time interval specified, each retry waiting longer to begin than the last time.
     * @param retryCount - Maximum number of retries.
     * @param retryInterval - Base time between retries.
     * @param maxRetryInterval - Maximum time to wait between retries.
     */


    function exponentialRetryPolicy(retryCount, retryInterval, maxRetryInterval) {
      return {
        create: function create(nextPolicy, options) {
          return new ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval);
        }
      };
    }
    /**
     * Describes the Retry Mode type. Currently supporting only Exponential.
     */


    var RetryMode;
    exports.RetryMode = RetryMode;

    (function (RetryMode) {
      /**
       * Currently supported retry mode.
       * Each time a retry happens, it will take exponentially more time than the last time.
       */
      RetryMode[RetryMode["Exponential"] = 0] = "Exponential";
    })(RetryMode || (exports.RetryMode = RetryMode = {}));

    var DefaultRetryOptions = {
      maxRetries: _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_COUNT,
      retryDelayInMs: _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_INTERVAL,
      maxRetryDelayInMs: _exponentialBackoffStrategy.DEFAULT_CLIENT_MAX_RETRY_INTERVAL
    };
    /**
     * Instantiates a new "ExponentialRetryPolicyFilter" instance.
     */

    exports.DefaultRetryOptions = DefaultRetryOptions;

    var ExponentialRetryPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(ExponentialRetryPolicy, _BaseRequestPolicy);

      var _super = _createSuper(ExponentialRetryPolicy);
      /**
       * @param nextPolicy - The next RequestPolicy in the pipeline chain.
       * @param options - The options for this RequestPolicy.
       * @param retryCount - The client retry count.
       * @param retryInterval - The client retry interval, in milliseconds.
       * @param minRetryInterval - The minimum retry interval, in milliseconds.
       * @param maxRetryInterval - The maximum retry interval, in milliseconds.
       */


      function ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval) {
        var _this;

        _classCallCheck(this, ExponentialRetryPolicy);

        _this = _super.call(this, nextPolicy, options);
        _this.retryCount = (0, _exponentialBackoffStrategy.isNumber)(retryCount) ? retryCount : _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_COUNT;
        _this.retryInterval = (0, _exponentialBackoffStrategy.isNumber)(retryInterval) ? retryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_INTERVAL;
        _this.maxRetryInterval = (0, _exponentialBackoffStrategy.isNumber)(maxRetryInterval) ? maxRetryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
        return _this;
      }

      _createClass(ExponentialRetryPolicy, [{
        key: "sendRequest",
        value: function sendRequest(request) {
          var _this2 = this;

          return this._nextPolicy.sendRequest(request.clone()).then(function (response) {
            return retry(_this2, request, response);
          }).catch(function (error) {
            return retry(_this2, request, error.response, undefined, error);
          });
        }
      }]);

      return ExponentialRetryPolicy;
    }(_requestPolicy.BaseRequestPolicy);

    exports.ExponentialRetryPolicy = ExponentialRetryPolicy;

    function retry(_x, _x2, _x3, _x4, _x5) {
      return _retry.apply(this, arguments);
    }

    function _retry() {
      _retry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(policy, request, response, retryData, requestError) {
        var shouldPolicyRetry, isAborted, res, err;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                shouldPolicyRetry = function _shouldPolicyRetry(responseParam) {
                  var statusCode = responseParam === null || responseParam === void 0 ? void 0 : responseParam.status;

                  if (statusCode === 503 && (response === null || response === void 0 ? void 0 : response.headers.get(_constants.Constants.HeaderConstants.RETRY_AFTER))) {
                    return false;
                  }

                  if (statusCode === undefined || statusCode < 500 && statusCode !== 408 || statusCode === 501 || statusCode === 505) {
                    return false;
                  }

                  return true;
                };

                retryData = (0, _exponentialBackoffStrategy.updateRetryData)({
                  retryInterval: policy.retryInterval,
                  minRetryInterval: 0,
                  maxRetryInterval: policy.maxRetryInterval
                }, retryData, requestError);
                isAborted = request.abortSignal && request.abortSignal.aborted;

                if (!(!isAborted && (0, _exponentialBackoffStrategy.shouldRetry)(policy.retryCount, shouldPolicyRetry, retryData, response))) {
                  _context.next = 19;
                  break;
                }

                _log.logger.info("Retrying request in ".concat(retryData.retryInterval));

                _context.prev = 5;
                _context.next = 8;
                return (0, _delay.delay)(retryData.retryInterval);

              case 8:
                _context.next = 10;
                return policy._nextPolicy.sendRequest(request.clone());

              case 10:
                res = _context.sent;
                return _context.abrupt("return", retry(policy, request, res, retryData));

              case 14:
                _context.prev = 14;
                _context.t0 = _context["catch"](5);
                return _context.abrupt("return", retry(policy, request, response, retryData, _context.t0));

              case 17:
                _context.next = 25;
                break;

              case 19:
                if (!(isAborted || requestError || !response)) {
                  _context.next = 24;
                  break;
                } // If the operation failed in the end, return all errors instead of just the last one


                err = retryData.error || new _restError.RestError("Failed to send the request.", _restError.RestError.REQUEST_SEND_ERROR, response && response.status, response && response.request, response);
                throw err;

              case 24:
                return _context.abrupt("return", response);

              case 25:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[5, 14]]);
      }));
      return _retry.apply(this, arguments);
    }
  }, {
    "./requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js",
    "../util/exponentialBackoffStrategy": "../node_modules/@azure/core-http/dist-esm/src/util/exponentialBackoffStrategy.js",
    "../util/constants": "../node_modules/@azure/core-http/dist-esm/src/util/constants.js",
    "../restError": "../node_modules/@azure/core-http/dist-esm/src/restError.js",
    "../util/delay": "../node_modules/@azure/core-http/dist-esm/src/util/delay.js",
    "../log": "../node_modules/@azure/core-http/dist-esm/src/log.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/policies/logPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LogPolicy = void 0;
    exports.logPolicy = logPolicy;

    var _requestPolicy = require("./requestPolicy");

    var _sanitizer = require("../util/sanitizer");

    var _log = require("../log");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * Creates a policy that logs information about the outgoing request and the incoming responses.
     * @param loggingOptions - Logging options.
     * @returns An instance of the {@link LogPolicy}
     */


    function logPolicy() {
      var loggingOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return {
        create: function create(nextPolicy, options) {
          return new LogPolicy(nextPolicy, options, loggingOptions);
        }
      };
    }
    /**
     * A policy that logs information about the outgoing request and the incoming responses.
     */


    var LogPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(LogPolicy, _BaseRequestPolicy);

      var _super = _createSuper(LogPolicy);

      function LogPolicy(nextPolicy, options) {
        var _this;

        var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
            _ref$logger = _ref.logger,
            logger = _ref$logger === void 0 ? _log.logger.info : _ref$logger,
            _ref$allowedHeaderNam = _ref.allowedHeaderNames,
            allowedHeaderNames = _ref$allowedHeaderNam === void 0 ? [] : _ref$allowedHeaderNam,
            _ref$allowedQueryPara = _ref.allowedQueryParameters,
            allowedQueryParameters = _ref$allowedQueryPara === void 0 ? [] : _ref$allowedQueryPara;

        _classCallCheck(this, LogPolicy);

        _this = _super.call(this, nextPolicy, options);
        _this.logger = logger;
        _this.sanitizer = new _sanitizer.Sanitizer({
          allowedHeaderNames: allowedHeaderNames,
          allowedQueryParameters: allowedQueryParameters
        });
        return _this;
      }
      /**
       * Header names whose values will be logged when logging is enabled. Defaults to
       * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers
       * specified in this field will be added to that list.  Any other values will
       * be written to logs as "REDACTED".
       * @deprecated Pass these into the constructor instead.
       */


      _createClass(LogPolicy, [{
        key: "allowedHeaderNames",
        get: function get() {
          return this.sanitizer.allowedHeaderNames;
        }
        /**
         * Header names whose values will be logged when logging is enabled. Defaults to
         * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers
         * specified in this field will be added to that list.  Any other values will
         * be written to logs as "REDACTED".
         * @deprecated Pass these into the constructor instead.
         */
        ,
        set: function set(allowedHeaderNames) {
          this.sanitizer.allowedHeaderNames = allowedHeaderNames;
        }
        /**
         * Query string names whose values will be logged when logging is enabled. By default no
         * query string values are logged.
         * @deprecated Pass these into the constructor instead.
         */

      }, {
        key: "allowedQueryParameters",
        get: function get() {
          return this.sanitizer.allowedQueryParameters;
        }
        /**
         * Query string names whose values will be logged when logging is enabled. By default no
         * query string values are logged.
         * @deprecated Pass these into the constructor instead.
         */
        ,
        set: function set(allowedQueryParameters) {
          this.sanitizer.allowedQueryParameters = allowedQueryParameters;
        }
      }, {
        key: "sendRequest",
        value: function sendRequest(request) {
          var _this2 = this;

          if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);
          this.logRequest(request);
          return this._nextPolicy.sendRequest(request).then(function (response) {
            return _this2.logResponse(response);
          });
        }
      }, {
        key: "logRequest",
        value: function logRequest(request) {
          this.logger("Request: ".concat(this.sanitizer.sanitize(request)));
        }
      }, {
        key: "logResponse",
        value: function logResponse(response) {
          this.logger("Response status code: ".concat(response.status));
          this.logger("Headers: ".concat(this.sanitizer.sanitize(response.headers)));
          return response;
        }
      }]);

      return LogPolicy;
    }(_requestPolicy.BaseRequestPolicy);

    exports.LogPolicy = LogPolicy;
  }, {
    "./requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js",
    "../util/sanitizer": "../node_modules/@azure/core-http/dist-esm/src/util/sanitizer.js",
    "../log": "../node_modules/@azure/core-http/dist-esm/src/log.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/operationParameter.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getPathStringFromParameter = getPathStringFromParameter;
    exports.getPathStringFromParameterPath = getPathStringFromParameterPath; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Get the path to this parameter's value as a dotted string (a.b.c).
     * @param parameter - The parameter to get the path string for.
     * @returns The path to this parameter's value as a dotted string.
     */

    function getPathStringFromParameter(parameter) {
      return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);
    }

    function getPathStringFromParameterPath(parameterPath, mapper) {
      var result;

      if (typeof parameterPath === "string") {
        result = parameterPath;
      } else if (Array.isArray(parameterPath)) {
        result = parameterPath.join(".");
      } else {
        result = mapper.serializedName;
      }

      return result;
    }
  }, {}],
  "../node_modules/@azure/core-http/dist-esm/src/operationSpec.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getStreamResponseStatusCodes = getStreamResponseStatusCodes;

    var _serializer = require("./serializer"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Gets the list of status codes for streaming responses.
     * @internal
     */


    function getStreamResponseStatusCodes(operationSpec) {
      var result = new Set();

      for (var statusCode in operationSpec.responses) {
        var operationResponse = operationSpec.responses[statusCode];

        if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === _serializer.MapperType.Stream) {
          result.add(Number(statusCode));
        }
      }

      return result;
    }
  }, {
    "./serializer": "../node_modules/@azure/core-http/dist-esm/src/serializer.js"
  }],
  "../node_modules/@azure/core-auth/dist-esm/src/azureKeyCredential.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AzureKeyCredential = void 0;

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * A static-key-based credential that supports updating
     * the underlying key value.
     */


    var AzureKeyCredential = /*#__PURE__*/function () {
      /**
       * Create an instance of an AzureKeyCredential for use
       * with a service client.
       *
       * @param key - The initial value of the key to use in authentication
       */
      function AzureKeyCredential(key) {
        _classCallCheck(this, AzureKeyCredential);

        if (!key) {
          throw new Error("key must be a non-empty string");
        }

        this._key = key;
      }
      /**
       * The value of the key to be used in authentication
       */


      _createClass(AzureKeyCredential, [{
        key: "key",
        get: function get() {
          return this._key;
        }
        /**
         * Change the value of the key.
         *
         * Updates will take effect upon the next request after
         * updating the key value.
         *
         * @param newKey - The new key value to be used
         */

      }, {
        key: "update",
        value: function update(newKey) {
          this._key = newKey;
        }
      }]);

      return AzureKeyCredential;
    }();

    exports.AzureKeyCredential = AzureKeyCredential;
  }, {}],
  "../node_modules/@azure/core-auth/dist-esm/src/typeguards.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isObjectWithProperties = isObjectWithProperties;

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Helper TypeGuard that checks if something is defined or not.
     * @param thing - Anything
     * @internal
     */


    function isDefined(thing) {
      return typeof thing !== "undefined" && thing !== null;
    }
    /**
     * Helper TypeGuard that checks if the input is an object with the specified properties.
     * Note: The properties may be inherited.
     * @param thing - Anything.
     * @param properties - The name of the properties that should appear in the object.
     * @internal
     */


    function isObjectWithProperties(thing, properties) {
      if (!isDefined(thing) || _typeof(thing) !== "object") {
        return false;
      }

      var _iterator = _createForOfIteratorHelper(properties),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;

          if (!objectHasProperty(thing, property)) {
            return false;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return true;
    }
    /**
     * Helper TypeGuard that checks if the input is an object with the specified property.
     * Note: The property may be inherited.
     * @param thing - Any object.
     * @param property - The name of the property that should appear in the object.
     * @internal
     */


    function objectHasProperty(thing, property) {
      return _typeof(thing) === "object" && property in thing;
    }
  }, {}],
  "../node_modules/@azure/core-auth/dist-esm/src/azureNamedKeyCredential.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AzureNamedKeyCredential = void 0;
    exports.isNamedKeyCredential = isNamedKeyCredential;

    var _typeguards = require("./typeguards");

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /**
     * A static name/key-based credential that supports updating
     * the underlying name and key values.
     */


    var AzureNamedKeyCredential = /*#__PURE__*/function () {
      /**
       * Create an instance of an AzureNamedKeyCredential for use
       * with a service client.
       *
       * @param name - The initial value of the name to use in authentication.
       * @param key - The initial value of the key to use in authentication.
       */
      function AzureNamedKeyCredential(name, key) {
        _classCallCheck(this, AzureNamedKeyCredential);

        if (!name || !key) {
          throw new TypeError("name and key must be non-empty strings");
        }

        this._name = name;
        this._key = key;
      }
      /**
       * The value of the key to be used in authentication.
       */


      _createClass(AzureNamedKeyCredential, [{
        key: "key",
        get: function get() {
          return this._key;
        }
        /**
         * The value of the name to be used in authentication.
         */

      }, {
        key: "name",
        get: function get() {
          return this._name;
        }
        /**
         * Change the value of the key.
         *
         * Updates will take effect upon the next request after
         * updating the key value.
         *
         * @param newName - The new name value to be used.
         * @param newKey - The new key value to be used.
         */

      }, {
        key: "update",
        value: function update(newName, newKey) {
          if (!newName || !newKey) {
            throw new TypeError("newName and newKey must be non-empty strings");
          }

          this._name = newName;
          this._key = newKey;
        }
      }]);

      return AzureNamedKeyCredential;
    }();
    /**
     * Tests an object to determine whether it implements NamedKeyCredential.
     *
     * @param credential - The assumed NamedKeyCredential to be tested.
     */


    exports.AzureNamedKeyCredential = AzureNamedKeyCredential;

    function isNamedKeyCredential(credential) {
      return (0, _typeguards.isObjectWithProperties)(credential, ["name", "key"]) && typeof credential.key === "string" && typeof credential.name === "string";
    }
  }, {
    "./typeguards": "../node_modules/@azure/core-auth/dist-esm/src/typeguards.js"
  }],
  "../node_modules/@azure/core-auth/dist-esm/src/azureSASCredential.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AzureSASCredential = void 0;
    exports.isSASCredential = isSASCredential;

    var _typeguards = require("./typeguards");

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /**
     * A static-signature-based credential that supports updating
     * the underlying signature value.
     */


    var AzureSASCredential = /*#__PURE__*/function () {
      /**
       * Create an instance of an AzureSASCredential for use
       * with a service client.
       *
       * @param signature - The initial value of the shared access signature to use in authentication
       */
      function AzureSASCredential(signature) {
        _classCallCheck(this, AzureSASCredential);

        if (!signature) {
          throw new Error("shared access signature must be a non-empty string");
        }

        this._signature = signature;
      }
      /**
       * The value of the shared access signature to be used in authentication
       */


      _createClass(AzureSASCredential, [{
        key: "signature",
        get: function get() {
          return this._signature;
        }
        /**
         * Change the value of the signature.
         *
         * Updates will take effect upon the next request after
         * updating the signature value.
         *
         * @param newSignature - The new shared access signature value to be used
         */

      }, {
        key: "update",
        value: function update(newSignature) {
          if (!newSignature) {
            throw new Error("shared access signature must be a non-empty string");
          }

          this._signature = newSignature;
        }
      }]);

      return AzureSASCredential;
    }();
    /**
     * Tests an object to determine whether it implements SASCredential.
     *
     * @param credential - The assumed SASCredential to be tested.
     */


    exports.AzureSASCredential = AzureSASCredential;

    function isSASCredential(credential) {
      return (0, _typeguards.isObjectWithProperties)(credential, ["signature"]) && typeof credential.signature === "string";
    }
  }, {
    "./typeguards": "../node_modules/@azure/core-auth/dist-esm/src/typeguards.js"
  }],
  "../node_modules/@azure/core-auth/dist-esm/src/tokenCredential.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isTokenCredential = isTokenCredential; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Tests an object to determine whether it implements TokenCredential.
     *
     * @param credential - The assumed TokenCredential to be tested.
     */

    function isTokenCredential(credential) {
      // Check for an object with a 'getToken' function and possibly with
      // a 'signRequest' function.  We do this check to make sure that
      // a ServiceClientCredentials implementor (like TokenClientCredentials
      // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if
      // it doesn't actually implement TokenCredential also.
      var castCredential = credential;
      return castCredential && typeof castCredential.getToken === "function" && (castCredential.signRequest === undefined || castCredential.getToken.length > 0);
    }
  }, {}],
  "../node_modules/@azure/core-auth/dist-esm/src/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "AzureKeyCredential", {
      enumerable: true,
      get: function () {
        return _azureKeyCredential.AzureKeyCredential;
      }
    });
    Object.defineProperty(exports, "AzureNamedKeyCredential", {
      enumerable: true,
      get: function () {
        return _azureNamedKeyCredential.AzureNamedKeyCredential;
      }
    });
    Object.defineProperty(exports, "AzureSASCredential", {
      enumerable: true,
      get: function () {
        return _azureSASCredential.AzureSASCredential;
      }
    });
    Object.defineProperty(exports, "isNamedKeyCredential", {
      enumerable: true,
      get: function () {
        return _azureNamedKeyCredential.isNamedKeyCredential;
      }
    });
    Object.defineProperty(exports, "isSASCredential", {
      enumerable: true,
      get: function () {
        return _azureSASCredential.isSASCredential;
      }
    });
    Object.defineProperty(exports, "isTokenCredential", {
      enumerable: true,
      get: function () {
        return _tokenCredential.isTokenCredential;
      }
    });

    var _azureKeyCredential = require("./azureKeyCredential");

    var _azureNamedKeyCredential = require("./azureNamedKeyCredential");

    var _azureSASCredential = require("./azureSASCredential");

    var _tokenCredential = require("./tokenCredential");
  }, {
    "./azureKeyCredential": "../node_modules/@azure/core-auth/dist-esm/src/azureKeyCredential.js",
    "./azureNamedKeyCredential": "../node_modules/@azure/core-auth/dist-esm/src/azureNamedKeyCredential.js",
    "./azureSASCredential": "../node_modules/@azure/core-auth/dist-esm/src/azureSASCredential.js",
    "./tokenCredential": "../node_modules/@azure/core-auth/dist-esm/src/tokenCredential.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/policies/msRestUserAgentPolicy.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getDefaultUserAgentKey = getDefaultUserAgentKey;
    exports.getPlatformSpecificData = getPlatformSpecificData; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    function getDefaultUserAgentKey() {
      return "x-ms-useragent";
    }

    function getPlatformSpecificData() {
      var navigator = self.navigator;
      var osInfo = {
        key: "OS",
        value: (navigator.oscpu || navigator.platform).replace(" ", "")
      };
      return [osInfo];
    }
  }, {}],
  "../node_modules/@azure/core-http/dist-esm/src/policies/userAgentPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getDefaultUserAgentHeaderName = exports.UserAgentPolicy = void 0;
    exports.getDefaultUserAgentValue = getDefaultUserAgentValue;
    exports.userAgentPolicy = userAgentPolicy;

    var _requestPolicy = require("./requestPolicy");

    var _msRestUserAgentPolicy = require("./msRestUserAgentPolicy");

    var _constants = require("../util/constants");

    var _httpHeaders = require("../httpHeaders");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function getRuntimeInfo() {
      var msRestRuntime = {
        key: "core-http",
        value: _constants.Constants.coreHttpVersion
      };
      return [msRestRuntime];
    }

    function getUserAgentString(telemetryInfo) {
      var keySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : " ";
      var valueSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "/";
      return telemetryInfo.map(function (info) {
        var value = info.value ? "".concat(valueSeparator).concat(info.value) : "";
        return "".concat(info.key).concat(value);
      }).join(keySeparator);
    }

    var getDefaultUserAgentHeaderName = _msRestUserAgentPolicy.getDefaultUserAgentKey;
    /**
     * The default approach to generate user agents.
     * Uses static information from this package, plus system information available from the runtime.
     */

    exports.getDefaultUserAgentHeaderName = getDefaultUserAgentHeaderName;

    function getDefaultUserAgentValue() {
      var runtimeInfo = getRuntimeInfo();
      var platformSpecificData = (0, _msRestUserAgentPolicy.getPlatformSpecificData)();
      var userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));
      return userAgent;
    }
    /**
     * Returns a policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.
     * @param userAgentData - Telemetry information.
     * @returns A new {@link UserAgentPolicy}.
     */


    function userAgentPolicy(userAgentData) {
      var key = !userAgentData || userAgentData.key === undefined || userAgentData.key === null ? (0, _msRestUserAgentPolicy.getDefaultUserAgentKey)() : userAgentData.key;
      var value = !userAgentData || userAgentData.value === undefined || userAgentData.value === null ? getDefaultUserAgentValue() : userAgentData.value;
      return {
        create: function create(nextPolicy, options) {
          return new UserAgentPolicy(nextPolicy, options, key, value);
        }
      };
    }
    /**
     * A policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.
     */


    var UserAgentPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(UserAgentPolicy, _BaseRequestPolicy);

      var _super = _createSuper(UserAgentPolicy);

      function UserAgentPolicy(_nextPolicy, _options, headerKey, headerValue) {
        var _this;

        _classCallCheck(this, UserAgentPolicy);

        _this = _super.call(this, _nextPolicy, _options);
        _this._nextPolicy = _nextPolicy;
        _this._options = _options;
        _this.headerKey = headerKey;
        _this.headerValue = headerValue;
        return _this;
      }

      _createClass(UserAgentPolicy, [{
        key: "sendRequest",
        value: function sendRequest(request) {
          this.addUserAgentHeader(request);
          return this._nextPolicy.sendRequest(request);
        }
        /**
         * Adds the user agent header to the outgoing request.
         */

      }, {
        key: "addUserAgentHeader",
        value: function addUserAgentHeader(request) {
          if (!request.headers) {
            request.headers = new _httpHeaders.HttpHeaders();
          }

          if (!request.headers.get(this.headerKey) && this.headerValue) {
            request.headers.set(this.headerKey, this.headerValue);
          }
        }
      }]);

      return UserAgentPolicy;
    }(_requestPolicy.BaseRequestPolicy);

    exports.UserAgentPolicy = UserAgentPolicy;
  }, {
    "./requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js",
    "./msRestUserAgentPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/msRestUserAgentPolicy.browser.js",
    "../util/constants": "../node_modules/@azure/core-http/dist-esm/src/util/constants.js",
    "../httpHeaders": "../node_modules/@azure/core-http/dist-esm/src/httpHeaders.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/queryCollectionFormat.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.QueryCollectionFormat = void 0; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * The format that will be used to join an array of values together for a query parameter value.
     */

    var QueryCollectionFormat;
    exports.QueryCollectionFormat = QueryCollectionFormat;

    (function (QueryCollectionFormat) {
      /**
       * CSV: Each pair of segments joined by a single comma.
       */
      QueryCollectionFormat["Csv"] = ",";
      /**
       * SSV: Each pair of segments joined by a single space character.
       */

      QueryCollectionFormat["Ssv"] = " ";
      /**
       * TSV: Each pair of segments joined by a single tab character.
       */

      QueryCollectionFormat["Tsv"] = "\t";
      /**
       * Pipes: Each pair of segments joined by a single pipe character.
       */

      QueryCollectionFormat["Pipes"] = "|";
      /**
       * Denotes this is an array of values that should be passed to the server in multiple key/value pairs, e.g. `?queryParam=value1&queryParam=value2`
       */

      QueryCollectionFormat["Multi"] = "Multi";
    })(QueryCollectionFormat || (exports.QueryCollectionFormat = QueryCollectionFormat = {}));
  }, {}],
  "../node_modules/@azure/core-http/dist-esm/src/policies/bearerTokenAuthenticationPolicy.js": [function (require, module, exports) {
    var define;
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DEFAULT_CYCLER_OPTIONS = void 0;
    exports.bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy;

    var _requestPolicy = require("../policies/requestPolicy");

    var _constants = require("../util/constants");

    var _delay = require("../util/delay");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    } // Default options for the cycler if none are provided


    var DEFAULT_CYCLER_OPTIONS = {
      forcedRefreshWindowInMs: 1000,
      retryIntervalInMs: 3000,
      refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry

    };
    /**
     * Converts an an unreliable access token getter (which may resolve with null)
     * into an AccessTokenGetter by retrying the unreliable getter in a regular
     * interval.
     *
     * @param getAccessToken - a function that produces a promise of an access
     * token that may fail by returning null
     * @param retryIntervalInMs - the time (in milliseconds) to wait between retry
     * attempts
     * @param timeoutInMs - the timestamp after which the refresh attempt will fail,
     * throwing an exception
     * @returns - a promise that, if it resolves, will resolve with an access token
     */

    exports.DEFAULT_CYCLER_OPTIONS = DEFAULT_CYCLER_OPTIONS;

    function beginRefresh(_x, _x2, _x3) {
      return _beginRefresh.apply(this, arguments);
    }
    /**
     * Creates a token cycler from a credential, scopes, and optional settings.
     *
     * A token cycler represents a way to reliably retrieve a valid access token
     * from a TokenCredential. It will handle initializing the token, refreshing it
     * when it nears expiration, and synchronizes refresh attempts to avoid
     * concurrency hazards.
     *
     * @param credential - the underlying TokenCredential that provides the access
     * token
     * @param scopes - the scopes to request authorization for
     * @param tokenCyclerOptions - optionally override default settings for the cycler
     *
     * @returns - a function that reliably produces a valid access token
     */


    function _beginRefresh() {
      _beginRefresh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(getAccessToken, retryIntervalInMs, timeoutInMs) {
        var tryGetAccessToken, _tryGetAccessToken, token;

        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _tryGetAccessToken = function _tryGetAccessToken3() {
                  _tryGetAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
                    var finalToken;
                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            if (!(Date.now() < timeoutInMs)) {
                              _context3.next = 12;
                              break;
                            }

                            _context3.prev = 1;
                            _context3.next = 4;
                            return getAccessToken();

                          case 4:
                            return _context3.abrupt("return", _context3.sent);

                          case 7:
                            _context3.prev = 7;
                            _context3.t0 = _context3["catch"](1);
                            return _context3.abrupt("return", null);

                          case 10:
                            _context3.next = 18;
                            break;

                          case 12:
                            _context3.next = 14;
                            return getAccessToken();

                          case 14:
                            finalToken = _context3.sent;

                            if (!(finalToken === null)) {
                              _context3.next = 17;
                              break;
                            }

                            throw new Error("Failed to refresh access token.");

                          case 17:
                            return _context3.abrupt("return", finalToken);

                          case 18:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3, null, [[1, 7]]);
                  }));
                  return _tryGetAccessToken.apply(this, arguments);
                };

                tryGetAccessToken = function _tryGetAccessToken2() {
                  return _tryGetAccessToken.apply(this, arguments);
                };

                _context4.next = 4;
                return tryGetAccessToken();

              case 4:
                token = _context4.sent;

              case 5:
                if (!(token === null)) {
                  _context4.next = 13;
                  break;
                }

                _context4.next = 8;
                return (0, _delay.delay)(retryIntervalInMs);

              case 8:
                _context4.next = 10;
                return tryGetAccessToken();

              case 10:
                token = _context4.sent;
                _context4.next = 5;
                break;

              case 13:
                return _context4.abrupt("return", token);

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
      return _beginRefresh.apply(this, arguments);
    }

    function createTokenCycler(credential, scopes, tokenCyclerOptions) {
      var refreshWorker = null;
      var token = null;
      var options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);
      /**
       * This little holder defines several predicates that we use to construct
       * the rules of refreshing the token.
       */

      var cycler = {
        /**
         * Produces true if a refresh job is currently in progress.
         */
        get isRefreshing() {
          return refreshWorker !== null;
        },

        /**
         * Produces true if the cycler SHOULD refresh (we are within the refresh
         * window and not already refreshing)
         */
        get shouldRefresh() {
          var _a;

          return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();
        },

        /**
         * Produces true if the cycler MUST refresh (null or nearly-expired
         * token).
         */
        get mustRefresh() {
          return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();
        }

      };
      /**
       * Starts a refresh job or returns the existing job if one is already
       * running.
       */

      function refresh(getTokenOptions) {
        var _a;

        if (!cycler.isRefreshing) {
          // We bind `scopes` here to avoid passing it around a lot
          var tryGetAccessToken = function tryGetAccessToken() {
            return credential.getToken(scopes, getTokenOptions);
          }; // Take advantage of promise chaining to insert an assignment to `token`
          // before the refresh can be considered done.


          refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, // If we don't have a token, then we should timeout immediately
          (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(function (_token) {
            refreshWorker = null;
            token = _token;
            return token;
          }).catch(function (reason) {
            // We also should reset the refresher if we enter a failed state.  All
            // existing awaiters will throw, but subsequent requests will start a
            // new retry chain.
            refreshWorker = null;
            token = null;
            throw reason;
          });
        }

        return refreshWorker;
      }

      return /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tokenOptions) {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!cycler.mustRefresh) {
                    _context.next = 2;
                    break;
                  }

                  return _context.abrupt("return", refresh(tokenOptions));

                case 2:
                  if (cycler.shouldRefresh) {
                    refresh(tokenOptions);
                  }

                  return _context.abrupt("return", token);

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x4) {
          return _ref.apply(this, arguments);
        };
      }();
    } // #endregion

    /**
     * Creates a new factory for a RequestPolicy that applies a bearer token to
     * the requests' `Authorization` headers.
     *
     * @param credential - The TokenCredential implementation that can supply the bearer token.
     * @param scopes - The scopes for which the bearer token applies.
     */


    function bearerTokenAuthenticationPolicy(credential, scopes) {
      // This simple function encapsulates the entire process of reliably retrieving the token
      var getToken = createTokenCycler(credential, scopes
      /* , options */
      );

      var BearerTokenAuthenticationPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
        _inherits(BearerTokenAuthenticationPolicy, _BaseRequestPolicy);

        var _super = _createSuper(BearerTokenAuthenticationPolicy);

        function BearerTokenAuthenticationPolicy(nextPolicy, options) {
          _classCallCheck(this, BearerTokenAuthenticationPolicy);

          return _super.call(this, nextPolicy, options);
        }

        _createClass(BearerTokenAuthenticationPolicy, [{
          key: "sendRequest",
          value: function () {
            var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(webResource) {
              var _yield$getToken, token;

              return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      if (webResource.url.toLowerCase().startsWith("https://")) {
                        _context2.next = 2;
                        break;
                      }

                      throw new Error("Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.");

                    case 2:
                      _context2.next = 4;
                      return getToken({
                        abortSignal: webResource.abortSignal,
                        tracingOptions: {
                          tracingContext: webResource.tracingContext
                        }
                      });

                    case 4:
                      _yield$getToken = _context2.sent;
                      token = _yield$getToken.token;
                      webResource.headers.set(_constants.Constants.HeaderConstants.AUTHORIZATION, "Bearer ".concat(token));
                      return _context2.abrupt("return", this._nextPolicy.sendRequest(webResource));

                    case 8:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2, this);
            }));

            function sendRequest(_x5) {
              return _sendRequest.apply(this, arguments);
            }

            return sendRequest;
          }()
        }]);

        return BearerTokenAuthenticationPolicy;
      }(_requestPolicy.BaseRequestPolicy);

      return {
        create: function create(nextPolicy, options) {
          return new BearerTokenAuthenticationPolicy(nextPolicy, options);
        }
      };
    }
  }, {
    "../policies/requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js",
    "../util/constants": "../node_modules/@azure/core-http/dist-esm/src/util/constants.js",
    "../util/delay": "../node_modules/@azure/core-http/dist-esm/src/util/delay.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/policies/disableResponseDecompressionPolicy.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DisableResponseDecompressionPolicy = void 0;
    exports.disableResponseDecompressionPolicy = disableResponseDecompressionPolicy;

    var _requestPolicy = require("./requestPolicy");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    var DisbleResponseDecompressionNotSupportedInBrowser = new Error("DisableResponseDecompressionPolicy is not supported in browser environment");
    /**
     * {@link DisableResponseDecompressionPolicy} is not supported in browser and attempting
     * to use it will results in error being thrown.
     */

    function disableResponseDecompressionPolicy() {
      return {
        create: function create(_nextPolicy, _options) {
          throw DisbleResponseDecompressionNotSupportedInBrowser;
        }
      };
    }

    var DisableResponseDecompressionPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(DisableResponseDecompressionPolicy, _BaseRequestPolicy);

      var _super = _createSuper(DisableResponseDecompressionPolicy);

      function DisableResponseDecompressionPolicy(nextPolicy, options) {
        var _this;

        _classCallCheck(this, DisableResponseDecompressionPolicy);

        _this = _super.call(this, nextPolicy, options);
        throw DisbleResponseDecompressionNotSupportedInBrowser;
        return _this;
      }

      _createClass(DisableResponseDecompressionPolicy, [{
        key: "sendRequest",
        value: function () {
          var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_request) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    throw DisbleResponseDecompressionNotSupportedInBrowser;

                  case 1:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          function sendRequest(_x) {
            return _sendRequest.apply(this, arguments);
          }

          return sendRequest;
        }()
      }]);

      return DisableResponseDecompressionPolicy;
    }(_requestPolicy.BaseRequestPolicy);

    exports.DisableResponseDecompressionPolicy = DisableResponseDecompressionPolicy;
  }, {
    "./requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/policies/generateClientRequestIdPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GenerateClientRequestIdPolicy = void 0;
    exports.generateClientRequestIdPolicy = generateClientRequestIdPolicy;

    var _requestPolicy = require("./requestPolicy");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * Creates a policy that assigns a unique request id to outgoing requests.
     * @param requestIdHeaderName - The name of the header to use when assigning the unique id to the request.
     */


    function generateClientRequestIdPolicy() {
      var requestIdHeaderName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "x-ms-client-request-id";
      return {
        create: function create(nextPolicy, options) {
          return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);
        }
      };
    }

    var GenerateClientRequestIdPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(GenerateClientRequestIdPolicy, _BaseRequestPolicy);

      var _super = _createSuper(GenerateClientRequestIdPolicy);

      function GenerateClientRequestIdPolicy(nextPolicy, options, _requestIdHeaderName) {
        var _this;

        _classCallCheck(this, GenerateClientRequestIdPolicy);

        _this = _super.call(this, nextPolicy, options);
        _this._requestIdHeaderName = _requestIdHeaderName;
        return _this;
      }

      _createClass(GenerateClientRequestIdPolicy, [{
        key: "sendRequest",
        value: function sendRequest(request) {
          if (!request.headers.contains(this._requestIdHeaderName)) {
            request.headers.set(this._requestIdHeaderName, request.requestId);
          }

          return this._nextPolicy.sendRequest(request);
        }
      }]);

      return GenerateClientRequestIdPolicy;
    }(_requestPolicy.BaseRequestPolicy);

    exports.GenerateClientRequestIdPolicy = GenerateClientRequestIdPolicy;
  }, {
    "./requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/httpClientCache.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getCachedDefaultHttpClient = getCachedDefaultHttpClient;

    var _defaultHttpClient = require("./defaultHttpClient"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.


    var cachedHttpClient;

    function getCachedDefaultHttpClient() {
      if (!cachedHttpClient) {
        cachedHttpClient = new _defaultHttpClient.DefaultHttpClient();
      }

      return cachedHttpClient;
    }
  }, {
    "./defaultHttpClient": "../node_modules/@azure/core-http/dist-esm/src/defaultHttpClient.browser.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/policies/ndJsonPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ndJsonPolicy = ndJsonPolicy;

    var _requestPolicy = require("./requestPolicy");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function ndJsonPolicy() {
      return {
        create: function create(nextPolicy, options) {
          return new NdJsonPolicy(nextPolicy, options);
        }
      };
    }
    /**
     * NdJsonPolicy that formats a JSON array as newline-delimited JSON
     */


    var NdJsonPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(NdJsonPolicy, _BaseRequestPolicy);

      var _super = _createSuper(NdJsonPolicy);
      /**
       * Creates an instance of KeepAlivePolicy.
       */


      function NdJsonPolicy(nextPolicy, options) {
        _classCallCheck(this, NdJsonPolicy);

        return _super.call(this, nextPolicy, options);
      }
      /**
       * Sends a request.
       */


      _createClass(NdJsonPolicy, [{
        key: "sendRequest",
        value: function () {
          var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {
            var body;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    // There currently isn't a good way to bypass the serializer
                    if (typeof request.body === "string" && request.body.startsWith("[")) {
                      body = JSON.parse(request.body);

                      if (Array.isArray(body)) {
                        request.body = body.map(function (item) {
                          return JSON.stringify(item) + "\n";
                        }).join("");
                      }
                    }

                    return _context.abrupt("return", this._nextPolicy.sendRequest(request));

                  case 2:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function sendRequest(_x) {
            return _sendRequest.apply(this, arguments);
          }

          return sendRequest;
        }()
      }]);

      return NdJsonPolicy;
    }(_requestPolicy.BaseRequestPolicy);
  }, {
    "./requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/policies/proxyPolicy.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProxyPolicy = void 0;
    exports.getDefaultProxySettings = getDefaultProxySettings;
    exports.proxyPolicy = proxyPolicy;

    var _requestPolicy = require("./requestPolicy");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    var proxyNotSupportedInBrowser = new Error("ProxyPolicy is not supported in browser environment");

    function getDefaultProxySettings(_proxyUrl) {
      return undefined;
    }

    function proxyPolicy(_proxySettings) {
      return {
        create: function create(_nextPolicy, _options) {
          throw proxyNotSupportedInBrowser;
        }
      };
    }

    var ProxyPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(ProxyPolicy, _BaseRequestPolicy);

      var _super = _createSuper(ProxyPolicy);

      function ProxyPolicy(nextPolicy, options) {
        var _this;

        _classCallCheck(this, ProxyPolicy);

        _this = _super.call(this, nextPolicy, options);
        throw proxyNotSupportedInBrowser;
        return _this;
      }

      _createClass(ProxyPolicy, [{
        key: "sendRequest",
        value: function sendRequest(_request) {
          throw proxyNotSupportedInBrowser;
        }
      }]);

      return ProxyPolicy;
    }(_requestPolicy.BaseRequestPolicy);

    exports.ProxyPolicy = ProxyPolicy;
  }, {
    "./requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/policies/rpRegistrationPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RPRegistrationPolicy = void 0;
    exports.rpRegistrationPolicy = rpRegistrationPolicy;

    var utils = _interopRequireWildcard(require("../util/utils"));

    var _requestPolicy = require("./requestPolicy");

    var _delay = require("../util/delay");

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function (nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj.default = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function rpRegistrationPolicy() {
      var retryTimeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;
      return {
        create: function create(nextPolicy, options) {
          return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);
        }
      };
    }

    var RPRegistrationPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(RPRegistrationPolicy, _BaseRequestPolicy);

      var _super = _createSuper(RPRegistrationPolicy);

      function RPRegistrationPolicy(nextPolicy, options) {
        var _this;

        var _retryTimeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;

        _classCallCheck(this, RPRegistrationPolicy);

        _this = _super.call(this, nextPolicy, options);
        _this._retryTimeout = _retryTimeout;
        return _this;
      }

      _createClass(RPRegistrationPolicy, [{
        key: "sendRequest",
        value: function sendRequest(request) {
          var _this2 = this;

          return this._nextPolicy.sendRequest(request.clone()).then(function (response) {
            return registerIfNeeded(_this2, request, response);
          });
        }
      }]);

      return RPRegistrationPolicy;
    }(_requestPolicy.BaseRequestPolicy);

    exports.RPRegistrationPolicy = RPRegistrationPolicy;

    function registerIfNeeded(policy, request, response) {
      if (response.status === 409) {
        var rpName = checkRPNotRegisteredError(response.bodyAsText);

        if (rpName) {
          var urlPrefix = extractSubscriptionUrl(request.url);
          return registerRP(policy, urlPrefix, rpName, request) // Autoregistration of ${provider} failed for some reason. We will not return this error
          // instead will return the initial response with 409 status code back to the user.
          // do nothing here as we are returning the original response at the end of this method.
          .catch(function () {
            return false;
          }).then(function (registrationStatus) {
            if (registrationStatus) {
              // Retry the original request. We have to change the x-ms-client-request-id
              // otherwise Azure endpoint will return the initial 409 (cached) response.
              request.headers.set("x-ms-client-request-id", utils.generateUuid());
              return policy._nextPolicy.sendRequest(request.clone());
            }

            return response;
          });
        }
      }

      return Promise.resolve(response);
    }
    /**
     * Reuses the headers of the original request and url (if specified).
     * @param originalRequest - The original request
     * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.
     * @returns A new request object with desired headers.
     */


    function getRequestEssentials(originalRequest) {
      var reuseUrlToo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var reqOptions = originalRequest.clone();

      if (reuseUrlToo) {
        reqOptions.url = originalRequest.url;
      } // We have to change the x-ms-client-request-id otherwise Azure endpoint
      // will return the initial 409 (cached) response.


      reqOptions.headers.set("x-ms-client-request-id", utils.generateUuid()); // Set content-type to application/json

      reqOptions.headers.set("Content-Type", "application/json; charset=utf-8");
      return reqOptions;
    }
    /**
     * Validates the error code and message associated with 409 response status code. If it matches to that of
     * RP not registered then it returns the name of the RP else returns undefined.
     * @param body - The response body received after making the original request.
     * @returns The name of the RP if condition is satisfied else undefined.
     */


    function checkRPNotRegisteredError(body) {
      var result, responseBody;

      if (body) {
        try {
          responseBody = JSON.parse(body);
        } catch (err) {// do nothing;
        }

        if (responseBody && responseBody.error && responseBody.error.message && responseBody.error.code && responseBody.error.code === "MissingSubscriptionRegistration") {
          var matchRes = responseBody.error.message.match(/.*'(.*)'/i);

          if (matchRes) {
            result = matchRes.pop();
          }
        }
      }

      return result;
    }
    /**
     * Extracts the first part of the URL, just after subscription:
     * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/
     * @param url - The original request url
     * @returns The url prefix as explained above.
     */


    function extractSubscriptionUrl(url) {
      var result;
      var matchRes = url.match(/.*\/subscriptions\/[a-f0-9-]+\//gi);

      if (matchRes && matchRes[0]) {
        result = matchRes[0];
      } else {
        throw new Error("Unable to extract subscriptionId from the given url - ".concat(url, "."));
      }

      return result;
    }
    /**
     * Registers the given provider.
     * @param policy - The RPRegistrationPolicy this function is being called against.
     * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/
     * @param provider - The provider name to be registered.
     * @param originalRequest - The original request sent by the user that returned a 409 response
     * with a message that the provider is not registered.
     */


    function registerRP(_x, _x2, _x3, _x4) {
      return _registerRP.apply(this, arguments);
    }
    /**
     * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.
     * Polling will happen till the registrationState property of the response body is "Registered".
     * @param policy - The RPRegistrationPolicy this function is being called against.
     * @param url - The request url for polling
     * @param originalRequest - The original request sent by the user that returned a 409 response
     * with a message that the provider is not registered.
     * @returns True if RP Registration is successful.
     */


    function _registerRP() {
      _registerRP = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(policy, urlPrefix, provider, originalRequest) {
        var postUrl, getUrl, reqOptions, response;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                postUrl = "".concat(urlPrefix, "providers/").concat(provider, "/register?api-version=2016-02-01");
                getUrl = "".concat(urlPrefix, "providers/").concat(provider, "?api-version=2016-02-01");
                reqOptions = getRequestEssentials(originalRequest);
                reqOptions.method = "POST";
                reqOptions.url = postUrl;
                _context.next = 7;
                return policy._nextPolicy.sendRequest(reqOptions);

              case 7:
                response = _context.sent;

                if (!(response.status !== 200)) {
                  _context.next = 10;
                  break;
                }

                throw new Error("Autoregistration of ".concat(provider, " failed. Please try registering manually."));

              case 10:
                return _context.abrupt("return", getRegistrationStatus(policy, getUrl, originalRequest));

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _registerRP.apply(this, arguments);
    }

    function getRegistrationStatus(_x5, _x6, _x7) {
      return _getRegistrationStatus.apply(this, arguments);
    }

    function _getRegistrationStatus() {
      _getRegistrationStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(policy, url, originalRequest) {
        var reqOptions, res, obj;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                reqOptions = getRequestEssentials(originalRequest);
                reqOptions.url = url;
                reqOptions.method = "GET";
                _context2.next = 5;
                return policy._nextPolicy.sendRequest(reqOptions);

              case 5:
                res = _context2.sent;
                obj = res.parsedBody;

                if (!(res.parsedBody && obj.registrationState && obj.registrationState === "Registered")) {
                  _context2.next = 11;
                  break;
                }

                return _context2.abrupt("return", true);

              case 11:
                _context2.next = 13;
                return (0, _delay.delay)(policy._retryTimeout * 1000);

              case 13:
                return _context2.abrupt("return", getRegistrationStatus(policy, url, originalRequest));

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      return _getRegistrationStatus.apply(this, arguments);
    }
  }, {
    "../util/utils": "../node_modules/@azure/core-http/dist-esm/src/util/utils.js",
    "./requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js",
    "../util/delay": "../node_modules/@azure/core-http/dist-esm/src/util/delay.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/policies/signingPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SigningPolicy = void 0;
    exports.signingPolicy = signingPolicy;

    var _requestPolicy = require("./requestPolicy");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * Creates a policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.
     * @param authenticationProvider - The authentication provider.
     * @returns An instance of the {@link SigningPolicy}.
     */


    function signingPolicy(authenticationProvider) {
      return {
        create: function create(nextPolicy, options) {
          return new SigningPolicy(nextPolicy, options, authenticationProvider);
        }
      };
    }
    /**
     * A policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.
     */


    var SigningPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(SigningPolicy, _BaseRequestPolicy);

      var _super = _createSuper(SigningPolicy);

      function SigningPolicy(nextPolicy, options, authenticationProvider) {
        var _this;

        _classCallCheck(this, SigningPolicy);

        _this = _super.call(this, nextPolicy, options);
        _this.authenticationProvider = authenticationProvider;
        return _this;
      }

      _createClass(SigningPolicy, [{
        key: "signRequest",
        value: function signRequest(request) {
          return this.authenticationProvider.signRequest(request);
        }
      }, {
        key: "sendRequest",
        value: function sendRequest(request) {
          var _this2 = this;

          return this.signRequest(request).then(function (nextRequest) {
            return _this2._nextPolicy.sendRequest(nextRequest);
          });
        }
      }]);

      return SigningPolicy;
    }(_requestPolicy.BaseRequestPolicy);

    exports.SigningPolicy = SigningPolicy;
  }, {
    "./requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/policies/systemErrorRetryPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SystemErrorRetryPolicy = void 0;
    exports.systemErrorRetryPolicy = systemErrorRetryPolicy;

    var _requestPolicy = require("./requestPolicy");

    var _exponentialBackoffStrategy = require("../util/exponentialBackoffStrategy");

    var _delay = require("../util/delay");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * A policy that retries when there's a system error, identified by the codes "ETIMEDOUT", "ESOCKETTIMEDOUT", "ECONNREFUSED", "ECONNRESET" or "ENOENT".
     * @param retryCount - Maximum number of retries.
     * @param retryInterval - The client retry interval, in milliseconds.
     * @param minRetryInterval - The minimum retry interval, in milliseconds.
     * @param maxRetryInterval - The maximum retry interval, in milliseconds.
     * @returns An instance of the {@link SystemErrorRetryPolicy}
     */


    function systemErrorRetryPolicy(retryCount, retryInterval, minRetryInterval, maxRetryInterval) {
      return {
        create: function create(nextPolicy, options) {
          return new SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);
        }
      };
    }
    /**
     * A policy that retries when there's a system error, identified by the codes "ETIMEDOUT", "ESOCKETTIMEDOUT", "ECONNREFUSED", "ECONNRESET" or "ENOENT".
     * @param retryCount - The client retry count.
     * @param retryInterval - The client retry interval, in milliseconds.
     * @param minRetryInterval - The minimum retry interval, in milliseconds.
     * @param maxRetryInterval - The maximum retry interval, in milliseconds.
     */


    var SystemErrorRetryPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(SystemErrorRetryPolicy, _BaseRequestPolicy);

      var _super = _createSuper(SystemErrorRetryPolicy);

      function SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval) {
        var _this;

        _classCallCheck(this, SystemErrorRetryPolicy);

        _this = _super.call(this, nextPolicy, options);
        _this.retryCount = (0, _exponentialBackoffStrategy.isNumber)(retryCount) ? retryCount : _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_COUNT;
        _this.retryInterval = (0, _exponentialBackoffStrategy.isNumber)(retryInterval) ? retryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_INTERVAL;
        _this.minRetryInterval = (0, _exponentialBackoffStrategy.isNumber)(minRetryInterval) ? minRetryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_MIN_RETRY_INTERVAL;
        _this.maxRetryInterval = (0, _exponentialBackoffStrategy.isNumber)(maxRetryInterval) ? maxRetryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
        return _this;
      }

      _createClass(SystemErrorRetryPolicy, [{
        key: "sendRequest",
        value: function sendRequest(request) {
          var _this2 = this;

          return this._nextPolicy.sendRequest(request.clone()).catch(function (error) {
            return retry(_this2, request, error.response, error);
          });
        }
      }]);

      return SystemErrorRetryPolicy;
    }(_requestPolicy.BaseRequestPolicy);

    exports.SystemErrorRetryPolicy = SystemErrorRetryPolicy;

    function retry(_x, _x2, _x3, _x4, _x5) {
      return _retry.apply(this, arguments);
    }

    function _retry() {
      _retry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(policy, request, operationResponse, err, retryData) {
        var shouldPolicyRetry;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                shouldPolicyRetry = function _shouldPolicyRetry(_response, error) {
                  if (error && error.code && (error.code === "ETIMEDOUT" || error.code === "ESOCKETTIMEDOUT" || error.code === "ECONNREFUSED" || error.code === "ECONNRESET" || error.code === "ENOENT")) {
                    return true;
                  }

                  return false;
                };

                retryData = (0, _exponentialBackoffStrategy.updateRetryData)(policy, retryData, err);

                if (!(0, _exponentialBackoffStrategy.shouldRetry)(policy.retryCount, shouldPolicyRetry, retryData, operationResponse, err)) {
                  _context.next = 14;
                  break;
                }

                _context.prev = 3;
                _context.next = 6;
                return (0, _delay.delay)(retryData.retryInterval);

              case 6:
                return _context.abrupt("return", policy._nextPolicy.sendRequest(request.clone()));

              case 9:
                _context.prev = 9;
                _context.t0 = _context["catch"](3);
                return _context.abrupt("return", retry(policy, request, operationResponse, _context.t0, retryData));

              case 12:
                _context.next = 17;
                break;

              case 14:
                if (!err) {
                  _context.next = 16;
                  break;
                }

                return _context.abrupt("return", Promise.reject(retryData.error));

              case 16:
                return _context.abrupt("return", operationResponse);

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[3, 9]]);
      }));
      return _retry.apply(this, arguments);
    }
  }, {
    "./requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js",
    "../util/exponentialBackoffStrategy": "../node_modules/@azure/core-http/dist-esm/src/util/exponentialBackoffStrategy.js",
    "../util/delay": "../node_modules/@azure/core-http/dist-esm/src/util/delay.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/util/throttlingRetryStrategy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DEFAULT_CLIENT_MAX_RETRY_COUNT = void 0; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Maximum number of retries for the throttling retry policy
     */

    var DEFAULT_CLIENT_MAX_RETRY_COUNT = 3;
    exports.DEFAULT_CLIENT_MAX_RETRY_COUNT = DEFAULT_CLIENT_MAX_RETRY_COUNT;
  }, {}],
  "../node_modules/@azure/core-http/dist-esm/src/policies/throttlingRetryPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ThrottlingRetryPolicy = void 0;
    exports.throttlingRetryPolicy = throttlingRetryPolicy;

    var _requestPolicy = require("./requestPolicy");

    var _abortController = require("@azure/abort-controller");

    var _constants = require("../util/constants");

    var _throttlingRetryStrategy = require("../util/throttlingRetryStrategy");

    var _delay = require("../util/delay");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    var StatusCodes = _constants.Constants.HttpConstants.StatusCodes;
    /**
     * Creates a policy that re-sends the request if the response indicates the request failed because of throttling reasons.
     * For example, if the response contains a `Retry-After` header, it will retry sending the request based on the value of that header.
     *
     * To learn more, please refer to
     * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,
     * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and
     * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors
     * @returns
     */

    function throttlingRetryPolicy() {
      return {
        create: function create(nextPolicy, options) {
          return new ThrottlingRetryPolicy(nextPolicy, options);
        }
      };
    }

    var StandardAbortMessage = "The operation was aborted.";
    /**
     * Creates a policy that re-sends the request if the response indicates the request failed because of throttling reasons.
     * For example, if the response contains a `Retry-After` header, it will retry sending the request based on the value of that header.
     *
     * To learn more, please refer to
     * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,
     * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and
     * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors
     */

    var ThrottlingRetryPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(ThrottlingRetryPolicy, _BaseRequestPolicy);

      var _super = _createSuper(ThrottlingRetryPolicy);

      function ThrottlingRetryPolicy(nextPolicy, options, _handleResponse) {
        var _this;

        _classCallCheck(this, ThrottlingRetryPolicy);

        _this = _super.call(this, nextPolicy, options);
        _this.numberOfRetries = 0;
        _this._handleResponse = _handleResponse || _this._defaultResponseHandler;
        return _this;
      }

      _createClass(ThrottlingRetryPolicy, [{
        key: "sendRequest",
        value: function () {
          var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(httpRequest) {
            var response;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return this._nextPolicy.sendRequest(httpRequest.clone());

                  case 2:
                    response = _context.sent;

                    if (!(response.status !== StatusCodes.TooManyRequests && response.status !== StatusCodes.ServiceUnavailable)) {
                      _context.next = 7;
                      break;
                    }

                    return _context.abrupt("return", response);

                  case 7:
                    return _context.abrupt("return", this._handleResponse(httpRequest, response));

                  case 8:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function sendRequest(_x) {
            return _sendRequest.apply(this, arguments);
          }

          return sendRequest;
        }()
      }, {
        key: "_defaultResponseHandler",
        value: function () {
          var _defaultResponseHandler2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(httpRequest, httpResponse) {
            var _a, retryAfterHeader, delayInMs;

            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    retryAfterHeader = httpResponse.headers.get(_constants.Constants.HeaderConstants.RETRY_AFTER);

                    if (!retryAfterHeader) {
                      _context2.next = 14;
                      break;
                    }

                    delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);

                    if (!delayInMs) {
                      _context2.next = 14;
                      break;
                    }

                    this.numberOfRetries += 1;
                    _context2.next = 7;
                    return (0, _delay.delay)(delayInMs, undefined, {
                      abortSignal: httpRequest.abortSignal,
                      abortErrorMsg: StandardAbortMessage
                    });

                  case 7:
                    if (!((_a = httpRequest.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted)) {
                      _context2.next = 9;
                      break;
                    }

                    throw new _abortController.AbortError(StandardAbortMessage);

                  case 9:
                    if (!(this.numberOfRetries < _throttlingRetryStrategy.DEFAULT_CLIENT_MAX_RETRY_COUNT)) {
                      _context2.next = 13;
                      break;
                    }

                    return _context2.abrupt("return", this.sendRequest(httpRequest));

                  case 13:
                    return _context2.abrupt("return", this._nextPolicy.sendRequest(httpRequest));

                  case 14:
                    return _context2.abrupt("return", httpResponse);

                  case 15:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function _defaultResponseHandler(_x2, _x3) {
            return _defaultResponseHandler2.apply(this, arguments);
          }

          return _defaultResponseHandler;
        }()
      }], [{
        key: "parseRetryAfterHeader",
        value: function parseRetryAfterHeader(headerValue) {
          var retryAfterInSeconds = Number(headerValue);

          if (Number.isNaN(retryAfterInSeconds)) {
            return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);
          } else {
            return retryAfterInSeconds * 1000;
          }
        }
      }, {
        key: "parseDateRetryAfterHeader",
        value: function parseDateRetryAfterHeader(headerValue) {
          try {
            var now = Date.now();
            var date = Date.parse(headerValue);
            var diff = date - now;
            return Number.isNaN(diff) ? undefined : diff;
          } catch (error) {
            return undefined;
          }
        }
      }]);

      return ThrottlingRetryPolicy;
    }(_requestPolicy.BaseRequestPolicy);

    exports.ThrottlingRetryPolicy = ThrottlingRetryPolicy;
  }, {
    "./requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js",
    "@azure/abort-controller": "../node_modules/@azure/abort-controller/dist-esm/src/index.js",
    "../util/constants": "../node_modules/@azure/core-http/dist-esm/src/util/constants.js",
    "../util/throttlingRetryStrategy": "../node_modules/@azure/core-http/dist-esm/src/util/throttlingRetryStrategy.js",
    "../util/delay": "../node_modules/@azure/core-http/dist-esm/src/util/delay.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/baggage/types.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js": [function (require, module, exports) {
    var global = arguments[3];
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports._globalThis = void 0;

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Updates to this file should also be replicated to @opentelemetry/api-metrics and
    // @opentelemetry/core too.

    /**
     * - globalThis (New standard)
     * - self (Will return the current window instance for supported browsers)
     * - window (fallback for older browser implementations)
     * - global (NodeJS implementation)
     * - <object> (When all else fails)
     */

    /** only globals that common to node and browsers are allowed */
    // eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef


    var _globalThis = (typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === 'object' ? globalThis : (typeof self === "undefined" ? "undefined" : _typeof(self)) === 'object' ? self : (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' ? window : (typeof global === "undefined" ? "undefined" : _typeof(global)) === 'object' ? global : {};

    exports._globalThis = _globalThis;
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/platform/browser/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _globalThis = require("./globalThis");

    Object.keys(_globalThis).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _globalThis[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _globalThis[key];
        }
      });
    });
  }, {
    "./globalThis": "../node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/version.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.VERSION = void 0;
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // this is autogenerated file, see scripts/version-update.js

    var VERSION = '1.1.0';
    exports.VERSION = VERSION;
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/internal/semver.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports._makeCompatibilityCheck = _makeCompatibilityCheck;
    exports.isCompatible = void 0;

    var _version = require("../version");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    var re = /^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;
    /**
     * Create a function to test an API version to see if it is compatible with the provided ownVersion.
     *
     * The returned function has the following semantics:
     * - Exact match is always compatible
     * - Major versions must match exactly
     *    - 1.x package cannot use global 2.x package
     *    - 2.x package cannot use global 1.x package
     * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API
     *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects
     *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3
     * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor
     * - Patch and build tag differences are not considered at this time
     *
     * @param ownVersion version which should be checked against
     */

    function _makeCompatibilityCheck(ownVersion) {
      var acceptedVersions = new Set([ownVersion]);
      var rejectedVersions = new Set();
      var myVersionMatch = ownVersion.match(re);

      if (!myVersionMatch) {
        // we cannot guarantee compatibility so we always return noop
        return function () {
          return false;
        };
      }

      var ownVersionParsed = {
        major: +myVersionMatch[1],
        minor: +myVersionMatch[2],
        patch: +myVersionMatch[3],
        prerelease: myVersionMatch[4]
      }; // if ownVersion has a prerelease tag, versions must match exactly

      if (ownVersionParsed.prerelease != null) {
        return function isExactmatch(globalVersion) {
          return globalVersion === ownVersion;
        };
      }

      function _reject(v) {
        rejectedVersions.add(v);
        return false;
      }

      function _accept(v) {
        acceptedVersions.add(v);
        return true;
      }

      return function isCompatible(globalVersion) {
        if (acceptedVersions.has(globalVersion)) {
          return true;
        }

        if (rejectedVersions.has(globalVersion)) {
          return false;
        }

        var globalVersionMatch = globalVersion.match(re);

        if (!globalVersionMatch) {
          // cannot parse other version
          // we cannot guarantee compatibility so we always noop
          return _reject(globalVersion);
        }

        var globalVersionParsed = {
          major: +globalVersionMatch[1],
          minor: +globalVersionMatch[2],
          patch: +globalVersionMatch[3],
          prerelease: globalVersionMatch[4]
        }; // if globalVersion has a prerelease tag, versions must match exactly

        if (globalVersionParsed.prerelease != null) {
          return _reject(globalVersion);
        } // major versions must match


        if (ownVersionParsed.major !== globalVersionParsed.major) {
          return _reject(globalVersion);
        }

        if (ownVersionParsed.major === 0) {
          if (ownVersionParsed.minor === globalVersionParsed.minor && ownVersionParsed.patch <= globalVersionParsed.patch) {
            return _accept(globalVersion);
          }

          return _reject(globalVersion);
        }

        if (ownVersionParsed.minor <= globalVersionParsed.minor) {
          return _accept(globalVersion);
        }

        return _reject(globalVersion);
      };
    }
    /**
     * Test an API version to see if it is compatible with this API.
     *
     * - Exact match is always compatible
     * - Major versions must match exactly
     *    - 1.x package cannot use global 2.x package
     *    - 2.x package cannot use global 1.x package
     * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API
     *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects
     *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3
     * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor
     * - Patch and build tag differences are not considered at this time
     *
     * @param version version of the API requesting an instance of the global API
     */


    var isCompatible = _makeCompatibilityCheck(_version.VERSION);

    exports.isCompatible = isCompatible;
  }, {
    "../version": "../node_modules/@opentelemetry/api/build/esm/version.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/internal/global-utils.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getGlobal = getGlobal;
    exports.registerGlobal = registerGlobal;
    exports.unregisterGlobal = unregisterGlobal;

    var _platform = require("../platform");

    var _version = require("../version");

    var _semver = require("./semver");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    var major = _version.VERSION.split('.')[0];

    var GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for("opentelemetry.js.api." + major);
    var _global = _platform._globalThis;

    function registerGlobal(type, instance, diag, allowOverride) {
      var _a;

      if (allowOverride === void 0) {
        allowOverride = false;
      }

      var api = _global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {
        version: _version.VERSION
      };

      if (!allowOverride && api[type]) {
        // already registered an API of this type
        var err = new Error("@opentelemetry/api: Attempted duplicate registration of API: " + type);
        diag.error(err.stack || err.message);
        return false;
      }

      if (api.version !== _version.VERSION) {
        // All registered APIs must be of the same version exactly
        var err = new Error('@opentelemetry/api: All API registration versions must match');
        diag.error(err.stack || err.message);
        return false;
      }

      api[type] = instance;
      diag.debug("@opentelemetry/api: Registered a global for " + type + " v" + _version.VERSION + ".");
      return true;
    }

    function getGlobal(type) {
      var _a, _b;

      var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;

      if (!globalVersion || !(0, _semver.isCompatible)(globalVersion)) {
        return;
      }

      return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];
    }

    function unregisterGlobal(type, diag) {
      diag.debug("@opentelemetry/api: Unregistering a global for " + type + " v" + _version.VERSION + ".");
      var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];

      if (api) {
        delete api[type];
      }
    }
  }, {
    "../platform": "../node_modules/@opentelemetry/api/build/esm/platform/browser/index.js",
    "../version": "../node_modules/@opentelemetry/api/build/esm/version.js",
    "./semver": "../node_modules/@opentelemetry/api/build/esm/internal/semver.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DiagComponentLogger = void 0;

    var _globalUtils = require("../internal/global-utils");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * Component Logger which is meant to be used as part of any component which
     * will add automatically additional namespace in front of the log message.
     * It will then forward all message to global diag logger
     * @example
     * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });
     * cLogger.debug('test');
     * // @opentelemetry/instrumentation-http test
     */


    var DiagComponentLogger =
    /** @class */
    function () {
      function DiagComponentLogger(props) {
        this._namespace = props.namespace || 'DiagComponentLogger';
      }

      DiagComponentLogger.prototype.debug = function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        return logProxy('debug', this._namespace, args);
      };

      DiagComponentLogger.prototype.error = function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        return logProxy('error', this._namespace, args);
      };

      DiagComponentLogger.prototype.info = function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        return logProxy('info', this._namespace, args);
      };

      DiagComponentLogger.prototype.warn = function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        return logProxy('warn', this._namespace, args);
      };

      DiagComponentLogger.prototype.verbose = function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        return logProxy('verbose', this._namespace, args);
      };

      return DiagComponentLogger;
    }();

    exports.DiagComponentLogger = DiagComponentLogger;

    function logProxy(funcName, namespace, args) {
      var logger = (0, _globalUtils.getGlobal)('diag'); // shortcut if logger not set

      if (!logger) {
        return;
      }

      args.unshift(namespace);
      return logger[funcName].apply(logger, args);
    }
  }, {
    "../internal/global-utils": "../node_modules/@opentelemetry/api/build/esm/internal/global-utils.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/diag/types.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DiagLogLevel = void 0;
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * Defines the available internal logging levels for the diagnostic logger, the numeric values
     * of the levels are defined to match the original values from the initial LogLevel to avoid
     * compatibility/migration issues for any implementation that assume the numeric ordering.
     */

    var DiagLogLevel;
    exports.DiagLogLevel = DiagLogLevel;

    (function (DiagLogLevel) {
      /** Diagnostic Logging level setting to disable all logging (except and forced logs) */
      DiagLogLevel[DiagLogLevel["NONE"] = 0] = "NONE";
      /** Identifies an error scenario */

      DiagLogLevel[DiagLogLevel["ERROR"] = 30] = "ERROR";
      /** Identifies a warning scenario */

      DiagLogLevel[DiagLogLevel["WARN"] = 50] = "WARN";
      /** General informational log message */

      DiagLogLevel[DiagLogLevel["INFO"] = 60] = "INFO";
      /** General debug log message */

      DiagLogLevel[DiagLogLevel["DEBUG"] = 70] = "DEBUG";
      /**
       * Detailed trace level logging should only be used for development, should only be set
       * in a development environment.
       */

      DiagLogLevel[DiagLogLevel["VERBOSE"] = 80] = "VERBOSE";
      /** Used to set the logging level to include all logging */

      DiagLogLevel[DiagLogLevel["ALL"] = 9999] = "ALL";
    })(DiagLogLevel || (exports.DiagLogLevel = DiagLogLevel = {}));
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createLogLevelDiagLogger = createLogLevelDiagLogger;

    var _types = require("../types");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    function createLogLevelDiagLogger(maxLevel, logger) {
      if (maxLevel < _types.DiagLogLevel.NONE) {
        maxLevel = _types.DiagLogLevel.NONE;
      } else if (maxLevel > _types.DiagLogLevel.ALL) {
        maxLevel = _types.DiagLogLevel.ALL;
      } // In case the logger is null or undefined


      logger = logger || {};

      function _filterFunc(funcName, theLevel) {
        var theFunc = logger[funcName];

        if (typeof theFunc === 'function' && maxLevel >= theLevel) {
          return theFunc.bind(logger);
        }

        return function () {};
      }

      return {
        error: _filterFunc('error', _types.DiagLogLevel.ERROR),
        warn: _filterFunc('warn', _types.DiagLogLevel.WARN),
        info: _filterFunc('info', _types.DiagLogLevel.INFO),
        debug: _filterFunc('debug', _types.DiagLogLevel.DEBUG),
        verbose: _filterFunc('verbose', _types.DiagLogLevel.VERBOSE)
      };
    }
  }, {
    "../types": "../node_modules/@opentelemetry/api/build/esm/diag/types.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/api/diag.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DiagAPI = void 0;

    var _ComponentLogger = require("../diag/ComponentLogger");

    var _logLevelLogger = require("../diag/internal/logLevelLogger");

    var _types = require("../diag/types");

    var _globalUtils = require("../internal/global-utils");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    var API_NAME = 'diag';
    /**
     * Singleton object which represents the entry point to the OpenTelemetry internal
     * diagnostic API
     */

    var DiagAPI =
    /** @class */
    function () {
      /**
       * Private internal constructor
       * @private
       */
      function DiagAPI() {
        function _logProxy(funcName) {
          return function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }

            var logger = (0, _globalUtils.getGlobal)('diag'); // shortcut if logger not set

            if (!logger) return;
            return logger[funcName].apply(logger, args);
          };
        } // Using self local variable for minification purposes as 'this' cannot be minified


        var self = this; // DiagAPI specific functions

        self.setLogger = function (logger, logLevel) {
          var _a, _b;

          if (logLevel === void 0) {
            logLevel = _types.DiagLogLevel.INFO;
          }

          if (logger === self) {
            // There isn't much we can do here.
            // Logging to the console might break the user application.
            // Try to log to self. If a logger was previously registered it will receive the log.
            var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');
            self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);
            return false;
          }

          var oldLogger = (0, _globalUtils.getGlobal)('diag');
          var newLogger = (0, _logLevelLogger.createLogLevelDiagLogger)(logLevel, logger); // There already is an logger registered. We'll let it know before overwriting it.

          if (oldLogger) {
            var stack = (_b = new Error().stack) !== null && _b !== void 0 ? _b : '<failed to generate stacktrace>';
            oldLogger.warn("Current logger will be overwritten from " + stack);
            newLogger.warn("Current logger will overwrite one already registered from " + stack);
          }

          return (0, _globalUtils.registerGlobal)('diag', newLogger, self, true);
        };

        self.disable = function () {
          (0, _globalUtils.unregisterGlobal)(API_NAME, self);
        };

        self.createComponentLogger = function (options) {
          return new _ComponentLogger.DiagComponentLogger(options);
        };

        self.verbose = _logProxy('verbose');
        self.debug = _logProxy('debug');
        self.info = _logProxy('info');
        self.warn = _logProxy('warn');
        self.error = _logProxy('error');
      }
      /** Get the singleton instance of the DiagAPI API */


      DiagAPI.instance = function () {
        if (!this._instance) {
          this._instance = new DiagAPI();
        }

        return this._instance;
      };

      return DiagAPI;
    }();

    exports.DiagAPI = DiagAPI;
  }, {
    "../diag/ComponentLogger": "../node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js",
    "../diag/internal/logLevelLogger": "../node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js",
    "../diag/types": "../node_modules/@opentelemetry/api/build/esm/diag/types.js",
    "../internal/global-utils": "../node_modules/@opentelemetry/api/build/esm/internal/global-utils.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BaggageImpl = void 0;
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var BaggageImpl =
    /** @class */
    function () {
      function BaggageImpl(entries) {
        this._entries = entries ? new Map(entries) : new Map();
      }

      BaggageImpl.prototype.getEntry = function (key) {
        var entry = this._entries.get(key);

        if (!entry) {
          return undefined;
        }

        return Object.assign({}, entry);
      };

      BaggageImpl.prototype.getAllEntries = function () {
        return Array.from(this._entries.entries()).map(function (_a) {
          var k = _a[0],
              v = _a[1];
          return [k, v];
        });
      };

      BaggageImpl.prototype.setEntry = function (key, entry) {
        var newBaggage = new BaggageImpl(this._entries);

        newBaggage._entries.set(key, entry);

        return newBaggage;
      };

      BaggageImpl.prototype.removeEntry = function (key) {
        var newBaggage = new BaggageImpl(this._entries);

        newBaggage._entries.delete(key);

        return newBaggage;
      };

      BaggageImpl.prototype.removeEntries = function () {
        var keys = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          keys[_i] = arguments[_i];
        }

        var newBaggage = new BaggageImpl(this._entries);

        for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {
          var key = keys_1[_a];

          newBaggage._entries.delete(key);
        }

        return newBaggage;
      };

      BaggageImpl.prototype.clear = function () {
        return new BaggageImpl();
      };

      return BaggageImpl;
    }();

    exports.BaggageImpl = BaggageImpl;
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.baggageEntryMetadataSymbol = void 0;
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * Symbol used to make BaggageEntryMetadata an opaque type
     */

    var baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');
    exports.baggageEntryMetadataSymbol = baggageEntryMetadataSymbol;
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/baggage/utils.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.baggageEntryMetadataFromString = baggageEntryMetadataFromString;
    exports.createBaggage = createBaggage;

    var _diag = require("../api/diag");

    var _baggageImpl = require("./internal/baggage-impl");

    var _symbol = require("./internal/symbol");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    var diag = _diag.DiagAPI.instance();
    /**
     * Create a new Baggage with optional entries
     *
     * @param entries An array of baggage entries the new baggage should contain
     */


    function createBaggage(entries) {
      if (entries === void 0) {
        entries = {};
      }

      return new _baggageImpl.BaggageImpl(new Map(Object.entries(entries)));
    }
    /**
     * Create a serializable BaggageEntryMetadata object from a string.
     *
     * @param str string metadata. Format is currently not defined by the spec and has no special meaning.
     *
     */


    function baggageEntryMetadataFromString(str) {
      if (typeof str !== 'string') {
        diag.error("Cannot create baggage metadata from unknown type: " + _typeof(str));
        str = '';
      }

      return {
        __TYPE__: _symbol.baggageEntryMetadataSymbol,
        toString: function toString() {
          return str;
        }
      };
    }
  }, {
    "../api/diag": "../node_modules/@opentelemetry/api/build/esm/api/diag.js",
    "./internal/baggage-impl": "../node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js",
    "./internal/symbol": "../node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/common/Exception.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/common/Time.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/common/Attributes.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DiagConsoleLogger = void 0;
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var consoleMap = [{
      n: 'error',
      c: 'error'
    }, {
      n: 'warn',
      c: 'warn'
    }, {
      n: 'info',
      c: 'info'
    }, {
      n: 'debug',
      c: 'debug'
    }, {
      n: 'verbose',
      c: 'trace'
    }];
    /**
     * A simple Immutable Console based diagnostic logger which will output any messages to the Console.
     * If you want to limit the amount of logging to a specific level or lower use the
     * {@link createLogLevelDiagLogger}
     */

    var DiagConsoleLogger =
    /** @class */
    function () {
      function DiagConsoleLogger() {
        function _consoleFunc(funcName) {
          return function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }

            if (console) {
              // Some environments only expose the console when the F12 developer console is open
              // eslint-disable-next-line no-console
              var theFunc = console[funcName];

              if (typeof theFunc !== 'function') {
                // Not all environments support all functions
                // eslint-disable-next-line no-console
                theFunc = console.log;
              } // One last final check


              if (typeof theFunc === 'function') {
                return theFunc.apply(console, args);
              }
            }
          };
        }

        for (var i = 0; i < consoleMap.length; i++) {
          this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);
        }
      }

      return DiagConsoleLogger;
    }();

    exports.DiagConsoleLogger = DiagConsoleLogger;
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/diag/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _consoleLogger = require("./consoleLogger");

    Object.keys(_consoleLogger).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _consoleLogger[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _consoleLogger[key];
        }
      });
    });

    var _types = require("./types");

    Object.keys(_types).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _types[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _types[key];
        }
      });
    });
  }, {
    "./consoleLogger": "../node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js",
    "./types": "../node_modules/@opentelemetry/api/build/esm/diag/types.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.defaultTextMapSetter = exports.defaultTextMapGetter = void 0;
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var defaultTextMapGetter = {
      get: function get(carrier, key) {
        if (carrier == null) {
          return undefined;
        }

        return carrier[key];
      },
      keys: function keys(carrier) {
        if (carrier == null) {
          return [];
        }

        return Object.keys(carrier);
      }
    };
    exports.defaultTextMapGetter = defaultTextMapGetter;
    var defaultTextMapSetter = {
      set: function set(carrier, key, value) {
        if (carrier == null) {
          return;
        }

        carrier[key] = value;
      }
    };
    exports.defaultTextMapSetter = defaultTextMapSetter;
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/trace/attributes.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/trace/link.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/context/context.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ROOT_CONTEXT = void 0;
    exports.createContextKey = createContextKey;
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /** Get a key to uniquely identify a context value */

    function createContextKey(description) {
      // The specification states that for the same input, multiple calls should
      // return different keys. Due to the nature of the JS dependency management
      // system, this creates problems where multiple versions of some package
      // could hold different keys for the same property.
      //
      // Therefore, we use Symbol.for which returns the same key for the same input.
      return Symbol.for(description);
    }

    var BaseContext =
    /** @class */
    function () {
      /**
       * Construct a new context which inherits values from an optional parent context.
       *
       * @param parentContext a context from which to inherit values
       */
      function BaseContext(parentContext) {
        // for minification
        var self = this;
        self._currentContext = parentContext ? new Map(parentContext) : new Map();

        self.getValue = function (key) {
          return self._currentContext.get(key);
        };

        self.setValue = function (key, value) {
          var context = new BaseContext(self._currentContext);

          context._currentContext.set(key, value);

          return context;
        };

        self.deleteValue = function (key) {
          var context = new BaseContext(self._currentContext);

          context._currentContext.delete(key);

          return context;
        };
      }

      return BaseContext;
    }();
    /** The root context is used as the default parent context when there is no active context */


    var ROOT_CONTEXT = new BaseContext();
    exports.ROOT_CONTEXT = ROOT_CONTEXT;
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoopContextManager = void 0;

    var _context2 = require("./context");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    var __spreadArray = void 0 && (void 0).__spreadArray || function (to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
        to[j] = from[i];
      }

      return to;
    };

    var NoopContextManager =
    /** @class */
    function () {
      function NoopContextManager() {}

      NoopContextManager.prototype.active = function () {
        return _context2.ROOT_CONTEXT;
      };

      NoopContextManager.prototype.with = function (_context, fn, thisArg) {
        var args = [];

        for (var _i = 3; _i < arguments.length; _i++) {
          args[_i - 3] = arguments[_i];
        }

        return fn.call.apply(fn, __spreadArray([thisArg], args));
      };

      NoopContextManager.prototype.bind = function (_context, target) {
        return target;
      };

      NoopContextManager.prototype.enable = function () {
        return this;
      };

      NoopContextManager.prototype.disable = function () {
        return this;
      };

      return NoopContextManager;
    }();

    exports.NoopContextManager = NoopContextManager;
  }, {
    "./context": "../node_modules/@opentelemetry/api/build/esm/context/context.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/api/context.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ContextAPI = void 0;

    var _NoopContextManager = require("../context/NoopContextManager");

    var _globalUtils = require("../internal/global-utils");

    var _diag = require("./diag");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    var __spreadArray = void 0 && (void 0).__spreadArray || function (to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
        to[j] = from[i];
      }

      return to;
    };

    var API_NAME = 'context';
    var NOOP_CONTEXT_MANAGER = new _NoopContextManager.NoopContextManager();
    /**
     * Singleton object which represents the entry point to the OpenTelemetry Context API
     */

    var ContextAPI =
    /** @class */
    function () {
      /** Empty private constructor prevents end users from constructing a new instance of the API */
      function ContextAPI() {}
      /** Get the singleton instance of the Context API */


      ContextAPI.getInstance = function () {
        if (!this._instance) {
          this._instance = new ContextAPI();
        }

        return this._instance;
      };
      /**
       * Set the current context manager.
       *
       * @returns true if the context manager was successfully registered, else false
       */


      ContextAPI.prototype.setGlobalContextManager = function (contextManager) {
        return (0, _globalUtils.registerGlobal)(API_NAME, contextManager, _diag.DiagAPI.instance());
      };
      /**
       * Get the currently active context
       */


      ContextAPI.prototype.active = function () {
        return this._getContextManager().active();
      };
      /**
       * Execute a function with an active context
       *
       * @param context context to be active during function execution
       * @param fn function to execute in a context
       * @param thisArg optional receiver to be used for calling fn
       * @param args optional arguments forwarded to fn
       */


      ContextAPI.prototype.with = function (context, fn, thisArg) {
        var _a;

        var args = [];

        for (var _i = 3; _i < arguments.length; _i++) {
          args[_i - 3] = arguments[_i];
        }

        return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], args));
      };
      /**
       * Bind a context to a target function or event emitter
       *
       * @param context context to bind to the event emitter or function. Defaults to the currently active context
       * @param target function or event emitter to bind
       */


      ContextAPI.prototype.bind = function (context, target) {
        return this._getContextManager().bind(context, target);
      };

      ContextAPI.prototype._getContextManager = function () {
        return (0, _globalUtils.getGlobal)(API_NAME) || NOOP_CONTEXT_MANAGER;
      };
      /** Disable and remove the global context manager */


      ContextAPI.prototype.disable = function () {
        this._getContextManager().disable();

        (0, _globalUtils.unregisterGlobal)(API_NAME, _diag.DiagAPI.instance());
      };

      return ContextAPI;
    }();

    exports.ContextAPI = ContextAPI;
  }, {
    "../context/NoopContextManager": "../node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js",
    "../internal/global-utils": "../node_modules/@opentelemetry/api/build/esm/internal/global-utils.js",
    "./diag": "../node_modules/@opentelemetry/api/build/esm/api/diag.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TraceFlags = void 0;
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var TraceFlags;
    exports.TraceFlags = TraceFlags;

    (function (TraceFlags) {
      /** Represents no flag set. */
      TraceFlags[TraceFlags["NONE"] = 0] = "NONE";
      /** Bit to represent whether trace is sampled in trace flags. */

      TraceFlags[TraceFlags["SAMPLED"] = 1] = "SAMPLED";
    })(TraceFlags || (exports.TraceFlags = TraceFlags = {}));
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.INVALID_TRACEID = exports.INVALID_SPAN_CONTEXT = exports.INVALID_SPANID = void 0;

    var _trace_flags = require("./trace_flags");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    var INVALID_SPANID = '0000000000000000';
    exports.INVALID_SPANID = INVALID_SPANID;
    var INVALID_TRACEID = '00000000000000000000000000000000';
    exports.INVALID_TRACEID = INVALID_TRACEID;
    var INVALID_SPAN_CONTEXT = {
      traceId: INVALID_TRACEID,
      spanId: INVALID_SPANID,
      traceFlags: _trace_flags.TraceFlags.NONE
    };
    exports.INVALID_SPAN_CONTEXT = INVALID_SPAN_CONTEXT;
  }, {
    "./trace_flags": "../node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NonRecordingSpan = void 0;

    var _invalidSpanConstants = require("./invalid-span-constants");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * The NonRecordingSpan is the default {@link Span} that is used when no Span
     * implementation is available. All operations are no-op including context
     * propagation.
     */


    var NonRecordingSpan =
    /** @class */
    function () {
      function NonRecordingSpan(_spanContext) {
        if (_spanContext === void 0) {
          _spanContext = _invalidSpanConstants.INVALID_SPAN_CONTEXT;
        }

        this._spanContext = _spanContext;
      } // Returns a SpanContext.


      NonRecordingSpan.prototype.spanContext = function () {
        return this._spanContext;
      }; // By default does nothing


      NonRecordingSpan.prototype.setAttribute = function (_key, _value) {
        return this;
      }; // By default does nothing


      NonRecordingSpan.prototype.setAttributes = function (_attributes) {
        return this;
      }; // By default does nothing


      NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {
        return this;
      }; // By default does nothing


      NonRecordingSpan.prototype.setStatus = function (_status) {
        return this;
      }; // By default does nothing


      NonRecordingSpan.prototype.updateName = function (_name) {
        return this;
      }; // By default does nothing


      NonRecordingSpan.prototype.end = function (_endTime) {}; // isRecording always returns false for NonRecordingSpan.


      NonRecordingSpan.prototype.isRecording = function () {
        return false;
      }; // By default does nothing


      NonRecordingSpan.prototype.recordException = function (_exception, _time) {};

      return NonRecordingSpan;
    }();

    exports.NonRecordingSpan = NonRecordingSpan;
  }, {
    "./invalid-span-constants": "../node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/trace/context-utils.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.deleteSpan = deleteSpan;
    exports.getSpan = getSpan;
    exports.getSpanContext = getSpanContext;
    exports.setSpan = setSpan;
    exports.setSpanContext = setSpanContext;

    var _context = require("../context/context");

    var _NonRecordingSpan = require("./NonRecordingSpan");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * span key
     */


    var SPAN_KEY = (0, _context.createContextKey)('OpenTelemetry Context Key SPAN');
    /**
     * Return the span if one exists
     *
     * @param context context to get span from
     */

    function getSpan(context) {
      return context.getValue(SPAN_KEY) || undefined;
    }
    /**
     * Set the span on a context
     *
     * @param context context to use as parent
     * @param span span to set active
     */


    function setSpan(context, span) {
      return context.setValue(SPAN_KEY, span);
    }
    /**
     * Remove current span stored in the context
     *
     * @param context context to delete span from
     */


    function deleteSpan(context) {
      return context.deleteValue(SPAN_KEY);
    }
    /**
     * Wrap span context in a NoopSpan and set as span in a new
     * context
     *
     * @param context context to set active span on
     * @param spanContext span context to be wrapped
     */


    function setSpanContext(context, spanContext) {
      return setSpan(context, new _NonRecordingSpan.NonRecordingSpan(spanContext));
    }
    /**
     * Get the span context of the span if it exists.
     *
     * @param context context to get values from
     */


    function getSpanContext(context) {
      var _a;

      return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();
    }
  }, {
    "../context/context": "../node_modules/@opentelemetry/api/build/esm/context/context.js",
    "./NonRecordingSpan": "../node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isSpanContextValid = isSpanContextValid;
    exports.isValidSpanId = isValidSpanId;
    exports.isValidTraceId = isValidTraceId;
    exports.wrapSpanContext = wrapSpanContext;

    var _invalidSpanConstants = require("./invalid-span-constants");

    var _NonRecordingSpan = require("./NonRecordingSpan");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    var VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;
    var VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;

    function isValidTraceId(traceId) {
      return VALID_TRACEID_REGEX.test(traceId) && traceId !== _invalidSpanConstants.INVALID_TRACEID;
    }

    function isValidSpanId(spanId) {
      return VALID_SPANID_REGEX.test(spanId) && spanId !== _invalidSpanConstants.INVALID_SPANID;
    }
    /**
     * Returns true if this {@link SpanContext} is valid.
     * @return true if this {@link SpanContext} is valid.
     */


    function isSpanContextValid(spanContext) {
      return isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId);
    }
    /**
     * Wrap the given {@link SpanContext} in a new non-recording {@link Span}
     *
     * @param spanContext span context to be wrapped
     * @returns a new non-recording {@link Span} with the provided context
     */


    function wrapSpanContext(spanContext) {
      return new _NonRecordingSpan.NonRecordingSpan(spanContext);
    }
  }, {
    "./invalid-span-constants": "../node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js",
    "./NonRecordingSpan": "../node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoopTracer = void 0;

    var _context = require("../api/context");

    var _contextUtils = require("../trace/context-utils");

    var _NonRecordingSpan = require("./NonRecordingSpan");

    var _spancontextUtils = require("./spancontext-utils");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    var context = _context.ContextAPI.getInstance();
    /**
     * No-op implementations of {@link Tracer}.
     */


    var NoopTracer =
    /** @class */
    function () {
      function NoopTracer() {} // startSpan starts a noop span.


      NoopTracer.prototype.startSpan = function (name, options, context) {
        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);

        if (root) {
          return new _NonRecordingSpan.NonRecordingSpan();
        }

        var parentFromContext = context && (0, _contextUtils.getSpanContext)(context);

        if (isSpanContext(parentFromContext) && (0, _spancontextUtils.isSpanContextValid)(parentFromContext)) {
          return new _NonRecordingSpan.NonRecordingSpan(parentFromContext);
        } else {
          return new _NonRecordingSpan.NonRecordingSpan();
        }
      };

      NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {
        var opts;
        var ctx;
        var fn;

        if (arguments.length < 2) {
          return;
        } else if (arguments.length === 2) {
          fn = arg2;
        } else if (arguments.length === 3) {
          opts = arg2;
          fn = arg3;
        } else {
          opts = arg2;
          ctx = arg3;
          fn = arg4;
        }

        var parentContext = ctx !== null && ctx !== void 0 ? ctx : context.active();
        var span = this.startSpan(name, opts, parentContext);
        var contextWithSpanSet = (0, _contextUtils.setSpan)(parentContext, span);
        return context.with(contextWithSpanSet, fn, undefined, span);
      };

      return NoopTracer;
    }();

    exports.NoopTracer = NoopTracer;

    function isSpanContext(spanContext) {
      return _typeof(spanContext) === 'object' && typeof spanContext['spanId'] === 'string' && typeof spanContext['traceId'] === 'string' && typeof spanContext['traceFlags'] === 'number';
    }
  }, {
    "../api/context": "../node_modules/@opentelemetry/api/build/esm/api/context.js",
    "../trace/context-utils": "../node_modules/@opentelemetry/api/build/esm/trace/context-utils.js",
    "./NonRecordingSpan": "../node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js",
    "./spancontext-utils": "../node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProxyTracer = void 0;

    var _NoopTracer = require("./NoopTracer");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    var NOOP_TRACER = new _NoopTracer.NoopTracer();
    /**
     * Proxy tracer provided by the proxy tracer provider
     */

    var ProxyTracer =
    /** @class */
    function () {
      function ProxyTracer(_provider, name, version, options) {
        this._provider = _provider;
        this.name = name;
        this.version = version;
        this.options = options;
      }

      ProxyTracer.prototype.startSpan = function (name, options, context) {
        return this._getTracer().startSpan(name, options, context);
      };

      ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {
        var tracer = this._getTracer();

        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);
      };
      /**
       * Try to get a tracer from the proxy tracer provider.
       * If the proxy tracer provider has no delegate, return a noop tracer.
       */


      ProxyTracer.prototype._getTracer = function () {
        if (this._delegate) {
          return this._delegate;
        }

        var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);

        if (!tracer) {
          return NOOP_TRACER;
        }

        this._delegate = tracer;
        return this._delegate;
      };

      return ProxyTracer;
    }();

    exports.ProxyTracer = ProxyTracer;
  }, {
    "./NoopTracer": "../node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoopTracerProvider = void 0;

    var _NoopTracer = require("./NoopTracer");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * An implementation of the {@link TracerProvider} which returns an impotent
     * Tracer for all calls to `getTracer`.
     *
     * All operations are no-op.
     */


    var NoopTracerProvider =
    /** @class */
    function () {
      function NoopTracerProvider() {}

      NoopTracerProvider.prototype.getTracer = function (_name, _version, _options) {
        return new _NoopTracer.NoopTracer();
      };

      return NoopTracerProvider;
    }();

    exports.NoopTracerProvider = NoopTracerProvider;
  }, {
    "./NoopTracer": "../node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProxyTracerProvider = void 0;

    var _ProxyTracer = require("./ProxyTracer");

    var _NoopTracerProvider = require("./NoopTracerProvider");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    var NOOP_TRACER_PROVIDER = new _NoopTracerProvider.NoopTracerProvider();
    /**
     * Tracer provider which provides {@link ProxyTracer}s.
     *
     * Before a delegate is set, tracers provided are NoOp.
     *   When a delegate is set, traces are provided from the delegate.
     *   When a delegate is set after tracers have already been provided,
     *   all tracers already provided will use the provided delegate implementation.
     */

    var ProxyTracerProvider =
    /** @class */
    function () {
      function ProxyTracerProvider() {}
      /**
       * Get a {@link ProxyTracer}
       */


      ProxyTracerProvider.prototype.getTracer = function (name, version, options) {
        var _a;

        return (_a = this.getDelegateTracer(name, version, options)) !== null && _a !== void 0 ? _a : new _ProxyTracer.ProxyTracer(this, name, version, options);
      };

      ProxyTracerProvider.prototype.getDelegate = function () {
        var _a;

        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;
      };
      /**
       * Set the delegate tracer provider
       */


      ProxyTracerProvider.prototype.setDelegate = function (delegate) {
        this._delegate = delegate;
      };

      ProxyTracerProvider.prototype.getDelegateTracer = function (name, version, options) {
        var _a;

        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version, options);
      };

      return ProxyTracerProvider;
    }();

    exports.ProxyTracerProvider = ProxyTracerProvider;
  }, {
    "./ProxyTracer": "../node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js",
    "./NoopTracerProvider": "../node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/trace/Sampler.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SamplingDecision = void 0;
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * A sampling decision that determines how a {@link Span} will be recorded
     * and collected.
     */

    var SamplingDecision;
    exports.SamplingDecision = SamplingDecision;

    (function (SamplingDecision) {
      /**
       * `Span.isRecording() === false`, span will not be recorded and all events
       * and attributes will be dropped.
       */
      SamplingDecision[SamplingDecision["NOT_RECORD"] = 0] = "NOT_RECORD";
      /**
       * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}
       * MUST NOT be set.
       */

      SamplingDecision[SamplingDecision["RECORD"] = 1] = "RECORD";
      /**
       * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}
       * MUST be set.
       */

      SamplingDecision[SamplingDecision["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
    })(SamplingDecision || (exports.SamplingDecision = SamplingDecision = {}));
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/trace/span_context.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/trace/span_kind.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SpanKind = void 0;
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var SpanKind;
    exports.SpanKind = SpanKind;

    (function (SpanKind) {
      /** Default value. Indicates that the span is used internally. */
      SpanKind[SpanKind["INTERNAL"] = 0] = "INTERNAL";
      /**
       * Indicates that the span covers server-side handling of an RPC or other
       * remote request.
       */

      SpanKind[SpanKind["SERVER"] = 1] = "SERVER";
      /**
       * Indicates that the span covers the client-side wrapper around an RPC or
       * other remote request.
       */

      SpanKind[SpanKind["CLIENT"] = 2] = "CLIENT";
      /**
       * Indicates that the span describes producer sending a message to a
       * broker. Unlike client and server, there is no direct critical path latency
       * relationship between producer and consumer spans.
       */

      SpanKind[SpanKind["PRODUCER"] = 3] = "PRODUCER";
      /**
       * Indicates that the span describes consumer receiving a message from a
       * broker. Unlike client and server, there is no direct critical path latency
       * relationship between producer and consumer spans.
       */

      SpanKind[SpanKind["CONSUMER"] = 4] = "CONSUMER";
    })(SpanKind || (exports.SpanKind = SpanKind = {}));
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/trace/span.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/trace/SpanOptions.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/trace/status.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SpanStatusCode = void 0;
    /**
     * An enumeration of status codes.
     */

    var SpanStatusCode;
    exports.SpanStatusCode = SpanStatusCode;

    (function (SpanStatusCode) {
      /**
       * The default status.
       */
      SpanStatusCode[SpanStatusCode["UNSET"] = 0] = "UNSET";
      /**
       * The operation has been validated by an Application developer or
       * Operator to have completed successfully.
       */

      SpanStatusCode[SpanStatusCode["OK"] = 1] = "OK";
      /**
       * The operation contains an error.
       */

      SpanStatusCode[SpanStatusCode["ERROR"] = 2] = "ERROR";
    })(SpanStatusCode || (exports.SpanStatusCode = SpanStatusCode = {}));
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/trace/trace_state.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.validateKey = validateKey;
    exports.validateValue = validateValue;
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';
    var VALID_KEY = "[a-z]" + VALID_KEY_CHAR_RANGE + "{0,255}";
    var VALID_VENDOR_KEY = "[a-z0-9]" + VALID_KEY_CHAR_RANGE + "{0,240}@[a-z]" + VALID_KEY_CHAR_RANGE + "{0,13}";
    var VALID_KEY_REGEX = new RegExp("^(?:" + VALID_KEY + "|" + VALID_VENDOR_KEY + ")$");
    var VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;
    var INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;
    /**
     * Key is opaque string up to 256 characters printable. It MUST begin with a
     * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,
     * underscores _, dashes -, asterisks *, and forward slashes /.
     * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the
     * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.
     * see https://www.w3.org/TR/trace-context/#key
     */

    function validateKey(key) {
      return VALID_KEY_REGEX.test(key);
    }
    /**
     * Value is opaque string up to 256 characters printable ASCII RFC0020
     * characters (i.e., the range 0x20 to 0x7E) except comma , and =.
     */


    function validateValue(value) {
      return VALID_VALUE_BASE_REGEX.test(value) && !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value);
    }
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TraceStateImpl = void 0;

    var _tracestateValidators = require("./tracestate-validators");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    var MAX_TRACE_STATE_ITEMS = 32;
    var MAX_TRACE_STATE_LEN = 512;
    var LIST_MEMBERS_SEPARATOR = ',';
    var LIST_MEMBER_KEY_VALUE_SPLITTER = '=';
    /**
     * TraceState must be a class and not a simple object type because of the spec
     * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).
     *
     * Here is the list of allowed mutations:
     * - New key-value pair should be added into the beginning of the list
     * - The value of any key can be updated. Modified keys MUST be moved to the
     * beginning of the list.
     */

    var TraceStateImpl =
    /** @class */
    function () {
      function TraceStateImpl(rawTraceState) {
        this._internalState = new Map();
        if (rawTraceState) this._parse(rawTraceState);
      }

      TraceStateImpl.prototype.set = function (key, value) {
        // TODO: Benchmark the different approaches(map vs list) and
        // use the faster one.
        var traceState = this._clone();

        if (traceState._internalState.has(key)) {
          traceState._internalState.delete(key);
        }

        traceState._internalState.set(key, value);

        return traceState;
      };

      TraceStateImpl.prototype.unset = function (key) {
        var traceState = this._clone();

        traceState._internalState.delete(key);

        return traceState;
      };

      TraceStateImpl.prototype.get = function (key) {
        return this._internalState.get(key);
      };

      TraceStateImpl.prototype.serialize = function () {
        var _this = this;

        return this._keys().reduce(function (agg, key) {
          agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));
          return agg;
        }, []).join(LIST_MEMBERS_SEPARATOR);
      };

      TraceStateImpl.prototype._parse = function (rawTraceState) {
        if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;
        this._internalState = rawTraceState.split(LIST_MEMBERS_SEPARATOR).reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning
        .reduce(function (agg, part) {
          var listMember = part.trim(); // Optional Whitespace (OWS) handling

          var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);

          if (i !== -1) {
            var key = listMember.slice(0, i);
            var value = listMember.slice(i + 1, part.length);

            if ((0, _tracestateValidators.validateKey)(key) && (0, _tracestateValidators.validateValue)(value)) {
              agg.set(key, value);
            } else {// TODO: Consider to add warning log
            }
          }

          return agg;
        }, new Map()); // Because of the reverse() requirement, trunc must be done after map is created

        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {
          this._internalState = new Map(Array.from(this._internalState.entries()).reverse() // Use reverse same as original tracestate parse chain
          .slice(0, MAX_TRACE_STATE_ITEMS));
        }
      };

      TraceStateImpl.prototype._keys = function () {
        return Array.from(this._internalState.keys()).reverse();
      };

      TraceStateImpl.prototype._clone = function () {
        var traceState = new TraceStateImpl();
        traceState._internalState = new Map(this._internalState);
        return traceState;
      };

      return TraceStateImpl;
    }();

    exports.TraceStateImpl = TraceStateImpl;
  }, {
    "./tracestate-validators": "../node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createTraceState = createTraceState;

    var _tracestateImpl = require("./tracestate-impl");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    function createTraceState(rawTraceState) {
      return new _tracestateImpl.TraceStateImpl(rawTraceState);
    }
  }, {
    "./tracestate-impl": "../node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/trace/tracer_provider.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/trace/tracer.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/trace/tracer_options.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/context/types.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/api/trace.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TraceAPI = void 0;

    var _globalUtils = require("../internal/global-utils");

    var _ProxyTracerProvider = require("../trace/ProxyTracerProvider");

    var _spancontextUtils = require("../trace/spancontext-utils");

    var _contextUtils = require("../trace/context-utils");

    var _diag = require("./diag");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    var API_NAME = 'trace';
    /**
     * Singleton object which represents the entry point to the OpenTelemetry Tracing API
     */

    var TraceAPI =
    /** @class */
    function () {
      /** Empty private constructor prevents end users from constructing a new instance of the API */
      function TraceAPI() {
        this._proxyTracerProvider = new _ProxyTracerProvider.ProxyTracerProvider();
        this.wrapSpanContext = _spancontextUtils.wrapSpanContext;
        this.isSpanContextValid = _spancontextUtils.isSpanContextValid;
        this.deleteSpan = _contextUtils.deleteSpan;
        this.getSpan = _contextUtils.getSpan;
        this.getSpanContext = _contextUtils.getSpanContext;
        this.setSpan = _contextUtils.setSpan;
        this.setSpanContext = _contextUtils.setSpanContext;
      }
      /** Get the singleton instance of the Trace API */


      TraceAPI.getInstance = function () {
        if (!this._instance) {
          this._instance = new TraceAPI();
        }

        return this._instance;
      };
      /**
       * Set the current global tracer.
       *
       * @returns true if the tracer provider was successfully registered, else false
       */


      TraceAPI.prototype.setGlobalTracerProvider = function (provider) {
        var success = (0, _globalUtils.registerGlobal)(API_NAME, this._proxyTracerProvider, _diag.DiagAPI.instance());

        if (success) {
          this._proxyTracerProvider.setDelegate(provider);
        }

        return success;
      };
      /**
       * Returns the global tracer provider.
       */


      TraceAPI.prototype.getTracerProvider = function () {
        return (0, _globalUtils.getGlobal)(API_NAME) || this._proxyTracerProvider;
      };
      /**
       * Returns a tracer from the global tracer provider.
       */


      TraceAPI.prototype.getTracer = function (name, version) {
        return this.getTracerProvider().getTracer(name, version);
      };
      /** Remove the global tracer provider */


      TraceAPI.prototype.disable = function () {
        (0, _globalUtils.unregisterGlobal)(API_NAME, _diag.DiagAPI.instance());
        this._proxyTracerProvider = new _ProxyTracerProvider.ProxyTracerProvider();
      };

      return TraceAPI;
    }();

    exports.TraceAPI = TraceAPI;
  }, {
    "../internal/global-utils": "../node_modules/@opentelemetry/api/build/esm/internal/global-utils.js",
    "../trace/ProxyTracerProvider": "../node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js",
    "../trace/spancontext-utils": "../node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js",
    "../trace/context-utils": "../node_modules/@opentelemetry/api/build/esm/trace/context-utils.js",
    "./diag": "../node_modules/@opentelemetry/api/build/esm/api/diag.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoopTextMapPropagator = void 0;
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * No-op implementations of {@link TextMapPropagator}.
     */

    var NoopTextMapPropagator =
    /** @class */
    function () {
      function NoopTextMapPropagator() {}
      /** Noop inject function does nothing */


      NoopTextMapPropagator.prototype.inject = function (_context, _carrier) {};
      /** Noop extract function does nothing and returns the input context */


      NoopTextMapPropagator.prototype.extract = function (context, _carrier) {
        return context;
      };

      NoopTextMapPropagator.prototype.fields = function () {
        return [];
      };

      return NoopTextMapPropagator;
    }();

    exports.NoopTextMapPropagator = NoopTextMapPropagator;
  }, {}],
  "../node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.deleteBaggage = deleteBaggage;
    exports.getBaggage = getBaggage;
    exports.setBaggage = setBaggage;

    var _context = require("../context/context");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * Baggage key
     */


    var BAGGAGE_KEY = (0, _context.createContextKey)('OpenTelemetry Baggage Key');
    /**
     * Retrieve the current baggage from the given context
     *
     * @param {Context} Context that manage all context values
     * @returns {Baggage} Extracted baggage from the context
     */

    function getBaggage(context) {
      return context.getValue(BAGGAGE_KEY) || undefined;
    }
    /**
     * Store a baggage in the given context
     *
     * @param {Context} Context that manage all context values
     * @param {Baggage} baggage that will be set in the actual context
     */


    function setBaggage(context, baggage) {
      return context.setValue(BAGGAGE_KEY, baggage);
    }
    /**
     * Delete the baggage stored in the given context
     *
     * @param {Context} Context that manage all context values
     */


    function deleteBaggage(context) {
      return context.deleteValue(BAGGAGE_KEY);
    }
  }, {
    "../context/context": "../node_modules/@opentelemetry/api/build/esm/context/context.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/api/propagation.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PropagationAPI = void 0;

    var _globalUtils = require("../internal/global-utils");

    var _NoopTextMapPropagator = require("../propagation/NoopTextMapPropagator");

    var _TextMapPropagator = require("../propagation/TextMapPropagator");

    var _contextHelpers = require("../baggage/context-helpers");

    var _utils = require("../baggage/utils");

    var _diag = require("./diag");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    var API_NAME = 'propagation';
    var NOOP_TEXT_MAP_PROPAGATOR = new _NoopTextMapPropagator.NoopTextMapPropagator();
    /**
     * Singleton object which represents the entry point to the OpenTelemetry Propagation API
     */

    var PropagationAPI =
    /** @class */
    function () {
      /** Empty private constructor prevents end users from constructing a new instance of the API */
      function PropagationAPI() {
        this.createBaggage = _utils.createBaggage;
        this.getBaggage = _contextHelpers.getBaggage;
        this.setBaggage = _contextHelpers.setBaggage;
        this.deleteBaggage = _contextHelpers.deleteBaggage;
      }
      /** Get the singleton instance of the Propagator API */


      PropagationAPI.getInstance = function () {
        if (!this._instance) {
          this._instance = new PropagationAPI();
        }

        return this._instance;
      };
      /**
       * Set the current propagator.
       *
       * @returns true if the propagator was successfully registered, else false
       */


      PropagationAPI.prototype.setGlobalPropagator = function (propagator) {
        return (0, _globalUtils.registerGlobal)(API_NAME, propagator, _diag.DiagAPI.instance());
      };
      /**
       * Inject context into a carrier to be propagated inter-process
       *
       * @param context Context carrying tracing data to inject
       * @param carrier carrier to inject context into
       * @param setter Function used to set values on the carrier
       */


      PropagationAPI.prototype.inject = function (context, carrier, setter) {
        if (setter === void 0) {
          setter = _TextMapPropagator.defaultTextMapSetter;
        }

        return this._getGlobalPropagator().inject(context, carrier, setter);
      };
      /**
       * Extract context from a carrier
       *
       * @param context Context which the newly created context will inherit from
       * @param carrier Carrier to extract context from
       * @param getter Function used to extract keys from a carrier
       */


      PropagationAPI.prototype.extract = function (context, carrier, getter) {
        if (getter === void 0) {
          getter = _TextMapPropagator.defaultTextMapGetter;
        }

        return this._getGlobalPropagator().extract(context, carrier, getter);
      };
      /**
       * Return a list of all fields which may be used by the propagator.
       */


      PropagationAPI.prototype.fields = function () {
        return this._getGlobalPropagator().fields();
      };
      /** Remove the global propagator */


      PropagationAPI.prototype.disable = function () {
        (0, _globalUtils.unregisterGlobal)(API_NAME, _diag.DiagAPI.instance());
      };

      PropagationAPI.prototype._getGlobalPropagator = function () {
        return (0, _globalUtils.getGlobal)(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;
      };

      return PropagationAPI;
    }();

    exports.PropagationAPI = PropagationAPI;
  }, {
    "../internal/global-utils": "../node_modules/@opentelemetry/api/build/esm/internal/global-utils.js",
    "../propagation/NoopTextMapPropagator": "../node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js",
    "../propagation/TextMapPropagator": "../node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js",
    "../baggage/context-helpers": "../node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js",
    "../baggage/utils": "../node_modules/@opentelemetry/api/build/esm/baggage/utils.js",
    "./diag": "../node_modules/@opentelemetry/api/build/esm/api/diag.js"
  }],
  "../node_modules/@opentelemetry/api/build/esm/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      context: true,
      trace: true,
      propagation: true,
      diag: true,
      baggageEntryMetadataFromString: true,
      createTraceState: true,
      isSpanContextValid: true,
      isValidTraceId: true,
      isValidSpanId: true,
      INVALID_SPANID: true,
      INVALID_TRACEID: true,
      INVALID_SPAN_CONTEXT: true
    };
    Object.defineProperty(exports, "INVALID_SPANID", {
      enumerable: true,
      get: function () {
        return _invalidSpanConstants.INVALID_SPANID;
      }
    });
    Object.defineProperty(exports, "INVALID_SPAN_CONTEXT", {
      enumerable: true,
      get: function () {
        return _invalidSpanConstants.INVALID_SPAN_CONTEXT;
      }
    });
    Object.defineProperty(exports, "INVALID_TRACEID", {
      enumerable: true,
      get: function () {
        return _invalidSpanConstants.INVALID_TRACEID;
      }
    });
    Object.defineProperty(exports, "baggageEntryMetadataFromString", {
      enumerable: true,
      get: function () {
        return _utils.baggageEntryMetadataFromString;
      }
    });
    exports.context = void 0;
    Object.defineProperty(exports, "createTraceState", {
      enumerable: true,
      get: function () {
        return _utils2.createTraceState;
      }
    });
    exports.diag = exports.default = void 0;
    Object.defineProperty(exports, "isSpanContextValid", {
      enumerable: true,
      get: function () {
        return _spancontextUtils.isSpanContextValid;
      }
    });
    Object.defineProperty(exports, "isValidSpanId", {
      enumerable: true,
      get: function () {
        return _spancontextUtils.isValidSpanId;
      }
    });
    Object.defineProperty(exports, "isValidTraceId", {
      enumerable: true,
      get: function () {
        return _spancontextUtils.isValidTraceId;
      }
    });
    exports.trace = exports.propagation = void 0;

    var _types = require("./baggage/types");

    Object.keys(_types).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _types[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _types[key];
        }
      });
    });

    var _utils = require("./baggage/utils");

    var _Exception = require("./common/Exception");

    Object.keys(_Exception).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _Exception[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _Exception[key];
        }
      });
    });

    var _Time = require("./common/Time");

    Object.keys(_Time).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _Time[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _Time[key];
        }
      });
    });

    var _Attributes = require("./common/Attributes");

    Object.keys(_Attributes).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _Attributes[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _Attributes[key];
        }
      });
    });

    var _diag = require("./diag");

    Object.keys(_diag).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _diag[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _diag[key];
        }
      });
    });

    var _TextMapPropagator = require("./propagation/TextMapPropagator");

    Object.keys(_TextMapPropagator).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _TextMapPropagator[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _TextMapPropagator[key];
        }
      });
    });

    var _attributes = require("./trace/attributes");

    Object.keys(_attributes).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _attributes[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _attributes[key];
        }
      });
    });

    var _link = require("./trace/link");

    Object.keys(_link).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _link[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _link[key];
        }
      });
    });

    var _ProxyTracer = require("./trace/ProxyTracer");

    Object.keys(_ProxyTracer).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _ProxyTracer[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _ProxyTracer[key];
        }
      });
    });

    var _ProxyTracerProvider = require("./trace/ProxyTracerProvider");

    Object.keys(_ProxyTracerProvider).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _ProxyTracerProvider[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _ProxyTracerProvider[key];
        }
      });
    });

    var _Sampler = require("./trace/Sampler");

    Object.keys(_Sampler).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _Sampler[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _Sampler[key];
        }
      });
    });

    var _SamplingResult = require("./trace/SamplingResult");

    Object.keys(_SamplingResult).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _SamplingResult[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _SamplingResult[key];
        }
      });
    });

    var _span_context = require("./trace/span_context");

    Object.keys(_span_context).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _span_context[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _span_context[key];
        }
      });
    });

    var _span_kind = require("./trace/span_kind");

    Object.keys(_span_kind).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _span_kind[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _span_kind[key];
        }
      });
    });

    var _span = require("./trace/span");

    Object.keys(_span).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _span[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _span[key];
        }
      });
    });

    var _SpanOptions = require("./trace/SpanOptions");

    Object.keys(_SpanOptions).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _SpanOptions[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _SpanOptions[key];
        }
      });
    });

    var _status = require("./trace/status");

    Object.keys(_status).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _status[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _status[key];
        }
      });
    });

    var _trace_flags = require("./trace/trace_flags");

    Object.keys(_trace_flags).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _trace_flags[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _trace_flags[key];
        }
      });
    });

    var _trace_state = require("./trace/trace_state");

    Object.keys(_trace_state).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _trace_state[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _trace_state[key];
        }
      });
    });

    var _utils2 = require("./trace/internal/utils");

    var _tracer_provider = require("./trace/tracer_provider");

    Object.keys(_tracer_provider).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _tracer_provider[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _tracer_provider[key];
        }
      });
    });

    var _tracer = require("./trace/tracer");

    Object.keys(_tracer).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _tracer[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _tracer[key];
        }
      });
    });

    var _tracer_options = require("./trace/tracer_options");

    Object.keys(_tracer_options).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _tracer_options[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _tracer_options[key];
        }
      });
    });

    var _spancontextUtils = require("./trace/spancontext-utils");

    var _invalidSpanConstants = require("./trace/invalid-span-constants");

    var _context = require("./context/context");

    Object.keys(_context).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _context[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _context[key];
        }
      });
    });

    var _types2 = require("./context/types");

    Object.keys(_types2).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _types2[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _types2[key];
        }
      });
    });

    var _context2 = require("./api/context");

    var _trace = require("./api/trace");

    var _propagation = require("./api/propagation");

    var _diag2 = require("./api/diag");
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /** Entrypoint for context API */


    var context = _context2.ContextAPI.getInstance();

    exports.context = context;
    /** Entrypoint for trace API */

    var trace = _trace.TraceAPI.getInstance();

    exports.trace = trace;
    /** Entrypoint for propagation API */

    var propagation = _propagation.PropagationAPI.getInstance();

    exports.propagation = propagation;
    /**
     * Entrypoint for Diag API.
     * Defines Diagnostic handler used for internal diagnostic logging operations.
     * The default provides a Noop DiagLogger implementation which may be changed via the
     * diag.setLogger(logger: DiagLogger) function.
     */

    var diag = _diag2.DiagAPI.instance();

    exports.diag = diag;
    var _default = {
      trace: trace,
      context: context,
      propagation: propagation,
      diag: diag
    };
    exports.default = _default;
  }, {
    "./baggage/types": "../node_modules/@opentelemetry/api/build/esm/baggage/types.js",
    "./baggage/utils": "../node_modules/@opentelemetry/api/build/esm/baggage/utils.js",
    "./common/Exception": "../node_modules/@opentelemetry/api/build/esm/common/Exception.js",
    "./common/Time": "../node_modules/@opentelemetry/api/build/esm/common/Time.js",
    "./common/Attributes": "../node_modules/@opentelemetry/api/build/esm/common/Attributes.js",
    "./diag": "../node_modules/@opentelemetry/api/build/esm/diag/index.js",
    "./propagation/TextMapPropagator": "../node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js",
    "./trace/attributes": "../node_modules/@opentelemetry/api/build/esm/trace/attributes.js",
    "./trace/link": "../node_modules/@opentelemetry/api/build/esm/trace/link.js",
    "./trace/ProxyTracer": "../node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js",
    "./trace/ProxyTracerProvider": "../node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js",
    "./trace/Sampler": "../node_modules/@opentelemetry/api/build/esm/trace/Sampler.js",
    "./trace/SamplingResult": "../node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js",
    "./trace/span_context": "../node_modules/@opentelemetry/api/build/esm/trace/span_context.js",
    "./trace/span_kind": "../node_modules/@opentelemetry/api/build/esm/trace/span_kind.js",
    "./trace/span": "../node_modules/@opentelemetry/api/build/esm/trace/span.js",
    "./trace/SpanOptions": "../node_modules/@opentelemetry/api/build/esm/trace/SpanOptions.js",
    "./trace/status": "../node_modules/@opentelemetry/api/build/esm/trace/status.js",
    "./trace/trace_flags": "../node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js",
    "./trace/trace_state": "../node_modules/@opentelemetry/api/build/esm/trace/trace_state.js",
    "./trace/internal/utils": "../node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js",
    "./trace/tracer_provider": "../node_modules/@opentelemetry/api/build/esm/trace/tracer_provider.js",
    "./trace/tracer": "../node_modules/@opentelemetry/api/build/esm/trace/tracer.js",
    "./trace/tracer_options": "../node_modules/@opentelemetry/api/build/esm/trace/tracer_options.js",
    "./trace/spancontext-utils": "../node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js",
    "./trace/invalid-span-constants": "../node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js",
    "./context/context": "../node_modules/@opentelemetry/api/build/esm/context/context.js",
    "./context/types": "../node_modules/@opentelemetry/api/build/esm/context/types.js",
    "./api/context": "../node_modules/@opentelemetry/api/build/esm/api/context.js",
    "./api/trace": "../node_modules/@opentelemetry/api/build/esm/api/trace.js",
    "./api/propagation": "../node_modules/@opentelemetry/api/build/esm/api/propagation.js",
    "./api/diag": "../node_modules/@opentelemetry/api/build/esm/api/diag.js"
  }],
  "../node_modules/@azure/core-tracing/dist-esm/src/interfaces.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.context = exports.SpanStatusCode = exports.SpanKind = void 0;
    exports.getSpan = getSpan;
    exports.getSpanContext = getSpanContext;
    exports.getTracer = getTracer;
    exports.isSpanContextValid = isSpanContextValid;
    exports.setSpan = setSpan;
    exports.setSpanContext = setSpanContext;

    var _api = require("@opentelemetry/api"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * The kind of span.
     */


    var SpanKind;
    exports.SpanKind = SpanKind;

    (function (SpanKind) {
      /** Default value. Indicates that the span is used internally. */
      SpanKind[SpanKind["INTERNAL"] = 0] = "INTERNAL";
      /**
       * Indicates that the span covers server-side handling of an RPC or other
       * remote request.
       */

      SpanKind[SpanKind["SERVER"] = 1] = "SERVER";
      /**
       * Indicates that the span covers the client-side wrapper around an RPC or
       * other remote request.
       */

      SpanKind[SpanKind["CLIENT"] = 2] = "CLIENT";
      /**
       * Indicates that the span describes producer sending a message to a
       * broker. Unlike client and server, there is no direct critical path latency
       * relationship between producer and consumer spans.
       */

      SpanKind[SpanKind["PRODUCER"] = 3] = "PRODUCER";
      /**
       * Indicates that the span describes consumer receiving a message from a
       * broker. Unlike client and server, there is no direct critical path latency
       * relationship between producer and consumer spans.
       */

      SpanKind[SpanKind["CONSUMER"] = 4] = "CONSUMER";
    })(SpanKind || (exports.SpanKind = SpanKind = {}));
    /**
     * Return the span if one exists
     *
     * @param context - context to get span from
     */


    function getSpan(context) {
      return _api.trace.getSpan(context);
    }
    /**
     * Set the span on a context
     *
     * @param context - context to use as parent
     * @param span - span to set active
     */


    function setSpan(context, span) {
      return _api.trace.setSpan(context, span);
    }
    /**
     * Wrap span context in a NoopSpan and set as span in a new
     * context
     *
     * @param context - context to set active span on
     * @param spanContext - span context to be wrapped
     */


    function setSpanContext(context, spanContext) {
      return _api.trace.setSpanContext(context, spanContext);
    }
    /**
     * Get the span context of the span if it exists.
     *
     * @param context - context to get values from
     */


    function getSpanContext(context) {
      return _api.trace.getSpanContext(context);
    }
    /**
     * Returns true of the given {@link SpanContext} is valid.
     * A valid {@link SpanContext} is one which has a valid trace ID and span ID as per the spec.
     *
     * @param context - the {@link SpanContext} to validate.
     *
     * @returns true if the {@link SpanContext} is valid, false otherwise.
     */


    function isSpanContextValid(context) {
      return _api.trace.isSpanContextValid(context);
    }

    function getTracer(name, version) {
      return _api.trace.getTracer(name || "azure/core-tracing", version);
    }
    /** Entrypoint for context API */


    var context = _api.context;
    /** SpanStatusCode */

    exports.context = context;
    var SpanStatusCode;
    exports.SpanStatusCode = SpanStatusCode;

    (function (SpanStatusCode) {
      /**
       * The default status.
       */
      SpanStatusCode[SpanStatusCode["UNSET"] = 0] = "UNSET";
      /**
       * The operation has been validated by an Application developer or
       * Operator to have completed successfully.
       */

      SpanStatusCode[SpanStatusCode["OK"] = 1] = "OK";
      /**
       * The operation contains an error.
       */

      SpanStatusCode[SpanStatusCode["ERROR"] = 2] = "ERROR";
    })(SpanStatusCode || (exports.SpanStatusCode = SpanStatusCode = {}));
  }, {
    "@opentelemetry/api": "../node_modules/@opentelemetry/api/build/esm/index.js"
  }],
  "../node_modules/@azure/core-tracing/dist-esm/src/createSpan.js": [function (require, module, exports) {
    var process = require("process");

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createSpanFunction = createSpanFunction;
    exports.isTracingDisabled = isTracingDisabled;

    var _interfaces = require("./interfaces");

    var _api = require("@opentelemetry/api"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.


    function isTracingDisabled() {
      var _a;

      if (typeof process === "undefined") {
        // not supported in browser for now without polyfills
        return false;
      }

      var azureTracingDisabledValue = (_a = undefined) === null || _a === void 0 ? void 0 : _a.toLowerCase();

      if (azureTracingDisabledValue === "false" || azureTracingDisabledValue === "0") {
        return false;
      }

      return Boolean(azureTracingDisabledValue);
    }
    /**
     * Creates a function that can be used to create spans using the global tracer.
     *
     * Usage:
     *
     * ```typescript
     * // once
     * const createSpan = createSpanFunction({ packagePrefix: "Azure.Data.AppConfiguration", namespace: "Microsoft.AppConfiguration" });
     *
     * // in each operation
     * const span = createSpan("deleteConfigurationSetting", operationOptions);
     *    // code...
     * span.end();
     * ```
     *
     * @hidden
     * @param args - allows configuration of the prefix for each span as well as the az.namespace field.
     */


    function createSpanFunction(args) {
      return function (operationName, operationOptions) {
        var tracer = (0, _interfaces.getTracer)();
        var tracingOptions = (operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) || {};
        var spanOptions = Object.assign({
          kind: _interfaces.SpanKind.INTERNAL
        }, tracingOptions.spanOptions);
        var spanName = args.packagePrefix ? "".concat(args.packagePrefix, ".").concat(operationName) : operationName;
        var span;

        if (isTracingDisabled()) {
          span = _api.trace.wrapSpanContext(_api.INVALID_SPAN_CONTEXT);
        } else {
          span = tracer.startSpan(spanName, spanOptions, tracingOptions.tracingContext);
        }

        if (args.namespace) {
          span.setAttribute("az.namespace", args.namespace);
        }

        var newSpanOptions = tracingOptions.spanOptions || {};

        if (span.isRecording() && args.namespace) {
          newSpanOptions = Object.assign(Object.assign({}, tracingOptions.spanOptions), {
            attributes: Object.assign(Object.assign({}, spanOptions.attributes), {
              "az.namespace": args.namespace
            })
          });
        }

        var newTracingOptions = Object.assign(Object.assign({}, tracingOptions), {
          spanOptions: newSpanOptions,
          tracingContext: (0, _interfaces.setSpan)(tracingOptions.tracingContext || _interfaces.context.active(), span)
        });
        var newOperationOptions = Object.assign(Object.assign({}, operationOptions), {
          tracingOptions: newTracingOptions
        });
        return {
          span: span,
          updatedOptions: newOperationOptions
        };
      };
    }
  }, {
    "./interfaces": "../node_modules/@azure/core-tracing/dist-esm/src/interfaces.js",
    "@opentelemetry/api": "../node_modules/@opentelemetry/api/build/esm/index.js",
    "process": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process/browser.js"
  }],
  "../node_modules/@azure/core-tracing/dist-esm/src/utils/traceParentHeader.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.extractSpanContextFromTraceParentHeader = extractSpanContextFromTraceParentHeader;
    exports.getTraceParentHeader = getTraceParentHeader;

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;

      var _s, _e;

      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.


    var VERSION = "00";
    /**
     * Generates a `SpanContext` given a `traceparent` header value.
     * @param traceParent - Serialized span context data as a `traceparent` header value.
     * @returns The `SpanContext` generated from the `traceparent` value.
     */

    function extractSpanContextFromTraceParentHeader(traceParentHeader) {
      var parts = traceParentHeader.split("-");

      if (parts.length !== 4) {
        return;
      }

      var _parts = _slicedToArray(parts, 4),
          version = _parts[0],
          traceId = _parts[1],
          spanId = _parts[2],
          traceOptions = _parts[3];

      if (version !== VERSION) {
        return;
      }

      var traceFlags = parseInt(traceOptions, 16);
      var spanContext = {
        spanId: spanId,
        traceId: traceId,
        traceFlags: traceFlags
      };
      return spanContext;
    }
    /**
     * Generates a `traceparent` value given a span context.
     * @param spanContext - Contains context for a specific span.
     * @returns The `spanContext` represented as a `traceparent` value.
     */


    function getTraceParentHeader(spanContext) {
      var missingFields = [];

      if (!spanContext.traceId) {
        missingFields.push("traceId");
      }

      if (!spanContext.spanId) {
        missingFields.push("spanId");
      }

      if (missingFields.length) {
        return;
      }

      var flags = spanContext.traceFlags || 0
      /* NONE */
      ;
      var hexFlags = flags.toString(16);
      var traceFlags = hexFlags.length === 1 ? "0".concat(hexFlags) : hexFlags; // https://www.w3.org/TR/trace-context/#traceparent-header-field-values

      return "".concat(VERSION, "-").concat(spanContext.traceId, "-").concat(spanContext.spanId, "-").concat(traceFlags);
    }
  }, {}],
  "../node_modules/@azure/core-tracing/dist-esm/src/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "SpanKind", {
      enumerable: true,
      get: function () {
        return _interfaces.SpanKind;
      }
    });
    Object.defineProperty(exports, "SpanStatusCode", {
      enumerable: true,
      get: function () {
        return _interfaces.SpanStatusCode;
      }
    });
    Object.defineProperty(exports, "context", {
      enumerable: true,
      get: function () {
        return _interfaces.context;
      }
    });
    Object.defineProperty(exports, "createSpanFunction", {
      enumerable: true,
      get: function () {
        return _createSpan.createSpanFunction;
      }
    });
    Object.defineProperty(exports, "extractSpanContextFromTraceParentHeader", {
      enumerable: true,
      get: function () {
        return _traceParentHeader.extractSpanContextFromTraceParentHeader;
      }
    });
    Object.defineProperty(exports, "getSpan", {
      enumerable: true,
      get: function () {
        return _interfaces.getSpan;
      }
    });
    Object.defineProperty(exports, "getSpanContext", {
      enumerable: true,
      get: function () {
        return _interfaces.getSpanContext;
      }
    });
    Object.defineProperty(exports, "getTraceParentHeader", {
      enumerable: true,
      get: function () {
        return _traceParentHeader.getTraceParentHeader;
      }
    });
    Object.defineProperty(exports, "getTracer", {
      enumerable: true,
      get: function () {
        return _interfaces.getTracer;
      }
    });
    Object.defineProperty(exports, "isSpanContextValid", {
      enumerable: true,
      get: function () {
        return _interfaces.isSpanContextValid;
      }
    });
    Object.defineProperty(exports, "setSpan", {
      enumerable: true,
      get: function () {
        return _interfaces.setSpan;
      }
    });
    Object.defineProperty(exports, "setSpanContext", {
      enumerable: true,
      get: function () {
        return _interfaces.setSpanContext;
      }
    });

    var _createSpan = require("./createSpan");

    var _interfaces = require("./interfaces");

    var _traceParentHeader = require("./utils/traceParentHeader");
  }, {
    "./createSpan": "../node_modules/@azure/core-tracing/dist-esm/src/createSpan.js",
    "./interfaces": "../node_modules/@azure/core-tracing/dist-esm/src/interfaces.js",
    "./utils/traceParentHeader": "../node_modules/@azure/core-tracing/dist-esm/src/utils/traceParentHeader.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/policies/tracingPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TracingPolicy = void 0;
    exports.tracingPolicy = tracingPolicy;

    var _requestPolicy = require("./requestPolicy");

    var _coreTracing = require("@azure/core-tracing");

    var _log = require("../log");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    var createSpan = (0, _coreTracing.createSpanFunction)({
      packagePrefix: "",
      namespace: ""
    });
    /**
     * Creates a policy that wraps outgoing requests with a tracing span.
     * @param tracingOptions - Tracing options.
     * @returns An instance of the {@link TracingPolicy} class.
     */

    function tracingPolicy() {
      var tracingOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return {
        create: function create(nextPolicy, options) {
          return new TracingPolicy(nextPolicy, options, tracingOptions);
        }
      };
    }
    /**
     * A policy that wraps outgoing requests with a tracing span.
     */


    var TracingPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(TracingPolicy, _BaseRequestPolicy);

      var _super = _createSuper(TracingPolicy);

      function TracingPolicy(nextPolicy, options, tracingOptions) {
        var _this;

        _classCallCheck(this, TracingPolicy);

        _this = _super.call(this, nextPolicy, options);
        _this.userAgent = tracingOptions.userAgent;
        return _this;
      }

      _createClass(TracingPolicy, [{
        key: "sendRequest",
        value: function () {
          var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {
            var span, response;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (request.tracingContext) {
                      _context.next = 2;
                      break;
                    }

                    return _context.abrupt("return", this._nextPolicy.sendRequest(request));

                  case 2:
                    span = this.tryCreateSpan(request);

                    if (span) {
                      _context.next = 5;
                      break;
                    }

                    return _context.abrupt("return", this._nextPolicy.sendRequest(request));

                  case 5:
                    _context.prev = 5;
                    _context.next = 8;
                    return this._nextPolicy.sendRequest(request);

                  case 8:
                    response = _context.sent;
                    this.tryProcessResponse(span, response);
                    return _context.abrupt("return", response);

                  case 13:
                    _context.prev = 13;
                    _context.t0 = _context["catch"](5);
                    this.tryProcessError(span, _context.t0);
                    throw _context.t0;

                  case 17:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[5, 13]]);
          }));

          function sendRequest(_x) {
            return _sendRequest.apply(this, arguments);
          }

          return sendRequest;
        }()
      }, {
        key: "tryCreateSpan",
        value: function tryCreateSpan(request) {
          var _a;

          try {
            // Passing spanOptions as part of tracingOptions to maintain compatibility @azure/core-tracing@preview.13 and earlier.
            // We can pass this as a separate parameter once we upgrade to the latest core-tracing.
            var _createSpan = createSpan("HTTP ".concat(request.method), {
              tracingOptions: {
                spanOptions: Object.assign(Object.assign({}, request.spanOptions), {
                  kind: _coreTracing.SpanKind.CLIENT
                }),
                tracingContext: request.tracingContext
              }
            }),
                span = _createSpan.span; // If the span is not recording, don't do any more work.


            if (!span.isRecording()) {
              span.end();
              return undefined;
            }

            var namespaceFromContext = (_a = request.tracingContext) === null || _a === void 0 ? void 0 : _a.getValue(Symbol.for("az.namespace"));

            if (typeof namespaceFromContext === "string") {
              span.setAttribute("az.namespace", namespaceFromContext);
            }

            span.setAttributes({
              "http.method": request.method,
              "http.url": request.url,
              requestId: request.requestId
            });

            if (this.userAgent) {
              span.setAttribute("http.user_agent", this.userAgent);
            } // set headers


            var spanContext = span.spanContext();
            var traceParentHeader = (0, _coreTracing.getTraceParentHeader)(spanContext);

            if (traceParentHeader && (0, _coreTracing.isSpanContextValid)(spanContext)) {
              request.headers.set("traceparent", traceParentHeader);
              var traceState = spanContext.traceState && spanContext.traceState.serialize(); // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent

              if (traceState) {
                request.headers.set("tracestate", traceState);
              }
            }

            return span;
          } catch (error) {
            _log.logger.warning("Skipping creating a tracing span due to an error: ".concat(error.message));

            return undefined;
          }
        }
      }, {
        key: "tryProcessError",
        value: function tryProcessError(span, err) {
          try {
            span.setStatus({
              code: _coreTracing.SpanStatusCode.ERROR,
              message: err.message
            });

            if (err.statusCode) {
              span.setAttribute("http.status_code", err.statusCode);
            }

            span.end();
          } catch (error) {
            _log.logger.warning("Skipping tracing span processing due to an error: ".concat(error.message));
          }
        }
      }, {
        key: "tryProcessResponse",
        value: function tryProcessResponse(span, response) {
          try {
            span.setAttribute("http.status_code", response.status);
            var serviceRequestId = response.headers.get("x-ms-request-id");

            if (serviceRequestId) {
              span.setAttribute("serviceRequestId", serviceRequestId);
            }

            span.setStatus({
              code: _coreTracing.SpanStatusCode.OK
            });
            span.end();
          } catch (error) {
            _log.logger.warning("Skipping tracing span processing due to an error: ".concat(error.message));
          }
        }
      }]);

      return TracingPolicy;
    }(_requestPolicy.BaseRequestPolicy);

    exports.TracingPolicy = TracingPolicy;
  }, {
    "./requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js",
    "@azure/core-tracing": "../node_modules/@azure/core-tracing/dist-esm/src/index.js",
    "../log": "../node_modules/@azure/core-http/dist-esm/src/log.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/serviceClient.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ServiceClient = void 0;
    exports.createPipelineFromOptions = createPipelineFromOptions;
    exports.flattenResponse = flattenResponse;
    exports.getOperationArgumentValueFromParameterPath = getOperationArgumentValueFromParameterPath;
    exports.getPropertyParent = getPropertyParent;
    exports.serializeRequestBody = serializeRequestBody;

    var utils = _interopRequireWildcard(require("./util/utils"));

    var _serializer = require("./serializer");

    var _deserializationPolicy = require("./policies/deserializationPolicy");

    var _keepAlivePolicy = require("./policies/keepAlivePolicy");

    var _redirectPolicy = require("./policies/redirectPolicy");

    var _exponentialRetryPolicy = require("./policies/exponentialRetryPolicy");

    var _logPolicy = require("./policies/logPolicy");

    var _operationParameter = require("./operationParameter");

    var _operationSpec = require("./operationSpec");

    var _webResource = require("./webResource");

    var _requestPolicy = require("./policies/requestPolicy");

    var _serializer2 = require("./util/serializer.common");

    var _coreAuth = require("@azure/core-auth");

    var _userAgentPolicy = require("./policies/userAgentPolicy");

    var _queryCollectionFormat = require("./queryCollectionFormat");

    var _url = require("./url");

    var _bearerTokenAuthenticationPolicy = require("./policies/bearerTokenAuthenticationPolicy");

    var _disableResponseDecompressionPolicy = require("./policies/disableResponseDecompressionPolicy");

    var _generateClientRequestIdPolicy = require("./policies/generateClientRequestIdPolicy");

    var _httpClientCache = require("./httpClientCache");

    var _log = require("./log");

    var _ndJsonPolicy = require("./policies/ndJsonPolicy");

    var _proxyPolicy = require("./policies/proxyPolicy");

    var _rpRegistrationPolicy = require("./policies/rpRegistrationPolicy");

    var _signingPolicy = require("./policies/signingPolicy");

    var _xml = require("./util/xml");

    var _systemErrorRetryPolicy = require("./policies/systemErrorRetryPolicy");

    var _throttlingRetryPolicy = require("./policies/throttlingRetryPolicy");

    var _tracingPolicy = require("./policies/tracingPolicy");

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function (nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj.default = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }

    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e2) {
              throw _e2;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e3) {
          didErr = true;
          err = _e3;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /**
     * ServiceClient sends service requests and receives responses.
     */


    var ServiceClient = /*#__PURE__*/function () {
      /**
       * The ServiceClient constructor
       * @param credentials - The credentials used for authentication with the service.
       * @param options - The service client options that govern the behavior of the client.
       */
      function ServiceClient(credentials,
      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */
      options) {
        var _this = this;

        _classCallCheck(this, ServiceClient);

        if (!options) {
          options = {};
        }

        this._withCredentials = options.withCredentials || false;
        this._httpClient = options.httpClient || (0, _httpClientCache.getCachedDefaultHttpClient)();
        this._requestPolicyOptions = new _requestPolicy.RequestPolicyOptions(options.httpPipelineLogger);
        var requestPolicyFactories;

        if (Array.isArray(options.requestPolicyFactories)) {
          _log.logger.info("ServiceClient: using custom request policies");

          requestPolicyFactories = options.requestPolicyFactories;
        } else {
          var authPolicyFactory = undefined;

          if ((0, _coreAuth.isTokenCredential)(credentials)) {
            _log.logger.info("ServiceClient: creating bearer token authentication policy from provided credentials"); // Create a wrapped RequestPolicyFactory here so that we can provide the
            // correct scope to the BearerTokenAuthenticationPolicy at the first time
            // one is requested.  This is needed because generated ServiceClient
            // implementations do not set baseUri until after ServiceClient's constructor
            // is finished, leaving baseUri empty at the time when it is needed to
            // build the correct scope name.


            var wrappedPolicyFactory = function wrappedPolicyFactory() {
              var bearerTokenPolicyFactory = undefined; // eslint-disable-next-line @typescript-eslint/no-this-alias

              var serviceClient = _this;
              var serviceClientOptions = options;
              return {
                create: function create(nextPolicy, createOptions) {
                  var credentialScopes = getCredentialScopes(serviceClientOptions, serviceClient.baseUri);

                  if (!credentialScopes) {
                    throw new Error("When using credential, the ServiceClient must contain a baseUri or a credentialScopes in ServiceClientOptions. Unable to create a bearerTokenAuthenticationPolicy");
                  }

                  if (bearerTokenPolicyFactory === undefined || bearerTokenPolicyFactory === null) {
                    bearerTokenPolicyFactory = (0, _bearerTokenAuthenticationPolicy.bearerTokenAuthenticationPolicy)(credentials, credentialScopes);
                  }

                  return bearerTokenPolicyFactory.create(nextPolicy, createOptions);
                }
              };
            };

            authPolicyFactory = wrappedPolicyFactory();
          } else if (credentials && typeof credentials.signRequest === "function") {
            _log.logger.info("ServiceClient: creating signing policy from provided credentials");

            authPolicyFactory = (0, _signingPolicy.signingPolicy)(credentials);
          } else if (credentials !== undefined && credentials !== null) {
            throw new Error("The credentials argument must implement the TokenCredential interface");
          }

          _log.logger.info("ServiceClient: using default request policies");

          requestPolicyFactories = createDefaultRequestPolicyFactories(authPolicyFactory, options);

          if (options.requestPolicyFactories) {
            // options.requestPolicyFactories can also be a function that manipulates
            // the default requestPolicyFactories array
            var newRequestPolicyFactories = options.requestPolicyFactories(requestPolicyFactories);

            if (newRequestPolicyFactories) {
              requestPolicyFactories = newRequestPolicyFactories;
            }
          }
        }

        this._requestPolicyFactories = requestPolicyFactories;
      }
      /**
       * Send the provided httpRequest.
       */


      _createClass(ServiceClient, [{
        key: "sendRequest",
        value: function sendRequest(options) {
          if (options === null || options === undefined || _typeof(options) !== "object") {
            throw new Error("options cannot be null or undefined and it must be of type object.");
          }

          var httpRequest;

          try {
            if ((0, _webResource.isWebResourceLike)(options)) {
              options.validateRequestProperties();
              httpRequest = options;
            } else {
              httpRequest = new _webResource.WebResource();
              httpRequest = httpRequest.prepare(options);
            }
          } catch (error) {
            return Promise.reject(error);
          }

          var httpPipeline = this._httpClient;

          if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {
            for (var i = this._requestPolicyFactories.length - 1; i >= 0; --i) {
              httpPipeline = this._requestPolicyFactories[i].create(httpPipeline, this._requestPolicyOptions);
            }
          }

          return httpPipeline.sendRequest(httpRequest);
        }
        /**
         * Send an HTTP request that is populated using the provided OperationSpec.
         * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.
         * @param operationSpec - The OperationSpec to use to populate the httpRequest.
         * @param callback - The callback to call when the response is received.
         */

      }, {
        key: "sendOperationRequest",
        value: function () {
          var _sendOperationRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(operationArguments, operationSpec, callback) {
            var _a, serializerOptions, httpRequest, result, baseUri, requestUrl, _iterator, _step, urlParameter, urlParameterValue, _iterator2, _step2, queryParameter, queryParameterValue, index, item, _index, contentType, _iterator3, _step3, headerParameter, headerValue, headerCollectionPrefix, _i, _Object$keys, key, options, customHeaderName, rawResponse, sendRequestError, cb;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (typeof operationArguments.options === "function") {
                      callback = operationArguments.options;
                      operationArguments.options = undefined;
                    }

                    serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;
                    httpRequest = new _webResource.WebResource();
                    _context.prev = 3;
                    baseUri = operationSpec.baseUrl || this.baseUri;

                    if (baseUri) {
                      _context.next = 7;
                      break;
                    }

                    throw new Error("If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.");

                  case 7:
                    httpRequest.method = operationSpec.httpMethod;
                    httpRequest.operationSpec = operationSpec;
                    requestUrl = _url.URLBuilder.parse(baseUri);

                    if (operationSpec.path) {
                      requestUrl.appendPath(operationSpec.path);
                    }

                    if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {
                      _iterator = _createForOfIteratorHelper(operationSpec.urlParameters);

                      try {
                        for (_iterator.s(); !(_step = _iterator.n()).done;) {
                          urlParameter = _step.value;
                          urlParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, urlParameter, operationSpec.serializer);
                          urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, (0, _operationParameter.getPathStringFromParameter)(urlParameter), serializerOptions);

                          if (!urlParameter.skipEncoding) {
                            urlParameterValue = encodeURIComponent(urlParameterValue);
                          }

                          requestUrl.replaceAll("{".concat(urlParameter.mapper.serializedName || (0, _operationParameter.getPathStringFromParameter)(urlParameter), "}"), urlParameterValue);
                        }
                      } catch (err) {
                        _iterator.e(err);
                      } finally {
                        _iterator.f();
                      }
                    }

                    if (!(operationSpec.queryParameters && operationSpec.queryParameters.length > 0)) {
                      _context.next = 44;
                      break;
                    }

                    _iterator2 = _createForOfIteratorHelper(operationSpec.queryParameters);
                    _context.prev = 14;

                    _iterator2.s();

                  case 16:
                    if ((_step2 = _iterator2.n()).done) {
                      _context.next = 36;
                      break;
                    }

                    queryParameter = _step2.value;
                    queryParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, queryParameter, operationSpec.serializer);

                    if (!(queryParameterValue !== undefined && queryParameterValue !== null)) {
                      _context.next = 34;
                      break;
                    }

                    queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, (0, _operationParameter.getPathStringFromParameter)(queryParameter), serializerOptions);

                    if (!(queryParameter.collectionFormat !== undefined && queryParameter.collectionFormat !== null)) {
                      _context.next = 31;
                      break;
                    }

                    if (!(queryParameter.collectionFormat === _queryCollectionFormat.QueryCollectionFormat.Multi)) {
                      _context.next = 30;
                      break;
                    }

                    if (!(queryParameterValue.length === 0)) {
                      _context.next = 27;
                      break;
                    }

                    return _context.abrupt("continue", 34);

                  case 27:
                    for (index in queryParameterValue) {
                      item = queryParameterValue[index];
                      queryParameterValue[index] = item === undefined || item === null ? "" : item.toString();
                    }

                  case 28:
                    _context.next = 31;
                    break;

                  case 30:
                    if (queryParameter.collectionFormat === _queryCollectionFormat.QueryCollectionFormat.Ssv || queryParameter.collectionFormat === _queryCollectionFormat.QueryCollectionFormat.Tsv) {
                      queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);
                    }

                  case 31:
                    if (!queryParameter.skipEncoding) {
                      if (Array.isArray(queryParameterValue)) {
                        for (_index in queryParameterValue) {
                          if (queryParameterValue[_index] !== undefined && queryParameterValue[_index] !== null) {
                            queryParameterValue[_index] = encodeURIComponent(queryParameterValue[_index]);
                          }
                        }
                      } else {
                        queryParameterValue = encodeURIComponent(queryParameterValue);
                      }
                    }

                    if (queryParameter.collectionFormat !== undefined && queryParameter.collectionFormat !== null && queryParameter.collectionFormat !== _queryCollectionFormat.QueryCollectionFormat.Multi && queryParameter.collectionFormat !== _queryCollectionFormat.QueryCollectionFormat.Ssv && queryParameter.collectionFormat !== _queryCollectionFormat.QueryCollectionFormat.Tsv) {
                      queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);
                    }

                    requestUrl.setQueryParameter(queryParameter.mapper.serializedName || (0, _operationParameter.getPathStringFromParameter)(queryParameter), queryParameterValue);

                  case 34:
                    _context.next = 16;
                    break;

                  case 36:
                    _context.next = 41;
                    break;

                  case 38:
                    _context.prev = 38;
                    _context.t0 = _context["catch"](14);

                    _iterator2.e(_context.t0);

                  case 41:
                    _context.prev = 41;

                    _iterator2.f();

                    return _context.finish(41);

                  case 44:
                    httpRequest.url = requestUrl.toString();
                    contentType = operationSpec.contentType || this.requestContentType;

                    if (contentType && operationSpec.requestBody) {
                      httpRequest.headers.set("Content-Type", contentType);
                    }

                    if (operationSpec.headerParameters) {
                      _iterator3 = _createForOfIteratorHelper(operationSpec.headerParameters);

                      try {
                        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                          headerParameter = _step3.value;
                          headerValue = getOperationArgumentValueFromParameter(this, operationArguments, headerParameter, operationSpec.serializer);

                          if (headerValue !== undefined && headerValue !== null) {
                            headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, (0, _operationParameter.getPathStringFromParameter)(headerParameter), serializerOptions);
                            headerCollectionPrefix = headerParameter.mapper.headerCollectionPrefix;

                            if (headerCollectionPrefix) {
                              for (_i = 0, _Object$keys = Object.keys(headerValue); _i < _Object$keys.length; _i++) {
                                key = _Object$keys[_i];
                                httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);
                              }
                            } else {
                              httpRequest.headers.set(headerParameter.mapper.serializedName || (0, _operationParameter.getPathStringFromParameter)(headerParameter), headerValue);
                            }
                          }
                        }
                      } catch (err) {
                        _iterator3.e(err);
                      } finally {
                        _iterator3.f();
                      }
                    }

                    options = operationArguments.options;

                    if (options) {
                      if (options.customHeaders) {
                        for (customHeaderName in options.customHeaders) {
                          httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);
                        }
                      }

                      if (options.abortSignal) {
                        httpRequest.abortSignal = options.abortSignal;
                      }

                      if (options.timeout) {
                        httpRequest.timeout = options.timeout;
                      }

                      if (options.onUploadProgress) {
                        httpRequest.onUploadProgress = options.onUploadProgress;
                      }

                      if (options.onDownloadProgress) {
                        httpRequest.onDownloadProgress = options.onDownloadProgress;
                      }

                      if (options.spanOptions) {
                        // By passing spanOptions if they exist at runtime, we're backwards compatible with @azure/core-tracing@preview.13 and earlier.
                        httpRequest.spanOptions = options.spanOptions;
                      }

                      if (options.tracingContext) {
                        httpRequest.tracingContext = options.tracingContext;
                      }

                      if (options.shouldDeserialize !== undefined && options.shouldDeserialize !== null) {
                        httpRequest.shouldDeserialize = options.shouldDeserialize;
                      }
                    }

                    httpRequest.withCredentials = this._withCredentials;
                    serializeRequestBody(this, httpRequest, operationArguments, operationSpec);

                    if (httpRequest.streamResponseStatusCodes === undefined) {
                      httpRequest.streamResponseStatusCodes = (0, _operationSpec.getStreamResponseStatusCodes)(operationSpec);
                    }

                    _context.prev = 53;
                    _context.next = 56;
                    return this.sendRequest(httpRequest);

                  case 56:
                    rawResponse = _context.sent;
                    _context.next = 62;
                    break;

                  case 59:
                    _context.prev = 59;
                    _context.t1 = _context["catch"](53);
                    sendRequestError = _context.t1;

                  case 62:
                    if (sendRequestError) {
                      if (sendRequestError.response) {
                        sendRequestError.details = flattenResponse(sendRequestError.response, operationSpec.responses[sendRequestError.statusCode] || operationSpec.responses["default"]);
                      }

                      result = Promise.reject(sendRequestError);
                    } else {
                      result = Promise.resolve(flattenResponse(rawResponse, operationSpec.responses[rawResponse.status]));
                    }

                    _context.next = 68;
                    break;

                  case 65:
                    _context.prev = 65;
                    _context.t2 = _context["catch"](3);
                    result = Promise.reject(_context.t2);

                  case 68:
                    cb = callback;

                    if (cb) {
                      result.then(function (res) {
                        return cb(null, res._response.parsedBody, res._response.request, res._response);
                      }).catch(function (err) {
                        return cb(err);
                      });
                    }

                    return _context.abrupt("return", result);

                  case 71:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[3, 65], [14, 38, 41, 44], [53, 59]]);
          }));

          function sendOperationRequest(_x, _x2, _x3) {
            return _sendOperationRequest.apply(this, arguments);
          }

          return sendOperationRequest;
        }()
      }]);

      return ServiceClient;
    }();

    exports.ServiceClient = ServiceClient;

    function serializeRequestBody(serviceClient, httpRequest, operationArguments, operationSpec) {
      var _a, _b, _c, _d, _e, _f;

      var serializerOptions = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions) !== null && _b !== void 0 ? _b : {};
      var updatedOptions = {
        rootName: (_c = serializerOptions.rootName) !== null && _c !== void 0 ? _c : "",
        includeRoot: (_d = serializerOptions.includeRoot) !== null && _d !== void 0 ? _d : false,
        xmlCharKey: (_e = serializerOptions.xmlCharKey) !== null && _e !== void 0 ? _e : _serializer2.XML_CHARKEY
      };
      var xmlCharKey = serializerOptions.xmlCharKey;

      if (operationSpec.requestBody && operationSpec.requestBody.mapper) {
        httpRequest.body = getOperationArgumentValueFromParameter(serviceClient, operationArguments, operationSpec.requestBody, operationSpec.serializer);
        var bodyMapper = operationSpec.requestBody.mapper;
        var required = bodyMapper.required,
            xmlName = bodyMapper.xmlName,
            xmlElementName = bodyMapper.xmlElementName,
            serializedName = bodyMapper.serializedName,
            xmlNamespace = bodyMapper.xmlNamespace,
            xmlNamespacePrefix = bodyMapper.xmlNamespacePrefix;
        var typeName = bodyMapper.type.name;

        try {
          if (httpRequest.body !== undefined && httpRequest.body !== null || required) {
            var requestBodyParameterPathString = (0, _operationParameter.getPathStringFromParameter)(operationSpec.requestBody);
            httpRequest.body = operationSpec.serializer.serialize(bodyMapper, httpRequest.body, requestBodyParameterPathString, updatedOptions);
            var isStream = typeName === _serializer.MapperType.Stream;

            if (operationSpec.isXML) {
              var xmlnsKey = xmlNamespacePrefix ? "xmlns:".concat(xmlNamespacePrefix) : "xmlns";
              var value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, httpRequest.body, updatedOptions);

              if (typeName === _serializer.MapperType.Sequence) {
                httpRequest.body = (0, _xml.stringifyXML)(utils.prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), {
                  rootName: xmlName || serializedName,
                  xmlCharKey: xmlCharKey
                });
              } else if (!isStream) {
                httpRequest.body = (0, _xml.stringifyXML)(value, {
                  rootName: xmlName || serializedName,
                  xmlCharKey: xmlCharKey
                });
              }
            } else if (typeName === _serializer.MapperType.String && (((_f = operationSpec.contentType) === null || _f === void 0 ? void 0 : _f.match("text/plain")) || operationSpec.mediaType === "text")) {
              // the String serializer has validated that request body is a string
              // so just send the string.
              return;
            } else if (!isStream) {
              httpRequest.body = JSON.stringify(httpRequest.body);
            }
          }
        } catch (error) {
          throw new Error("Error \"".concat(error.message, "\" occurred in serializing the payload - ").concat(JSON.stringify(serializedName, undefined, "  "), "."));
        }
      } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {
        httpRequest.formData = {};

        var _iterator4 = _createForOfIteratorHelper(operationSpec.formDataParameters),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var formDataParameter = _step4.value;
            var formDataParameterValue = getOperationArgumentValueFromParameter(serviceClient, operationArguments, formDataParameter, operationSpec.serializer);

            if (formDataParameterValue !== undefined && formDataParameterValue !== null) {
              var formDataParameterPropertyName = formDataParameter.mapper.serializedName || (0, _operationParameter.getPathStringFromParameter)(formDataParameter);
              httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, (0, _operationParameter.getPathStringFromParameter)(formDataParameter), updatedOptions);
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    }
    /**
     * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself
     */


    function getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {
      // Composite and Sequence schemas already got their root namespace set during serialization
      // We just need to add xmlns to the other schema types
      if (xmlNamespace && !["Composite", "Sequence", "Dictionary"].includes(typeName)) {
        var result = {};
        result[options.xmlCharKey] = serializedValue;
        result[_serializer2.XML_ATTRKEY] = _defineProperty({}, xmlnsKey, xmlNamespace);
        return result;
      }

      return serializedValue;
    }

    function getValueOrFunctionResult(value, defaultValueCreator) {
      var result;

      if (typeof value === "string") {
        result = value;
      } else {
        result = defaultValueCreator();

        if (typeof value === "function") {
          result = value(result);
        }
      }

      return result;
    }

    function createDefaultRequestPolicyFactories(authPolicyFactory, options) {
      var factories = [];

      if (options.generateClientRequestIdHeader) {
        factories.push((0, _generateClientRequestIdPolicy.generateClientRequestIdPolicy)(options.clientRequestIdHeaderName));
      }

      if (authPolicyFactory) {
        factories.push(authPolicyFactory);
      }

      var userAgentHeaderName = getValueOrFunctionResult(options.userAgentHeaderName, _userAgentPolicy.getDefaultUserAgentHeaderName);
      var userAgentHeaderValue = getValueOrFunctionResult(options.userAgent, _userAgentPolicy.getDefaultUserAgentValue);

      if (userAgentHeaderName && userAgentHeaderValue) {
        factories.push((0, _userAgentPolicy.userAgentPolicy)({
          key: userAgentHeaderName,
          value: userAgentHeaderValue
        }));
      }

      factories.push((0, _redirectPolicy.redirectPolicy)());
      factories.push((0, _rpRegistrationPolicy.rpRegistrationPolicy)(options.rpRegistrationRetryTimeout));

      if (!options.noRetryPolicy) {
        factories.push((0, _exponentialRetryPolicy.exponentialRetryPolicy)());
        factories.push((0, _systemErrorRetryPolicy.systemErrorRetryPolicy)());
        factories.push((0, _throttlingRetryPolicy.throttlingRetryPolicy)());
      }

      factories.push((0, _deserializationPolicy.deserializationPolicy)(options.deserializationContentTypes));

      if (utils.isNode) {
        factories.push((0, _proxyPolicy.proxyPolicy)(options.proxySettings));
      }

      factories.push((0, _logPolicy.logPolicy)({
        logger: _log.logger.info
      }));
      return factories;
    }
    /**
     * Creates an HTTP pipeline based on the given options.
     * @param pipelineOptions - Defines options that are used to configure policies in the HTTP pipeline for an SDK client.
     * @param authPolicyFactory - An optional authentication policy factory to use for signing requests.
     * @returns A set of options that can be passed to create a new {@link ServiceClient}.
     */


    function createPipelineFromOptions(pipelineOptions, authPolicyFactory) {
      var requestPolicyFactories = [];

      if (pipelineOptions.sendStreamingJson) {
        requestPolicyFactories.push((0, _ndJsonPolicy.ndJsonPolicy)());
      }

      var userAgentValue = undefined;

      if (pipelineOptions.userAgentOptions && pipelineOptions.userAgentOptions.userAgentPrefix) {
        var userAgentInfo = [];
        userAgentInfo.push(pipelineOptions.userAgentOptions.userAgentPrefix); // Add the default user agent value if it isn't already specified
        // by the userAgentPrefix option.

        var defaultUserAgentInfo = (0, _userAgentPolicy.getDefaultUserAgentValue)();

        if (userAgentInfo.indexOf(defaultUserAgentInfo) === -1) {
          userAgentInfo.push(defaultUserAgentInfo);
        }

        userAgentValue = userAgentInfo.join(" ");
      }

      var keepAliveOptions = Object.assign(Object.assign({}, _keepAlivePolicy.DefaultKeepAliveOptions), pipelineOptions.keepAliveOptions);
      var retryOptions = Object.assign(Object.assign({}, _exponentialRetryPolicy.DefaultRetryOptions), pipelineOptions.retryOptions);
      var redirectOptions = Object.assign(Object.assign({}, _redirectPolicy.DefaultRedirectOptions), pipelineOptions.redirectOptions);

      if (utils.isNode) {
        requestPolicyFactories.push((0, _proxyPolicy.proxyPolicy)(pipelineOptions.proxyOptions));
      }

      var deserializationOptions = Object.assign(Object.assign({}, _deserializationPolicy.DefaultDeserializationOptions), pipelineOptions.deserializationOptions);
      var loggingOptions = Object.assign({}, pipelineOptions.loggingOptions);
      requestPolicyFactories.push((0, _tracingPolicy.tracingPolicy)({
        userAgent: userAgentValue
      }), (0, _keepAlivePolicy.keepAlivePolicy)(keepAliveOptions), (0, _userAgentPolicy.userAgentPolicy)({
        value: userAgentValue
      }), (0, _generateClientRequestIdPolicy.generateClientRequestIdPolicy)(), (0, _deserializationPolicy.deserializationPolicy)(deserializationOptions.expectedContentTypes), (0, _throttlingRetryPolicy.throttlingRetryPolicy)(), (0, _systemErrorRetryPolicy.systemErrorRetryPolicy)(), (0, _exponentialRetryPolicy.exponentialRetryPolicy)(retryOptions.maxRetries, retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs));

      if (redirectOptions.handleRedirects) {
        requestPolicyFactories.push((0, _redirectPolicy.redirectPolicy)(redirectOptions.maxRetries));
      }

      if (authPolicyFactory) {
        requestPolicyFactories.push(authPolicyFactory);
      }

      requestPolicyFactories.push((0, _logPolicy.logPolicy)(loggingOptions));

      if (utils.isNode && pipelineOptions.decompressResponse === false) {
        requestPolicyFactories.push((0, _disableResponseDecompressionPolicy.disableResponseDecompressionPolicy)());
      }

      return {
        httpClient: pipelineOptions.httpClient,
        requestPolicyFactories: requestPolicyFactories
      };
    }
    /**
     * Get the property parent for the property at the provided path when starting with the provided
     * parent object.
     */


    function getPropertyParent(parent, propertyPath) {
      if (parent && propertyPath) {
        var propertyPathLength = propertyPath.length;

        for (var i = 0; i < propertyPathLength - 1; ++i) {
          var propertyName = propertyPath[i];

          if (!parent[propertyName]) {
            parent[propertyName] = {};
          }

          parent = parent[propertyName];
        }
      }

      return parent;
    }

    function getOperationArgumentValueFromParameter(serviceClient, operationArguments, parameter, serializer) {
      return getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameter.parameterPath, parameter.mapper, serializer);
    }

    function getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameterPath, parameterMapper, serializer) {
      var _a;

      var value;

      if (typeof parameterPath === "string") {
        parameterPath = [parameterPath];
      }

      var serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;

      if (Array.isArray(parameterPath)) {
        if (parameterPath.length > 0) {
          if (parameterMapper.isConstant) {
            value = parameterMapper.defaultValue;
          } else {
            var propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);

            if (!propertySearchResult.propertyFound) {
              propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);
            }

            var useDefaultValue = false;

            if (!propertySearchResult.propertyFound) {
              useDefaultValue = parameterMapper.required || parameterPath[0] === "options" && parameterPath.length === 2;
            }

            value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;
          } // Serialize just for validation purposes.


          var parameterPathString = (0, _operationParameter.getPathStringFromParameterPath)(parameterPath, parameterMapper);
          serializer.serialize(parameterMapper, value, parameterPathString, serializerOptions);
        }
      } else {
        if (parameterMapper.required) {
          value = {};
        }

        for (var propertyName in parameterPath) {
          var propertyMapper = parameterMapper.type.modelProperties[propertyName];
          var propertyPath = parameterPath[propertyName];
          var propertyValue = getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, propertyPath, propertyMapper, serializer); // Serialize just for validation purposes.

          var propertyPathString = (0, _operationParameter.getPathStringFromParameterPath)(propertyPath, propertyMapper);
          serializer.serialize(propertyMapper, propertyValue, propertyPathString, serializerOptions);

          if (propertyValue !== undefined && propertyValue !== null) {
            if (!value) {
              value = {};
            }

            value[propertyName] = propertyValue;
          }
        }
      }

      return value;
    }

    function getPropertyFromParameterPath(parent, parameterPath) {
      var result = {
        propertyFound: false
      };
      var i = 0;

      for (; i < parameterPath.length; ++i) {
        var parameterPathPart = parameterPath[i]; // Make sure to check inherited properties too, so don't use hasOwnProperty().

        if (parent !== undefined && parent !== null && parameterPathPart in parent) {
          parent = parent[parameterPathPart];
        } else {
          break;
        }
      }

      if (i === parameterPath.length) {
        result.propertyValue = parent;
        result.propertyFound = true;
      }

      return result;
    }
    /**
     * Parses an {@link HttpOperationResponse} into a normalized HTTP response object ({@link RestResponse}).
     * @param _response - Wrapper object for http response.
     * @param responseSpec - Mappers for how to parse the response properties.
     * @returns - A normalized response object.
     */


    function flattenResponse(_response, responseSpec) {
      var parsedHeaders = _response.parsedHeaders;
      var bodyMapper = responseSpec && responseSpec.bodyMapper;

      var addOperationResponse = function addOperationResponse(obj) {
        return Object.defineProperty(obj, "_response", {
          value: _response
        });
      };

      if (bodyMapper) {
        var typeName = bodyMapper.type.name;

        if (typeName === "Stream") {
          return addOperationResponse(Object.assign(Object.assign({}, parsedHeaders), {
            blobBody: _response.blobBody,
            readableStreamBody: _response.readableStreamBody
          }));
        }

        var modelProperties = typeName === "Composite" && bodyMapper.type.modelProperties || {};
        var isPageableResponse = Object.keys(modelProperties).some(function (k) {
          return modelProperties[k].serializedName === "";
        });

        if (typeName === "Sequence" || isPageableResponse) {
          var arrayResponse = _toConsumableArray(_response.parsedBody || []);

          for (var _i2 = 0, _Object$keys2 = Object.keys(modelProperties); _i2 < _Object$keys2.length; _i2++) {
            var key = _Object$keys2[_i2];

            if (modelProperties[key].serializedName) {
              arrayResponse[key] = _response.parsedBody[key];
            }
          }

          if (parsedHeaders) {
            for (var _i3 = 0, _Object$keys3 = Object.keys(parsedHeaders); _i3 < _Object$keys3.length; _i3++) {
              var _key = _Object$keys3[_i3];
              arrayResponse[_key] = parsedHeaders[_key];
            }
          }

          addOperationResponse(arrayResponse);
          return arrayResponse;
        }

        if (typeName === "Composite" || typeName === "Dictionary") {
          return addOperationResponse(Object.assign(Object.assign({}, parsedHeaders), _response.parsedBody));
        }
      }

      if (bodyMapper || _response.request.method === "HEAD" || utils.isPrimitiveType(_response.parsedBody)) {
        // primitive body types and HEAD booleans
        return addOperationResponse(Object.assign(Object.assign({}, parsedHeaders), {
          body: _response.parsedBody
        }));
      }

      return addOperationResponse(Object.assign(Object.assign({}, parsedHeaders), _response.parsedBody));
    }

    function getCredentialScopes(options, baseUri) {
      if (options === null || options === void 0 ? void 0 : options.credentialScopes) {
        var scopes = options.credentialScopes;
        return Array.isArray(scopes) ? scopes.map(function (scope) {
          return new URL(scope).toString();
        }) : new URL(scopes).toString();
      }

      if (baseUri) {
        return "".concat(baseUri, "/.default");
      }

      return undefined;
    }
  }, {
    "./util/utils": "../node_modules/@azure/core-http/dist-esm/src/util/utils.js",
    "./serializer": "../node_modules/@azure/core-http/dist-esm/src/serializer.js",
    "./policies/deserializationPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/deserializationPolicy.js",
    "./policies/keepAlivePolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/keepAlivePolicy.js",
    "./policies/redirectPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/redirectPolicy.js",
    "./policies/exponentialRetryPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/exponentialRetryPolicy.js",
    "./policies/logPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/logPolicy.js",
    "./operationParameter": "../node_modules/@azure/core-http/dist-esm/src/operationParameter.js",
    "./operationSpec": "../node_modules/@azure/core-http/dist-esm/src/operationSpec.js",
    "./webResource": "../node_modules/@azure/core-http/dist-esm/src/webResource.js",
    "./policies/requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js",
    "./util/serializer.common": "../node_modules/@azure/core-http/dist-esm/src/util/serializer.common.js",
    "@azure/core-auth": "../node_modules/@azure/core-auth/dist-esm/src/index.js",
    "./policies/userAgentPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/userAgentPolicy.js",
    "./queryCollectionFormat": "../node_modules/@azure/core-http/dist-esm/src/queryCollectionFormat.js",
    "./url": "../node_modules/@azure/core-http/dist-esm/src/url.js",
    "./policies/bearerTokenAuthenticationPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/bearerTokenAuthenticationPolicy.js",
    "./policies/disableResponseDecompressionPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/disableResponseDecompressionPolicy.browser.js",
    "./policies/generateClientRequestIdPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/generateClientRequestIdPolicy.js",
    "./httpClientCache": "../node_modules/@azure/core-http/dist-esm/src/httpClientCache.js",
    "./log": "../node_modules/@azure/core-http/dist-esm/src/log.js",
    "./policies/ndJsonPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/ndJsonPolicy.js",
    "./policies/proxyPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/proxyPolicy.browser.js",
    "./policies/rpRegistrationPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/rpRegistrationPolicy.js",
    "./policies/signingPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/signingPolicy.js",
    "./util/xml": "../node_modules/@azure/core-http/dist-esm/src/util/xml.browser.js",
    "./policies/systemErrorRetryPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/systemErrorRetryPolicy.js",
    "./policies/throttlingRetryPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/throttlingRetryPolicy.js",
    "./policies/tracingPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/tracingPolicy.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/createSpanLegacy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createSpanFunction = createSpanFunction;

    var _coreTracing = require("@azure/core-tracing"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    // NOTE: we've moved this code into core-tracing but these functions
    // were a part of the GA'd library and can't be removed until the next major
    // release. They currently get called always, even if tracing is not enabled.

    /**
     * This function is only here for compatibility. Use createSpanFunction in core-tracing.
     *
     * @deprecated This function is only here for compatibility. Use createSpanFunction in core-tracing.
     * @hidden
    
     * @param spanConfig - The name of the operation being performed.
     * @param tracingOptions - The options for the underlying http request.
     */


    function createSpanFunction(args) {
      return (0, _coreTracing.createSpanFunction)(args);
    }
  }, {
    "@azure/core-tracing": "../node_modules/@azure/core-tracing/dist-esm/src/index.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/credentials/accessTokenCache.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TokenRefreshBufferMs = exports.ExpiringAccessTokenCache = void 0;

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Defines the default token refresh buffer duration.
     */


    var TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes

    /**
     * Provides an {@link AccessTokenCache} implementation which clears
     * the cached {@link AccessToken}'s after the expiresOnTimestamp has
     * passed.
     *
     * @deprecated No longer used in the bearer authorization policy.
     */

    exports.TokenRefreshBufferMs = TokenRefreshBufferMs;

    var ExpiringAccessTokenCache = /*#__PURE__*/function () {
      /**
       * Constructs an instance of {@link ExpiringAccessTokenCache} with
       * an optional expiration buffer time.
       */
      function ExpiringAccessTokenCache() {
        var tokenRefreshBufferMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : TokenRefreshBufferMs;

        _classCallCheck(this, ExpiringAccessTokenCache);

        this.cachedToken = undefined;
        this.tokenRefreshBufferMs = tokenRefreshBufferMs;
      }
      /**
       * Saves an access token into the internal in-memory cache.
       * @param accessToken - Access token or undefined to clear the cache.
       */


      _createClass(ExpiringAccessTokenCache, [{
        key: "setCachedToken",
        value: function setCachedToken(accessToken) {
          this.cachedToken = accessToken;
        }
        /**
         * Returns the cached access token, or `undefined` if one is not cached or the cached one is expiring soon.
         */

      }, {
        key: "getCachedToken",
        value: function getCachedToken() {
          if (this.cachedToken && Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp) {
            this.cachedToken = undefined;
          }

          return this.cachedToken;
        }
      }]);

      return ExpiringAccessTokenCache;
    }();

    exports.ExpiringAccessTokenCache = ExpiringAccessTokenCache;
  }, {}],
  "../node_modules/@azure/core-http/dist-esm/src/credentials/accessTokenRefresher.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AccessTokenRefresher = void 0;

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.
     *
     * @deprecated No longer used in the bearer authorization policy.
     */


    var AccessTokenRefresher = /*#__PURE__*/function () {
      function AccessTokenRefresher(credential, scopes) {
        var requiredMillisecondsBeforeNewRefresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30000;

        _classCallCheck(this, AccessTokenRefresher);

        this.credential = credential;
        this.scopes = scopes;
        this.requiredMillisecondsBeforeNewRefresh = requiredMillisecondsBeforeNewRefresh;
        this.lastCalled = 0;
      }
      /**
       * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying
       * that we are ready for a new refresh.
       */


      _createClass(AccessTokenRefresher, [{
        key: "isReady",
        value: function isReady() {
          // We're only ready for a new refresh if the required milliseconds have passed.
          return !this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh;
        }
        /**
         * Stores the time in which it is called,
         * then requests a new token,
         * then sets this.promise to undefined,
         * then returns the token.
         */

      }, {
        key: "getToken",
        value: function () {
          var _getToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {
            var token;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    this.lastCalled = Date.now();
                    _context.next = 3;
                    return this.credential.getToken(this.scopes, options);

                  case 3:
                    token = _context.sent;
                    this.promise = undefined;
                    return _context.abrupt("return", token || undefined);

                  case 6:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function getToken(_x) {
            return _getToken.apply(this, arguments);
          }

          return getToken;
        }()
        /**
         * Requests a new token if we're not currently waiting for a new token.
         * Returns null if the required time between each call hasn't been reached.
         */

      }, {
        key: "refresh",
        value: function refresh(options) {
          if (!this.promise) {
            this.promise = this.getToken(options);
          }

          return this.promise;
        }
      }]);

      return AccessTokenRefresher;
    }();

    exports.AccessTokenRefresher = AccessTokenRefresher;
  }, {}],
  "../node_modules/@azure/core-http/dist-esm/src/credentials/basicAuthenticationCredentials.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BasicAuthenticationCredentials = void 0;

    var base64 = _interopRequireWildcard(require("../util/base64"));

    var _constants = require("../util/constants");

    var _httpHeaders = require("../httpHeaders");

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function (nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj.default = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    var HeaderConstants = _constants.Constants.HeaderConstants;
    var DEFAULT_AUTHORIZATION_SCHEME = "Basic";
    /**
     * A simple {@link ServiceClientCredential} that authenticates with a username and a password.
     */

    var BasicAuthenticationCredentials = /*#__PURE__*/function () {
      /**
       * Creates a new BasicAuthenticationCredentials object.
       *
       * @param userName - User name.
       * @param password - Password.
       * @param authorizationScheme - The authorization scheme.
       */
      function BasicAuthenticationCredentials(userName, password) {
        var authorizationScheme = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_AUTHORIZATION_SCHEME;

        _classCallCheck(this, BasicAuthenticationCredentials);
        /**
         * Authorization scheme. Defaults to "Basic".
         * More information about authorization schemes is available here: https://developer.mozilla.org/docs/Web/HTTP/Authentication#authentication_schemes
         */


        this.authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;

        if (userName === null || userName === undefined || typeof userName.valueOf() !== "string") {
          throw new Error("userName cannot be null or undefined and must be of type string.");
        }

        if (password === null || password === undefined || typeof password.valueOf() !== "string") {
          throw new Error("password cannot be null or undefined and must be of type string.");
        }

        this.userName = userName;
        this.password = password;
        this.authorizationScheme = authorizationScheme;
      }
      /**
       * Signs a request with the Authentication header.
       *
       * @param webResource - The WebResourceLike to be signed.
       * @returns The signed request object.
       */


      _createClass(BasicAuthenticationCredentials, [{
        key: "signRequest",
        value: function signRequest(webResource) {
          var credentials = "".concat(this.userName, ":").concat(this.password);
          var encodedCredentials = "".concat(this.authorizationScheme, " ").concat(base64.encodeString(credentials));
          if (!webResource.headers) webResource.headers = new _httpHeaders.HttpHeaders();
          webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);
          return Promise.resolve(webResource);
        }
      }]);

      return BasicAuthenticationCredentials;
    }();

    exports.BasicAuthenticationCredentials = BasicAuthenticationCredentials;
  }, {
    "../util/base64": "../node_modules/@azure/core-http/dist-esm/src/util/base64.browser.js",
    "../util/constants": "../node_modules/@azure/core-http/dist-esm/src/util/constants.js",
    "../httpHeaders": "../node_modules/@azure/core-http/dist-esm/src/httpHeaders.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/credentials/apiKeyCredentials.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ApiKeyCredentials = void 0;

    var _httpHeaders = require("../httpHeaders");

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /**
     * Authenticates to a service using an API key.
     */


    var ApiKeyCredentials = /*#__PURE__*/function () {
      /**
       * @param options - Specifies the options to be provided for auth. Either header or query needs to be provided.
       */
      function ApiKeyCredentials(options) {
        _classCallCheck(this, ApiKeyCredentials);

        if (!options || options && !options.inHeader && !options.inQuery) {
          throw new Error("options cannot be null or undefined. Either \"inHeader\" or \"inQuery\" property of the options object needs to be provided.");
        }

        this.inHeader = options.inHeader;
        this.inQuery = options.inQuery;
      }
      /**
       * Signs a request with the values provided in the inHeader and inQuery parameter.
       *
       * @param webResource - The WebResourceLike to be signed.
       * @returns The signed request object.
       */


      _createClass(ApiKeyCredentials, [{
        key: "signRequest",
        value: function signRequest(webResource) {
          if (!webResource) {
            return Promise.reject(new Error("webResource cannot be null or undefined and must be of type \"object\"."));
          }

          if (this.inHeader) {
            if (!webResource.headers) {
              webResource.headers = new _httpHeaders.HttpHeaders();
            }

            for (var headerName in this.inHeader) {
              webResource.headers.set(headerName, this.inHeader[headerName]);
            }
          }

          if (this.inQuery) {
            if (!webResource.url) {
              return Promise.reject(new Error("url cannot be null in the request object."));
            }

            if (webResource.url.indexOf("?") < 0) {
              webResource.url += "?";
            }

            for (var key in this.inQuery) {
              if (!webResource.url.endsWith("?")) {
                webResource.url += "&";
              }

              webResource.url += "".concat(key, "=").concat(this.inQuery[key]);
            }
          }

          return Promise.resolve(webResource);
        }
      }]);

      return ApiKeyCredentials;
    }();

    exports.ApiKeyCredentials = ApiKeyCredentials;
  }, {
    "../httpHeaders": "../node_modules/@azure/core-http/dist-esm/src/httpHeaders.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/credentials/topicCredentials.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TopicCredentials = void 0;

    var _apiKeyCredentials = require("./apiKeyCredentials");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * A {@link TopicCredentials} object used for Azure Event Grid.
     */


    var TopicCredentials = /*#__PURE__*/function (_ApiKeyCredentials) {
      _inherits(TopicCredentials, _ApiKeyCredentials);

      var _super = _createSuper(TopicCredentials);
      /**
       * Creates a new EventGrid TopicCredentials object.
       *
       * @param topicKey - The EventGrid topic key
       */


      function TopicCredentials(topicKey) {
        _classCallCheck(this, TopicCredentials);

        if (!topicKey || topicKey && typeof topicKey !== "string") {
          throw new Error("topicKey cannot be null or undefined and must be of type string.");
        }

        var options = {
          inHeader: {
            "aeg-sas-key": topicKey
          }
        };
        return _super.call(this, options);
      }

      return _createClass(TopicCredentials);
    }(_apiKeyCredentials.ApiKeyCredentials);

    exports.TopicCredentials = TopicCredentials;
  }, {
    "./apiKeyCredentials": "../node_modules/@azure/core-http/dist-esm/src/credentials/apiKeyCredentials.js"
  }],
  "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "AccessTokenRefresher", {
      enumerable: true,
      get: function () {
        return _accessTokenRefresher.AccessTokenRefresher;
      }
    });
    Object.defineProperty(exports, "ApiKeyCredentials", {
      enumerable: true,
      get: function () {
        return _apiKeyCredentials.ApiKeyCredentials;
      }
    });
    Object.defineProperty(exports, "BaseRequestPolicy", {
      enumerable: true,
      get: function () {
        return _requestPolicy.BaseRequestPolicy;
      }
    });
    Object.defineProperty(exports, "BasicAuthenticationCredentials", {
      enumerable: true,
      get: function () {
        return _basicAuthenticationCredentials.BasicAuthenticationCredentials;
      }
    });
    Object.defineProperty(exports, "Constants", {
      enumerable: true,
      get: function () {
        return _constants.Constants;
      }
    });
    Object.defineProperty(exports, "DefaultHttpClient", {
      enumerable: true,
      get: function () {
        return _defaultHttpClient.DefaultHttpClient;
      }
    });
    Object.defineProperty(exports, "ExpiringAccessTokenCache", {
      enumerable: true,
      get: function () {
        return _accessTokenCache.ExpiringAccessTokenCache;
      }
    });
    Object.defineProperty(exports, "HttpHeaders", {
      enumerable: true,
      get: function () {
        return _httpHeaders.HttpHeaders;
      }
    });
    Object.defineProperty(exports, "HttpPipelineLogLevel", {
      enumerable: true,
      get: function () {
        return _httpPipelineLogLevel.HttpPipelineLogLevel;
      }
    });
    Object.defineProperty(exports, "MapperType", {
      enumerable: true,
      get: function () {
        return _serializer.MapperType;
      }
    });
    Object.defineProperty(exports, "QueryCollectionFormat", {
      enumerable: true,
      get: function () {
        return _queryCollectionFormat.QueryCollectionFormat;
      }
    });
    Object.defineProperty(exports, "RequestPolicyOptions", {
      enumerable: true,
      get: function () {
        return _requestPolicy.RequestPolicyOptions;
      }
    });
    Object.defineProperty(exports, "RestError", {
      enumerable: true,
      get: function () {
        return _restError.RestError;
      }
    });
    Object.defineProperty(exports, "RetryMode", {
      enumerable: true,
      get: function () {
        return _exponentialRetryPolicy.RetryMode;
      }
    });
    Object.defineProperty(exports, "Serializer", {
      enumerable: true,
      get: function () {
        return _serializer.Serializer;
      }
    });
    Object.defineProperty(exports, "ServiceClient", {
      enumerable: true,
      get: function () {
        return _serviceClient.ServiceClient;
      }
    });
    Object.defineProperty(exports, "TopicCredentials", {
      enumerable: true,
      get: function () {
        return _topicCredentials.TopicCredentials;
      }
    });
    Object.defineProperty(exports, "URLBuilder", {
      enumerable: true,
      get: function () {
        return _url.URLBuilder;
      }
    });
    Object.defineProperty(exports, "URLQuery", {
      enumerable: true,
      get: function () {
        return _url.URLQuery;
      }
    });
    Object.defineProperty(exports, "WebResource", {
      enumerable: true,
      get: function () {
        return _webResource.WebResource;
      }
    });
    Object.defineProperty(exports, "XML_ATTRKEY", {
      enumerable: true,
      get: function () {
        return _serializer2.XML_ATTRKEY;
      }
    });
    Object.defineProperty(exports, "XML_CHARKEY", {
      enumerable: true,
      get: function () {
        return _serializer2.XML_CHARKEY;
      }
    });
    Object.defineProperty(exports, "applyMixins", {
      enumerable: true,
      get: function () {
        return _utils.applyMixins;
      }
    });
    Object.defineProperty(exports, "bearerTokenAuthenticationPolicy", {
      enumerable: true,
      get: function () {
        return _bearerTokenAuthenticationPolicy.bearerTokenAuthenticationPolicy;
      }
    });
    Object.defineProperty(exports, "createPipelineFromOptions", {
      enumerable: true,
      get: function () {
        return _serviceClient.createPipelineFromOptions;
      }
    });
    Object.defineProperty(exports, "createSpanFunction", {
      enumerable: true,
      get: function () {
        return _createSpanLegacy.createSpanFunction;
      }
    });
    Object.defineProperty(exports, "delay", {
      enumerable: true,
      get: function () {
        return _delay.delay;
      }
    });
    Object.defineProperty(exports, "deserializationPolicy", {
      enumerable: true,
      get: function () {
        return _deserializationPolicy.deserializationPolicy;
      }
    });
    Object.defineProperty(exports, "deserializeResponseBody", {
      enumerable: true,
      get: function () {
        return _deserializationPolicy.deserializeResponseBody;
      }
    });
    Object.defineProperty(exports, "disableResponseDecompressionPolicy", {
      enumerable: true,
      get: function () {
        return _disableResponseDecompressionPolicy.disableResponseDecompressionPolicy;
      }
    });
    Object.defineProperty(exports, "encodeUri", {
      enumerable: true,
      get: function () {
        return _utils.encodeUri;
      }
    });
    Object.defineProperty(exports, "executePromisesSequentially", {
      enumerable: true,
      get: function () {
        return _utils.executePromisesSequentially;
      }
    });
    Object.defineProperty(exports, "exponentialRetryPolicy", {
      enumerable: true,
      get: function () {
        return _exponentialRetryPolicy.exponentialRetryPolicy;
      }
    });
    Object.defineProperty(exports, "flattenResponse", {
      enumerable: true,
      get: function () {
        return _serviceClient.flattenResponse;
      }
    });
    Object.defineProperty(exports, "generateClientRequestIdPolicy", {
      enumerable: true,
      get: function () {
        return _generateClientRequestIdPolicy.generateClientRequestIdPolicy;
      }
    });
    Object.defineProperty(exports, "generateUuid", {
      enumerable: true,
      get: function () {
        return _utils.generateUuid;
      }
    });
    Object.defineProperty(exports, "getDefaultProxySettings", {
      enumerable: true,
      get: function () {
        return _proxyPolicy.getDefaultProxySettings;
      }
    });
    Object.defineProperty(exports, "getDefaultUserAgentValue", {
      enumerable: true,
      get: function () {
        return _userAgentPolicy.getDefaultUserAgentValue;
      }
    });
    Object.defineProperty(exports, "isDuration", {
      enumerable: true,
      get: function () {
        return _utils.isDuration;
      }
    });
    Object.defineProperty(exports, "isNode", {
      enumerable: true,
      get: function () {
        return _utils.isNode;
      }
    });
    Object.defineProperty(exports, "isTokenCredential", {
      enumerable: true,
      get: function () {
        return _coreAuth.isTokenCredential;
      }
    });
    Object.defineProperty(exports, "isValidUuid", {
      enumerable: true,
      get: function () {
        return _utils.isValidUuid;
      }
    });
    Object.defineProperty(exports, "keepAlivePolicy", {
      enumerable: true,
      get: function () {
        return _keepAlivePolicy.keepAlivePolicy;
      }
    });
    Object.defineProperty(exports, "logPolicy", {
      enumerable: true,
      get: function () {
        return _logPolicy.logPolicy;
      }
    });
    Object.defineProperty(exports, "operationOptionsToRequestOptionsBase", {
      enumerable: true,
      get: function () {
        return _operationOptions.operationOptionsToRequestOptionsBase;
      }
    });
    Object.defineProperty(exports, "parseXML", {
      enumerable: true,
      get: function () {
        return _xml.parseXML;
      }
    });
    Object.defineProperty(exports, "promiseToCallback", {
      enumerable: true,
      get: function () {
        return _utils.promiseToCallback;
      }
    });
    Object.defineProperty(exports, "promiseToServiceCallback", {
      enumerable: true,
      get: function () {
        return _utils.promiseToServiceCallback;
      }
    });
    Object.defineProperty(exports, "proxyPolicy", {
      enumerable: true,
      get: function () {
        return _proxyPolicy.proxyPolicy;
      }
    });
    Object.defineProperty(exports, "redirectPolicy", {
      enumerable: true,
      get: function () {
        return _redirectPolicy.redirectPolicy;
      }
    });
    Object.defineProperty(exports, "serializeObject", {
      enumerable: true,
      get: function () {
        return _serializer.serializeObject;
      }
    });
    Object.defineProperty(exports, "signingPolicy", {
      enumerable: true,
      get: function () {
        return _signingPolicy.signingPolicy;
      }
    });
    Object.defineProperty(exports, "stringifyXML", {
      enumerable: true,
      get: function () {
        return _xml.stringifyXML;
      }
    });
    Object.defineProperty(exports, "stripRequest", {
      enumerable: true,
      get: function () {
        return _utils.stripRequest;
      }
    });
    Object.defineProperty(exports, "stripResponse", {
      enumerable: true,
      get: function () {
        return _utils.stripResponse;
      }
    });
    Object.defineProperty(exports, "systemErrorRetryPolicy", {
      enumerable: true,
      get: function () {
        return _systemErrorRetryPolicy.systemErrorRetryPolicy;
      }
    });
    Object.defineProperty(exports, "throttlingRetryPolicy", {
      enumerable: true,
      get: function () {
        return _throttlingRetryPolicy.throttlingRetryPolicy;
      }
    });
    Object.defineProperty(exports, "tracingPolicy", {
      enumerable: true,
      get: function () {
        return _tracingPolicy.tracingPolicy;
      }
    });
    Object.defineProperty(exports, "userAgentPolicy", {
      enumerable: true,
      get: function () {
        return _userAgentPolicy.userAgentPolicy;
      }
    });

    var _webResource = require("./webResource");

    var _defaultHttpClient = require("./defaultHttpClient");

    var _httpHeaders = require("./httpHeaders");

    var _httpPipelineLogLevel = require("./httpPipelineLogLevel");

    var _restError = require("./restError");

    var _operationOptions = require("./operationOptions");

    var _serviceClient = require("./serviceClient");

    var _queryCollectionFormat = require("./queryCollectionFormat");

    var _constants = require("./util/constants");

    var _bearerTokenAuthenticationPolicy = require("./policies/bearerTokenAuthenticationPolicy");

    var _logPolicy = require("./policies/logPolicy");

    var _requestPolicy = require("./policies/requestPolicy");

    var _generateClientRequestIdPolicy = require("./policies/generateClientRequestIdPolicy");

    var _exponentialRetryPolicy = require("./policies/exponentialRetryPolicy");

    var _systemErrorRetryPolicy = require("./policies/systemErrorRetryPolicy");

    var _throttlingRetryPolicy = require("./policies/throttlingRetryPolicy");

    var _proxyPolicy = require("./policies/proxyPolicy");

    var _redirectPolicy = require("./policies/redirectPolicy");

    var _keepAlivePolicy = require("./policies/keepAlivePolicy");

    var _disableResponseDecompressionPolicy = require("./policies/disableResponseDecompressionPolicy");

    var _signingPolicy = require("./policies/signingPolicy");

    var _userAgentPolicy = require("./policies/userAgentPolicy");

    var _deserializationPolicy = require("./policies/deserializationPolicy");

    var _tracingPolicy = require("./policies/tracingPolicy");

    var _serializer = require("./serializer");

    var _utils = require("./util/utils");

    var _url = require("./url");

    var _delay = require("./util/delay");

    var _createSpanLegacy = require("./createSpanLegacy");

    var _coreAuth = require("@azure/core-auth");

    var _accessTokenCache = require("./credentials/accessTokenCache");

    var _accessTokenRefresher = require("./credentials/accessTokenRefresher");

    var _basicAuthenticationCredentials = require("./credentials/basicAuthenticationCredentials");

    var _apiKeyCredentials = require("./credentials/apiKeyCredentials");

    var _topicCredentials = require("./credentials/topicCredentials");

    var _xml = require("./util/xml");

    var _serializer2 = require("./util/serializer.common");
  }, {
    "./webResource": "../node_modules/@azure/core-http/dist-esm/src/webResource.js",
    "./defaultHttpClient": "../node_modules/@azure/core-http/dist-esm/src/defaultHttpClient.browser.js",
    "./httpHeaders": "../node_modules/@azure/core-http/dist-esm/src/httpHeaders.js",
    "./httpPipelineLogLevel": "../node_modules/@azure/core-http/dist-esm/src/httpPipelineLogLevel.js",
    "./restError": "../node_modules/@azure/core-http/dist-esm/src/restError.js",
    "./operationOptions": "../node_modules/@azure/core-http/dist-esm/src/operationOptions.js",
    "./serviceClient": "../node_modules/@azure/core-http/dist-esm/src/serviceClient.js",
    "./queryCollectionFormat": "../node_modules/@azure/core-http/dist-esm/src/queryCollectionFormat.js",
    "./util/constants": "../node_modules/@azure/core-http/dist-esm/src/util/constants.js",
    "./policies/bearerTokenAuthenticationPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/bearerTokenAuthenticationPolicy.js",
    "./policies/logPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/logPolicy.js",
    "./policies/requestPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js",
    "./policies/generateClientRequestIdPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/generateClientRequestIdPolicy.js",
    "./policies/exponentialRetryPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/exponentialRetryPolicy.js",
    "./policies/systemErrorRetryPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/systemErrorRetryPolicy.js",
    "./policies/throttlingRetryPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/throttlingRetryPolicy.js",
    "./policies/proxyPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/proxyPolicy.browser.js",
    "./policies/redirectPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/redirectPolicy.js",
    "./policies/keepAlivePolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/keepAlivePolicy.js",
    "./policies/disableResponseDecompressionPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/disableResponseDecompressionPolicy.browser.js",
    "./policies/signingPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/signingPolicy.js",
    "./policies/userAgentPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/userAgentPolicy.js",
    "./policies/deserializationPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/deserializationPolicy.js",
    "./policies/tracingPolicy": "../node_modules/@azure/core-http/dist-esm/src/policies/tracingPolicy.js",
    "./serializer": "../node_modules/@azure/core-http/dist-esm/src/serializer.js",
    "./util/utils": "../node_modules/@azure/core-http/dist-esm/src/util/utils.js",
    "./url": "../node_modules/@azure/core-http/dist-esm/src/url.js",
    "./util/delay": "../node_modules/@azure/core-http/dist-esm/src/util/delay.js",
    "./createSpanLegacy": "../node_modules/@azure/core-http/dist-esm/src/createSpanLegacy.js",
    "@azure/core-auth": "../node_modules/@azure/core-auth/dist-esm/src/index.js",
    "./credentials/accessTokenCache": "../node_modules/@azure/core-http/dist-esm/src/credentials/accessTokenCache.js",
    "./credentials/accessTokenRefresher": "../node_modules/@azure/core-http/dist-esm/src/credentials/accessTokenRefresher.js",
    "./credentials/basicAuthenticationCredentials": "../node_modules/@azure/core-http/dist-esm/src/credentials/basicAuthenticationCredentials.js",
    "./credentials/apiKeyCredentials": "../node_modules/@azure/core-http/dist-esm/src/credentials/apiKeyCredentials.js",
    "./credentials/topicCredentials": "../node_modules/@azure/core-http/dist-esm/src/credentials/topicCredentials.js",
    "./util/xml": "../node_modules/@azure/core-http/dist-esm/src/util/xml.browser.js",
    "./util/serializer.common": "../node_modules/@azure/core-http/dist-esm/src/util/serializer.common.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/stream-http/lib/capability.js": [function (require, module, exports) {
    var global = arguments[3];
    exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream);
    exports.writableStream = isFunction(global.WritableStream);
    exports.abortController = isFunction(global.AbortController);
    exports.blobConstructor = false;

    try {
      new Blob([new ArrayBuffer(1)]);
      exports.blobConstructor = true;
    } catch (e) {} // The xhr request to example.com may violate some restrictive CSP configurations,
    // so if we're running in a browser that supports `fetch`, avoid calling getXHR()
    // and assume support for certain features below.


    var xhr;

    function getXHR() {
      // Cache the xhr value
      if (xhr !== undefined) return xhr;

      if (global.XMLHttpRequest) {
        xhr = new global.XMLHttpRequest(); // If XDomainRequest is available (ie only, where xhr might not work
        // cross domain), use the page location. Otherwise use example.com
        // Note: this doesn't actually make an http request.

        try {
          xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com');
        } catch (e) {
          xhr = null;
        }
      } else {
        // Service workers don't have XHR
        xhr = null;
      }

      return xhr;
    }

    function checkTypeSupport(type) {
      var xhr = getXHR();
      if (!xhr) return false;

      try {
        xhr.responseType = type;
        return xhr.responseType === type;
      } catch (e) {}

      return false;
    } // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
    // Safari 7.1 appears to have fixed this bug.


    var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined';
    var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice); // If fetch is supported, then arraybuffer will be supported too. Skip calling
    // checkTypeSupport(), since that calls getXHR().

    exports.arraybuffer = exports.fetch || haveArrayBuffer && checkTypeSupport('arraybuffer'); // These next two tests unavoidably show warnings in Chrome. Since fetch will always
    // be used if it's available, just return false for these to avoid the warnings.

    exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream');
    exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer && checkTypeSupport('moz-chunked-arraybuffer'); // If fetch is supported, then overrideMimeType will be supported too. Skip calling
    // getXHR().

    exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false);
    exports.vbArray = isFunction(global.VBArray);

    function isFunction(value) {
      return typeof value === 'function';
    }

    xhr = null; // Help gc
  }, {}],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js": [function (require, module, exports) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;

          var TempCtor = function () {};

          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }, {}],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process-nextick-args/index.js": [function (require, module, exports) {
    var process = require("process");

    'use strict';

    if (typeof process === 'undefined' || !process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
      module.exports = {
        nextTick: nextTick
      };
    } else {
      module.exports = process;
    }

    function nextTick(fn, arg1, arg2, arg3) {
      if (typeof fn !== 'function') {
        throw new TypeError('"callback" argument must be a function');
      }

      var len = arguments.length;
      var args, i;

      switch (len) {
        case 0:
        case 1:
          return process.nextTick(fn);

        case 2:
          return process.nextTick(function afterTickOne() {
            fn.call(null, arg1);
          });

        case 3:
          return process.nextTick(function afterTickTwo() {
            fn.call(null, arg1, arg2);
          });

        case 4:
          return process.nextTick(function afterTickThree() {
            fn.call(null, arg1, arg2, arg3);
          });

        default:
          args = new Array(len - 1);
          i = 0;

          while (i < args.length) {
            args[i++] = arguments[i];
          }

          return process.nextTick(function afterTick() {
            fn.apply(null, args);
          });
      }
    }
  }, {
    "process": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process/browser.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/isarray/index.js": [function (require, module, exports) {
    var toString = {}.toString;

    module.exports = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };
  }, {}],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/events/events.js": [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    'use strict';

    var R = typeof Reflect === 'object' ? Reflect : null;
    var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;

    if (R && typeof R.ownKeys === 'function') {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target);
      };
    }

    function ProcessEmitWarning(warning) {
      if (console && console.warn) console.warn(warning);
    }

    var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
      return value !== value;
    };

    function EventEmitter() {
      EventEmitter.init.call(this);
    }

    module.exports = EventEmitter;
    module.exports.once = once; // Backwards-compat with node 0.10.x

    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.

    var defaultMaxListeners = 10;

    function checkListener(listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }

    Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
      enumerable: true,
      get: function () {
        return defaultMaxListeners;
      },
      set: function (arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        }

        defaultMaxListeners = arg;
      }
    });

    EventEmitter.init = function () {
      if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    }; // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.


    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
      }

      this._maxListeners = n;
      return this;
    };

    function _getMaxListeners(that) {
      if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };

    EventEmitter.prototype.emit = function emit(type) {
      var args = [];

      for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);

      var doError = type === 'error';
      var events = this._events;
      if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

      if (doError) {
        var er;
        if (args.length > 0) er = args[0];

        if (er instanceof Error) {
          // Note: The comments on the `throw` lines are intentional, they show
          // up in Node's output if this results in an unhandled exception.
          throw er; // Unhandled 'error' event
        } // At least give some kind of context to the user


        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
      }

      var handler = events[type];
      if (handler === undefined) return false;

      if (typeof handler === 'function') {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);

        for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;

      if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
          target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object

          events = target._events;
        }

        existing = events[type];
      }

      if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        } // Check for listener leak


        m = _getMaxListeners(target);

        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true; // No error code for this since it is a Warning
          // eslint-disable-next-line no-restricted-syntax

          var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }

      return target;
    }

    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }

    function _onceWrap(target, type, listener) {
      var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
      };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    }; // Emits a 'removeListener' event if and only if the listener was removed.


    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === undefined) return this;
      list = events[type];
      if (list === undefined) return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);else {
          delete events[type];
          if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0) return this;
        if (position === 0) list.shift();else {
          spliceOne(list, position);
        }
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i;
      events = this._events;
      if (events === undefined) return this; // not listening for removeListener, no need to emit

      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
        }

        return this;
      } // emit removeListener for all listeners on all events


      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;

        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }

        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === undefined) return [];
      var evlistener = events[type];
      if (evlistener === undefined) return [];
      if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }

    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };

    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };

    EventEmitter.listenerCount = function (emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };

    EventEmitter.prototype.listenerCount = listenerCount;

    function listenerCount(type) {
      var events = this._events;

      if (events !== undefined) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener !== undefined) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };

    function arrayClone(arr, n) {
      var copy = new Array(n);

      for (var i = 0; i < n; ++i) copy[i] = arr[i];

      return copy;
    }

    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++) list[index] = list[index + 1];

      list.pop();
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);

      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }

      return ret;
    }

    function once(emitter, name) {
      return new Promise(function (resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }

        function resolver() {
          if (typeof emitter.removeListener === 'function') {
            emitter.removeListener('error', errorListener);
          }

          resolve([].slice.call(arguments));
        }

        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, {
          once: true
        });

        if (name !== 'error') {
          addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
          });
        }
      });
    }

    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === 'function') {
        eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
      }
    }

    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === 'function') {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === 'function') {
        // EventTarget does not have `error` event semantics like Node
        // EventEmitters, we do not listen for `error` events here.
        emitter.addEventListener(name, function wrapListener(arg) {
          // IE does not have builtin `{ once: true }` support so we
          // have to do it manually.
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }

          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }, {}],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/stream-browser.js": [function (require, module, exports) {
    module.exports = require('events').EventEmitter;
  }, {
    "events": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/events/events.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/base64-js/index.js": [function (require, module, exports) {
    'use strict';

    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    } // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications


    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;

    function getLens(b64) {
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4');
      } // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42


      var validLen = b64.indexOf('=');
      if (validLen === -1) validLen = len;
      var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    } // base64 is 4/3 + up to two characters of the original data


    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }

    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }

    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

      var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i;

      for (i = 0; i < len; i += 4) {
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      return arr;
    }

    function tripletToBase64(num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
    }

    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];

      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
      }

      return output.join('');
    }

    function fromByteArray(uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3
      // go through the array every three bytes, we'll deal with trailing stuff later

      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
      } // pad the end with zeros, but make sure to not forget the extra bytes


      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
      }

      return parts.join('');
    }
  }, {}],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/ieee754/index.js": [function (require, module, exports) {
    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;

      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;

      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }

      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };

    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);

        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }

        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }

        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = e << mLen | m;
      eLen += mLen;

      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    };
  }, {}],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js": [function (require, module, exports) {
    var global = arguments[3];
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <http://feross.org>
     * @license  MIT
     */

    /* eslint-disable no-proto */

    'use strict';

    var base64 = require('base64-js');

    var ieee754 = require('ieee754');

    var isArray = require('isarray');

    exports.Buffer = Buffer;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.
    
     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */

    Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
    /*
     * Export kMaxLength after typed array support is determined.
     */

    exports.kMaxLength = kMaxLength();

    function typedArraySupport() {
      try {
        var arr = new Uint8Array(1);
        arr.__proto__ = {
          __proto__: Uint8Array.prototype,
          foo: function () {
            return 42;
          }
        };
        return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
      } catch (e) {
        return false;
      }
    }

    function kMaxLength() {
      return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
    }

    function createBuffer(that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length');
      }

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer(length);
        }

        that.length = length;
      }

      return that;
    }
    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */


    function Buffer(arg, encodingOrOffset, length) {
      if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
        return new Buffer(arg, encodingOrOffset, length);
      } // Common case.


      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error('If encoding is specified then the first argument must be a string');
        }

        return allocUnsafe(this, arg);
      }

      return from(this, arg, encodingOrOffset, length);
    }

    Buffer.poolSize = 8192; // not used by this implementation
    // TODO: Legacy, not needed anymore. Remove in next major version.

    Buffer._augment = function (arr) {
      arr.__proto__ = Buffer.prototype;
      return arr;
    };

    function from(that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number');
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length);
      }

      if (typeof value === 'string') {
        return fromString(that, value, encodingOrOffset);
      }

      return fromObject(that, value);
    }
    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/


    Buffer.from = function (value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length);
    };

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      Buffer.prototype.__proto__ = Uint8Array.prototype;
      Buffer.__proto__ = Uint8Array;

      if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
        // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
        Object.defineProperty(Buffer, Symbol.species, {
          value: null,
          configurable: true
        });
      }
    }

    function assertSize(size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number');
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative');
      }
    }

    function alloc(that, size, fill, encoding) {
      assertSize(size);

      if (size <= 0) {
        return createBuffer(that, size);
      }

      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
      }

      return createBuffer(that, size);
    }
    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/


    Buffer.alloc = function (size, fill, encoding) {
      return alloc(null, size, fill, encoding);
    };

    function allocUnsafe(that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

      if (!Buffer.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }

      return that;
    }
    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */


    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(null, size);
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */


    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(null, size);
    };

    function fromString(that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding');
      }

      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);
      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that;
    }

    function fromArrayLike(that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);

      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }

      return that;
    }

    function fromArrayBuffer(that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds');
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds');
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array);
      }

      return that;
    }

    function fromObject(that, obj) {
      if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);

        if (that.length === 0) {
          return that;
        }

        obj.copy(that, 0, 0, len);
        return that;
      }

      if (obj) {
        if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0);
          }

          return fromArrayLike(that, obj);
        }

        if (obj.type === 'Buffer' && isArray(obj.data)) {
          return fromArrayLike(that, obj.data);
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
    }

    function checked(length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
      }

      return length | 0;
    }

    function SlowBuffer(length) {
      if (+length != length) {
        // eslint-disable-line eqeqeq
        length = 0;
      }

      return Buffer.alloc(+length);
    }

    Buffer.isBuffer = function isBuffer(b) {
      return !!(b != null && b._isBuffer);
    };

    Buffer.compare = function compare(a, b) {
      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError('Arguments must be Buffers');
      }

      if (a === b) return 0;
      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }

      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };

    Buffer.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true;

        default:
          return false;
      }
    };

    Buffer.concat = function concat(list, length) {
      if (!isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }

      if (list.length === 0) {
        return Buffer.alloc(0);
      }

      var i;

      if (length === undefined) {
        length = 0;

        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;

      for (i = 0; i < list.length; ++i) {
        var buf = list[i];

        if (!Buffer.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }

        buf.copy(buffer, pos);
        pos += buf.length;
      }

      return buffer;
    };

    function byteLength(string, encoding) {
      if (Buffer.isBuffer(string)) {
        return string.length;
      }

      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength;
      }

      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0; // Use a for loop to avoid recursion

      var loweredCase = false;

      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len;

          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes(string).length;

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2;

          case 'hex':
            return len >>> 1;

          case 'base64':
            return base64ToBytes(string).length;

          default:
            if (loweredCase) return utf8ToBytes(string).length; // assume utf8

            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }

    Buffer.byteLength = byteLength;

    function slowToString(encoding, start, end) {
      var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.
      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

      if (start === undefined || start < 0) {
        start = 0;
      } // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.


      if (start > this.length) {
        return '';
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return '';
      } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return '';
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end);

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end);

          case 'ascii':
            return asciiSlice(this, start, end);

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end);

          case 'base64':
            return base64Slice(this, start, end);

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end);

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.


    Buffer.prototype._isBuffer = true;

    function swap(b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16() {
      var len = this.length;

      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits');
      }

      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }

      return this;
    };

    Buffer.prototype.swap32 = function swap32() {
      var len = this.length;

      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits');
      }

      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }

      return this;
    };

    Buffer.prototype.swap64 = function swap64() {
      var len = this.length;

      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits');
      }

      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }

      return this;
    };

    Buffer.prototype.toString = function toString() {
      var length = this.length | 0;
      if (length === 0) return '';
      if (arguments.length === 0) return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };

    Buffer.prototype.equals = function equals(b) {
      if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
      if (this === b) return true;
      return Buffer.compare(this, b) === 0;
    };

    Buffer.prototype.inspect = function inspect() {
      var str = '';
      var max = exports.INSPECT_MAX_BYTES;

      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }

      return '<Buffer ' + str + '>';
    };

    Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (!Buffer.isBuffer(target)) {
        throw new TypeError('Argument must be a Buffer');
      }

      if (start === undefined) {
        start = 0;
      }

      if (end === undefined) {
        end = target ? target.length : 0;
      }

      if (thisStart === undefined) {
        thisStart = 0;
      }

      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index');
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }

      if (thisStart >= thisEnd) {
        return -1;
      }

      if (start >= end) {
        return 1;
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target) return 0;
      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }

      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf


    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1; // Normalize byteOffset

      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }

      byteOffset = +byteOffset; // Coerce to Number.

      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : buffer.length - 1;
      } // Normalize byteOffset: negative offsets start from the end of the buffer


      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

      if (byteOffset >= buffer.length) {
        if (dir) return -1;else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;else return -1;
      } // Normalize val


      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      } // Finally, search either indexOf (if dir is true) or lastIndexOf


      if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1;
        }

        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]

        if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }

        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }

      throw new TypeError('val must be string, number or Buffer');
    }

    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();

        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }

          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read(buf, i) {
        if (indexSize === 1) {
          return buf[i];
        } else {
          return buf.readUInt16BE(i * indexSize);
        }
      }

      var i;

      if (dir) {
        var foundIndex = -1;

        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

        for (i = byteOffset; i >= 0; i--) {
          var found = true;

          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break;
            }
          }

          if (found) return i;
        }
      }

      return -1;
    }

    Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };

    Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };

    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;

      if (!length) {
        length = remaining;
      } else {
        length = Number(length);

        if (length > remaining) {
          length = remaining;
        }
      } // must be an even number of digits


      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

      if (length > strLen / 2) {
        length = strLen / 2;
      }

      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i;
        buf[offset + i] = parsed;
      }

      return i;
    }

    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }

    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }

    function latin1Write(buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length);
    }

    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }

    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }

    Buffer.prototype.write = function write(string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0; // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0; // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;

        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        } // legacy write(string, encoding, offset, length) - remove in v0.13

      } else {
        throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds');
      }

      if (!encoding) encoding = 'utf8';
      var loweredCase = false;

      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length);

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length);

          case 'ascii':
            return asciiWrite(this, string, offset, length);

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length);

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length);

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON() {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };

    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }

    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];
      var i = start;

      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }

              break;

            case 2:
              secondByte = buf[i + 1];

              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }

              break;

            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];

              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }

              break;

            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];

              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }

          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res);
    } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety


    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray(codePoints) {
      var len = codePoints.length;

      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
      } // Decode in chunks to avoid "call stack size exceeded".


      var res = '';
      var i = 0;

      while (i < len) {
        res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
      }

      return res;
    }

    function asciiSlice(buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }

      return ret;
    }

    function latin1Slice(buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }

      return ret;
    }

    function hexSlice(buf, start, end) {
      var len = buf.length;
      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;
      var out = '';

      for (var i = start; i < end; ++i) {
        out += toHex(buf[i]);
      }

      return out;
    }

    function utf16leSlice(buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';

      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }

      return res;
    }

    Buffer.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;
      var newBuf;

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer(sliceLen, undefined);

        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf;
    };
    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */


    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
    }

    Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;

      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val;
    };

    Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;

      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;

      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val;
    };

    Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset];
    };

    Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };

    Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };

    Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
    };

    Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };

    Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;

      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      mul *= 0x80;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength);
      return val;
    };

    Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);
      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];

      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }

      mul *= 0x80;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength);
      return val;
    };

    Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return this[offset];
      return (0xff - this[offset] + 1) * -1;
    };

    Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 0x8000 ? val | 0xFFFF0000 : val;
    };

    Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 0x8000 ? val | 0xFFFF0000 : val;
    };

    Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };

    Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };

    Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };

    Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };

    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length) throw new RangeError('Index out of range');
    }

    Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;

      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;

      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = value / mul & 0xFF;
      }

      return offset + byteLength;
    };

    Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;

      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;

      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = value / mul & 0xFF;
      }

      return offset + byteLength;
    };

    Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = value & 0xff;
      return offset + 1;
    };

    function objectWriteUInt16(buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;

      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }

      return offset + 2;
    };

    Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }

      return offset + 2;
    };

    function objectWriteUInt32(buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;

      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
      }
    }

    Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 0xff;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }

      return offset + 4;
    };

    Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }

      return offset + 4;
    };

    Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;

      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;

      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }

        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
      }

      return offset + byteLength;
    };

    Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;

      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;

      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }

        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
      }

      return offset + byteLength;
    };

    Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = value & 0xff;
      return offset + 1;
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }

      return offset + 2;
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }

      return offset + 2;
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }

      return offset + 4;
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }

      return offset + 4;
    };

    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range');
      if (offset < 0) throw new RangeError('Index out of range');
    }

    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
      }

      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };

    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
      }

      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


    Buffer.prototype.copy = function copy(target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

      if (end === start) return 0;
      if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds');
      }

      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
      if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

      if (end > this.length) end = this.length;

      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
      }

      return len;
    }; // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])


    Buffer.prototype.fill = function fill(val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }

        if (val.length === 1) {
          var code = val.charCodeAt(0);

          if (code < 256) {
            val = code;
          }
        }

        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string');
        }

        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding);
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      } // Invalid ranges are not set to a default, so can range check early.


      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index');
      }

      if (end <= start) {
        return this;
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;
      if (!val) val = 0;
      var i;

      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
        var len = bytes.length;

        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this;
    }; // HELPER FUNCTIONS
    // ================


    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean(str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

      if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

      while (str.length % 4 !== 0) {
        str = str + '=';
      }

      return str;
    }

    function stringtrim(str) {
      if (str.trim) return str.trim();
      return str.replace(/^\s+|\s+$/g, '');
    }

    function toHex(n) {
      if (n < 16) return '0' + n.toString(16);
      return n.toString(16);
    }

    function utf8ToBytes(string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i); // is surrogate component

        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue;
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue;
            } // valid lead


            leadSurrogate = codePoint;
            continue;
          } // 2 leads in a row


          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue;
          } // valid surrogate pair


          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null; // encode utf8

        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break;
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break;
          bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break;
          bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break;
          bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else {
          throw new Error('Invalid code point');
        }
      }

      return bytes;
    }

    function asciiToBytes(str) {
      var byteArray = [];

      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }

      return byteArray;
    }

    function utf16leToBytes(str, units) {
      var c, hi, lo;
      var byteArray = [];

      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray;
    }

    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }

    function blitBuffer(src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
      }

      return i;
    }

    function isnan(val) {
      return val !== val; // eslint-disable-line no-self-compare
    }
  }, {
    "base64-js": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/base64-js/index.js",
    "ieee754": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/ieee754/index.js",
    "isarray": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/isarray/index.js",
    "buffer": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/safe-buffer/index.js": [function (require, module, exports) {
    /* eslint-disable node/no-deprecated-api */
    var buffer = require('buffer');

    var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }

    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }

    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length);
    } // Copy static methods from Buffer


    copyProps(Buffer, SafeBuffer);

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number');
      }

      return Buffer(arg, encodingOrOffset, length);
    };

    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      var buf = Buffer(size);

      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }

      return buf;
    };

    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      return Buffer(size);
    };

    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      return buffer.SlowBuffer(size);
    };
  }, {
    "buffer": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/core-util-is/lib/util.js": [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray(arg) {
      if (Array.isArray) {
        return Array.isArray(arg);
      }

      return objectToString(arg) === '[object Array]';
    }

    exports.isArray = isArray;

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    exports.isBoolean = isBoolean;

    function isNull(arg) {
      return arg === null;
    }

    exports.isNull = isNull;

    function isNullOrUndefined(arg) {
      return arg == null;
    }

    exports.isNullOrUndefined = isNullOrUndefined;

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    exports.isNumber = isNumber;

    function isString(arg) {
      return typeof arg === 'string';
    }

    exports.isString = isString;

    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }

    exports.isSymbol = isSymbol;

    function isUndefined(arg) {
      return arg === void 0;
    }

    exports.isUndefined = isUndefined;

    function isRegExp(re) {
      return objectToString(re) === '[object RegExp]';
    }

    exports.isRegExp = isRegExp;

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    exports.isObject = isObject;

    function isDate(d) {
      return objectToString(d) === '[object Date]';
    }

    exports.isDate = isDate;

    function isError(e) {
      return objectToString(e) === '[object Error]' || e instanceof Error;
    }

    exports.isError = isError;

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    exports.isFunction = isFunction;

    function isPrimitive(arg) {
      return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
      typeof arg === 'undefined';
    }

    exports.isPrimitive = isPrimitive;
    exports.isBuffer = require('buffer').Buffer.isBuffer;

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
  }, {
    "buffer": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/BufferList.js": [function (require, module, exports) {
    'use strict';

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    var Buffer = require('safe-buffer').Buffer;

    var util = require('util');

    function copyBuffer(src, target, offset) {
      src.copy(target, offset);
    }

    module.exports = function () {
      function BufferList() {
        _classCallCheck(this, BufferList);

        this.head = null;
        this.tail = null;
        this.length = 0;
      }

      BufferList.prototype.push = function push(v) {
        var entry = {
          data: v,
          next: null
        };
        if (this.length > 0) this.tail.next = entry;else this.head = entry;
        this.tail = entry;
        ++this.length;
      };

      BufferList.prototype.unshift = function unshift(v) {
        var entry = {
          data: v,
          next: this.head
        };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
      };

      BufferList.prototype.shift = function shift() {
        if (this.length === 0) return;
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
        --this.length;
        return ret;
      };

      BufferList.prototype.clear = function clear() {
        this.head = this.tail = null;
        this.length = 0;
      };

      BufferList.prototype.join = function join(s) {
        if (this.length === 0) return '';
        var p = this.head;
        var ret = '' + p.data;

        while (p = p.next) {
          ret += s + p.data;
        }

        return ret;
      };

      BufferList.prototype.concat = function concat(n) {
        if (this.length === 0) return Buffer.alloc(0);
        if (this.length === 1) return this.head.data;
        var ret = Buffer.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;

        while (p) {
          copyBuffer(p.data, ret, i);
          i += p.data.length;
          p = p.next;
        }

        return ret;
      };

      return BufferList;
    }();

    if (util && util.inspect && util.inspect.custom) {
      module.exports.prototype[util.inspect.custom] = function () {
        var obj = util.inspect({
          length: this.length
        });
        return this.constructor.name + ' ' + obj;
      };
    }
  }, {
    "safe-buffer": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/safe-buffer/index.js",
    "util": "../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/_empty.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/destroy.js": [function (require, module, exports) {
    'use strict';
    /*<replacement>*/

    var pna = require('process-nextick-args');
    /*</replacement>*/
    // undocumented cb() API, needed for core, not for public API


    function destroy(err, cb) {
      var _this = this;

      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;

      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
          pna.nextTick(emitErrorNT, this, err);
        }

        return this;
      } // we set destroyed to true before firing error callbacks in order
      // to make it re-entrance safe in case destroy() is called within callbacks


      if (this._readableState) {
        this._readableState.destroyed = true;
      } // if this is a duplex stream mark the writable part as destroyed as well


      if (this._writableState) {
        this._writableState.destroyed = true;
      }

      this._destroy(err || null, function (err) {
        if (!cb && err) {
          pna.nextTick(emitErrorNT, _this, err);

          if (_this._writableState) {
            _this._writableState.errorEmitted = true;
          }
        } else if (cb) {
          cb(err);
        }
      });

      return this;
    }

    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }

      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }

    function emitErrorNT(self, err) {
      self.emit('error', err);
    }

    module.exports = {
      destroy: destroy,
      undestroy: undestroy
    };
  }, {
    "process-nextick-args": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process-nextick-args/index.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/util-deprecate/browser.js": [function (require, module, exports) {
    var global = arguments[3];
    /**
     * Module exports.
     */

    module.exports = deprecate;
    /**
     * Mark that a method should not be used.
     * Returns a modified function which warns once by default.
     *
     * If `localStorage.noDeprecation = true` is set, then it is a no-op.
     *
     * If `localStorage.throwDeprecation = true` is set, then deprecated functions
     * will throw an Error when invoked.
     *
     * If `localStorage.traceDeprecation = true` is set, then deprecated functions
     * will invoke `console.trace()` instead of `console.error()`.
     *
     * @param {Function} fn - the function to deprecate
     * @param {String} msg - the string to print to the console when `fn` is invoked
     * @returns {Function} a new "deprecated" version of `fn`
     * @api public
     */

    function deprecate(fn, msg) {
      if (config('noDeprecation')) {
        return fn;
      }

      var warned = false;

      function deprecated() {
        if (!warned) {
          if (config('throwDeprecation')) {
            throw new Error(msg);
          } else if (config('traceDeprecation')) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }

          warned = true;
        }

        return fn.apply(this, arguments);
      }

      return deprecated;
    }
    /**
     * Checks `localStorage` for boolean values for the given `name`.
     *
     * @param {String} name
     * @returns {Boolean}
     * @api private
     */


    function config(name) {
      // accessing global.localStorage can trigger a DOMException in sandboxed iframes
      try {
        if (!global.localStorage) return false;
      } catch (_) {
        return false;
      }

      var val = global.localStorage[name];
      if (null == val) return false;
      return String(val).toLowerCase() === 'true';
    }
  }, {}],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_writable.js": [function (require, module, exports) {
    var process = require("process");

    var global = arguments[3]; // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // A bit simpler than readable streams.
    // Implement an async ._write(chunk, encoding, cb), and it'll handle all
    // the drain event emission and buffering.

    'use strict';
    /*<replacement>*/


    var pna = require('process-nextick-args');
    /*</replacement>*/


    module.exports = Writable;
    /* <replacement> */

    function WriteReq(chunk, encoding, cb) {
      this.chunk = chunk;
      this.encoding = encoding;
      this.callback = cb;
      this.next = null;
    } // It seems a linked list but it is not
    // there will be only 2 of these for each stream


    function CorkedRequest(state) {
      var _this = this;

      this.next = null;
      this.entry = null;

      this.finish = function () {
        onCorkedFinish(_this, state);
      };
    }
    /* </replacement> */

    /*<replacement>*/


    var asyncWrite = !true && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
    /*</replacement>*/

    /*<replacement>*/

    var Duplex;
    /*</replacement>*/

    Writable.WritableState = WritableState;
    /*<replacement>*/

    var util = Object.create(require('core-util-is'));
    util.inherits = require('inherits');
    /*</replacement>*/

    /*<replacement>*/

    var internalUtil = {
      deprecate: require('util-deprecate')
    };
    /*</replacement>*/

    /*<replacement>*/

    var Stream = require('./internal/streams/stream');
    /*</replacement>*/

    /*<replacement>*/


    var Buffer = require('safe-buffer').Buffer;

    var OurUint8Array = global.Uint8Array || function () {};

    function _uint8ArrayToBuffer(chunk) {
      return Buffer.from(chunk);
    }

    function _isUint8Array(obj) {
      return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    /*</replacement>*/


    var destroyImpl = require('./internal/streams/destroy');

    util.inherits(Writable, Stream);

    function nop() {}

    function WritableState(options, stream) {
      Duplex = Duplex || require('./_stream_duplex');
      options = options || {}; // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream.
      // These options can be provided separately as readableXXX and writableXXX.

      var isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
      // contains buffers or objects.

      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()

      var hwm = options.highWaterMark;
      var writableHwm = options.writableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm; // cast to ints.

      this.highWaterMark = Math.floor(this.highWaterMark); // if _final has been called

      this.finalCalled = false; // drain event flag.

      this.needDrain = false; // at the start of calling end()

      this.ending = false; // when end() has been called, and returned

      this.ended = false; // when 'finish' is emitted

      this.finished = false; // has it been destroyed

      this.destroyed = false; // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.

      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.

      this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.

      this.length = 0; // a flag to see when we're in the middle of a write.

      this.writing = false; // when true all writes will be buffered until .uncork() call

      this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.

      this.sync = true; // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.

      this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

      this.onwrite = function (er) {
        onwrite(stream, er);
      }; // the callback that the user supplies to write(chunk,encoding,cb)


      this.writecb = null; // the amount that is being written when _write is called.

      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted

      this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams

      this.prefinished = false; // True if the error was already emitted and should not be thrown again

      this.errorEmitted = false; // count buffered requests

      this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two

      this.corkedRequestsFree = new CorkedRequest(this);
    }

    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];

      while (current) {
        out.push(current);
        current = current.next;
      }

      return out;
    };

    (function () {
      try {
        Object.defineProperty(WritableState.prototype, 'buffer', {
          get: internalUtil.deprecate(function () {
            return this.getBuffer();
          }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
        });
      } catch (_) {}
    })(); // Test _writableState for inheritance to account for Duplex streams,
    // whose prototype chain only points to Readable.


    var realHasInstance;

    if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function (object) {
          if (realHasInstance.call(this, object)) return true;
          if (this !== Writable) return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function (object) {
        return object instanceof this;
      };
    }

    function Writable(options) {
      Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
      // `realHasInstance` is necessary because using plain `instanceof`
      // would return false, as no `_writableState` property is attached.
      // Trying to use the custom `instanceof` for Writable here will also break the
      // Node.js LazyTransform implementation, which has a non-trivial getter for
      // `_writableState` that would lead to infinite recursion.

      if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
        return new Writable(options);
      }

      this._writableState = new WritableState(options, this); // legacy.

      this.writable = true;

      if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
      }

      Stream.call(this);
    } // Otherwise people can pipe Writable streams, which is just wrong.


    Writable.prototype.pipe = function () {
      this.emit('error', new Error('Cannot pipe, not readable'));
    };

    function writeAfterEnd(stream, cb) {
      var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

      stream.emit('error', er);
      pna.nextTick(cb, er);
    } // Checks that a user-supplied chunk is valid, especially for the particular
    // mode the stream is in. Currently this means that `null` is never accepted
    // and undefined/non-string values are only allowed in object mode.


    function validChunk(stream, state, chunk, cb) {
      var valid = true;
      var er = false;

      if (chunk === null) {
        er = new TypeError('May not write null values to stream');
      } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }

      if (er) {
        stream.emit('error', er);
        pna.nextTick(cb, er);
        valid = false;
      }

      return valid;
    }

    Writable.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;

      var isBuf = !state.objectMode && _isUint8Array(chunk);

      if (isBuf && !Buffer.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
      if (typeof cb !== 'function') cb = nop;
      if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };

    Writable.prototype.cork = function () {
      var state = this._writableState;
      state.corked++;
    };

    Writable.prototype.uncork = function () {
      var state = this._writableState;

      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };

    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };

    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = Buffer.from(chunk, encoding);
      }

      return chunk;
    }

    Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function () {
        return this._writableState.highWaterMark;
      }
    }); // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.

    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);

        if (chunk !== newChunk) {
          isBuf = true;
          encoding = 'buffer';
          chunk = newChunk;
        }
      }

      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

      if (!ret) state.needDrain = true;

      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk: chunk,
          encoding: encoding,
          isBuf: isBuf,
          callback: cb,
          next: null
        };

        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }

        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }

      return ret;
    }

    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }

    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;

      if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        pna.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error

        pna.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        stream.emit('error', er);
      } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        stream.emit('error', er); // this can emit finish, but finish must
        // always follow error

        finishMaybe(stream, state);
      }
    }

    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }

    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      onwriteStateUpdate(state);
      if (er) onwriteError(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state);

        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }

        if (sync) {
          /*<replacement>*/
          asyncWrite(afterWrite, stream, state, finished, cb);
          /*</replacement>*/
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }

    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    } // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.


    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    } // if there's something in the buffer waiting, then process it


    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;

      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;

        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf) allBuffers = false;
          entry = entry.next;
          count += 1;
        }

        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite

        state.pendingcb++;
        state.lastBufferedRequest = null;

        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }

        state.bufferedRequestCount = 0;
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.

          if (state.writing) {
            break;
          }
        }

        if (entry === null) state.lastBufferedRequest = null;
      }

      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }

    Writable.prototype._write = function (chunk, encoding, cb) {
      cb(new Error('_write() is not implemented'));
    };

    Writable.prototype._writev = null;

    Writable.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;

      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

      if (state.corked) {
        state.corked = 1;
        this.uncork();
      } // ignore unnecessary end() calls.


      if (!state.ending && !state.finished) endWritable(this, state, cb);
    };

    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }

    function callFinal(stream, state) {
      stream._final(function (err) {
        state.pendingcb--;

        if (err) {
          stream.emit('error', err);
        }

        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe(stream, state);
      });
    }

    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function') {
          state.pendingcb++;
          state.finalCalled = true;
          pna.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit('prefinish');
        }
      }
    }

    function finishMaybe(stream, state) {
      var need = needFinish(state);

      if (need) {
        prefinish(stream, state);

        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit('finish');
        }
      }

      return need;
    }

    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);

      if (cb) {
        if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
      }

      state.ended = true;
      stream.writable = false;
    }

    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;

      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }

      if (state.corkedRequestsFree) {
        state.corkedRequestsFree.next = corkReq;
      } else {
        state.corkedRequestsFree = corkReq;
      }
    }

    Object.defineProperty(Writable.prototype, 'destroyed', {
      get: function () {
        if (this._writableState === undefined) {
          return false;
        }

        return this._writableState.destroyed;
      },
      set: function (value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;

    Writable.prototype._destroy = function (err, cb) {
      this.end();
      cb(err);
    };
  }, {
    "process-nextick-args": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process-nextick-args/index.js",
    "core-util-is": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/core-util-is/lib/util.js",
    "inherits": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js",
    "util-deprecate": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/util-deprecate/browser.js",
    "./internal/streams/stream": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/stream-browser.js",
    "safe-buffer": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/safe-buffer/index.js",
    "./internal/streams/destroy": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/destroy.js",
    "./_stream_duplex": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_duplex.js",
    "process": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process/browser.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_duplex.js": [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a duplex stream is just a stream that is both readable and writable.
    // Since JS doesn't have multiple prototypal inheritance, this class
    // prototypally inherits from Readable, and then parasitically from
    // Writable.
    'use strict';
    /*<replacement>*/

    var pna = require('process-nextick-args');
    /*</replacement>*/

    /*<replacement>*/


    var objectKeys = Object.keys || function (obj) {
      var keys = [];

      for (var key in obj) {
        keys.push(key);
      }

      return keys;
    };
    /*</replacement>*/


    module.exports = Duplex;
    /*<replacement>*/

    var util = Object.create(require('core-util-is'));
    util.inherits = require('inherits');
    /*</replacement>*/

    var Readable = require('./_stream_readable');

    var Writable = require('./_stream_writable');

    util.inherits(Duplex, Readable);
    {
      // avoid scope creep, the keys array can then be collected
      var keys = objectKeys(Writable.prototype);

      for (var v = 0; v < keys.length; v++) {
        var method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }
    }

    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      if (options && options.readable === false) this.readable = false;
      if (options && options.writable === false) this.writable = false;
      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
      this.once('end', onend);
    }

    Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function () {
        return this._writableState.highWaterMark;
      }
    }); // the no-half-open enforcer

    function onend() {
      // if we allow half-open state, or if the writable side ended,
      // then we're ok.
      if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
      // But allow more writes to happen in this tick.

      pna.nextTick(onEndNT, this);
    }

    function onEndNT(self) {
      self.end();
    }

    Object.defineProperty(Duplex.prototype, 'destroyed', {
      get: function () {
        if (this._readableState === undefined || this._writableState === undefined) {
          return false;
        }

        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function (value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });

    Duplex.prototype._destroy = function (err, cb) {
      this.push(null);
      this.end();
      pna.nextTick(cb, err);
    };
  }, {
    "process-nextick-args": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process-nextick-args/index.js",
    "core-util-is": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/core-util-is/lib/util.js",
    "inherits": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js",
    "./_stream_readable": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_readable.js",
    "./_stream_writable": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_writable.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/node_modules/string_decoder/lib/string_decoder.js": [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    'use strict';
    /*<replacement>*/

    var Buffer = require('safe-buffer').Buffer;
    /*</replacement>*/


    var isEncoding = Buffer.isEncoding || function (encoding) {
      encoding = '' + encoding;

      switch (encoding && encoding.toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
          return true;

        default:
          return false;
      }
    };

    function _normalizeEncoding(enc) {
      if (!enc) return 'utf8';
      var retried;

      while (true) {
        switch (enc) {
          case 'utf8':
          case 'utf-8':
            return 'utf8';

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return 'utf16le';

          case 'latin1':
          case 'binary':
            return 'latin1';

          case 'base64':
          case 'ascii':
          case 'hex':
            return enc;

          default:
            if (retried) return; // undefined

            enc = ('' + enc).toLowerCase();
            retried = true;
        }
      }
    }

    ; // Do not cache `Buffer.isEncoding` when checking encoding names as some
    // modules monkey-patch it to support additional encodings

    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);

      if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
      return nenc || enc;
    } // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters.


    exports.StringDecoder = StringDecoder;

    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;

      switch (this.encoding) {
        case 'utf16le':
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;

        case 'utf8':
          this.fillLast = utf8FillLast;
          nb = 4;
          break;

        case 'base64':
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;

        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }

      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer.allocUnsafe(nb);
    }

    StringDecoder.prototype.write = function (buf) {
      if (buf.length === 0) return '';
      var r;
      var i;

      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }

      if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || '';
    };

    StringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer

    StringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer

    StringDecoder.prototype.fillLast = function (buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }

      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    }; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
    // continuation byte. If an invalid byte is detected, -2 is returned.


    function utf8CheckByte(byte) {
      if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
      return byte >> 6 === 0x02 ? -1 : -2;
    } // Checks at most 3 bytes at the end of a Buffer in order to detect an
    // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
    // needed to complete the UTF-8 character (if applicable) are returned.


    function utf8CheckIncomplete(self, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte(buf[j]);

      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
      }

      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);

      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
      }

      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);

      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
        }

        return nb;
      }

      return 0;
    } // Validates as many continuation bytes for a multi-byte UTF-8 character as
    // needed or are available. If we see a non-continuation byte where we expect
    // one, we "replace" the validated continuation bytes we've seen so far with
    // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
    // behavior. The continuation byte check is included three times in the case
    // where all of the continuation bytes for a character exist in the same buffer.
    // It is also done this way as a slight performance increase instead of using a
    // loop.


    function utf8CheckExtraBytes(self, buf, p) {
      if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return '\ufffd';
      }

      if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
          self.lastNeed = 1;
          return '\ufffd';
        }

        if (self.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 0xC0) !== 0x80) {
            self.lastNeed = 2;
            return '\ufffd';
          }
        }
      }
    } // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.


    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== undefined) return r;

      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }

      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    } // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
    // partial character, the character's bytes are buffered until the required
    // number of bytes are available.


    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed) return buf.toString('utf8', i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString('utf8', i, end);
    } // For UTF-8, a replacement character is added when ending on a partial
    // character.


    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + '\ufffd';
      return r;
    } // UTF-16LE typically needs two bytes per character, but even if we have an even
    // number of bytes available, we need to check if we end on a leading/high
    // surrogate. In that case, we need to wait for the next two bytes in order to
    // decode the last character properly.


    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);

        if (r) {
          var c = r.charCodeAt(r.length - 1);

          if (c >= 0xD800 && c <= 0xDBFF) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }

        return r;
      }

      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString('utf16le', i, buf.length - 1);
    } // For UTF-16LE we do not explicitly append special replacement characters if we
    // end on a partial character, we simply let v8 handle that.


    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';

      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
      }

      return r;
    }

    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0) return buf.toString('base64', i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;

      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }

      return buf.toString('base64', i, buf.length - n);
    }

    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
      return r;
    } // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)


    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }

    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : '';
    }
  }, {
    "safe-buffer": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/safe-buffer/index.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_readable.js": [function (require, module, exports) {
    var global = arguments[3];

    var process = require("process"); // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.


    'use strict';
    /*<replacement>*/


    var pna = require('process-nextick-args');
    /*</replacement>*/


    module.exports = Readable;
    /*<replacement>*/

    var isArray = require('isarray');
    /*</replacement>*/

    /*<replacement>*/


    var Duplex;
    /*</replacement>*/

    Readable.ReadableState = ReadableState;
    /*<replacement>*/

    var EE = require('events').EventEmitter;

    var EElistenerCount = function (emitter, type) {
      return emitter.listeners(type).length;
    };
    /*</replacement>*/

    /*<replacement>*/


    var Stream = require('./internal/streams/stream');
    /*</replacement>*/

    /*<replacement>*/


    var Buffer = require('safe-buffer').Buffer;

    var OurUint8Array = global.Uint8Array || function () {};

    function _uint8ArrayToBuffer(chunk) {
      return Buffer.from(chunk);
    }

    function _isUint8Array(obj) {
      return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    /*</replacement>*/

    /*<replacement>*/


    var util = Object.create(require('core-util-is'));
    util.inherits = require('inherits');
    /*</replacement>*/

    /*<replacement>*/

    var debugUtil = require('util');

    var debug = void 0;

    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog('stream');
    } else {
      debug = function () {};
    }
    /*</replacement>*/


    var BufferList = require('./internal/streams/BufferList');

    var destroyImpl = require('./internal/streams/destroy');

    var StringDecoder;
    util.inherits(Readable, Stream);
    var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

    function prependListener(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.

      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
    }

    function ReadableState(options, stream) {
      Duplex = Duplex || require('./_stream_duplex');
      options = options || {}; // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream.
      // These options can be provided separately as readableXXX and writableXXX.

      var isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away

      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"

      var hwm = options.highWaterMark;
      var readableHwm = options.readableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm; // cast to ints.

      this.highWaterMark = Math.floor(this.highWaterMark); // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()

      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
      // immediately, or on a later tick.  We set this to true at first, because
      // any actions that shouldn't happen until "later" should generally also
      // not happen before the first read call.

      this.sync = true; // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.

      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false; // has it been destroyed

      this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.

      this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

      this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;

      if (options.encoding) {
        if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }

    function Readable(options) {
      Duplex = Duplex || require('./_stream_duplex');
      if (!(this instanceof Readable)) return new Readable(options);
      this._readableState = new ReadableState(options, this); // legacy

      this.readable = true;

      if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
      }

      Stream.call(this);
    }

    Object.defineProperty(Readable.prototype, 'destroyed', {
      get: function () {
        if (this._readableState === undefined) {
          return false;
        }

        return this._readableState.destroyed;
      },
      set: function (value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;

    Readable.prototype._destroy = function (err, cb) {
      this.push(null);
      cb(err);
    }; // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.


    Readable.prototype.push = function (chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;

      if (!state.objectMode) {
        if (typeof chunk === 'string') {
          encoding = encoding || state.defaultEncoding;

          if (encoding !== state.encoding) {
            chunk = Buffer.from(chunk, encoding);
            encoding = '';
          }

          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }

      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    }; // Unshift should *always* be something directly out of read()


    Readable.prototype.unshift = function (chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };

    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      var state = stream._readableState;

      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);

        if (er) {
          stream.emit('error', er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }

          if (addToFront) {
            if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            stream.emit('error', new Error('stream.push() after EOF'));
          } else {
            state.reading = false;

            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
        }
      }

      return needMoreData(state);
    }

    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }

    function chunkInvalid(state, chunk) {
      var er;

      if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }

      return er;
    } // if it's past the high water mark, we can push in some more.
    // Also, if we have no data yet, we can stand some
    // more bytes.  This is to work around cases where hwm=0,
    // such as the repl.  Also, if the push() triggered a
    // readable event, and the user called read(largeNumber) such that
    // needReadable was set, then we ought to push more, so that another
    // 'readable' event will be triggered.


    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }

    Readable.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    }; // backwards compatibility.


    Readable.prototype.setEncoding = function (enc) {
      if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
      this._readableState.decoder = new StringDecoder(enc);
      this._readableState.encoding = enc;
      return this;
    }; // Don't raise the hwm > 8MB


    var MAX_HWM = 0x800000;

    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }

      return n;
    } // This function is designed to be inlinable, so please take care when making
    // changes to the function body.


    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;

      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      } // If we're asking for more than the current hwm, then raise the hwm.


      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length) return n; // Don't have enough

      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }

      return state.length;
    } // you can override either this method, or the async _read(n) below.


    Readable.prototype.read = function (n) {
      debug('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.

      if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
        return null;
      }

      n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      } // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.
      // if we need a readable event, then we need to do some reading.


      var doRead = state.needReadable;
      debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
      } // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.


      if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
      } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.

        if (state.length === 0) state.needReadable = true; // call internal read method

        this._read(state.highWaterMark);

        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.

        if (!state.reading) n = howMuchToRead(nOrig, state);
      }

      var ret;
      if (n > 0) ret = fromList(n, state);else ret = null;

      if (ret === null) {
        state.needReadable = true;
        n = 0;
      } else {
        state.length -= n;
      }

      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

        if (nOrig !== n && state.ended) endReadable(this);
      }

      if (ret !== null) this.emit('data', ret);
      return ret;
    };

    function onEofChunk(stream, state) {
      if (state.ended) return;

      if (state.decoder) {
        var chunk = state.decoder.end();

        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }

      state.ended = true; // emit 'readable' now to make sure it gets picked up.

      emitReadable(stream);
    } // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.


    function emitReadable(stream) {
      var state = stream._readableState;
      state.needReadable = false;

      if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
      }
    }

    function emitReadable_(stream) {
      debug('emit readable');
      stream.emit('readable');
      flow(stream);
    } // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.


    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        pna.nextTick(maybeReadMore_, stream, state);
      }
    }

    function maybeReadMore_(stream, state) {
      var len = state.length;

      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) // didn't get any data, stop spinning.
          break;else len = state.length;
      }

      state.readingMore = false;
    } // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.


    Readable.prototype._read = function (n) {
      this.emit('error', new Error('_read() is not implemented'));
    };

    Readable.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;

      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;

        case 1:
          state.pipes = [state.pipes, dest];
          break;

        default:
          state.pipes.push(dest);
          break;
      }

      state.pipesCount += 1;
      debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);
      dest.on('unpipe', onunpipe);

      function onunpipe(readable, unpipeInfo) {
        debug('onunpipe');

        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }

      function onend() {
        debug('onend');
        dest.end();
      } // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.


      var ondrain = pipeOnDrain(src);
      dest.on('drain', ondrain);
      var cleanedUp = false;

      function cleanup() {
        debug('cleanup'); // cleanup event handlers once the pipe is broken

        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.

        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      } // If the user pushes more data while we're writing to dest then we'll end up
      // in ondata again. However, we only want to increase awaitDrain once because
      // dest will only emit one 'drain' event for the multiple writes.
      // => Introduce a guard on increasing awaitDrain.


      var increasedAwaitDrain = false;
      src.on('data', ondata);

      function ondata(chunk) {
        debug('ondata');
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);

        if (false === ret && !increasedAwaitDrain) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug('false write response, pause', src._readableState.awaitDrain);
            src._readableState.awaitDrain++;
            increasedAwaitDrain = true;
          }

          src.pause();
        }
      } // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.


      function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
      } // Make sure our error handler is attached before userland ones.


      prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }

      dest.once('close', onclose);

      function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }

      dest.once('finish', onfinish);

      function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
      } // tell the dest that it's being piped to


      dest.emit('pipe', src); // start the flow if it hasn't been started already.

      if (!state.flowing) {
        debug('pipe resume');
        src.resume();
      }

      return dest;
    };

    function pipeOnDrain(src) {
      return function () {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;

        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
          state.flowing = true;
          flow(src);
        }
      };
    }

    Readable.prototype.unpipe = function (dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      }; // if we're not piping anywhere, then do nothing.

      if (state.pipesCount === 0) return this; // just one destination.  most common case.

      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.

        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
      } // slow case. multiple pipe destinations.


      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;

        for (var i = 0; i < len; i++) {
          dests[i].emit('unpipe', this, unpipeInfo);
        }

        return this;
      } // try to find the right one.


      var index = indexOf(state.pipes, dest);
      if (index === -1) return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];
      dest.emit('unpipe', this, unpipeInfo);
      return this;
    }; // set up data events if they are asked for
    // Ensure readable listeners eventually get something


    Readable.prototype.on = function (ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);

      if (ev === 'data') {
        // Start flowing on next tick if stream isn't explicitly paused
        if (this._readableState.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        var state = this._readableState;

        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.emittedReadable = false;

          if (!state.reading) {
            pna.nextTick(nReadingNextTick, this);
          } else if (state.length) {
            emitReadable(this);
          }
        }
      }

      return res;
    };

    Readable.prototype.addListener = Readable.prototype.on;

    function nReadingNextTick(self) {
      debug('readable nexttick read 0');
      self.read(0);
    } // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.


    Readable.prototype.resume = function () {
      var state = this._readableState;

      if (!state.flowing) {
        debug('resume');
        state.flowing = true;
        resume(this, state);
      }

      return this;
    };

    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        pna.nextTick(resume_, stream, state);
      }
    }

    function resume_(stream, state) {
      if (!state.reading) {
        debug('resume read 0');
        stream.read(0);
      }

      state.resumeScheduled = false;
      state.awaitDrain = 0;
      stream.emit('resume');
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }

    Readable.prototype.pause = function () {
      debug('call pause flowing=%j', this._readableState.flowing);

      if (false !== this._readableState.flowing) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }

      return this;
    };

    function flow(stream) {
      var state = stream._readableState;
      debug('flow', state.flowing);

      while (state.flowing && stream.read() !== null) {}
    } // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.


    Readable.prototype.wrap = function (stream) {
      var _this = this;

      var state = this._readableState;
      var paused = false;
      stream.on('end', function () {
        debug('wrapped end');

        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) _this.push(chunk);
        }

        _this.push(null);
      });
      stream.on('data', function (chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

        var ret = _this.push(chunk);

        if (!ret) {
          paused = true;
          stream.pause();
        }
      }); // proxy all the other methods.
      // important when wrapping filters and duplexes.

      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function (method) {
            return function () {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      } // proxy certain important events.


      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      } // when we try to consume some more bytes, simply unpause the
      // underlying stream.


      this._read = function (n) {
        debug('wrapped _read', n);

        if (paused) {
          paused = false;
          stream.resume();
        }
      };

      return this;
    };

    Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function () {
        return this._readableState.highWaterMark;
      }
    }); // exposed for testing purposes only.

    Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.

    function fromList(n, state) {
      // nothing buffered
      if (state.length === 0) return null;
      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = fromListPartial(n, state.buffer, state.decoder);
      }
      return ret;
    } // Extracts only enough buffered data to satisfy the amount requested.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.


    function fromListPartial(n, list, hasStrings) {
      var ret;

      if (n < list.head.data.length) {
        // slice is the same for buffers and strings
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
      } else if (n === list.head.data.length) {
        // first chunk is a perfect match
        ret = list.shift();
      } else {
        // result spans more than one buffer
        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
      }

      return ret;
    } // Copies a specified amount of characters from the list of buffered data
    // chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.


    function copyFromBufferString(n, list) {
      var p = list.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      list.length -= c;
      return ret;
    } // Copies a specified amount of bytes from the list of buffered data chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.


    function copyFromBuffer(n, list) {
      var ret = Buffer.allocUnsafe(n);
      var p = list.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      list.length -= c;
      return ret;
    }

    function endReadable(stream) {
      var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
      // bug in node.  Should never happen.

      if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

      if (!state.endEmitted) {
        state.ended = true;
        pna.nextTick(endReadableNT, state, stream);
      }
    }

    function endReadableNT(state, stream) {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    }

    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }

      return -1;
    }
  }, {
    "process-nextick-args": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process-nextick-args/index.js",
    "isarray": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/isarray/index.js",
    "events": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/events/events.js",
    "./internal/streams/stream": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/stream-browser.js",
    "safe-buffer": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/safe-buffer/index.js",
    "core-util-is": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/core-util-is/lib/util.js",
    "inherits": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js",
    "util": "../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/_empty.js",
    "./internal/streams/BufferList": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/BufferList.js",
    "./internal/streams/destroy": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/destroy.js",
    "./_stream_duplex": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_duplex.js",
    "string_decoder/": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/node_modules/string_decoder/lib/string_decoder.js",
    "process": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process/browser.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_transform.js": [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a transform stream is a readable/writable stream where you do
    // something with the data.  Sometimes it's called a "filter",
    // but that's not a great name for it, since that implies a thing where
    // some bits pass through, and others are simply ignored.  (That would
    // be a valid example of a transform, of course.)
    //
    // While the output is causally related to the input, it's not a
    // necessarily symmetric or synchronous transformation.  For example,
    // a zlib stream might take multiple plain-text writes(), and then
    // emit a single compressed chunk some time in the future.
    //
    // Here's how this works:
    //
    // The Transform stream has all the aspects of the readable and writable
    // stream classes.  When you write(chunk), that calls _write(chunk,cb)
    // internally, and returns false if there's a lot of pending writes
    // buffered up.  When you call read(), that calls _read(n) until
    // there's enough pending readable data buffered up.
    //
    // In a transform stream, the written data is placed in a buffer.  When
    // _read(n) is called, it transforms the queued up data, calling the
    // buffered _write cb's as it consumes chunks.  If consuming a single
    // written chunk would result in multiple output chunks, then the first
    // outputted bit calls the readcb, and subsequent chunks just go into
    // the read buffer, and will cause it to emit 'readable' if necessary.
    //
    // This way, back-pressure is actually determined by the reading side,
    // since _read has to be called to start processing a new chunk.  However,
    // a pathological inflate type of transform can cause excessive buffering
    // here.  For example, imagine a stream where every byte of input is
    // interpreted as an integer from 0-255, and then results in that many
    // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
    // 1kb of data being output.  In this case, you could write a very small
    // amount of input, and end up with a very large amount of output.  In
    // such a pathological inflating mechanism, there'd be no way to tell
    // the system to stop doing the transform.  A single 4MB write could
    // cause the system to run out of memory.
    //
    // However, even in such a pathological case, only a single written chunk
    // would be consumed, and then the rest would wait (un-transformed) until
    // the results of the previous transformed chunk were consumed.
    'use strict';

    module.exports = Transform;

    var Duplex = require('./_stream_duplex');
    /*<replacement>*/


    var util = Object.create(require('core-util-is'));
    util.inherits = require('inherits');
    /*</replacement>*/

    util.inherits(Transform, Duplex);

    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;

      if (!cb) {
        return this.emit('error', new Error('write callback called multiple times'));
      }

      ts.writechunk = null;
      ts.writecb = null;
      if (data != null) // single equals check for both `null` and `undefined`
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;

      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }

    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      }; // start out asking for a readable event once data is transformed.

      this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.

      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
      } // When the writable side finishes, then flush out anything remaining.


      this.on('prefinish', prefinish);
    }

    function prefinish() {
      var _this = this;

      if (typeof this._flush === 'function') {
        this._flush(function (er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }

    Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    }; // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.


    Transform.prototype._transform = function (chunk, encoding, cb) {
      throw new Error('_transform() is not implemented');
    };

    Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;

      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    }; // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.


    Transform.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;

        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    Transform.prototype._destroy = function (err, cb) {
      var _this2 = this;

      Duplex.prototype._destroy.call(this, err, function (err2) {
        cb(err2);

        _this2.emit('close');
      });
    };

    function done(stream, er, data) {
      if (er) return stream.emit('error', er);
      if (data != null) // single equals check for both `null` and `undefined`
        stream.push(data); // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided

      if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');
      if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');
      return stream.push(null);
    }
  }, {
    "./_stream_duplex": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_duplex.js",
    "core-util-is": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/core-util-is/lib/util.js",
    "inherits": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_passthrough.js": [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a passthrough stream.
    // basically just the most minimal sort of Transform stream.
    // Every written chunk gets output as-is.
    'use strict';

    module.exports = PassThrough;

    var Transform = require('./_stream_transform');
    /*<replacement>*/


    var util = Object.create(require('core-util-is'));
    util.inherits = require('inherits');
    /*</replacement>*/

    util.inherits(PassThrough, Transform);

    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);
      Transform.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };
  }, {
    "./_stream_transform": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_transform.js",
    "core-util-is": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/core-util-is/lib/util.js",
    "inherits": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/readable-browser.js": [function (require, module, exports) {
    exports = module.exports = require('./lib/_stream_readable.js');
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = require('./lib/_stream_writable.js');
    exports.Duplex = require('./lib/_stream_duplex.js');
    exports.Transform = require('./lib/_stream_transform.js');
    exports.PassThrough = require('./lib/_stream_passthrough.js');
  }, {
    "./lib/_stream_readable.js": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_readable.js",
    "./lib/_stream_writable.js": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_writable.js",
    "./lib/_stream_duplex.js": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_duplex.js",
    "./lib/_stream_transform.js": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_transform.js",
    "./lib/_stream_passthrough.js": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_passthrough.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/stream-http/lib/response.js": [function (require, module, exports) {
    var process = require("process");

    var Buffer = require("buffer").Buffer;

    var global = arguments[3];

    var capability = require('./capability');

    var inherits = require('inherits');

    var stream = require('readable-stream');

    var rStates = exports.readyStates = {
      UNSENT: 0,
      OPENED: 1,
      HEADERS_RECEIVED: 2,
      LOADING: 3,
      DONE: 4
    };

    var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, fetchTimer) {
      var self = this;
      stream.Readable.call(self);
      self._mode = mode;
      self.headers = {};
      self.rawHeaders = [];
      self.trailers = {};
      self.rawTrailers = []; // Fake the 'close' event, but only once 'end' fires

      self.on('end', function () {
        // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
        process.nextTick(function () {
          self.emit('close');
        });
      });

      if (mode === 'fetch') {
        self._fetchResponse = response;
        self.url = response.url;
        self.statusCode = response.status;
        self.statusMessage = response.statusText;
        response.headers.forEach(function (header, key) {
          self.headers[key.toLowerCase()] = header;
          self.rawHeaders.push(key, header);
        });

        if (capability.writableStream) {
          var writable = new WritableStream({
            write: function (chunk) {
              return new Promise(function (resolve, reject) {
                if (self._destroyed) {
                  reject();
                } else if (self.push(new Buffer(chunk))) {
                  resolve();
                } else {
                  self._resumeFetch = resolve;
                }
              });
            },
            close: function () {
              global.clearTimeout(fetchTimer);
              if (!self._destroyed) self.push(null);
            },
            abort: function (err) {
              if (!self._destroyed) self.emit('error', err);
            }
          });

          try {
            response.body.pipeTo(writable).catch(function (err) {
              global.clearTimeout(fetchTimer);
              if (!self._destroyed) self.emit('error', err);
            });
            return;
          } catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this

        } // fallback for when writableStream or pipeTo aren't available


        var reader = response.body.getReader();

        function read() {
          reader.read().then(function (result) {
            if (self._destroyed) return;

            if (result.done) {
              global.clearTimeout(fetchTimer);
              self.push(null);
              return;
            }

            self.push(new Buffer(result.value));
            read();
          }).catch(function (err) {
            global.clearTimeout(fetchTimer);
            if (!self._destroyed) self.emit('error', err);
          });
        }

        read();
      } else {
        self._xhr = xhr;
        self._pos = 0;
        self.url = xhr.responseURL;
        self.statusCode = xhr.status;
        self.statusMessage = xhr.statusText;
        var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
        headers.forEach(function (header) {
          var matches = header.match(/^([^:]+):\s*(.*)/);

          if (matches) {
            var key = matches[1].toLowerCase();

            if (key === 'set-cookie') {
              if (self.headers[key] === undefined) {
                self.headers[key] = [];
              }

              self.headers[key].push(matches[2]);
            } else if (self.headers[key] !== undefined) {
              self.headers[key] += ', ' + matches[2];
            } else {
              self.headers[key] = matches[2];
            }

            self.rawHeaders.push(matches[1], matches[2]);
          }
        });
        self._charset = 'x-user-defined';

        if (!capability.overrideMimeType) {
          var mimeType = self.rawHeaders['mime-type'];

          if (mimeType) {
            var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);

            if (charsetMatch) {
              self._charset = charsetMatch[1].toLowerCase();
            }
          }

          if (!self._charset) self._charset = 'utf-8'; // best guess
        }
      }
    };

    inherits(IncomingMessage, stream.Readable);

    IncomingMessage.prototype._read = function () {
      var self = this;
      var resolve = self._resumeFetch;

      if (resolve) {
        self._resumeFetch = null;
        resolve();
      }
    };

    IncomingMessage.prototype._onXHRProgress = function () {
      var self = this;
      var xhr = self._xhr;
      var response = null;

      switch (self._mode) {
        case 'text:vbarray':
          // For IE9
          if (xhr.readyState !== rStates.DONE) break;

          try {
            // This fails in IE8
            response = new global.VBArray(xhr.responseBody).toArray();
          } catch (e) {}

          if (response !== null) {
            self.push(new Buffer(response));
            break;
          }

        // Falls through in IE8	

        case 'text':
          try {
            // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
            response = xhr.responseText;
          } catch (e) {
            self._mode = 'text:vbarray';
            break;
          }

          if (response.length > self._pos) {
            var newData = response.substr(self._pos);

            if (self._charset === 'x-user-defined') {
              var buffer = new Buffer(newData.length);

              for (var i = 0; i < newData.length; i++) buffer[i] = newData.charCodeAt(i) & 0xff;

              self.push(buffer);
            } else {
              self.push(newData, self._charset);
            }

            self._pos = response.length;
          }

          break;

        case 'arraybuffer':
          if (xhr.readyState !== rStates.DONE || !xhr.response) break;
          response = xhr.response;
          self.push(new Buffer(new Uint8Array(response)));
          break;

        case 'moz-chunked-arraybuffer':
          // take whole
          response = xhr.response;
          if (xhr.readyState !== rStates.LOADING || !response) break;
          self.push(new Buffer(new Uint8Array(response)));
          break;

        case 'ms-stream':
          response = xhr.response;
          if (xhr.readyState !== rStates.LOADING) break;
          var reader = new global.MSStreamReader();

          reader.onprogress = function () {
            if (reader.result.byteLength > self._pos) {
              self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
              self._pos = reader.result.byteLength;
            }
          };

          reader.onload = function () {
            self.push(null);
          }; // reader.onerror = ??? // TODO: this


          reader.readAsArrayBuffer(response);
          break;
      } // The ms-stream case handles end separately in reader.onload()


      if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
        self.push(null);
      }
    };
  }, {
    "./capability": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/stream-http/lib/capability.js",
    "inherits": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js",
    "readable-stream": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/readable-browser.js",
    "process": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process/browser.js",
    "buffer": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/to-arraybuffer/index.js": [function (require, module, exports) {
    var Buffer = require('buffer').Buffer;

    module.exports = function (buf) {
      // If the buffer is backed by a Uint8Array, a faster version will work
      if (buf instanceof Uint8Array) {
        // If the buffer isn't a subarray, return the underlying ArrayBuffer
        if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
          return buf.buffer;
        } else if (typeof buf.buffer.slice === 'function') {
          // Otherwise we need to get a proper copy
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        }
      }

      if (Buffer.isBuffer(buf)) {
        // This is the slow version that will work with any Buffer
        // implementation (even in old browsers)
        var arrayCopy = new Uint8Array(buf.length);
        var len = buf.length;

        for (var i = 0; i < len; i++) {
          arrayCopy[i] = buf[i];
        }

        return arrayCopy.buffer;
      } else {
        throw new Error('Argument must be a Buffer');
      }
    };
  }, {
    "buffer": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/stream-http/lib/request.js": [function (require, module, exports) {
    var Buffer = require("buffer").Buffer;

    var global = arguments[3];

    var process = require("process");

    var capability = require('./capability');

    var inherits = require('inherits');

    var response = require('./response');

    var stream = require('readable-stream');

    var toArrayBuffer = require('to-arraybuffer');

    var IncomingMessage = response.IncomingMessage;
    var rStates = response.readyStates;

    function decideMode(preferBinary, useFetch) {
      if (capability.fetch && useFetch) {
        return 'fetch';
      } else if (capability.mozchunkedarraybuffer) {
        return 'moz-chunked-arraybuffer';
      } else if (capability.msstream) {
        return 'ms-stream';
      } else if (capability.arraybuffer && preferBinary) {
        return 'arraybuffer';
      } else if (capability.vbArray && preferBinary) {
        return 'text:vbarray';
      } else {
        return 'text';
      }
    }

    var ClientRequest = module.exports = function (opts) {
      var self = this;
      stream.Writable.call(self);
      self._opts = opts;
      self._body = [];
      self._headers = {};
      if (opts.auth) self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));
      Object.keys(opts.headers).forEach(function (name) {
        self.setHeader(name, opts.headers[name]);
      });
      var preferBinary;
      var useFetch = true;

      if (opts.mode === 'disable-fetch' || 'requestTimeout' in opts && !capability.abortController) {
        // If the use of XHR should be preferred. Not typically needed.
        useFetch = false;
        preferBinary = true;
      } else if (opts.mode === 'prefer-streaming') {
        // If streaming is a high priority but binary compatibility and
        // the accuracy of the 'content-type' header aren't
        preferBinary = false;
      } else if (opts.mode === 'allow-wrong-content-type') {
        // If streaming is more important than preserving the 'content-type' header
        preferBinary = !capability.overrideMimeType;
      } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
        // Use binary if text streaming may corrupt data or the content-type header, or for speed
        preferBinary = true;
      } else {
        throw new Error('Invalid value for opts.mode');
      }

      self._mode = decideMode(preferBinary, useFetch);
      self._fetchTimer = null;
      self.on('finish', function () {
        self._onFinish();
      });
    };

    inherits(ClientRequest, stream.Writable);

    ClientRequest.prototype.setHeader = function (name, value) {
      var self = this;
      var lowerName = name.toLowerCase(); // This check is not necessary, but it prevents warnings from browsers about setting unsafe
      // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
      // http-browserify did it, so I will too.

      if (unsafeHeaders.indexOf(lowerName) !== -1) return;
      self._headers[lowerName] = {
        name: name,
        value: value
      };
    };

    ClientRequest.prototype.getHeader = function (name) {
      var header = this._headers[name.toLowerCase()];

      if (header) return header.value;
      return null;
    };

    ClientRequest.prototype.removeHeader = function (name) {
      var self = this;
      delete self._headers[name.toLowerCase()];
    };

    ClientRequest.prototype._onFinish = function () {
      var self = this;
      if (self._destroyed) return;
      var opts = self._opts;
      var headersObj = self._headers;
      var body = null;

      if (opts.method !== 'GET' && opts.method !== 'HEAD') {
        if (capability.arraybuffer) {
          body = toArrayBuffer(Buffer.concat(self._body));
        } else if (capability.blobConstructor) {
          body = new global.Blob(self._body.map(function (buffer) {
            return toArrayBuffer(buffer);
          }), {
            type: (headersObj['content-type'] || {}).value || ''
          });
        } else {
          // get utf8 string
          body = Buffer.concat(self._body).toString();
        }
      } // create flattened list of headers


      var headersList = [];
      Object.keys(headersObj).forEach(function (keyName) {
        var name = headersObj[keyName].name;
        var value = headersObj[keyName].value;

        if (Array.isArray(value)) {
          value.forEach(function (v) {
            headersList.push([name, v]);
          });
        } else {
          headersList.push([name, value]);
        }
      });

      if (self._mode === 'fetch') {
        var signal = null;
        var fetchTimer = null;

        if (capability.abortController) {
          var controller = new AbortController();
          signal = controller.signal;
          self._fetchAbortController = controller;

          if ('requestTimeout' in opts && opts.requestTimeout !== 0) {
            self._fetchTimer = global.setTimeout(function () {
              self.emit('requestTimeout');
              if (self._fetchAbortController) self._fetchAbortController.abort();
            }, opts.requestTimeout);
          }
        }

        global.fetch(self._opts.url, {
          method: self._opts.method,
          headers: headersList,
          body: body || undefined,
          mode: 'cors',
          credentials: opts.withCredentials ? 'include' : 'same-origin',
          signal: signal
        }).then(function (response) {
          self._fetchResponse = response;

          self._connect();
        }, function (reason) {
          global.clearTimeout(self._fetchTimer);
          if (!self._destroyed) self.emit('error', reason);
        });
      } else {
        var xhr = self._xhr = new global.XMLHttpRequest();

        try {
          xhr.open(self._opts.method, self._opts.url, true);
        } catch (err) {
          process.nextTick(function () {
            self.emit('error', err);
          });
          return;
        } // Can't set responseType on really old browsers


        if ('responseType' in xhr) xhr.responseType = self._mode.split(':')[0];
        if ('withCredentials' in xhr) xhr.withCredentials = !!opts.withCredentials;
        if (self._mode === 'text' && 'overrideMimeType' in xhr) xhr.overrideMimeType('text/plain; charset=x-user-defined');

        if ('requestTimeout' in opts) {
          xhr.timeout = opts.requestTimeout;

          xhr.ontimeout = function () {
            self.emit('requestTimeout');
          };
        }

        headersList.forEach(function (header) {
          xhr.setRequestHeader(header[0], header[1]);
        });
        self._response = null;

        xhr.onreadystatechange = function () {
          switch (xhr.readyState) {
            case rStates.LOADING:
            case rStates.DONE:
              self._onXHRProgress();

              break;
          }
        }; // Necessary for streaming in Firefox, since xhr.response is ONLY defined
        // in onprogress, not in onreadystatechange with xhr.readyState = 3


        if (self._mode === 'moz-chunked-arraybuffer') {
          xhr.onprogress = function () {
            self._onXHRProgress();
          };
        }

        xhr.onerror = function () {
          if (self._destroyed) return;
          self.emit('error', new Error('XHR error'));
        };

        try {
          xhr.send(body);
        } catch (err) {
          process.nextTick(function () {
            self.emit('error', err);
          });
          return;
        }
      }
    };
    /**
     * Checks if xhr.status is readable and non-zero, indicating no error.
     * Even though the spec says it should be available in readyState 3,
     * accessing it throws an exception in IE8
     */


    function statusValid(xhr) {
      try {
        var status = xhr.status;
        return status !== null && status !== 0;
      } catch (e) {
        return false;
      }
    }

    ClientRequest.prototype._onXHRProgress = function () {
      var self = this;
      if (!statusValid(self._xhr) || self._destroyed) return;
      if (!self._response) self._connect();

      self._response._onXHRProgress();
    };

    ClientRequest.prototype._connect = function () {
      var self = this;
      if (self._destroyed) return;
      self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._fetchTimer);

      self._response.on('error', function (err) {
        self.emit('error', err);
      });

      self.emit('response', self._response);
    };

    ClientRequest.prototype._write = function (chunk, encoding, cb) {
      var self = this;

      self._body.push(chunk);

      cb();
    };

    ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
      var self = this;
      self._destroyed = true;
      global.clearTimeout(self._fetchTimer);
      if (self._response) self._response._destroyed = true;
      if (self._xhr) self._xhr.abort();else if (self._fetchAbortController) self._fetchAbortController.abort();
    };

    ClientRequest.prototype.end = function (data, encoding, cb) {
      var self = this;

      if (typeof data === 'function') {
        cb = data;
        data = undefined;
      }

      stream.Writable.prototype.end.call(self, data, encoding, cb);
    };

    ClientRequest.prototype.flushHeaders = function () {};

    ClientRequest.prototype.setTimeout = function () {};

    ClientRequest.prototype.setNoDelay = function () {};

    ClientRequest.prototype.setSocketKeepAlive = function () {}; // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method


    var unsafeHeaders = ['accept-charset', 'accept-encoding', 'access-control-request-headers', 'access-control-request-method', 'connection', 'content-length', 'cookie', 'cookie2', 'date', 'dnt', 'expect', 'host', 'keep-alive', 'origin', 'referer', 'te', 'trailer', 'transfer-encoding', 'upgrade', 'via'];
  }, {
    "./capability": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/stream-http/lib/capability.js",
    "inherits": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js",
    "./response": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/stream-http/lib/response.js",
    "readable-stream": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/readable-stream/readable-browser.js",
    "to-arraybuffer": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/to-arraybuffer/index.js",
    "buffer": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js",
    "process": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process/browser.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/xtend/immutable.js": [function (require, module, exports) {
    module.exports = extend;
    var hasOwnProperty = Object.prototype.hasOwnProperty;

    function extend() {
      var target = {};

      for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    }
  }, {}],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/builtin-status-codes/browser.js": [function (require, module, exports) {
    module.exports = {
      "100": "Continue",
      "101": "Switching Protocols",
      "102": "Processing",
      "200": "OK",
      "201": "Created",
      "202": "Accepted",
      "203": "Non-Authoritative Information",
      "204": "No Content",
      "205": "Reset Content",
      "206": "Partial Content",
      "207": "Multi-Status",
      "208": "Already Reported",
      "226": "IM Used",
      "300": "Multiple Choices",
      "301": "Moved Permanently",
      "302": "Found",
      "303": "See Other",
      "304": "Not Modified",
      "305": "Use Proxy",
      "307": "Temporary Redirect",
      "308": "Permanent Redirect",
      "400": "Bad Request",
      "401": "Unauthorized",
      "402": "Payment Required",
      "403": "Forbidden",
      "404": "Not Found",
      "405": "Method Not Allowed",
      "406": "Not Acceptable",
      "407": "Proxy Authentication Required",
      "408": "Request Timeout",
      "409": "Conflict",
      "410": "Gone",
      "411": "Length Required",
      "412": "Precondition Failed",
      "413": "Payload Too Large",
      "414": "URI Too Long",
      "415": "Unsupported Media Type",
      "416": "Range Not Satisfiable",
      "417": "Expectation Failed",
      "418": "I'm a teapot",
      "421": "Misdirected Request",
      "422": "Unprocessable Entity",
      "423": "Locked",
      "424": "Failed Dependency",
      "425": "Unordered Collection",
      "426": "Upgrade Required",
      "428": "Precondition Required",
      "429": "Too Many Requests",
      "431": "Request Header Fields Too Large",
      "451": "Unavailable For Legal Reasons",
      "500": "Internal Server Error",
      "501": "Not Implemented",
      "502": "Bad Gateway",
      "503": "Service Unavailable",
      "504": "Gateway Timeout",
      "505": "HTTP Version Not Supported",
      "506": "Variant Also Negotiates",
      "507": "Insufficient Storage",
      "508": "Loop Detected",
      "509": "Bandwidth Limit Exceeded",
      "510": "Not Extended",
      "511": "Network Authentication Required"
    };
  }, {}],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/punycode/punycode.js": [function (require, module, exports) {
    var global = arguments[3];
    var define;
    /*! https://mths.be/punycode v1.4.1 by @mathias */

    ;

    (function (root) {
      /** Detect free variables */
      var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
      var freeModule = typeof module == 'object' && module && !module.nodeType && module;
      var freeGlobal = typeof global == 'object' && global;

      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
        root = freeGlobal;
      }
      /**
       * The `punycode` object.
       * @name punycode
       * @type Object
       */


      var punycode,

      /** Highest positive signed 32-bit float value */
      maxInt = 2147483647,
          // aka. 0x7FFFFFFF or 2^31-1

      /** Bootstring parameters */
      base = 36,
          tMin = 1,
          tMax = 26,
          skew = 38,
          damp = 700,
          initialBias = 72,
          initialN = 128,
          // 0x80
      delimiter = '-',
          // '\x2D'

      /** Regular expressions */
      regexPunycode = /^xn--/,
          regexNonASCII = /[^\x20-\x7E]/,
          // unprintable ASCII chars + non-ASCII chars
      regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
          // RFC 3490 separators

      /** Error messages */
      errors = {
        'overflow': 'Overflow: input needs wider integers to process',
        'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
        'invalid-input': 'Invalid input'
      },

      /** Convenience shortcuts */
      baseMinusTMin = base - tMin,
          floor = Math.floor,
          stringFromCharCode = String.fromCharCode,

      /** Temporary variable */
      key;
      /*--------------------------------------------------------------------------*/

      /**
       * A generic error utility function.
       * @private
       * @param {String} type The error type.
       * @returns {Error} Throws a `RangeError` with the applicable error message.
       */

      function error(type) {
        throw new RangeError(errors[type]);
      }
      /**
       * A generic `Array#map` utility function.
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} callback The function that gets called for every array
       * item.
       * @returns {Array} A new array of values returned by the callback function.
       */


      function map(array, fn) {
        var length = array.length;
        var result = [];

        while (length--) {
          result[length] = fn(array[length]);
        }

        return result;
      }
      /**
       * A simple `Array#map`-like wrapper to work with domain name strings or email
       * addresses.
       * @private
       * @param {String} domain The domain name or email address.
       * @param {Function} callback The function that gets called for every
       * character.
       * @returns {Array} A new string of characters returned by the callback
       * function.
       */


      function mapDomain(string, fn) {
        var parts = string.split('@');
        var result = '';

        if (parts.length > 1) {
          // In email addresses, only the domain name should be punycoded. Leave
          // the local part (i.e. everything up to `@`) intact.
          result = parts[0] + '@';
          string = parts[1];
        } // Avoid `split(regex)` for IE8 compatibility. See #17.


        string = string.replace(regexSeparators, '\x2E');
        var labels = string.split('.');
        var encoded = map(labels, fn).join('.');
        return result + encoded;
      }
      /**
       * Creates an array containing the numeric code points of each Unicode
       * character in the string. While JavaScript uses UCS-2 internally,
       * this function will convert a pair of surrogate halves (each of which
       * UCS-2 exposes as separate characters) into a single code point,
       * matching UTF-16.
       * @see `punycode.ucs2.encode`
       * @see <https://mathiasbynens.be/notes/javascript-encoding>
       * @memberOf punycode.ucs2
       * @name decode
       * @param {String} string The Unicode input string (UCS-2).
       * @returns {Array} The new array of code points.
       */


      function ucs2decode(string) {
        var output = [],
            counter = 0,
            length = string.length,
            value,
            extra;

        while (counter < length) {
          value = string.charCodeAt(counter++);

          if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
            // high surrogate, and there is a next character
            extra = string.charCodeAt(counter++);

            if ((extra & 0xFC00) == 0xDC00) {
              // low surrogate
              output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
            } else {
              // unmatched surrogate; only append this code unit, in case the next
              // code unit is the high surrogate of a surrogate pair
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }

        return output;
      }
      /**
       * Creates a string based on an array of numeric code points.
       * @see `punycode.ucs2.decode`
       * @memberOf punycode.ucs2
       * @name encode
       * @param {Array} codePoints The array of numeric code points.
       * @returns {String} The new Unicode string (UCS-2).
       */


      function ucs2encode(array) {
        return map(array, function (value) {
          var output = '';

          if (value > 0xFFFF) {
            value -= 0x10000;
            output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
            value = 0xDC00 | value & 0x3FF;
          }

          output += stringFromCharCode(value);
          return output;
        }).join('');
      }
      /**
       * Converts a basic code point into a digit/integer.
       * @see `digitToBasic()`
       * @private
       * @param {Number} codePoint The basic numeric code point value.
       * @returns {Number} The numeric value of a basic code point (for use in
       * representing integers) in the range `0` to `base - 1`, or `base` if
       * the code point does not represent a value.
       */


      function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }

        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }

        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }

        return base;
      }
      /**
       * Converts a digit/integer into a basic code point.
       * @see `basicToDigit()`
       * @private
       * @param {Number} digit The numeric value of a basic code point.
       * @returns {Number} The basic code point whose value (when used for
       * representing integers) is `digit`, which needs to be in the range
       * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
       * used; else, the lowercase form is used. The behavior is undefined
       * if `flag` is non-zero and `digit` has no uppercase form.
       */


      function digitToBasic(digit, flag) {
        //  0..25 map to ASCII a..z or A..Z
        // 26..35 map to ASCII 0..9
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      }
      /**
       * Bias adaptation function as per section 3.4 of RFC 3492.
       * https://tools.ietf.org/html/rfc3492#section-3.4
       * @private
       */


      function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);

        for (; delta > baseMinusTMin * tMax >> 1; k += base) {
          delta = floor(delta / baseMinusTMin);
        }

        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      }
      /**
       * Converts a Punycode string of ASCII-only symbols to a string of Unicode
       * symbols.
       * @memberOf punycode
       * @param {String} input The Punycode string of ASCII-only symbols.
       * @returns {String} The resulting string of Unicode symbols.
       */


      function decode(input) {
        // Don't use UCS-2
        var output = [],
            inputLength = input.length,
            out,
            i = 0,
            n = initialN,
            bias = initialBias,
            basic,
            j,
            index,
            oldi,
            w,
            k,
            digit,
            t,

        /** Cached calculation results */
        baseMinusT; // Handle the basic code points: let `basic` be the number of input code
        // points before the last delimiter, or `0` if there is none, then copy
        // the first basic code points to the output.

        basic = input.lastIndexOf(delimiter);

        if (basic < 0) {
          basic = 0;
        }

        for (j = 0; j < basic; ++j) {
          // if it's not a basic code point
          if (input.charCodeAt(j) >= 0x80) {
            error('not-basic');
          }

          output.push(input.charCodeAt(j));
        } // Main decoding loop: start just after the last delimiter if any basic code
        // points were copied; start at the beginning otherwise.


        for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) {
          // `index` is the index of the next character to be consumed.
          // Decode a generalized variable-length integer into `delta`,
          // which gets added to `i`. The overflow checking is easier
          // if we increase `i` as we go, then subtract off its starting
          // value at the end to obtain `delta`.
          for (oldi = i, w = 1, k = base;; k += base) {
            if (index >= inputLength) {
              error('invalid-input');
            }

            digit = basicToDigit(input.charCodeAt(index++));

            if (digit >= base || digit > floor((maxInt - i) / w)) {
              error('overflow');
            }

            i += digit * w;
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

            if (digit < t) {
              break;
            }

            baseMinusT = base - t;

            if (w > floor(maxInt / baseMinusT)) {
              error('overflow');
            }

            w *= baseMinusT;
          }

          out = output.length + 1;
          bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
          // incrementing `n` each time, so we'll fix that now:

          if (floor(i / out) > maxInt - n) {
            error('overflow');
          }

          n += floor(i / out);
          i %= out; // Insert `n` at position `i` of the output

          output.splice(i++, 0, n);
        }

        return ucs2encode(output);
      }
      /**
       * Converts a string of Unicode symbols (e.g. a domain name label) to a
       * Punycode string of ASCII-only symbols.
       * @memberOf punycode
       * @param {String} input The string of Unicode symbols.
       * @returns {String} The resulting Punycode string of ASCII-only symbols.
       */


      function encode(input) {
        var n,
            delta,
            handledCPCount,
            basicLength,
            bias,
            j,
            m,
            q,
            k,
            t,
            currentValue,
            output = [],

        /** `inputLength` will hold the number of code points in `input`. */
        inputLength,

        /** Cached calculation results */
        handledCPCountPlusOne,
            baseMinusT,
            qMinusT; // Convert the input in UCS-2 to Unicode

        input = ucs2decode(input); // Cache the length

        inputLength = input.length; // Initialize the state

        n = initialN;
        delta = 0;
        bias = initialBias; // Handle the basic code points

        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];

          if (currentValue < 0x80) {
            output.push(stringFromCharCode(currentValue));
          }
        }

        handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
        // `basicLength` is the number of basic code points.
        // Finish the basic string - if it is not empty - with a delimiter

        if (basicLength) {
          output.push(delimiter);
        } // Main encoding loop:


        while (handledCPCount < inputLength) {
          // All non-basic code points < n have been handled already. Find the next
          // larger one:
          for (m = maxInt, j = 0; j < inputLength; ++j) {
            currentValue = input[j];

            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
          // but guard against overflow


          handledCPCountPlusOne = handledCPCount + 1;

          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error('overflow');
          }

          delta += (m - n) * handledCPCountPlusOne;
          n = m;

          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];

            if (currentValue < n && ++delta > maxInt) {
              error('overflow');
            }

            if (currentValue == n) {
              // Represent delta as a generalized variable-length integer
              for (q = delta, k = base;; k += base) {
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                if (q < t) {
                  break;
                }

                qMinusT = q - t;
                baseMinusT = base - t;
                output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                q = floor(qMinusT / baseMinusT);
              }

              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }

          ++delta;
          ++n;
        }

        return output.join('');
      }
      /**
       * Converts a Punycode string representing a domain name or an email address
       * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
       * it doesn't matter if you call it on a string that has already been
       * converted to Unicode.
       * @memberOf punycode
       * @param {String} input The Punycoded domain name or email address to
       * convert to Unicode.
       * @returns {String} The Unicode representation of the given Punycode
       * string.
       */


      function toUnicode(input) {
        return mapDomain(input, function (string) {
          return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
      }
      /**
       * Converts a Unicode string representing a domain name or an email address to
       * Punycode. Only the non-ASCII parts of the domain name will be converted,
       * i.e. it doesn't matter if you call it with a domain that's already in
       * ASCII.
       * @memberOf punycode
       * @param {String} input The domain name or email address to convert, as a
       * Unicode string.
       * @returns {String} The Punycode representation of the given domain name or
       * email address.
       */


      function toASCII(input) {
        return mapDomain(input, function (string) {
          return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
        });
      }
      /*--------------------------------------------------------------------------*/

      /** Define the public API */


      punycode = {
        /**
         * A string representing the current Punycode.js version number.
         * @memberOf punycode
         * @type String
         */
        'version': '1.4.1',

        /**
         * An object of methods to convert from JavaScript's internal character
         * representation (UCS-2) to Unicode code points, and back.
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode
         * @type Object
         */
        'ucs2': {
          'decode': ucs2decode,
          'encode': ucs2encode
        },
        'decode': decode,
        'encode': encode,
        'toASCII': toASCII,
        'toUnicode': toUnicode
      };
      /** Expose `punycode` */
      // Some AMD build optimizers, like r.js, check for specific condition patterns
      // like the following:

      if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        define('punycode', function () {
          return punycode;
        });
      } else if (freeExports && freeModule) {
        if (module.exports == freeExports) {
          // in Node.js, io.js, or RingoJS v0.8.0+
          freeModule.exports = punycode;
        } else {
          // in Narwhal or RingoJS v0.7.0-
          for (key in punycode) {
            punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
          }
        }
      } else {
        // in Rhino or a web browser
        root.punycode = punycode;
      }
    })(this);
  }, {}],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/url/util.js": [function (require, module, exports) {
    'use strict';

    module.exports = {
      isString: function (arg) {
        return typeof arg === 'string';
      },
      isObject: function (arg) {
        return typeof arg === 'object' && arg !== null;
      },
      isNull: function (arg) {
        return arg === null;
      },
      isNullOrUndefined: function (arg) {
        return arg == null;
      }
    };
  }, {}],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/querystring-es3/decode.js": [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    'use strict'; // If obj.hasOwnProperty has been overridden, then calling
    // obj.hasOwnProperty(prop) will break.
    // See: https://github.com/joyent/node/issues/1707

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    module.exports = function (qs, sep, eq, options) {
      sep = sep || '&';
      eq = eq || '=';
      var obj = {};

      if (typeof qs !== 'string' || qs.length === 0) {
        return obj;
      }

      var regexp = /\+/g;
      qs = qs.split(sep);
      var maxKeys = 1000;

      if (options && typeof options.maxKeys === 'number') {
        maxKeys = options.maxKeys;
      }

      var len = qs.length; // maxKeys <= 0 means that we should not limit keys count

      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }

      for (var i = 0; i < len; ++i) {
        var x = qs[i].replace(regexp, '%20'),
            idx = x.indexOf(eq),
            kstr,
            vstr,
            k,
            v;

        if (idx >= 0) {
          kstr = x.substr(0, idx);
          vstr = x.substr(idx + 1);
        } else {
          kstr = x;
          vstr = '';
        }

        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);

        if (!hasOwnProperty(obj, k)) {
          obj[k] = v;
        } else if (isArray(obj[k])) {
          obj[k].push(v);
        } else {
          obj[k] = [obj[k], v];
        }
      }

      return obj;
    };

    var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
    };
  }, {}],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/querystring-es3/encode.js": [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    'use strict';

    var stringifyPrimitive = function (v) {
      switch (typeof v) {
        case 'string':
          return v;

        case 'boolean':
          return v ? 'true' : 'false';

        case 'number':
          return isFinite(v) ? v : '';

        default:
          return '';
      }
    };

    module.exports = function (obj, sep, eq, name) {
      sep = sep || '&';
      eq = eq || '=';

      if (obj === null) {
        obj = undefined;
      }

      if (typeof obj === 'object') {
        return map(objectKeys(obj), function (k) {
          var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

          if (isArray(obj[k])) {
            return map(obj[k], function (v) {
              return ks + encodeURIComponent(stringifyPrimitive(v));
            }).join(sep);
          } else {
            return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
          }
        }).join(sep);
      }

      if (!name) return '';
      return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
    };

    var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
    };

    function map(xs, f) {
      if (xs.map) return xs.map(f);
      var res = [];

      for (var i = 0; i < xs.length; i++) {
        res.push(f(xs[i], i));
      }

      return res;
    }

    var objectKeys = Object.keys || function (obj) {
      var res = [];

      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
      }

      return res;
    };
  }, {}],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/querystring-es3/index.js": [function (require, module, exports) {
    'use strict';

    exports.decode = exports.parse = require('./decode');
    exports.encode = exports.stringify = require('./encode');
  }, {
    "./decode": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/querystring-es3/decode.js",
    "./encode": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/querystring-es3/encode.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/url/url.js": [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    'use strict';

    var punycode = require('punycode');

    var util = require('./util');

    exports.parse = urlParse;
    exports.resolve = urlResolve;
    exports.resolveObject = urlResolveObject;
    exports.format = urlFormat;
    exports.Url = Url;

    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    } // Reference: RFC 3986, RFC 1808, RFC 2396
    // define these here so at least they only have to be
    // compiled once on the first module load.


    var protocolPattern = /^([a-z0-9.+-]+:)/i,
        portPattern = /:[0-9]*$/,
        // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
        // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
        // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
        // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
        // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
        hostEndingChars = ['/', '?', '#'],
        hostnameMaxLen = 255,
        hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
        hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
        // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
        // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
        // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
        querystring = require('querystring');

    function urlParse(url, parseQueryString, slashesDenoteHost) {
      if (url && util.isObject(url) && url instanceof Url) return url;
      var u = new Url();
      u.parse(url, parseQueryString, slashesDenoteHost);
      return u;
    }

    Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
      if (!util.isString(url)) {
        throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
      } // Copy chrome, IE, opera backslash-handling behavior.
      // Back slashes before the query string get converted to forward slashes
      // See: https://code.google.com/p/chromium/issues/detail?id=25916


      var queryIndex = url.indexOf('?'),
          splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
          uSplit = url.split(splitter),
          slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, '/');
      url = uSplit.join(splitter);
      var rest = url; // trim before proceeding.
      // This is to support parse stuff like "  http://foo.com  \n"

      rest = rest.trim();

      if (!slashesDenoteHost && url.split('#').length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);

        if (simplePath) {
          this.path = rest;
          this.href = rest;
          this.pathname = simplePath[1];

          if (simplePath[2]) {
            this.search = simplePath[2];

            if (parseQueryString) {
              this.query = querystring.parse(this.search.substr(1));
            } else {
              this.query = this.search.substr(1);
            }
          } else if (parseQueryString) {
            this.search = '';
            this.query = {};
          }

          return this;
        }
      }

      var proto = protocolPattern.exec(rest);

      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
      } // figure out if it's got a host
      // user@server is *always* interpreted as a hostname, and url
      // resolution will treat //foo/bar as host=foo,path=bar because that's
      // how the browser resolves relative URLs.


      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === '//';

        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }

      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c
        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.
        // find the first instance of any hostEndingChars
        var hostEnd = -1;

        for (var i = 0; i < hostEndingChars.length; i++) {
          var hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        } // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.


        var auth, atSign;

        if (hostEnd === -1) {
          // atSign can be anywhere.
          atSign = rest.lastIndexOf('@');
        } else {
          // atSign must be in auth portion.
          // http://a@b/c@d => host:b auth:a path:/c@d
          atSign = rest.lastIndexOf('@', hostEnd);
        } // Now we have a portion which is definitely the auth.
        // Pull that off.


        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = decodeURIComponent(auth);
        } // the host is the remaining to the left of the first non-host char


        hostEnd = -1;

        for (var i = 0; i < nonHostChars.length; i++) {
          var hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        } // if we still have not hit it, then the entire thing is a host.


        if (hostEnd === -1) hostEnd = rest.length;
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd); // pull out port.

        this.parseHost(); // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.

        this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.

        var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.

        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);

          for (var i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) continue;

            if (!part.match(hostnamePartPattern)) {
              var newpart = '';

              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  // we replace non-ASCII char with a temporary placeholder
                  // we need this to make sure size of hostname is not
                  // broken by replacing non-ASCII by nothing
                  newpart += 'x';
                } else {
                  newpart += part[j];
                }
              } // we test again with ASCII char only


              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);

                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }

                if (notHost.length) {
                  rest = '/' + notHost.join('.') + rest;
                }

                this.hostname = validParts.join('.');
                break;
              }
            }
          }
        }

        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = '';
        } else {
          // hostnames are always lower case.
          this.hostname = this.hostname.toLowerCase();
        }

        if (!ipv6Hostname) {
          // IDNA Support: Returns a punycoded representation of "domain".
          // It only converts parts of the domain name that
          // have non-ASCII characters, i.e. it doesn't matter if
          // you call it with a domain that already is ASCII-only.
          this.hostname = punycode.toASCII(this.hostname);
        }

        var p = this.port ? ':' + this.port : '';
        var h = this.hostname || '';
        this.host = h + p;
        this.href += this.host; // strip [ and ] from the hostname
        // the host field still retains them, though

        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);

          if (rest[0] !== '/') {
            rest = '/' + rest;
          }
        }
      } // now rest is set to the post-host stuff.
      // chop off any delim chars.


      if (!unsafeProtocol[lowerProto]) {
        // First, make 100% sure that any "autoEscape" chars get
        // escaped, even if encodeURIComponent doesn't think they
        // need to be.
        for (var i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          if (rest.indexOf(ae) === -1) continue;
          var esc = encodeURIComponent(ae);

          if (esc === ae) {
            esc = escape(ae);
          }

          rest = rest.split(ae).join(esc);
        }
      } // chop off from the tail first.


      var hash = rest.indexOf('#');

      if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }

      var qm = rest.indexOf('?');

      if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);

        if (parseQueryString) {
          this.query = querystring.parse(this.query);
        }

        rest = rest.slice(0, qm);
      } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        this.search = '';
        this.query = {};
      }

      if (rest) this.pathname = rest;

      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
        this.pathname = '/';
      } //to support http.request


      if (this.pathname || this.search) {
        var p = this.pathname || '';
        var s = this.search || '';
        this.path = p + s;
      } // finally, reconstruct the href based on what has been validated.


      this.href = this.format();
      return this;
    }; // format a parsed object into a url string


    function urlFormat(obj) {
      // ensure it's an object, and not a string url.
      // If it's an obj, this is a no-op.
      // this way, you can call url_format() on strings
      // to clean up potentially wonky urls.
      if (util.isString(obj)) obj = urlParse(obj);
      if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
      return obj.format();
    }

    Url.prototype.format = function () {
      var auth = this.auth || '';

      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ':');
        auth += '@';
      }

      var protocol = this.protocol || '',
          pathname = this.pathname || '',
          hash = this.hash || '',
          host = false,
          query = '';

      if (this.host) {
        host = auth + this.host;
      } else if (this.hostname) {
        host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');

        if (this.port) {
          host += ':' + this.port;
        }
      }

      if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
        query = querystring.stringify(this.query);
      }

      var search = this.search || query && '?' + query || '';
      if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
      // unless they had them to begin with.

      if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = '//' + (host || '');
        if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
      } else if (!host) {
        host = '';
      }

      if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
      if (search && search.charAt(0) !== '?') search = '?' + search;
      pathname = pathname.replace(/[?#]/g, function (match) {
        return encodeURIComponent(match);
      });
      search = search.replace('#', '%23');
      return protocol + host + pathname + search + hash;
    };

    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }

    Url.prototype.resolve = function (relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };

    function urlResolveObject(source, relative) {
      if (!source) return relative;
      return urlParse(source, false, true).resolveObject(relative);
    }

    Url.prototype.resolveObject = function (relative) {
      if (util.isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }

      var result = new Url();
      var tkeys = Object.keys(this);

      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      } // hash is always overridden, no matter what.
      // even href="" will remove it.


      result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.

      if (relative.href === '') {
        result.href = result.format();
        return result;
      } // hrefs like //foo/bar always cut to the protocol.


      if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);

        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== 'protocol') result[rkey] = relative[rkey];
        } //urlParse appends trailing / to urls like http://www.example.com


        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
          result.path = result.pathname = '/';
        }

        result.href = result.format();
        return result;
      }

      if (relative.protocol && relative.protocol !== result.protocol) {
        // if it's a known url protocol, then changing
        // the protocol does weird things
        // first, if it's not file:, then we MUST have a host,
        // and if there was a path
        // to begin with, then we MUST have a path.
        // if it is file:, then the host is dropped,
        // because that's known to be hostless.
        // anything else is assumed to be absolute.
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);

          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result[k] = relative[k];
          }

          result.href = result.format();
          return result;
        }

        result.protocol = relative.protocol;

        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          var relPath = (relative.pathname || '').split('/');

          while (relPath.length && !(relative.host = relPath.shift()));

          if (!relative.host) relative.host = '';
          if (!relative.hostname) relative.hostname = '';
          if (relPath[0] !== '') relPath.unshift('');
          if (relPath.length < 2) relPath.unshift('');
          result.pathname = relPath.join('/');
        } else {
          result.pathname = relative.pathname;
        }

        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || '';
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port; // to support http.request

        if (result.pathname || result.search) {
          var p = result.pathname || '';
          var s = result.search || '';
          result.path = p + s;
        }

        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }

      var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
          isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
          mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
          removeAllDots = mustEndAbs,
          srcPath = result.pathname && result.pathname.split('/') || [],
          relPath = relative.pathname && relative.pathname.split('/') || [],
          psychotic = result.protocol && !slashedProtocol[result.protocol]; // if the url is a non-slashed url, then relative
      // links like ../.. should be able
      // to crawl up to the hostname, as well.  This is strange.
      // result.protocol has already been set by now.
      // Later on, put the first path part into the host field.

      if (psychotic) {
        result.hostname = '';
        result.port = null;

        if (result.host) {
          if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
        }

        result.host = '';

        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;

          if (relative.host) {
            if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
          }

          relative.host = null;
        }

        mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
      }

      if (isRelAbs) {
        // it's absolute.
        result.host = relative.host || relative.host === '' ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath; // fall through to the dot-handling below.
      } else if (relPath.length) {
        // it's relative
        // throw away the existing file, and take the new path instead.
        if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (!util.isNullOrUndefined(relative.search)) {
        // just pull out the search.
        // like href='?foo'.
        // Put this after the other two cases because it simplifies the booleans
        if (psychotic) {
          result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host
          //this especially happens in cases like
          //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

          var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }

        result.search = relative.search;
        result.query = relative.query; //to support http.request

        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
        }

        result.href = result.format();
        return result;
      }

      if (!srcPath.length) {
        // no path at all.  easy.
        // we've already handled the other stuff above.
        result.pathname = null; //to support http.request

        if (result.search) {
          result.path = '/' + result.search;
        } else {
          result.path = null;
        }

        result.href = result.format();
        return result;
      } // if a url ENDs in . or .., then it must get a trailing slash.
      // however, if it ends in anything else non-slashy,
      // then it must NOT get a trailing slash.


      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir
      // if the path tries to go above the root, `up` ends up > 0

      var up = 0;

      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];

        if (last === '.') {
          srcPath.splice(i, 1);
        } else if (last === '..') {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      } // if the path is allowed to go above the root, restore leading ..s


      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift('..');
        }
      }

      if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
        srcPath.unshift('');
      }

      if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
        srcPath.push('');
      }

      var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back

      if (psychotic) {
        result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

        var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }

      mustEndAbs = mustEndAbs || result.host && srcPath.length;

      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift('');
      }

      if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
      } else {
        result.pathname = srcPath.join('/');
      } //to support request.http


      if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
      }

      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };

    Url.prototype.parseHost = function () {
      var host = this.host;
      var port = portPattern.exec(host);

      if (port) {
        port = port[0];

        if (port !== ':') {
          this.port = port.substr(1);
        }

        host = host.substr(0, host.length - port.length);
      }

      if (host) this.hostname = host;
    };
  }, {
    "punycode": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/punycode/punycode.js",
    "./util": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/url/util.js",
    "querystring": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/querystring-es3/index.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/stream-http/index.js": [function (require, module, exports) {
    var global = arguments[3];

    var ClientRequest = require('./lib/request');

    var response = require('./lib/response');

    var extend = require('xtend');

    var statusCodes = require('builtin-status-codes');

    var url = require('url');

    var http = exports;

    http.request = function (opts, cb) {
      if (typeof opts === 'string') opts = url.parse(opts);else opts = extend(opts); // Normally, the page is loaded from http or https, so not specifying a protocol
      // will result in a (valid) protocol-relative url. However, this won't work if
      // the protocol is something else, like 'file:'

      var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';
      var protocol = opts.protocol || defaultProtocol;
      var host = opts.hostname || opts.host;
      var port = opts.port;
      var path = opts.path || '/'; // Necessary for IPv6 addresses

      if (host && host.indexOf(':') !== -1) host = '[' + host + ']'; // This may be a relative url. The browser should always be able to interpret it correctly.

      opts.url = (host ? protocol + '//' + host : '') + (port ? ':' + port : '') + path;
      opts.method = (opts.method || 'GET').toUpperCase();
      opts.headers = opts.headers || {}; // Also valid opts.auth, opts.mode

      var req = new ClientRequest(opts);
      if (cb) req.on('response', cb);
      return req;
    };

    http.get = function get(opts, cb) {
      var req = http.request(opts, cb);
      req.end();
      return req;
    };

    http.ClientRequest = ClientRequest;
    http.IncomingMessage = response.IncomingMessage;

    http.Agent = function () {};

    http.Agent.defaultMaxSockets = 4;
    http.globalAgent = new http.Agent();
    http.STATUS_CODES = statusCodes;
    http.METHODS = ['CHECKOUT', 'CONNECT', 'COPY', 'DELETE', 'GET', 'HEAD', 'LOCK', 'M-SEARCH', 'MERGE', 'MKACTIVITY', 'MKCOL', 'MOVE', 'NOTIFY', 'OPTIONS', 'PATCH', 'POST', 'PROPFIND', 'PROPPATCH', 'PURGE', 'PUT', 'REPORT', 'SEARCH', 'SUBSCRIBE', 'TRACE', 'UNLOCK', 'UNSUBSCRIBE'];
  }, {
    "./lib/request": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/stream-http/lib/request.js",
    "./lib/response": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/stream-http/lib/response.js",
    "xtend": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/xtend/immutable.js",
    "builtin-status-codes": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/builtin-status-codes/browser.js",
    "url": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/url/url.js"
  }],
  "../node_modules/regenerator-runtime/runtime.js": [function (require, module, exports) {
    var define;
    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var runtime = function (exports) {
      "use strict";

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }

      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function (obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      define(Gp, "constructor", GeneratorFunctionPrototype);
      define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
      GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);
      define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      });
      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      define(Gp, iteratorSymbol, function () {
        return this;
      });
      define(Gp, "toString", function () {
        return "[object Generator]";
      });

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function (skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined;
              }
            }
          }
        },
        stop: function () {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function (exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function (type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function (record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function (finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function (tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function (iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    typeof module === "object" ? module.exports : {});

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, in modern engines
      // we can explicitly access globalThis. In older engines we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ContainerGetAccountInfoExceptionHeaders = exports.ContainerGetAccessPolicyHeaders = exports.ContainerGetAccessPolicyExceptionHeaders = exports.ContainerFilterBlobsHeaders = exports.ContainerFilterBlobsExceptionHeaders = exports.ContainerDeleteHeaders = exports.ContainerDeleteExceptionHeaders = exports.ContainerCreateHeaders = exports.ContainerCreateExceptionHeaders = exports.ContainerChangeLeaseHeaders = exports.ContainerChangeLeaseExceptionHeaders = exports.ContainerBreakLeaseHeaders = exports.ContainerBreakLeaseExceptionHeaders = exports.ContainerAcquireLeaseHeaders = exports.ContainerAcquireLeaseExceptionHeaders = exports.ClearRange = exports.BlockLookupList = exports.BlockList = exports.BlockBlobUploadHeaders = exports.BlockBlobUploadExceptionHeaders = exports.BlockBlobStageBlockHeaders = exports.BlockBlobStageBlockFromURLHeaders = exports.BlockBlobStageBlockFromURLExceptionHeaders = exports.BlockBlobStageBlockExceptionHeaders = exports.BlockBlobPutBlobFromUrlHeaders = exports.BlockBlobPutBlobFromUrlExceptionHeaders = exports.BlockBlobGetBlockListHeaders = exports.BlockBlobGetBlockListExceptionHeaders = exports.BlockBlobCommitBlockListHeaders = exports.BlockBlobCommitBlockListExceptionHeaders = exports.Block = exports.BlobUndeleteHeaders = exports.BlobUndeleteExceptionHeaders = exports.BlobTags = exports.BlobTag = exports.BlobStartCopyFromURLHeaders = exports.BlobStartCopyFromURLExceptionHeaders = exports.BlobSetTierHeaders = exports.BlobSetTierExceptionHeaders = exports.BlobSetTagsHeaders = exports.BlobSetTagsExceptionHeaders = exports.BlobSetMetadataHeaders = exports.BlobSetMetadataExceptionHeaders = exports.BlobSetLegalHoldHeaders = exports.BlobSetLegalHoldExceptionHeaders = exports.BlobSetImmutabilityPolicyHeaders = exports.BlobSetImmutabilityPolicyExceptionHeaders = exports.BlobSetHttpHeadersHeaders = exports.BlobSetHttpHeadersExceptionHeaders = exports.BlobSetExpiryHeaders = exports.BlobSetExpiryExceptionHeaders = exports.BlobServiceStatistics = exports.BlobServiceProperties = exports.BlobRenewLeaseHeaders = exports.BlobRenewLeaseExceptionHeaders = exports.BlobReleaseLeaseHeaders = exports.BlobReleaseLeaseExceptionHeaders = exports.BlobQueryHeaders = exports.BlobQueryExceptionHeaders = exports.BlobPropertiesInternal = exports.BlobPrefix = exports.BlobName = exports.BlobItemInternal = exports.BlobHierarchyListSegment = exports.BlobGetTagsHeaders = exports.BlobGetTagsExceptionHeaders = exports.BlobGetPropertiesHeaders = exports.BlobGetPropertiesExceptionHeaders = exports.BlobGetAccountInfoHeaders = exports.BlobGetAccountInfoExceptionHeaders = exports.BlobFlatListSegment = exports.BlobDownloadHeaders = exports.BlobDownloadExceptionHeaders = exports.BlobDeleteImmutabilityPolicyHeaders = exports.BlobDeleteImmutabilityPolicyExceptionHeaders = exports.BlobDeleteHeaders = exports.BlobDeleteExceptionHeaders = exports.BlobCreateSnapshotHeaders = exports.BlobCreateSnapshotExceptionHeaders = exports.BlobCopyFromURLHeaders = exports.BlobCopyFromURLExceptionHeaders = exports.BlobChangeLeaseHeaders = exports.BlobChangeLeaseExceptionHeaders = exports.BlobBreakLeaseHeaders = exports.BlobBreakLeaseExceptionHeaders = exports.BlobAcquireLeaseHeaders = exports.BlobAcquireLeaseExceptionHeaders = exports.BlobAbortCopyFromURLHeaders = exports.BlobAbortCopyFromURLExceptionHeaders = exports.ArrowField = exports.ArrowConfiguration = exports.AppendBlobSealHeaders = exports.AppendBlobSealExceptionHeaders = exports.AppendBlobCreateHeaders = exports.AppendBlobCreateExceptionHeaders = exports.AppendBlobAppendBlockHeaders = exports.AppendBlobAppendBlockFromUrlHeaders = exports.AppendBlobAppendBlockFromUrlExceptionHeaders = exports.AppendBlobAppendBlockExceptionHeaders = exports.AccessPolicy = void 0;
    exports.UserDelegationKey = exports.StorageError = exports.StaticWebsite = exports.SignedIdentifier = exports.ServiceSubmitBatchHeaders = exports.ServiceSubmitBatchExceptionHeaders = exports.ServiceSetPropertiesHeaders = exports.ServiceSetPropertiesExceptionHeaders = exports.ServiceListContainersSegmentHeaders = exports.ServiceListContainersSegmentExceptionHeaders = exports.ServiceGetUserDelegationKeyHeaders = exports.ServiceGetUserDelegationKeyExceptionHeaders = exports.ServiceGetStatisticsHeaders = exports.ServiceGetStatisticsExceptionHeaders = exports.ServiceGetPropertiesHeaders = exports.ServiceGetPropertiesExceptionHeaders = exports.ServiceGetAccountInfoHeaders = exports.ServiceGetAccountInfoExceptionHeaders = exports.ServiceFilterBlobsHeaders = exports.ServiceFilterBlobsExceptionHeaders = exports.RetentionPolicy = exports.QuerySerialization = exports.QueryRequest = exports.QueryFormat = exports.PageRange = exports.PageList = exports.PageBlobUploadPagesHeaders = exports.PageBlobUploadPagesFromURLHeaders = exports.PageBlobUploadPagesFromURLExceptionHeaders = exports.PageBlobUploadPagesExceptionHeaders = exports.PageBlobUpdateSequenceNumberHeaders = exports.PageBlobUpdateSequenceNumberExceptionHeaders = exports.PageBlobResizeHeaders = exports.PageBlobResizeExceptionHeaders = exports.PageBlobGetPageRangesHeaders = exports.PageBlobGetPageRangesExceptionHeaders = exports.PageBlobGetPageRangesDiffHeaders = exports.PageBlobGetPageRangesDiffExceptionHeaders = exports.PageBlobCreateHeaders = exports.PageBlobCreateExceptionHeaders = exports.PageBlobCopyIncrementalHeaders = exports.PageBlobCopyIncrementalExceptionHeaders = exports.PageBlobClearPagesHeaders = exports.PageBlobClearPagesExceptionHeaders = exports.Metrics = exports.Logging = exports.ListContainersSegmentResponse = exports.ListBlobsHierarchySegmentResponse = exports.ListBlobsFlatSegmentResponse = exports.KeyInfo = exports.JsonTextConfiguration = exports.GeoReplication = exports.FilterBlobSegment = exports.FilterBlobItem = exports.DelimitedTextConfiguration = exports.CorsRule = exports.ContainerSubmitBatchHeaders = exports.ContainerSubmitBatchExceptionHeaders = exports.ContainerSetMetadataHeaders = exports.ContainerSetMetadataExceptionHeaders = exports.ContainerSetAccessPolicyHeaders = exports.ContainerSetAccessPolicyExceptionHeaders = exports.ContainerRestoreHeaders = exports.ContainerRestoreExceptionHeaders = exports.ContainerRenewLeaseHeaders = exports.ContainerRenewLeaseExceptionHeaders = exports.ContainerRenameHeaders = exports.ContainerRenameExceptionHeaders = exports.ContainerReleaseLeaseHeaders = exports.ContainerReleaseLeaseExceptionHeaders = exports.ContainerProperties = exports.ContainerListBlobHierarchySegmentHeaders = exports.ContainerListBlobHierarchySegmentExceptionHeaders = exports.ContainerListBlobFlatSegmentHeaders = exports.ContainerListBlobFlatSegmentExceptionHeaders = exports.ContainerItem = exports.ContainerGetPropertiesHeaders = exports.ContainerGetPropertiesExceptionHeaders = exports.ContainerGetAccountInfoHeaders = void 0;
    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var BlobServiceProperties = {
      serializedName: "BlobServiceProperties",
      xmlName: "StorageServiceProperties",
      type: {
        name: "Composite",
        className: "BlobServiceProperties",
        modelProperties: {
          blobAnalyticsLogging: {
            serializedName: "Logging",
            xmlName: "Logging",
            type: {
              name: "Composite",
              className: "Logging"
            }
          },
          hourMetrics: {
            serializedName: "HourMetrics",
            xmlName: "HourMetrics",
            type: {
              name: "Composite",
              className: "Metrics"
            }
          },
          minuteMetrics: {
            serializedName: "MinuteMetrics",
            xmlName: "MinuteMetrics",
            type: {
              name: "Composite",
              className: "Metrics"
            }
          },
          cors: {
            serializedName: "Cors",
            xmlName: "Cors",
            xmlIsWrapped: true,
            xmlElementName: "CorsRule",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "CorsRule"
                }
              }
            }
          },
          defaultServiceVersion: {
            serializedName: "DefaultServiceVersion",
            xmlName: "DefaultServiceVersion",
            type: {
              name: "String"
            }
          },
          deleteRetentionPolicy: {
            serializedName: "DeleteRetentionPolicy",
            xmlName: "DeleteRetentionPolicy",
            type: {
              name: "Composite",
              className: "RetentionPolicy"
            }
          },
          staticWebsite: {
            serializedName: "StaticWebsite",
            xmlName: "StaticWebsite",
            type: {
              name: "Composite",
              className: "StaticWebsite"
            }
          }
        }
      }
    };
    exports.BlobServiceProperties = BlobServiceProperties;
    var Logging = {
      serializedName: "Logging",
      type: {
        name: "Composite",
        className: "Logging",
        modelProperties: {
          version: {
            serializedName: "Version",
            required: true,
            xmlName: "Version",
            type: {
              name: "String"
            }
          },
          deleteProperty: {
            serializedName: "Delete",
            required: true,
            xmlName: "Delete",
            type: {
              name: "Boolean"
            }
          },
          read: {
            serializedName: "Read",
            required: true,
            xmlName: "Read",
            type: {
              name: "Boolean"
            }
          },
          write: {
            serializedName: "Write",
            required: true,
            xmlName: "Write",
            type: {
              name: "Boolean"
            }
          },
          retentionPolicy: {
            serializedName: "RetentionPolicy",
            xmlName: "RetentionPolicy",
            type: {
              name: "Composite",
              className: "RetentionPolicy"
            }
          }
        }
      }
    };
    exports.Logging = Logging;
    var RetentionPolicy = {
      serializedName: "RetentionPolicy",
      type: {
        name: "Composite",
        className: "RetentionPolicy",
        modelProperties: {
          enabled: {
            serializedName: "Enabled",
            required: true,
            xmlName: "Enabled",
            type: {
              name: "Boolean"
            }
          },
          days: {
            constraints: {
              InclusiveMinimum: 1
            },
            serializedName: "Days",
            xmlName: "Days",
            type: {
              name: "Number"
            }
          }
        }
      }
    };
    exports.RetentionPolicy = RetentionPolicy;
    var Metrics = {
      serializedName: "Metrics",
      type: {
        name: "Composite",
        className: "Metrics",
        modelProperties: {
          version: {
            serializedName: "Version",
            xmlName: "Version",
            type: {
              name: "String"
            }
          },
          enabled: {
            serializedName: "Enabled",
            required: true,
            xmlName: "Enabled",
            type: {
              name: "Boolean"
            }
          },
          includeAPIs: {
            serializedName: "IncludeAPIs",
            xmlName: "IncludeAPIs",
            type: {
              name: "Boolean"
            }
          },
          retentionPolicy: {
            serializedName: "RetentionPolicy",
            xmlName: "RetentionPolicy",
            type: {
              name: "Composite",
              className: "RetentionPolicy"
            }
          }
        }
      }
    };
    exports.Metrics = Metrics;
    var CorsRule = {
      serializedName: "CorsRule",
      type: {
        name: "Composite",
        className: "CorsRule",
        modelProperties: {
          allowedOrigins: {
            serializedName: "AllowedOrigins",
            required: true,
            xmlName: "AllowedOrigins",
            type: {
              name: "String"
            }
          },
          allowedMethods: {
            serializedName: "AllowedMethods",
            required: true,
            xmlName: "AllowedMethods",
            type: {
              name: "String"
            }
          },
          allowedHeaders: {
            serializedName: "AllowedHeaders",
            required: true,
            xmlName: "AllowedHeaders",
            type: {
              name: "String"
            }
          },
          exposedHeaders: {
            serializedName: "ExposedHeaders",
            required: true,
            xmlName: "ExposedHeaders",
            type: {
              name: "String"
            }
          },
          maxAgeInSeconds: {
            constraints: {
              InclusiveMinimum: 0
            },
            serializedName: "MaxAgeInSeconds",
            required: true,
            xmlName: "MaxAgeInSeconds",
            type: {
              name: "Number"
            }
          }
        }
      }
    };
    exports.CorsRule = CorsRule;
    var StaticWebsite = {
      serializedName: "StaticWebsite",
      type: {
        name: "Composite",
        className: "StaticWebsite",
        modelProperties: {
          enabled: {
            serializedName: "Enabled",
            required: true,
            xmlName: "Enabled",
            type: {
              name: "Boolean"
            }
          },
          indexDocument: {
            serializedName: "IndexDocument",
            xmlName: "IndexDocument",
            type: {
              name: "String"
            }
          },
          errorDocument404Path: {
            serializedName: "ErrorDocument404Path",
            xmlName: "ErrorDocument404Path",
            type: {
              name: "String"
            }
          },
          defaultIndexDocumentPath: {
            serializedName: "DefaultIndexDocumentPath",
            xmlName: "DefaultIndexDocumentPath",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.StaticWebsite = StaticWebsite;
    var StorageError = {
      serializedName: "StorageError",
      type: {
        name: "Composite",
        className: "StorageError",
        modelProperties: {
          message: {
            serializedName: "Message",
            xmlName: "Message",
            type: {
              name: "String"
            }
          },
          code: {
            serializedName: "Code",
            xmlName: "Code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.StorageError = StorageError;
    var BlobServiceStatistics = {
      serializedName: "BlobServiceStatistics",
      xmlName: "StorageServiceStats",
      type: {
        name: "Composite",
        className: "BlobServiceStatistics",
        modelProperties: {
          geoReplication: {
            serializedName: "GeoReplication",
            xmlName: "GeoReplication",
            type: {
              name: "Composite",
              className: "GeoReplication"
            }
          }
        }
      }
    };
    exports.BlobServiceStatistics = BlobServiceStatistics;
    var GeoReplication = {
      serializedName: "GeoReplication",
      type: {
        name: "Composite",
        className: "GeoReplication",
        modelProperties: {
          status: {
            serializedName: "Status",
            required: true,
            xmlName: "Status",
            type: {
              name: "Enum",
              allowedValues: ["live", "bootstrap", "unavailable"]
            }
          },
          lastSyncOn: {
            serializedName: "LastSyncTime",
            required: true,
            xmlName: "LastSyncTime",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    exports.GeoReplication = GeoReplication;
    var ListContainersSegmentResponse = {
      serializedName: "ListContainersSegmentResponse",
      xmlName: "EnumerationResults",
      type: {
        name: "Composite",
        className: "ListContainersSegmentResponse",
        modelProperties: {
          serviceEndpoint: {
            serializedName: "ServiceEndpoint",
            required: true,
            xmlName: "ServiceEndpoint",
            xmlIsAttribute: true,
            type: {
              name: "String"
            }
          },
          prefix: {
            serializedName: "Prefix",
            xmlName: "Prefix",
            type: {
              name: "String"
            }
          },
          marker: {
            serializedName: "Marker",
            xmlName: "Marker",
            type: {
              name: "String"
            }
          },
          maxPageSize: {
            serializedName: "MaxResults",
            xmlName: "MaxResults",
            type: {
              name: "Number"
            }
          },
          containerItems: {
            serializedName: "ContainerItems",
            required: true,
            xmlName: "Containers",
            xmlIsWrapped: true,
            xmlElementName: "Container",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "ContainerItem"
                }
              }
            }
          },
          continuationToken: {
            serializedName: "NextMarker",
            xmlName: "NextMarker",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ListContainersSegmentResponse = ListContainersSegmentResponse;
    var ContainerItem = {
      serializedName: "ContainerItem",
      xmlName: "Container",
      type: {
        name: "Composite",
        className: "ContainerItem",
        modelProperties: {
          name: {
            serializedName: "Name",
            required: true,
            xmlName: "Name",
            type: {
              name: "String"
            }
          },
          deleted: {
            serializedName: "Deleted",
            xmlName: "Deleted",
            type: {
              name: "Boolean"
            }
          },
          version: {
            serializedName: "Version",
            xmlName: "Version",
            type: {
              name: "String"
            }
          },
          properties: {
            serializedName: "Properties",
            xmlName: "Properties",
            type: {
              name: "Composite",
              className: "ContainerProperties"
            }
          },
          metadata: {
            serializedName: "Metadata",
            xmlName: "Metadata",
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    };
    exports.ContainerItem = ContainerItem;
    var ContainerProperties = {
      serializedName: "ContainerProperties",
      type: {
        name: "Composite",
        className: "ContainerProperties",
        modelProperties: {
          lastModified: {
            serializedName: "Last-Modified",
            required: true,
            xmlName: "Last-Modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          etag: {
            serializedName: "Etag",
            required: true,
            xmlName: "Etag",
            type: {
              name: "String"
            }
          },
          leaseStatus: {
            serializedName: "LeaseStatus",
            xmlName: "LeaseStatus",
            type: {
              name: "Enum",
              allowedValues: ["locked", "unlocked"]
            }
          },
          leaseState: {
            serializedName: "LeaseState",
            xmlName: "LeaseState",
            type: {
              name: "Enum",
              allowedValues: ["available", "leased", "expired", "breaking", "broken"]
            }
          },
          leaseDuration: {
            serializedName: "LeaseDuration",
            xmlName: "LeaseDuration",
            type: {
              name: "Enum",
              allowedValues: ["infinite", "fixed"]
            }
          },
          publicAccess: {
            serializedName: "PublicAccess",
            xmlName: "PublicAccess",
            type: {
              name: "Enum",
              allowedValues: ["container", "blob"]
            }
          },
          hasImmutabilityPolicy: {
            serializedName: "HasImmutabilityPolicy",
            xmlName: "HasImmutabilityPolicy",
            type: {
              name: "Boolean"
            }
          },
          hasLegalHold: {
            serializedName: "HasLegalHold",
            xmlName: "HasLegalHold",
            type: {
              name: "Boolean"
            }
          },
          defaultEncryptionScope: {
            serializedName: "DefaultEncryptionScope",
            xmlName: "DefaultEncryptionScope",
            type: {
              name: "String"
            }
          },
          preventEncryptionScopeOverride: {
            serializedName: "DenyEncryptionScopeOverride",
            xmlName: "DenyEncryptionScopeOverride",
            type: {
              name: "Boolean"
            }
          },
          deletedOn: {
            serializedName: "DeletedTime",
            xmlName: "DeletedTime",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          remainingRetentionDays: {
            serializedName: "RemainingRetentionDays",
            xmlName: "RemainingRetentionDays",
            type: {
              name: "Number"
            }
          },
          isImmutableStorageWithVersioningEnabled: {
            serializedName: "ImmutableStorageWithVersioningEnabled",
            xmlName: "ImmutableStorageWithVersioningEnabled",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    };
    exports.ContainerProperties = ContainerProperties;
    var KeyInfo = {
      serializedName: "KeyInfo",
      type: {
        name: "Composite",
        className: "KeyInfo",
        modelProperties: {
          startsOn: {
            serializedName: "Start",
            required: true,
            xmlName: "Start",
            type: {
              name: "String"
            }
          },
          expiresOn: {
            serializedName: "Expiry",
            required: true,
            xmlName: "Expiry",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.KeyInfo = KeyInfo;
    var UserDelegationKey = {
      serializedName: "UserDelegationKey",
      type: {
        name: "Composite",
        className: "UserDelegationKey",
        modelProperties: {
          signedObjectId: {
            serializedName: "SignedOid",
            required: true,
            xmlName: "SignedOid",
            type: {
              name: "String"
            }
          },
          signedTenantId: {
            serializedName: "SignedTid",
            required: true,
            xmlName: "SignedTid",
            type: {
              name: "String"
            }
          },
          signedStartsOn: {
            serializedName: "SignedStart",
            required: true,
            xmlName: "SignedStart",
            type: {
              name: "String"
            }
          },
          signedExpiresOn: {
            serializedName: "SignedExpiry",
            required: true,
            xmlName: "SignedExpiry",
            type: {
              name: "String"
            }
          },
          signedService: {
            serializedName: "SignedService",
            required: true,
            xmlName: "SignedService",
            type: {
              name: "String"
            }
          },
          signedVersion: {
            serializedName: "SignedVersion",
            required: true,
            xmlName: "SignedVersion",
            type: {
              name: "String"
            }
          },
          value: {
            serializedName: "Value",
            required: true,
            xmlName: "Value",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.UserDelegationKey = UserDelegationKey;
    var FilterBlobSegment = {
      serializedName: "FilterBlobSegment",
      xmlName: "EnumerationResults",
      type: {
        name: "Composite",
        className: "FilterBlobSegment",
        modelProperties: {
          serviceEndpoint: {
            serializedName: "ServiceEndpoint",
            required: true,
            xmlName: "ServiceEndpoint",
            xmlIsAttribute: true,
            type: {
              name: "String"
            }
          },
          where: {
            serializedName: "Where",
            required: true,
            xmlName: "Where",
            type: {
              name: "String"
            }
          },
          blobs: {
            serializedName: "Blobs",
            required: true,
            xmlName: "Blobs",
            xmlIsWrapped: true,
            xmlElementName: "Blob",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "FilterBlobItem"
                }
              }
            }
          },
          continuationToken: {
            serializedName: "NextMarker",
            xmlName: "NextMarker",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.FilterBlobSegment = FilterBlobSegment;
    var FilterBlobItem = {
      serializedName: "FilterBlobItem",
      xmlName: "Blob",
      type: {
        name: "Composite",
        className: "FilterBlobItem",
        modelProperties: {
          name: {
            serializedName: "Name",
            required: true,
            xmlName: "Name",
            type: {
              name: "String"
            }
          },
          containerName: {
            serializedName: "ContainerName",
            required: true,
            xmlName: "ContainerName",
            type: {
              name: "String"
            }
          },
          tags: {
            serializedName: "Tags",
            xmlName: "Tags",
            type: {
              name: "Composite",
              className: "BlobTags"
            }
          }
        }
      }
    };
    exports.FilterBlobItem = FilterBlobItem;
    var BlobTags = {
      serializedName: "BlobTags",
      xmlName: "Tags",
      type: {
        name: "Composite",
        className: "BlobTags",
        modelProperties: {
          blobTagSet: {
            serializedName: "BlobTagSet",
            required: true,
            xmlName: "TagSet",
            xmlIsWrapped: true,
            xmlElementName: "Tag",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "BlobTag"
                }
              }
            }
          }
        }
      }
    };
    exports.BlobTags = BlobTags;
    var BlobTag = {
      serializedName: "BlobTag",
      xmlName: "Tag",
      type: {
        name: "Composite",
        className: "BlobTag",
        modelProperties: {
          key: {
            serializedName: "Key",
            required: true,
            xmlName: "Key",
            type: {
              name: "String"
            }
          },
          value: {
            serializedName: "Value",
            required: true,
            xmlName: "Value",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobTag = BlobTag;
    var SignedIdentifier = {
      serializedName: "SignedIdentifier",
      xmlName: "SignedIdentifier",
      type: {
        name: "Composite",
        className: "SignedIdentifier",
        modelProperties: {
          id: {
            serializedName: "Id",
            required: true,
            xmlName: "Id",
            type: {
              name: "String"
            }
          },
          accessPolicy: {
            serializedName: "AccessPolicy",
            xmlName: "AccessPolicy",
            type: {
              name: "Composite",
              className: "AccessPolicy"
            }
          }
        }
      }
    };
    exports.SignedIdentifier = SignedIdentifier;
    var AccessPolicy = {
      serializedName: "AccessPolicy",
      type: {
        name: "Composite",
        className: "AccessPolicy",
        modelProperties: {
          startsOn: {
            serializedName: "Start",
            xmlName: "Start",
            type: {
              name: "String"
            }
          },
          expiresOn: {
            serializedName: "Expiry",
            xmlName: "Expiry",
            type: {
              name: "String"
            }
          },
          permissions: {
            serializedName: "Permission",
            xmlName: "Permission",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.AccessPolicy = AccessPolicy;
    var ListBlobsFlatSegmentResponse = {
      serializedName: "ListBlobsFlatSegmentResponse",
      xmlName: "EnumerationResults",
      type: {
        name: "Composite",
        className: "ListBlobsFlatSegmentResponse",
        modelProperties: {
          serviceEndpoint: {
            serializedName: "ServiceEndpoint",
            required: true,
            xmlName: "ServiceEndpoint",
            xmlIsAttribute: true,
            type: {
              name: "String"
            }
          },
          containerName: {
            serializedName: "ContainerName",
            required: true,
            xmlName: "ContainerName",
            xmlIsAttribute: true,
            type: {
              name: "String"
            }
          },
          prefix: {
            serializedName: "Prefix",
            xmlName: "Prefix",
            type: {
              name: "String"
            }
          },
          marker: {
            serializedName: "Marker",
            xmlName: "Marker",
            type: {
              name: "String"
            }
          },
          maxPageSize: {
            serializedName: "MaxResults",
            xmlName: "MaxResults",
            type: {
              name: "Number"
            }
          },
          segment: {
            serializedName: "Segment",
            xmlName: "Blobs",
            type: {
              name: "Composite",
              className: "BlobFlatListSegment"
            }
          },
          continuationToken: {
            serializedName: "NextMarker",
            xmlName: "NextMarker",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ListBlobsFlatSegmentResponse = ListBlobsFlatSegmentResponse;
    var BlobFlatListSegment = {
      serializedName: "BlobFlatListSegment",
      xmlName: "Blobs",
      type: {
        name: "Composite",
        className: "BlobFlatListSegment",
        modelProperties: {
          blobItems: {
            serializedName: "BlobItems",
            required: true,
            xmlName: "BlobItems",
            xmlElementName: "Blob",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "BlobItemInternal"
                }
              }
            }
          }
        }
      }
    };
    exports.BlobFlatListSegment = BlobFlatListSegment;
    var BlobItemInternal = {
      serializedName: "BlobItemInternal",
      xmlName: "Blob",
      type: {
        name: "Composite",
        className: "BlobItemInternal",
        modelProperties: {
          name: {
            serializedName: "Name",
            xmlName: "Name",
            type: {
              name: "Composite",
              className: "BlobName"
            }
          },
          deleted: {
            serializedName: "Deleted",
            required: true,
            xmlName: "Deleted",
            type: {
              name: "Boolean"
            }
          },
          snapshot: {
            serializedName: "Snapshot",
            required: true,
            xmlName: "Snapshot",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "VersionId",
            xmlName: "VersionId",
            type: {
              name: "String"
            }
          },
          isCurrentVersion: {
            serializedName: "IsCurrentVersion",
            xmlName: "IsCurrentVersion",
            type: {
              name: "Boolean"
            }
          },
          properties: {
            serializedName: "Properties",
            xmlName: "Properties",
            type: {
              name: "Composite",
              className: "BlobPropertiesInternal"
            }
          },
          metadata: {
            serializedName: "Metadata",
            xmlName: "Metadata",
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            }
          },
          blobTags: {
            serializedName: "BlobTags",
            xmlName: "Tags",
            type: {
              name: "Composite",
              className: "BlobTags"
            }
          },
          objectReplicationMetadata: {
            serializedName: "ObjectReplicationMetadata",
            xmlName: "OrMetadata",
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            }
          },
          hasVersionsOnly: {
            serializedName: "HasVersionsOnly",
            xmlName: "HasVersionsOnly",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    };
    exports.BlobItemInternal = BlobItemInternal;
    var BlobName = {
      serializedName: "BlobName",
      type: {
        name: "Composite",
        className: "BlobName",
        modelProperties: {
          encoded: {
            serializedName: "Encoded",
            xmlName: "Encoded",
            xmlIsAttribute: true,
            type: {
              name: "Boolean"
            }
          },
          content: {
            serializedName: "content",
            xmlName: "content",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobName = BlobName;
    var BlobPropertiesInternal = {
      serializedName: "BlobPropertiesInternal",
      xmlName: "Properties",
      type: {
        name: "Composite",
        className: "BlobPropertiesInternal",
        modelProperties: {
          createdOn: {
            serializedName: "Creation-Time",
            xmlName: "Creation-Time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          lastModified: {
            serializedName: "Last-Modified",
            required: true,
            xmlName: "Last-Modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          etag: {
            serializedName: "Etag",
            required: true,
            xmlName: "Etag",
            type: {
              name: "String"
            }
          },
          contentLength: {
            serializedName: "Content-Length",
            xmlName: "Content-Length",
            type: {
              name: "Number"
            }
          },
          contentType: {
            serializedName: "Content-Type",
            xmlName: "Content-Type",
            type: {
              name: "String"
            }
          },
          contentEncoding: {
            serializedName: "Content-Encoding",
            xmlName: "Content-Encoding",
            type: {
              name: "String"
            }
          },
          contentLanguage: {
            serializedName: "Content-Language",
            xmlName: "Content-Language",
            type: {
              name: "String"
            }
          },
          contentMD5: {
            serializedName: "Content-MD5",
            xmlName: "Content-MD5",
            type: {
              name: "ByteArray"
            }
          },
          contentDisposition: {
            serializedName: "Content-Disposition",
            xmlName: "Content-Disposition",
            type: {
              name: "String"
            }
          },
          cacheControl: {
            serializedName: "Cache-Control",
            xmlName: "Cache-Control",
            type: {
              name: "String"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          blobType: {
            serializedName: "BlobType",
            xmlName: "BlobType",
            type: {
              name: "Enum",
              allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
            }
          },
          leaseStatus: {
            serializedName: "LeaseStatus",
            xmlName: "LeaseStatus",
            type: {
              name: "Enum",
              allowedValues: ["locked", "unlocked"]
            }
          },
          leaseState: {
            serializedName: "LeaseState",
            xmlName: "LeaseState",
            type: {
              name: "Enum",
              allowedValues: ["available", "leased", "expired", "breaking", "broken"]
            }
          },
          leaseDuration: {
            serializedName: "LeaseDuration",
            xmlName: "LeaseDuration",
            type: {
              name: "Enum",
              allowedValues: ["infinite", "fixed"]
            }
          },
          copyId: {
            serializedName: "CopyId",
            xmlName: "CopyId",
            type: {
              name: "String"
            }
          },
          copyStatus: {
            serializedName: "CopyStatus",
            xmlName: "CopyStatus",
            type: {
              name: "Enum",
              allowedValues: ["pending", "success", "aborted", "failed"]
            }
          },
          copySource: {
            serializedName: "CopySource",
            xmlName: "CopySource",
            type: {
              name: "String"
            }
          },
          copyProgress: {
            serializedName: "CopyProgress",
            xmlName: "CopyProgress",
            type: {
              name: "String"
            }
          },
          copyCompletedOn: {
            serializedName: "CopyCompletionTime",
            xmlName: "CopyCompletionTime",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          copyStatusDescription: {
            serializedName: "CopyStatusDescription",
            xmlName: "CopyStatusDescription",
            type: {
              name: "String"
            }
          },
          serverEncrypted: {
            serializedName: "ServerEncrypted",
            xmlName: "ServerEncrypted",
            type: {
              name: "Boolean"
            }
          },
          incrementalCopy: {
            serializedName: "IncrementalCopy",
            xmlName: "IncrementalCopy",
            type: {
              name: "Boolean"
            }
          },
          destinationSnapshot: {
            serializedName: "DestinationSnapshot",
            xmlName: "DestinationSnapshot",
            type: {
              name: "String"
            }
          },
          deletedOn: {
            serializedName: "DeletedTime",
            xmlName: "DeletedTime",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          remainingRetentionDays: {
            serializedName: "RemainingRetentionDays",
            xmlName: "RemainingRetentionDays",
            type: {
              name: "Number"
            }
          },
          accessTier: {
            serializedName: "AccessTier",
            xmlName: "AccessTier",
            type: {
              name: "Enum",
              allowedValues: ["P4", "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive"]
            }
          },
          accessTierInferred: {
            serializedName: "AccessTierInferred",
            xmlName: "AccessTierInferred",
            type: {
              name: "Boolean"
            }
          },
          archiveStatus: {
            serializedName: "ArchiveStatus",
            xmlName: "ArchiveStatus",
            type: {
              name: "Enum",
              allowedValues: ["rehydrate-pending-to-hot", "rehydrate-pending-to-cool"]
            }
          },
          customerProvidedKeySha256: {
            serializedName: "CustomerProvidedKeySha256",
            xmlName: "CustomerProvidedKeySha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "EncryptionScope",
            xmlName: "EncryptionScope",
            type: {
              name: "String"
            }
          },
          accessTierChangedOn: {
            serializedName: "AccessTierChangeTime",
            xmlName: "AccessTierChangeTime",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          tagCount: {
            serializedName: "TagCount",
            xmlName: "TagCount",
            type: {
              name: "Number"
            }
          },
          expiresOn: {
            serializedName: "Expiry-Time",
            xmlName: "Expiry-Time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isSealed: {
            serializedName: "Sealed",
            xmlName: "Sealed",
            type: {
              name: "Boolean"
            }
          },
          rehydratePriority: {
            serializedName: "RehydratePriority",
            xmlName: "RehydratePriority",
            type: {
              name: "Enum",
              allowedValues: ["High", "Standard"]
            }
          },
          lastAccessedOn: {
            serializedName: "LastAccessTime",
            xmlName: "LastAccessTime",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyExpiresOn: {
            serializedName: "ImmutabilityPolicyUntilDate",
            xmlName: "ImmutabilityPolicyUntilDate",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyMode: {
            serializedName: "ImmutabilityPolicyMode",
            xmlName: "ImmutabilityPolicyMode",
            type: {
              name: "Enum",
              allowedValues: ["Mutable", "Unlocked", "Locked"]
            }
          },
          legalHold: {
            serializedName: "LegalHold",
            xmlName: "LegalHold",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    };
    exports.BlobPropertiesInternal = BlobPropertiesInternal;
    var ListBlobsHierarchySegmentResponse = {
      serializedName: "ListBlobsHierarchySegmentResponse",
      xmlName: "EnumerationResults",
      type: {
        name: "Composite",
        className: "ListBlobsHierarchySegmentResponse",
        modelProperties: {
          serviceEndpoint: {
            serializedName: "ServiceEndpoint",
            required: true,
            xmlName: "ServiceEndpoint",
            xmlIsAttribute: true,
            type: {
              name: "String"
            }
          },
          containerName: {
            serializedName: "ContainerName",
            required: true,
            xmlName: "ContainerName",
            xmlIsAttribute: true,
            type: {
              name: "String"
            }
          },
          prefix: {
            serializedName: "Prefix",
            xmlName: "Prefix",
            type: {
              name: "String"
            }
          },
          marker: {
            serializedName: "Marker",
            xmlName: "Marker",
            type: {
              name: "String"
            }
          },
          maxPageSize: {
            serializedName: "MaxResults",
            xmlName: "MaxResults",
            type: {
              name: "Number"
            }
          },
          delimiter: {
            serializedName: "Delimiter",
            xmlName: "Delimiter",
            type: {
              name: "String"
            }
          },
          segment: {
            serializedName: "Segment",
            xmlName: "Blobs",
            type: {
              name: "Composite",
              className: "BlobHierarchyListSegment"
            }
          },
          continuationToken: {
            serializedName: "NextMarker",
            xmlName: "NextMarker",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ListBlobsHierarchySegmentResponse = ListBlobsHierarchySegmentResponse;
    var BlobHierarchyListSegment = {
      serializedName: "BlobHierarchyListSegment",
      xmlName: "Blobs",
      type: {
        name: "Composite",
        className: "BlobHierarchyListSegment",
        modelProperties: {
          blobPrefixes: {
            serializedName: "BlobPrefixes",
            xmlName: "BlobPrefixes",
            xmlElementName: "BlobPrefix",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "BlobPrefix"
                }
              }
            }
          },
          blobItems: {
            serializedName: "BlobItems",
            required: true,
            xmlName: "BlobItems",
            xmlElementName: "Blob",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "BlobItemInternal"
                }
              }
            }
          }
        }
      }
    };
    exports.BlobHierarchyListSegment = BlobHierarchyListSegment;
    var BlobPrefix = {
      serializedName: "BlobPrefix",
      type: {
        name: "Composite",
        className: "BlobPrefix",
        modelProperties: {
          name: {
            serializedName: "Name",
            xmlName: "Name",
            type: {
              name: "Composite",
              className: "BlobName"
            }
          }
        }
      }
    };
    exports.BlobPrefix = BlobPrefix;
    var BlockLookupList = {
      serializedName: "BlockLookupList",
      xmlName: "BlockList",
      type: {
        name: "Composite",
        className: "BlockLookupList",
        modelProperties: {
          committed: {
            serializedName: "Committed",
            xmlName: "Committed",
            xmlElementName: "Committed",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          },
          uncommitted: {
            serializedName: "Uncommitted",
            xmlName: "Uncommitted",
            xmlElementName: "Uncommitted",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          },
          latest: {
            serializedName: "Latest",
            xmlName: "Latest",
            xmlElementName: "Latest",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    };
    exports.BlockLookupList = BlockLookupList;
    var BlockList = {
      serializedName: "BlockList",
      type: {
        name: "Composite",
        className: "BlockList",
        modelProperties: {
          committedBlocks: {
            serializedName: "CommittedBlocks",
            xmlName: "CommittedBlocks",
            xmlIsWrapped: true,
            xmlElementName: "Block",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "Block"
                }
              }
            }
          },
          uncommittedBlocks: {
            serializedName: "UncommittedBlocks",
            xmlName: "UncommittedBlocks",
            xmlIsWrapped: true,
            xmlElementName: "Block",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "Block"
                }
              }
            }
          }
        }
      }
    };
    exports.BlockList = BlockList;
    var Block = {
      serializedName: "Block",
      type: {
        name: "Composite",
        className: "Block",
        modelProperties: {
          name: {
            serializedName: "Name",
            required: true,
            xmlName: "Name",
            type: {
              name: "String"
            }
          },
          size: {
            serializedName: "Size",
            required: true,
            xmlName: "Size",
            type: {
              name: "Number"
            }
          }
        }
      }
    };
    exports.Block = Block;
    var PageList = {
      serializedName: "PageList",
      type: {
        name: "Composite",
        className: "PageList",
        modelProperties: {
          pageRange: {
            serializedName: "PageRange",
            xmlName: "PageRange",
            xmlElementName: "PageRange",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "PageRange"
                }
              }
            }
          },
          clearRange: {
            serializedName: "ClearRange",
            xmlName: "ClearRange",
            xmlElementName: "ClearRange",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "ClearRange"
                }
              }
            }
          },
          continuationToken: {
            serializedName: "NextMarker",
            xmlName: "NextMarker",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageList = PageList;
    var PageRange = {
      serializedName: "PageRange",
      xmlName: "PageRange",
      type: {
        name: "Composite",
        className: "PageRange",
        modelProperties: {
          start: {
            serializedName: "Start",
            required: true,
            xmlName: "Start",
            type: {
              name: "Number"
            }
          },
          end: {
            serializedName: "End",
            required: true,
            xmlName: "End",
            type: {
              name: "Number"
            }
          }
        }
      }
    };
    exports.PageRange = PageRange;
    var ClearRange = {
      serializedName: "ClearRange",
      xmlName: "ClearRange",
      type: {
        name: "Composite",
        className: "ClearRange",
        modelProperties: {
          start: {
            serializedName: "Start",
            required: true,
            xmlName: "Start",
            type: {
              name: "Number"
            }
          },
          end: {
            serializedName: "End",
            required: true,
            xmlName: "End",
            type: {
              name: "Number"
            }
          }
        }
      }
    };
    exports.ClearRange = ClearRange;
    var QueryRequest = {
      serializedName: "QueryRequest",
      xmlName: "QueryRequest",
      type: {
        name: "Composite",
        className: "QueryRequest",
        modelProperties: {
          queryType: {
            serializedName: "QueryType",
            required: true,
            xmlName: "QueryType",
            type: {
              name: "String"
            }
          },
          expression: {
            serializedName: "Expression",
            required: true,
            xmlName: "Expression",
            type: {
              name: "String"
            }
          },
          inputSerialization: {
            serializedName: "InputSerialization",
            xmlName: "InputSerialization",
            type: {
              name: "Composite",
              className: "QuerySerialization"
            }
          },
          outputSerialization: {
            serializedName: "OutputSerialization",
            xmlName: "OutputSerialization",
            type: {
              name: "Composite",
              className: "QuerySerialization"
            }
          }
        }
      }
    };
    exports.QueryRequest = QueryRequest;
    var QuerySerialization = {
      serializedName: "QuerySerialization",
      type: {
        name: "Composite",
        className: "QuerySerialization",
        modelProperties: {
          format: {
            serializedName: "Format",
            xmlName: "Format",
            type: {
              name: "Composite",
              className: "QueryFormat"
            }
          }
        }
      }
    };
    exports.QuerySerialization = QuerySerialization;
    var QueryFormat = {
      serializedName: "QueryFormat",
      type: {
        name: "Composite",
        className: "QueryFormat",
        modelProperties: {
          type: {
            serializedName: "Type",
            required: true,
            xmlName: "Type",
            type: {
              name: "Enum",
              allowedValues: ["delimited", "json", "arrow", "parquet"]
            }
          },
          delimitedTextConfiguration: {
            serializedName: "DelimitedTextConfiguration",
            xmlName: "DelimitedTextConfiguration",
            type: {
              name: "Composite",
              className: "DelimitedTextConfiguration"
            }
          },
          jsonTextConfiguration: {
            serializedName: "JsonTextConfiguration",
            xmlName: "JsonTextConfiguration",
            type: {
              name: "Composite",
              className: "JsonTextConfiguration"
            }
          },
          arrowConfiguration: {
            serializedName: "ArrowConfiguration",
            xmlName: "ArrowConfiguration",
            type: {
              name: "Composite",
              className: "ArrowConfiguration"
            }
          },
          parquetTextConfiguration: {
            serializedName: "ParquetTextConfiguration",
            xmlName: "ParquetTextConfiguration",
            type: {
              name: "any"
            }
          }
        }
      }
    };
    exports.QueryFormat = QueryFormat;
    var DelimitedTextConfiguration = {
      serializedName: "DelimitedTextConfiguration",
      xmlName: "DelimitedTextConfiguration",
      type: {
        name: "Composite",
        className: "DelimitedTextConfiguration",
        modelProperties: {
          columnSeparator: {
            serializedName: "ColumnSeparator",
            xmlName: "ColumnSeparator",
            type: {
              name: "String"
            }
          },
          fieldQuote: {
            serializedName: "FieldQuote",
            xmlName: "FieldQuote",
            type: {
              name: "String"
            }
          },
          recordSeparator: {
            serializedName: "RecordSeparator",
            xmlName: "RecordSeparator",
            type: {
              name: "String"
            }
          },
          escapeChar: {
            serializedName: "EscapeChar",
            xmlName: "EscapeChar",
            type: {
              name: "String"
            }
          },
          headersPresent: {
            serializedName: "HeadersPresent",
            xmlName: "HasHeaders",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    };
    exports.DelimitedTextConfiguration = DelimitedTextConfiguration;
    var JsonTextConfiguration = {
      serializedName: "JsonTextConfiguration",
      xmlName: "JsonTextConfiguration",
      type: {
        name: "Composite",
        className: "JsonTextConfiguration",
        modelProperties: {
          recordSeparator: {
            serializedName: "RecordSeparator",
            xmlName: "RecordSeparator",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.JsonTextConfiguration = JsonTextConfiguration;
    var ArrowConfiguration = {
      serializedName: "ArrowConfiguration",
      xmlName: "ArrowConfiguration",
      type: {
        name: "Composite",
        className: "ArrowConfiguration",
        modelProperties: {
          schema: {
            serializedName: "Schema",
            required: true,
            xmlName: "Schema",
            xmlIsWrapped: true,
            xmlElementName: "Field",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "ArrowField"
                }
              }
            }
          }
        }
      }
    };
    exports.ArrowConfiguration = ArrowConfiguration;
    var ArrowField = {
      serializedName: "ArrowField",
      xmlName: "Field",
      type: {
        name: "Composite",
        className: "ArrowField",
        modelProperties: {
          type: {
            serializedName: "Type",
            required: true,
            xmlName: "Type",
            type: {
              name: "String"
            }
          },
          name: {
            serializedName: "Name",
            xmlName: "Name",
            type: {
              name: "String"
            }
          },
          precision: {
            serializedName: "Precision",
            xmlName: "Precision",
            type: {
              name: "Number"
            }
          },
          scale: {
            serializedName: "Scale",
            xmlName: "Scale",
            type: {
              name: "Number"
            }
          }
        }
      }
    };
    exports.ArrowField = ArrowField;
    var ServiceSetPropertiesHeaders = {
      serializedName: "Service_setPropertiesHeaders",
      type: {
        name: "Composite",
        className: "ServiceSetPropertiesHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceSetPropertiesHeaders = ServiceSetPropertiesHeaders;
    var ServiceSetPropertiesExceptionHeaders = {
      serializedName: "Service_setPropertiesExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceSetPropertiesExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceSetPropertiesExceptionHeaders = ServiceSetPropertiesExceptionHeaders;
    var ServiceGetPropertiesHeaders = {
      serializedName: "Service_getPropertiesHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetPropertiesHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceGetPropertiesHeaders = ServiceGetPropertiesHeaders;
    var ServiceGetPropertiesExceptionHeaders = {
      serializedName: "Service_getPropertiesExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetPropertiesExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceGetPropertiesExceptionHeaders = ServiceGetPropertiesExceptionHeaders;
    var ServiceGetStatisticsHeaders = {
      serializedName: "Service_getStatisticsHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetStatisticsHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceGetStatisticsHeaders = ServiceGetStatisticsHeaders;
    var ServiceGetStatisticsExceptionHeaders = {
      serializedName: "Service_getStatisticsExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetStatisticsExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceGetStatisticsExceptionHeaders = ServiceGetStatisticsExceptionHeaders;
    var ServiceListContainersSegmentHeaders = {
      serializedName: "Service_listContainersSegmentHeaders",
      type: {
        name: "Composite",
        className: "ServiceListContainersSegmentHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceListContainersSegmentHeaders = ServiceListContainersSegmentHeaders;
    var ServiceListContainersSegmentExceptionHeaders = {
      serializedName: "Service_listContainersSegmentExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceListContainersSegmentExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceListContainersSegmentExceptionHeaders = ServiceListContainersSegmentExceptionHeaders;
    var ServiceGetUserDelegationKeyHeaders = {
      serializedName: "Service_getUserDelegationKeyHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetUserDelegationKeyHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceGetUserDelegationKeyHeaders = ServiceGetUserDelegationKeyHeaders;
    var ServiceGetUserDelegationKeyExceptionHeaders = {
      serializedName: "Service_getUserDelegationKeyExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetUserDelegationKeyExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceGetUserDelegationKeyExceptionHeaders = ServiceGetUserDelegationKeyExceptionHeaders;
    var ServiceGetAccountInfoHeaders = {
      serializedName: "Service_getAccountInfoHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetAccountInfoHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          skuName: {
            serializedName: "x-ms-sku-name",
            xmlName: "x-ms-sku-name",
            type: {
              name: "Enum",
              allowedValues: ["Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"]
            }
          },
          accountKind: {
            serializedName: "x-ms-account-kind",
            xmlName: "x-ms-account-kind",
            type: {
              name: "Enum",
              allowedValues: ["Storage", "BlobStorage", "StorageV2", "FileStorage", "BlockBlobStorage"]
            }
          },
          isHierarchicalNamespaceEnabled: {
            serializedName: "x-ms-is-hns-enabled",
            xmlName: "x-ms-is-hns-enabled",
            type: {
              name: "Boolean"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceGetAccountInfoHeaders = ServiceGetAccountInfoHeaders;
    var ServiceGetAccountInfoExceptionHeaders = {
      serializedName: "Service_getAccountInfoExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetAccountInfoExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceGetAccountInfoExceptionHeaders = ServiceGetAccountInfoExceptionHeaders;
    var ServiceSubmitBatchHeaders = {
      serializedName: "Service_submitBatchHeaders",
      type: {
        name: "Composite",
        className: "ServiceSubmitBatchHeaders",
        modelProperties: {
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceSubmitBatchHeaders = ServiceSubmitBatchHeaders;
    var ServiceSubmitBatchExceptionHeaders = {
      serializedName: "Service_submitBatchExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceSubmitBatchExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceSubmitBatchExceptionHeaders = ServiceSubmitBatchExceptionHeaders;
    var ServiceFilterBlobsHeaders = {
      serializedName: "Service_filterBlobsHeaders",
      type: {
        name: "Composite",
        className: "ServiceFilterBlobsHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceFilterBlobsHeaders = ServiceFilterBlobsHeaders;
    var ServiceFilterBlobsExceptionHeaders = {
      serializedName: "Service_filterBlobsExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceFilterBlobsExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ServiceFilterBlobsExceptionHeaders = ServiceFilterBlobsExceptionHeaders;
    var ContainerCreateHeaders = {
      serializedName: "Container_createHeaders",
      type: {
        name: "Composite",
        className: "ContainerCreateHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerCreateHeaders = ContainerCreateHeaders;
    var ContainerCreateExceptionHeaders = {
      serializedName: "Container_createExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerCreateExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerCreateExceptionHeaders = ContainerCreateExceptionHeaders;
    var ContainerGetPropertiesHeaders = {
      serializedName: "Container_getPropertiesHeaders",
      type: {
        name: "Composite",
        className: "ContainerGetPropertiesHeaders",
        modelProperties: {
          metadata: {
            serializedName: "x-ms-meta",
            xmlName: "x-ms-meta",
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            },
            headerCollectionPrefix: "x-ms-meta-"
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseDuration: {
            serializedName: "x-ms-lease-duration",
            xmlName: "x-ms-lease-duration",
            type: {
              name: "Enum",
              allowedValues: ["infinite", "fixed"]
            }
          },
          leaseState: {
            serializedName: "x-ms-lease-state",
            xmlName: "x-ms-lease-state",
            type: {
              name: "Enum",
              allowedValues: ["available", "leased", "expired", "breaking", "broken"]
            }
          },
          leaseStatus: {
            serializedName: "x-ms-lease-status",
            xmlName: "x-ms-lease-status",
            type: {
              name: "Enum",
              allowedValues: ["locked", "unlocked"]
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobPublicAccess: {
            serializedName: "x-ms-blob-public-access",
            xmlName: "x-ms-blob-public-access",
            type: {
              name: "Enum",
              allowedValues: ["container", "blob"]
            }
          },
          hasImmutabilityPolicy: {
            serializedName: "x-ms-has-immutability-policy",
            xmlName: "x-ms-has-immutability-policy",
            type: {
              name: "Boolean"
            }
          },
          hasLegalHold: {
            serializedName: "x-ms-has-legal-hold",
            xmlName: "x-ms-has-legal-hold",
            type: {
              name: "Boolean"
            }
          },
          defaultEncryptionScope: {
            serializedName: "x-ms-default-encryption-scope",
            xmlName: "x-ms-default-encryption-scope",
            type: {
              name: "String"
            }
          },
          denyEncryptionScopeOverride: {
            serializedName: "x-ms-deny-encryption-scope-override",
            xmlName: "x-ms-deny-encryption-scope-override",
            type: {
              name: "Boolean"
            }
          },
          isImmutableStorageWithVersioningEnabled: {
            serializedName: "x-ms-immutable-storage-with-versioning-enabled",
            xmlName: "x-ms-immutable-storage-with-versioning-enabled",
            type: {
              name: "Boolean"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerGetPropertiesHeaders = ContainerGetPropertiesHeaders;
    var ContainerGetPropertiesExceptionHeaders = {
      serializedName: "Container_getPropertiesExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerGetPropertiesExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerGetPropertiesExceptionHeaders = ContainerGetPropertiesExceptionHeaders;
    var ContainerDeleteHeaders = {
      serializedName: "Container_deleteHeaders",
      type: {
        name: "Composite",
        className: "ContainerDeleteHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerDeleteHeaders = ContainerDeleteHeaders;
    var ContainerDeleteExceptionHeaders = {
      serializedName: "Container_deleteExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerDeleteExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerDeleteExceptionHeaders = ContainerDeleteExceptionHeaders;
    var ContainerSetMetadataHeaders = {
      serializedName: "Container_setMetadataHeaders",
      type: {
        name: "Composite",
        className: "ContainerSetMetadataHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerSetMetadataHeaders = ContainerSetMetadataHeaders;
    var ContainerSetMetadataExceptionHeaders = {
      serializedName: "Container_setMetadataExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerSetMetadataExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerSetMetadataExceptionHeaders = ContainerSetMetadataExceptionHeaders;
    var ContainerGetAccessPolicyHeaders = {
      serializedName: "Container_getAccessPolicyHeaders",
      type: {
        name: "Composite",
        className: "ContainerGetAccessPolicyHeaders",
        modelProperties: {
          blobPublicAccess: {
            serializedName: "x-ms-blob-public-access",
            xmlName: "x-ms-blob-public-access",
            type: {
              name: "Enum",
              allowedValues: ["container", "blob"]
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerGetAccessPolicyHeaders = ContainerGetAccessPolicyHeaders;
    var ContainerGetAccessPolicyExceptionHeaders = {
      serializedName: "Container_getAccessPolicyExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerGetAccessPolicyExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerGetAccessPolicyExceptionHeaders = ContainerGetAccessPolicyExceptionHeaders;
    var ContainerSetAccessPolicyHeaders = {
      serializedName: "Container_setAccessPolicyHeaders",
      type: {
        name: "Composite",
        className: "ContainerSetAccessPolicyHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerSetAccessPolicyHeaders = ContainerSetAccessPolicyHeaders;
    var ContainerSetAccessPolicyExceptionHeaders = {
      serializedName: "Container_setAccessPolicyExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerSetAccessPolicyExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerSetAccessPolicyExceptionHeaders = ContainerSetAccessPolicyExceptionHeaders;
    var ContainerRestoreHeaders = {
      serializedName: "Container_restoreHeaders",
      type: {
        name: "Composite",
        className: "ContainerRestoreHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerRestoreHeaders = ContainerRestoreHeaders;
    var ContainerRestoreExceptionHeaders = {
      serializedName: "Container_restoreExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerRestoreExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerRestoreExceptionHeaders = ContainerRestoreExceptionHeaders;
    var ContainerRenameHeaders = {
      serializedName: "Container_renameHeaders",
      type: {
        name: "Composite",
        className: "ContainerRenameHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerRenameHeaders = ContainerRenameHeaders;
    var ContainerRenameExceptionHeaders = {
      serializedName: "Container_renameExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerRenameExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerRenameExceptionHeaders = ContainerRenameExceptionHeaders;
    var ContainerSubmitBatchHeaders = {
      serializedName: "Container_submitBatchHeaders",
      type: {
        name: "Composite",
        className: "ContainerSubmitBatchHeaders",
        modelProperties: {
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerSubmitBatchHeaders = ContainerSubmitBatchHeaders;
    var ContainerSubmitBatchExceptionHeaders = {
      serializedName: "Container_submitBatchExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerSubmitBatchExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerSubmitBatchExceptionHeaders = ContainerSubmitBatchExceptionHeaders;
    var ContainerFilterBlobsHeaders = {
      serializedName: "Container_filterBlobsHeaders",
      type: {
        name: "Composite",
        className: "ContainerFilterBlobsHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    exports.ContainerFilterBlobsHeaders = ContainerFilterBlobsHeaders;
    var ContainerFilterBlobsExceptionHeaders = {
      serializedName: "Container_filterBlobsExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerFilterBlobsExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerFilterBlobsExceptionHeaders = ContainerFilterBlobsExceptionHeaders;
    var ContainerAcquireLeaseHeaders = {
      serializedName: "Container_acquireLeaseHeaders",
      type: {
        name: "Composite",
        className: "ContainerAcquireLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseId: {
            serializedName: "x-ms-lease-id",
            xmlName: "x-ms-lease-id",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    exports.ContainerAcquireLeaseHeaders = ContainerAcquireLeaseHeaders;
    var ContainerAcquireLeaseExceptionHeaders = {
      serializedName: "Container_acquireLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerAcquireLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerAcquireLeaseExceptionHeaders = ContainerAcquireLeaseExceptionHeaders;
    var ContainerReleaseLeaseHeaders = {
      serializedName: "Container_releaseLeaseHeaders",
      type: {
        name: "Composite",
        className: "ContainerReleaseLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    exports.ContainerReleaseLeaseHeaders = ContainerReleaseLeaseHeaders;
    var ContainerReleaseLeaseExceptionHeaders = {
      serializedName: "Container_releaseLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerReleaseLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerReleaseLeaseExceptionHeaders = ContainerReleaseLeaseExceptionHeaders;
    var ContainerRenewLeaseHeaders = {
      serializedName: "Container_renewLeaseHeaders",
      type: {
        name: "Composite",
        className: "ContainerRenewLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseId: {
            serializedName: "x-ms-lease-id",
            xmlName: "x-ms-lease-id",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    exports.ContainerRenewLeaseHeaders = ContainerRenewLeaseHeaders;
    var ContainerRenewLeaseExceptionHeaders = {
      serializedName: "Container_renewLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerRenewLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerRenewLeaseExceptionHeaders = ContainerRenewLeaseExceptionHeaders;
    var ContainerBreakLeaseHeaders = {
      serializedName: "Container_breakLeaseHeaders",
      type: {
        name: "Composite",
        className: "ContainerBreakLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseTime: {
            serializedName: "x-ms-lease-time",
            xmlName: "x-ms-lease-time",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    exports.ContainerBreakLeaseHeaders = ContainerBreakLeaseHeaders;
    var ContainerBreakLeaseExceptionHeaders = {
      serializedName: "Container_breakLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerBreakLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerBreakLeaseExceptionHeaders = ContainerBreakLeaseExceptionHeaders;
    var ContainerChangeLeaseHeaders = {
      serializedName: "Container_changeLeaseHeaders",
      type: {
        name: "Composite",
        className: "ContainerChangeLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseId: {
            serializedName: "x-ms-lease-id",
            xmlName: "x-ms-lease-id",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    exports.ContainerChangeLeaseHeaders = ContainerChangeLeaseHeaders;
    var ContainerChangeLeaseExceptionHeaders = {
      serializedName: "Container_changeLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerChangeLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerChangeLeaseExceptionHeaders = ContainerChangeLeaseExceptionHeaders;
    var ContainerListBlobFlatSegmentHeaders = {
      serializedName: "Container_listBlobFlatSegmentHeaders",
      type: {
        name: "Composite",
        className: "ContainerListBlobFlatSegmentHeaders",
        modelProperties: {
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerListBlobFlatSegmentHeaders = ContainerListBlobFlatSegmentHeaders;
    var ContainerListBlobFlatSegmentExceptionHeaders = {
      serializedName: "Container_listBlobFlatSegmentExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerListBlobFlatSegmentExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerListBlobFlatSegmentExceptionHeaders = ContainerListBlobFlatSegmentExceptionHeaders;
    var ContainerListBlobHierarchySegmentHeaders = {
      serializedName: "Container_listBlobHierarchySegmentHeaders",
      type: {
        name: "Composite",
        className: "ContainerListBlobHierarchySegmentHeaders",
        modelProperties: {
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerListBlobHierarchySegmentHeaders = ContainerListBlobHierarchySegmentHeaders;
    var ContainerListBlobHierarchySegmentExceptionHeaders = {
      serializedName: "Container_listBlobHierarchySegmentExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerListBlobHierarchySegmentExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerListBlobHierarchySegmentExceptionHeaders = ContainerListBlobHierarchySegmentExceptionHeaders;
    var ContainerGetAccountInfoHeaders = {
      serializedName: "Container_getAccountInfoHeaders",
      type: {
        name: "Composite",
        className: "ContainerGetAccountInfoHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          skuName: {
            serializedName: "x-ms-sku-name",
            xmlName: "x-ms-sku-name",
            type: {
              name: "Enum",
              allowedValues: ["Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"]
            }
          },
          accountKind: {
            serializedName: "x-ms-account-kind",
            xmlName: "x-ms-account-kind",
            type: {
              name: "Enum",
              allowedValues: ["Storage", "BlobStorage", "StorageV2", "FileStorage", "BlockBlobStorage"]
            }
          }
        }
      }
    };
    exports.ContainerGetAccountInfoHeaders = ContainerGetAccountInfoHeaders;
    var ContainerGetAccountInfoExceptionHeaders = {
      serializedName: "Container_getAccountInfoExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerGetAccountInfoExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.ContainerGetAccountInfoExceptionHeaders = ContainerGetAccountInfoExceptionHeaders;
    var BlobDownloadHeaders = {
      serializedName: "Blob_downloadHeaders",
      type: {
        name: "Composite",
        className: "BlobDownloadHeaders",
        modelProperties: {
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          metadata: {
            serializedName: "x-ms-meta",
            xmlName: "x-ms-meta",
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            },
            headerCollectionPrefix: "x-ms-meta-"
          },
          objectReplicationPolicyId: {
            serializedName: "x-ms-or-policy-id",
            xmlName: "x-ms-or-policy-id",
            type: {
              name: "String"
            }
          },
          objectReplicationRules: {
            serializedName: "x-ms-or",
            xmlName: "x-ms-or",
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            },
            headerCollectionPrefix: "x-ms-or-"
          },
          contentLength: {
            serializedName: "content-length",
            xmlName: "content-length",
            type: {
              name: "Number"
            }
          },
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          contentRange: {
            serializedName: "content-range",
            xmlName: "content-range",
            type: {
              name: "String"
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          contentEncoding: {
            serializedName: "content-encoding",
            xmlName: "content-encoding",
            type: {
              name: "String"
            }
          },
          cacheControl: {
            serializedName: "cache-control",
            xmlName: "cache-control",
            type: {
              name: "String"
            }
          },
          contentDisposition: {
            serializedName: "content-disposition",
            xmlName: "content-disposition",
            type: {
              name: "String"
            }
          },
          contentLanguage: {
            serializedName: "content-language",
            xmlName: "content-language",
            type: {
              name: "String"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          blobType: {
            serializedName: "x-ms-blob-type",
            xmlName: "x-ms-blob-type",
            type: {
              name: "Enum",
              allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
            }
          },
          copyCompletedOn: {
            serializedName: "x-ms-copy-completion-time",
            xmlName: "x-ms-copy-completion-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          copyStatusDescription: {
            serializedName: "x-ms-copy-status-description",
            xmlName: "x-ms-copy-status-description",
            type: {
              name: "String"
            }
          },
          copyId: {
            serializedName: "x-ms-copy-id",
            xmlName: "x-ms-copy-id",
            type: {
              name: "String"
            }
          },
          copyProgress: {
            serializedName: "x-ms-copy-progress",
            xmlName: "x-ms-copy-progress",
            type: {
              name: "String"
            }
          },
          copySource: {
            serializedName: "x-ms-copy-source",
            xmlName: "x-ms-copy-source",
            type: {
              name: "String"
            }
          },
          copyStatus: {
            serializedName: "x-ms-copy-status",
            xmlName: "x-ms-copy-status",
            type: {
              name: "Enum",
              allowedValues: ["pending", "success", "aborted", "failed"]
            }
          },
          leaseDuration: {
            serializedName: "x-ms-lease-duration",
            xmlName: "x-ms-lease-duration",
            type: {
              name: "Enum",
              allowedValues: ["infinite", "fixed"]
            }
          },
          leaseState: {
            serializedName: "x-ms-lease-state",
            xmlName: "x-ms-lease-state",
            type: {
              name: "Enum",
              allowedValues: ["available", "leased", "expired", "breaking", "broken"]
            }
          },
          leaseStatus: {
            serializedName: "x-ms-lease-status",
            xmlName: "x-ms-lease-status",
            type: {
              name: "Enum",
              allowedValues: ["locked", "unlocked"]
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          isCurrentVersion: {
            serializedName: "x-ms-is-current-version",
            xmlName: "x-ms-is-current-version",
            type: {
              name: "Boolean"
            }
          },
          acceptRanges: {
            serializedName: "accept-ranges",
            xmlName: "accept-ranges",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobCommittedBlockCount: {
            serializedName: "x-ms-blob-committed-block-count",
            xmlName: "x-ms-blob-committed-block-count",
            type: {
              name: "Number"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-server-encrypted",
            xmlName: "x-ms-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          blobContentMD5: {
            serializedName: "x-ms-blob-content-md5",
            xmlName: "x-ms-blob-content-md5",
            type: {
              name: "ByteArray"
            }
          },
          tagCount: {
            serializedName: "x-ms-tag-count",
            xmlName: "x-ms-tag-count",
            type: {
              name: "Number"
            }
          },
          isSealed: {
            serializedName: "x-ms-blob-sealed",
            xmlName: "x-ms-blob-sealed",
            type: {
              name: "Boolean"
            }
          },
          lastAccessed: {
            serializedName: "x-ms-last-access-time",
            xmlName: "x-ms-last-access-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyExpiresOn: {
            serializedName: "x-ms-immutability-policy-until-date",
            xmlName: "x-ms-immutability-policy-until-date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyMode: {
            serializedName: "x-ms-immutability-policy-mode",
            xmlName: "x-ms-immutability-policy-mode",
            type: {
              name: "Enum",
              allowedValues: ["Mutable", "Unlocked", "Locked"]
            }
          },
          legalHold: {
            serializedName: "x-ms-legal-hold",
            xmlName: "x-ms-legal-hold",
            type: {
              name: "Boolean"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          },
          contentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          }
        }
      }
    };
    exports.BlobDownloadHeaders = BlobDownloadHeaders;
    var BlobDownloadExceptionHeaders = {
      serializedName: "Blob_downloadExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobDownloadExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobDownloadExceptionHeaders = BlobDownloadExceptionHeaders;
    var BlobGetPropertiesHeaders = {
      serializedName: "Blob_getPropertiesHeaders",
      type: {
        name: "Composite",
        className: "BlobGetPropertiesHeaders",
        modelProperties: {
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          createdOn: {
            serializedName: "x-ms-creation-time",
            xmlName: "x-ms-creation-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          metadata: {
            serializedName: "x-ms-meta",
            xmlName: "x-ms-meta",
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            },
            headerCollectionPrefix: "x-ms-meta-"
          },
          objectReplicationPolicyId: {
            serializedName: "x-ms-or-policy-id",
            xmlName: "x-ms-or-policy-id",
            type: {
              name: "String"
            }
          },
          objectReplicationRules: {
            serializedName: "x-ms-or",
            xmlName: "x-ms-or",
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            },
            headerCollectionPrefix: "x-ms-or-"
          },
          blobType: {
            serializedName: "x-ms-blob-type",
            xmlName: "x-ms-blob-type",
            type: {
              name: "Enum",
              allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
            }
          },
          copyCompletedOn: {
            serializedName: "x-ms-copy-completion-time",
            xmlName: "x-ms-copy-completion-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          copyStatusDescription: {
            serializedName: "x-ms-copy-status-description",
            xmlName: "x-ms-copy-status-description",
            type: {
              name: "String"
            }
          },
          copyId: {
            serializedName: "x-ms-copy-id",
            xmlName: "x-ms-copy-id",
            type: {
              name: "String"
            }
          },
          copyProgress: {
            serializedName: "x-ms-copy-progress",
            xmlName: "x-ms-copy-progress",
            type: {
              name: "String"
            }
          },
          copySource: {
            serializedName: "x-ms-copy-source",
            xmlName: "x-ms-copy-source",
            type: {
              name: "String"
            }
          },
          copyStatus: {
            serializedName: "x-ms-copy-status",
            xmlName: "x-ms-copy-status",
            type: {
              name: "Enum",
              allowedValues: ["pending", "success", "aborted", "failed"]
            }
          },
          isIncrementalCopy: {
            serializedName: "x-ms-incremental-copy",
            xmlName: "x-ms-incremental-copy",
            type: {
              name: "Boolean"
            }
          },
          destinationSnapshot: {
            serializedName: "x-ms-copy-destination-snapshot",
            xmlName: "x-ms-copy-destination-snapshot",
            type: {
              name: "String"
            }
          },
          leaseDuration: {
            serializedName: "x-ms-lease-duration",
            xmlName: "x-ms-lease-duration",
            type: {
              name: "Enum",
              allowedValues: ["infinite", "fixed"]
            }
          },
          leaseState: {
            serializedName: "x-ms-lease-state",
            xmlName: "x-ms-lease-state",
            type: {
              name: "Enum",
              allowedValues: ["available", "leased", "expired", "breaking", "broken"]
            }
          },
          leaseStatus: {
            serializedName: "x-ms-lease-status",
            xmlName: "x-ms-lease-status",
            type: {
              name: "Enum",
              allowedValues: ["locked", "unlocked"]
            }
          },
          contentLength: {
            serializedName: "content-length",
            xmlName: "content-length",
            type: {
              name: "Number"
            }
          },
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          contentEncoding: {
            serializedName: "content-encoding",
            xmlName: "content-encoding",
            type: {
              name: "String"
            }
          },
          contentDisposition: {
            serializedName: "content-disposition",
            xmlName: "content-disposition",
            type: {
              name: "String"
            }
          },
          contentLanguage: {
            serializedName: "content-language",
            xmlName: "content-language",
            type: {
              name: "String"
            }
          },
          cacheControl: {
            serializedName: "cache-control",
            xmlName: "cache-control",
            type: {
              name: "String"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          acceptRanges: {
            serializedName: "accept-ranges",
            xmlName: "accept-ranges",
            type: {
              name: "String"
            }
          },
          blobCommittedBlockCount: {
            serializedName: "x-ms-blob-committed-block-count",
            xmlName: "x-ms-blob-committed-block-count",
            type: {
              name: "Number"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-server-encrypted",
            xmlName: "x-ms-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          accessTier: {
            serializedName: "x-ms-access-tier",
            xmlName: "x-ms-access-tier",
            type: {
              name: "String"
            }
          },
          accessTierInferred: {
            serializedName: "x-ms-access-tier-inferred",
            xmlName: "x-ms-access-tier-inferred",
            type: {
              name: "Boolean"
            }
          },
          archiveStatus: {
            serializedName: "x-ms-archive-status",
            xmlName: "x-ms-archive-status",
            type: {
              name: "String"
            }
          },
          accessTierChangedOn: {
            serializedName: "x-ms-access-tier-change-time",
            xmlName: "x-ms-access-tier-change-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          isCurrentVersion: {
            serializedName: "x-ms-is-current-version",
            xmlName: "x-ms-is-current-version",
            type: {
              name: "Boolean"
            }
          },
          tagCount: {
            serializedName: "x-ms-tag-count",
            xmlName: "x-ms-tag-count",
            type: {
              name: "Number"
            }
          },
          expiresOn: {
            serializedName: "x-ms-expiry-time",
            xmlName: "x-ms-expiry-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isSealed: {
            serializedName: "x-ms-blob-sealed",
            xmlName: "x-ms-blob-sealed",
            type: {
              name: "Boolean"
            }
          },
          rehydratePriority: {
            serializedName: "x-ms-rehydrate-priority",
            xmlName: "x-ms-rehydrate-priority",
            type: {
              name: "Enum",
              allowedValues: ["High", "Standard"]
            }
          },
          lastAccessed: {
            serializedName: "x-ms-last-access-time",
            xmlName: "x-ms-last-access-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyExpiresOn: {
            serializedName: "x-ms-immutability-policy-until-date",
            xmlName: "x-ms-immutability-policy-until-date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyMode: {
            serializedName: "x-ms-immutability-policy-mode",
            xmlName: "x-ms-immutability-policy-mode",
            type: {
              name: "Enum",
              allowedValues: ["Mutable", "Unlocked", "Locked"]
            }
          },
          legalHold: {
            serializedName: "x-ms-legal-hold",
            xmlName: "x-ms-legal-hold",
            type: {
              name: "Boolean"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobGetPropertiesHeaders = BlobGetPropertiesHeaders;
    var BlobGetPropertiesExceptionHeaders = {
      serializedName: "Blob_getPropertiesExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobGetPropertiesExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobGetPropertiesExceptionHeaders = BlobGetPropertiesExceptionHeaders;
    var BlobDeleteHeaders = {
      serializedName: "Blob_deleteHeaders",
      type: {
        name: "Composite",
        className: "BlobDeleteHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobDeleteHeaders = BlobDeleteHeaders;
    var BlobDeleteExceptionHeaders = {
      serializedName: "Blob_deleteExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobDeleteExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobDeleteExceptionHeaders = BlobDeleteExceptionHeaders;
    var BlobUndeleteHeaders = {
      serializedName: "Blob_undeleteHeaders",
      type: {
        name: "Composite",
        className: "BlobUndeleteHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobUndeleteHeaders = BlobUndeleteHeaders;
    var BlobUndeleteExceptionHeaders = {
      serializedName: "Blob_undeleteExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobUndeleteExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobUndeleteExceptionHeaders = BlobUndeleteExceptionHeaders;
    var BlobSetExpiryHeaders = {
      serializedName: "Blob_setExpiryHeaders",
      type: {
        name: "Composite",
        className: "BlobSetExpiryHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    exports.BlobSetExpiryHeaders = BlobSetExpiryHeaders;
    var BlobSetExpiryExceptionHeaders = {
      serializedName: "Blob_setExpiryExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobSetExpiryExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobSetExpiryExceptionHeaders = BlobSetExpiryExceptionHeaders;
    var BlobSetHttpHeadersHeaders = {
      serializedName: "Blob_setHttpHeadersHeaders",
      type: {
        name: "Composite",
        className: "BlobSetHttpHeadersHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobSetHttpHeadersHeaders = BlobSetHttpHeadersHeaders;
    var BlobSetHttpHeadersExceptionHeaders = {
      serializedName: "Blob_setHttpHeadersExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobSetHttpHeadersExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobSetHttpHeadersExceptionHeaders = BlobSetHttpHeadersExceptionHeaders;
    var BlobSetImmutabilityPolicyHeaders = {
      serializedName: "Blob_setImmutabilityPolicyHeaders",
      type: {
        name: "Composite",
        className: "BlobSetImmutabilityPolicyHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyExpiry: {
            serializedName: "x-ms-immutability-policy-until-date",
            xmlName: "x-ms-immutability-policy-until-date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyMode: {
            serializedName: "x-ms-immutability-policy-mode",
            xmlName: "x-ms-immutability-policy-mode",
            type: {
              name: "Enum",
              allowedValues: ["Mutable", "Unlocked", "Locked"]
            }
          }
        }
      }
    };
    exports.BlobSetImmutabilityPolicyHeaders = BlobSetImmutabilityPolicyHeaders;
    var BlobSetImmutabilityPolicyExceptionHeaders = {
      serializedName: "Blob_setImmutabilityPolicyExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobSetImmutabilityPolicyExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobSetImmutabilityPolicyExceptionHeaders = BlobSetImmutabilityPolicyExceptionHeaders;
    var BlobDeleteImmutabilityPolicyHeaders = {
      serializedName: "Blob_deleteImmutabilityPolicyHeaders",
      type: {
        name: "Composite",
        className: "BlobDeleteImmutabilityPolicyHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    exports.BlobDeleteImmutabilityPolicyHeaders = BlobDeleteImmutabilityPolicyHeaders;
    var BlobDeleteImmutabilityPolicyExceptionHeaders = {
      serializedName: "Blob_deleteImmutabilityPolicyExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobDeleteImmutabilityPolicyExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobDeleteImmutabilityPolicyExceptionHeaders = BlobDeleteImmutabilityPolicyExceptionHeaders;
    var BlobSetLegalHoldHeaders = {
      serializedName: "Blob_setLegalHoldHeaders",
      type: {
        name: "Composite",
        className: "BlobSetLegalHoldHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          legalHold: {
            serializedName: "x-ms-legal-hold",
            xmlName: "x-ms-legal-hold",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    };
    exports.BlobSetLegalHoldHeaders = BlobSetLegalHoldHeaders;
    var BlobSetLegalHoldExceptionHeaders = {
      serializedName: "Blob_setLegalHoldExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobSetLegalHoldExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobSetLegalHoldExceptionHeaders = BlobSetLegalHoldExceptionHeaders;
    var BlobSetMetadataHeaders = {
      serializedName: "Blob_setMetadataHeaders",
      type: {
        name: "Composite",
        className: "BlobSetMetadataHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobSetMetadataHeaders = BlobSetMetadataHeaders;
    var BlobSetMetadataExceptionHeaders = {
      serializedName: "Blob_setMetadataExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobSetMetadataExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobSetMetadataExceptionHeaders = BlobSetMetadataExceptionHeaders;
    var BlobAcquireLeaseHeaders = {
      serializedName: "Blob_acquireLeaseHeaders",
      type: {
        name: "Composite",
        className: "BlobAcquireLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseId: {
            serializedName: "x-ms-lease-id",
            xmlName: "x-ms-lease-id",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    exports.BlobAcquireLeaseHeaders = BlobAcquireLeaseHeaders;
    var BlobAcquireLeaseExceptionHeaders = {
      serializedName: "Blob_acquireLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobAcquireLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobAcquireLeaseExceptionHeaders = BlobAcquireLeaseExceptionHeaders;
    var BlobReleaseLeaseHeaders = {
      serializedName: "Blob_releaseLeaseHeaders",
      type: {
        name: "Composite",
        className: "BlobReleaseLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    exports.BlobReleaseLeaseHeaders = BlobReleaseLeaseHeaders;
    var BlobReleaseLeaseExceptionHeaders = {
      serializedName: "Blob_releaseLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobReleaseLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobReleaseLeaseExceptionHeaders = BlobReleaseLeaseExceptionHeaders;
    var BlobRenewLeaseHeaders = {
      serializedName: "Blob_renewLeaseHeaders",
      type: {
        name: "Composite",
        className: "BlobRenewLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseId: {
            serializedName: "x-ms-lease-id",
            xmlName: "x-ms-lease-id",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    exports.BlobRenewLeaseHeaders = BlobRenewLeaseHeaders;
    var BlobRenewLeaseExceptionHeaders = {
      serializedName: "Blob_renewLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobRenewLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobRenewLeaseExceptionHeaders = BlobRenewLeaseExceptionHeaders;
    var BlobChangeLeaseHeaders = {
      serializedName: "Blob_changeLeaseHeaders",
      type: {
        name: "Composite",
        className: "BlobChangeLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          leaseId: {
            serializedName: "x-ms-lease-id",
            xmlName: "x-ms-lease-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    exports.BlobChangeLeaseHeaders = BlobChangeLeaseHeaders;
    var BlobChangeLeaseExceptionHeaders = {
      serializedName: "Blob_changeLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobChangeLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobChangeLeaseExceptionHeaders = BlobChangeLeaseExceptionHeaders;
    var BlobBreakLeaseHeaders = {
      serializedName: "Blob_breakLeaseHeaders",
      type: {
        name: "Composite",
        className: "BlobBreakLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseTime: {
            serializedName: "x-ms-lease-time",
            xmlName: "x-ms-lease-time",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    exports.BlobBreakLeaseHeaders = BlobBreakLeaseHeaders;
    var BlobBreakLeaseExceptionHeaders = {
      serializedName: "Blob_breakLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobBreakLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobBreakLeaseExceptionHeaders = BlobBreakLeaseExceptionHeaders;
    var BlobCreateSnapshotHeaders = {
      serializedName: "Blob_createSnapshotHeaders",
      type: {
        name: "Composite",
        className: "BlobCreateSnapshotHeaders",
        modelProperties: {
          snapshot: {
            serializedName: "x-ms-snapshot",
            xmlName: "x-ms-snapshot",
            type: {
              name: "String"
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobCreateSnapshotHeaders = BlobCreateSnapshotHeaders;
    var BlobCreateSnapshotExceptionHeaders = {
      serializedName: "Blob_createSnapshotExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobCreateSnapshotExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobCreateSnapshotExceptionHeaders = BlobCreateSnapshotExceptionHeaders;
    var BlobStartCopyFromURLHeaders = {
      serializedName: "Blob_startCopyFromURLHeaders",
      type: {
        name: "Composite",
        className: "BlobStartCopyFromURLHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          copyId: {
            serializedName: "x-ms-copy-id",
            xmlName: "x-ms-copy-id",
            type: {
              name: "String"
            }
          },
          copyStatus: {
            serializedName: "x-ms-copy-status",
            xmlName: "x-ms-copy-status",
            type: {
              name: "Enum",
              allowedValues: ["pending", "success", "aborted", "failed"]
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobStartCopyFromURLHeaders = BlobStartCopyFromURLHeaders;
    var BlobStartCopyFromURLExceptionHeaders = {
      serializedName: "Blob_startCopyFromURLExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobStartCopyFromURLExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobStartCopyFromURLExceptionHeaders = BlobStartCopyFromURLExceptionHeaders;
    var BlobCopyFromURLHeaders = {
      serializedName: "Blob_copyFromURLHeaders",
      type: {
        name: "Composite",
        className: "BlobCopyFromURLHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          copyId: {
            serializedName: "x-ms-copy-id",
            xmlName: "x-ms-copy-id",
            type: {
              name: "String"
            }
          },
          copyStatus: {
            defaultValue: "success",
            isConstant: true,
            serializedName: "x-ms-copy-status",
            type: {
              name: "String"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobCopyFromURLHeaders = BlobCopyFromURLHeaders;
    var BlobCopyFromURLExceptionHeaders = {
      serializedName: "Blob_copyFromURLExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobCopyFromURLExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobCopyFromURLExceptionHeaders = BlobCopyFromURLExceptionHeaders;
    var BlobAbortCopyFromURLHeaders = {
      serializedName: "Blob_abortCopyFromURLHeaders",
      type: {
        name: "Composite",
        className: "BlobAbortCopyFromURLHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobAbortCopyFromURLHeaders = BlobAbortCopyFromURLHeaders;
    var BlobAbortCopyFromURLExceptionHeaders = {
      serializedName: "Blob_abortCopyFromURLExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobAbortCopyFromURLExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobAbortCopyFromURLExceptionHeaders = BlobAbortCopyFromURLExceptionHeaders;
    var BlobSetTierHeaders = {
      serializedName: "Blob_setTierHeaders",
      type: {
        name: "Composite",
        className: "BlobSetTierHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobSetTierHeaders = BlobSetTierHeaders;
    var BlobSetTierExceptionHeaders = {
      serializedName: "Blob_setTierExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobSetTierExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobSetTierExceptionHeaders = BlobSetTierExceptionHeaders;
    var BlobGetAccountInfoHeaders = {
      serializedName: "Blob_getAccountInfoHeaders",
      type: {
        name: "Composite",
        className: "BlobGetAccountInfoHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          skuName: {
            serializedName: "x-ms-sku-name",
            xmlName: "x-ms-sku-name",
            type: {
              name: "Enum",
              allowedValues: ["Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"]
            }
          },
          accountKind: {
            serializedName: "x-ms-account-kind",
            xmlName: "x-ms-account-kind",
            type: {
              name: "Enum",
              allowedValues: ["Storage", "BlobStorage", "StorageV2", "FileStorage", "BlockBlobStorage"]
            }
          }
        }
      }
    };
    exports.BlobGetAccountInfoHeaders = BlobGetAccountInfoHeaders;
    var BlobGetAccountInfoExceptionHeaders = {
      serializedName: "Blob_getAccountInfoExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobGetAccountInfoExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobGetAccountInfoExceptionHeaders = BlobGetAccountInfoExceptionHeaders;
    var BlobQueryHeaders = {
      serializedName: "Blob_queryHeaders",
      type: {
        name: "Composite",
        className: "BlobQueryHeaders",
        modelProperties: {
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          metadata: {
            serializedName: "x-ms-meta",
            xmlName: "x-ms-meta",
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            }
          },
          contentLength: {
            serializedName: "content-length",
            xmlName: "content-length",
            type: {
              name: "Number"
            }
          },
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          contentRange: {
            serializedName: "content-range",
            xmlName: "content-range",
            type: {
              name: "String"
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          contentEncoding: {
            serializedName: "content-encoding",
            xmlName: "content-encoding",
            type: {
              name: "String"
            }
          },
          cacheControl: {
            serializedName: "cache-control",
            xmlName: "cache-control",
            type: {
              name: "String"
            }
          },
          contentDisposition: {
            serializedName: "content-disposition",
            xmlName: "content-disposition",
            type: {
              name: "String"
            }
          },
          contentLanguage: {
            serializedName: "content-language",
            xmlName: "content-language",
            type: {
              name: "String"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          blobType: {
            serializedName: "x-ms-blob-type",
            xmlName: "x-ms-blob-type",
            type: {
              name: "Enum",
              allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
            }
          },
          copyCompletionTime: {
            serializedName: "x-ms-copy-completion-time",
            xmlName: "x-ms-copy-completion-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          copyStatusDescription: {
            serializedName: "x-ms-copy-status-description",
            xmlName: "x-ms-copy-status-description",
            type: {
              name: "String"
            }
          },
          copyId: {
            serializedName: "x-ms-copy-id",
            xmlName: "x-ms-copy-id",
            type: {
              name: "String"
            }
          },
          copyProgress: {
            serializedName: "x-ms-copy-progress",
            xmlName: "x-ms-copy-progress",
            type: {
              name: "String"
            }
          },
          copySource: {
            serializedName: "x-ms-copy-source",
            xmlName: "x-ms-copy-source",
            type: {
              name: "String"
            }
          },
          copyStatus: {
            serializedName: "x-ms-copy-status",
            xmlName: "x-ms-copy-status",
            type: {
              name: "Enum",
              allowedValues: ["pending", "success", "aborted", "failed"]
            }
          },
          leaseDuration: {
            serializedName: "x-ms-lease-duration",
            xmlName: "x-ms-lease-duration",
            type: {
              name: "Enum",
              allowedValues: ["infinite", "fixed"]
            }
          },
          leaseState: {
            serializedName: "x-ms-lease-state",
            xmlName: "x-ms-lease-state",
            type: {
              name: "Enum",
              allowedValues: ["available", "leased", "expired", "breaking", "broken"]
            }
          },
          leaseStatus: {
            serializedName: "x-ms-lease-status",
            xmlName: "x-ms-lease-status",
            type: {
              name: "Enum",
              allowedValues: ["locked", "unlocked"]
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          acceptRanges: {
            serializedName: "accept-ranges",
            xmlName: "accept-ranges",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobCommittedBlockCount: {
            serializedName: "x-ms-blob-committed-block-count",
            xmlName: "x-ms-blob-committed-block-count",
            type: {
              name: "Number"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-server-encrypted",
            xmlName: "x-ms-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          blobContentMD5: {
            serializedName: "x-ms-blob-content-md5",
            xmlName: "x-ms-blob-content-md5",
            type: {
              name: "ByteArray"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          },
          contentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          }
        }
      }
    };
    exports.BlobQueryHeaders = BlobQueryHeaders;
    var BlobQueryExceptionHeaders = {
      serializedName: "Blob_queryExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobQueryExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobQueryExceptionHeaders = BlobQueryExceptionHeaders;
    var BlobGetTagsHeaders = {
      serializedName: "Blob_getTagsHeaders",
      type: {
        name: "Composite",
        className: "BlobGetTagsHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobGetTagsHeaders = BlobGetTagsHeaders;
    var BlobGetTagsExceptionHeaders = {
      serializedName: "Blob_getTagsExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobGetTagsExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobGetTagsExceptionHeaders = BlobGetTagsExceptionHeaders;
    var BlobSetTagsHeaders = {
      serializedName: "Blob_setTagsHeaders",
      type: {
        name: "Composite",
        className: "BlobSetTagsHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobSetTagsHeaders = BlobSetTagsHeaders;
    var BlobSetTagsExceptionHeaders = {
      serializedName: "Blob_setTagsExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobSetTagsExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlobSetTagsExceptionHeaders = BlobSetTagsExceptionHeaders;
    var PageBlobCreateHeaders = {
      serializedName: "PageBlob_createHeaders",
      type: {
        name: "Composite",
        className: "PageBlobCreateHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobCreateHeaders = PageBlobCreateHeaders;
    var PageBlobCreateExceptionHeaders = {
      serializedName: "PageBlob_createExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobCreateExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobCreateExceptionHeaders = PageBlobCreateExceptionHeaders;
    var PageBlobUploadPagesHeaders = {
      serializedName: "PageBlob_uploadPagesHeaders",
      type: {
        name: "Composite",
        className: "PageBlobUploadPagesHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobUploadPagesHeaders = PageBlobUploadPagesHeaders;
    var PageBlobUploadPagesExceptionHeaders = {
      serializedName: "PageBlob_uploadPagesExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobUploadPagesExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobUploadPagesExceptionHeaders = PageBlobUploadPagesExceptionHeaders;
    var PageBlobClearPagesHeaders = {
      serializedName: "PageBlob_clearPagesHeaders",
      type: {
        name: "Composite",
        className: "PageBlobClearPagesHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobClearPagesHeaders = PageBlobClearPagesHeaders;
    var PageBlobClearPagesExceptionHeaders = {
      serializedName: "PageBlob_clearPagesExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobClearPagesExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobClearPagesExceptionHeaders = PageBlobClearPagesExceptionHeaders;
    var PageBlobUploadPagesFromURLHeaders = {
      serializedName: "PageBlob_uploadPagesFromURLHeaders",
      type: {
        name: "Composite",
        className: "PageBlobUploadPagesFromURLHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobUploadPagesFromURLHeaders = PageBlobUploadPagesFromURLHeaders;
    var PageBlobUploadPagesFromURLExceptionHeaders = {
      serializedName: "PageBlob_uploadPagesFromURLExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobUploadPagesFromURLExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobUploadPagesFromURLExceptionHeaders = PageBlobUploadPagesFromURLExceptionHeaders;
    var PageBlobGetPageRangesHeaders = {
      serializedName: "PageBlob_getPageRangesHeaders",
      type: {
        name: "Composite",
        className: "PageBlobGetPageRangesHeaders",
        modelProperties: {
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          blobContentLength: {
            serializedName: "x-ms-blob-content-length",
            xmlName: "x-ms-blob-content-length",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobGetPageRangesHeaders = PageBlobGetPageRangesHeaders;
    var PageBlobGetPageRangesExceptionHeaders = {
      serializedName: "PageBlob_getPageRangesExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobGetPageRangesExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobGetPageRangesExceptionHeaders = PageBlobGetPageRangesExceptionHeaders;
    var PageBlobGetPageRangesDiffHeaders = {
      serializedName: "PageBlob_getPageRangesDiffHeaders",
      type: {
        name: "Composite",
        className: "PageBlobGetPageRangesDiffHeaders",
        modelProperties: {
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          blobContentLength: {
            serializedName: "x-ms-blob-content-length",
            xmlName: "x-ms-blob-content-length",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobGetPageRangesDiffHeaders = PageBlobGetPageRangesDiffHeaders;
    var PageBlobGetPageRangesDiffExceptionHeaders = {
      serializedName: "PageBlob_getPageRangesDiffExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobGetPageRangesDiffExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobGetPageRangesDiffExceptionHeaders = PageBlobGetPageRangesDiffExceptionHeaders;
    var PageBlobResizeHeaders = {
      serializedName: "PageBlob_resizeHeaders",
      type: {
        name: "Composite",
        className: "PageBlobResizeHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobResizeHeaders = PageBlobResizeHeaders;
    var PageBlobResizeExceptionHeaders = {
      serializedName: "PageBlob_resizeExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobResizeExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobResizeExceptionHeaders = PageBlobResizeExceptionHeaders;
    var PageBlobUpdateSequenceNumberHeaders = {
      serializedName: "PageBlob_updateSequenceNumberHeaders",
      type: {
        name: "Composite",
        className: "PageBlobUpdateSequenceNumberHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobUpdateSequenceNumberHeaders = PageBlobUpdateSequenceNumberHeaders;
    var PageBlobUpdateSequenceNumberExceptionHeaders = {
      serializedName: "PageBlob_updateSequenceNumberExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobUpdateSequenceNumberExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobUpdateSequenceNumberExceptionHeaders = PageBlobUpdateSequenceNumberExceptionHeaders;
    var PageBlobCopyIncrementalHeaders = {
      serializedName: "PageBlob_copyIncrementalHeaders",
      type: {
        name: "Composite",
        className: "PageBlobCopyIncrementalHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          copyId: {
            serializedName: "x-ms-copy-id",
            xmlName: "x-ms-copy-id",
            type: {
              name: "String"
            }
          },
          copyStatus: {
            serializedName: "x-ms-copy-status",
            xmlName: "x-ms-copy-status",
            type: {
              name: "Enum",
              allowedValues: ["pending", "success", "aborted", "failed"]
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobCopyIncrementalHeaders = PageBlobCopyIncrementalHeaders;
    var PageBlobCopyIncrementalExceptionHeaders = {
      serializedName: "PageBlob_copyIncrementalExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobCopyIncrementalExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.PageBlobCopyIncrementalExceptionHeaders = PageBlobCopyIncrementalExceptionHeaders;
    var AppendBlobCreateHeaders = {
      serializedName: "AppendBlob_createHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobCreateHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.AppendBlobCreateHeaders = AppendBlobCreateHeaders;
    var AppendBlobCreateExceptionHeaders = {
      serializedName: "AppendBlob_createExceptionHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobCreateExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.AppendBlobCreateExceptionHeaders = AppendBlobCreateExceptionHeaders;
    var AppendBlobAppendBlockHeaders = {
      serializedName: "AppendBlob_appendBlockHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobAppendBlockHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobAppendOffset: {
            serializedName: "x-ms-blob-append-offset",
            xmlName: "x-ms-blob-append-offset",
            type: {
              name: "String"
            }
          },
          blobCommittedBlockCount: {
            serializedName: "x-ms-blob-committed-block-count",
            xmlName: "x-ms-blob-committed-block-count",
            type: {
              name: "Number"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.AppendBlobAppendBlockHeaders = AppendBlobAppendBlockHeaders;
    var AppendBlobAppendBlockExceptionHeaders = {
      serializedName: "AppendBlob_appendBlockExceptionHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobAppendBlockExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.AppendBlobAppendBlockExceptionHeaders = AppendBlobAppendBlockExceptionHeaders;
    var AppendBlobAppendBlockFromUrlHeaders = {
      serializedName: "AppendBlob_appendBlockFromUrlHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobAppendBlockFromUrlHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobAppendOffset: {
            serializedName: "x-ms-blob-append-offset",
            xmlName: "x-ms-blob-append-offset",
            type: {
              name: "String"
            }
          },
          blobCommittedBlockCount: {
            serializedName: "x-ms-blob-committed-block-count",
            xmlName: "x-ms-blob-committed-block-count",
            type: {
              name: "Number"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.AppendBlobAppendBlockFromUrlHeaders = AppendBlobAppendBlockFromUrlHeaders;
    var AppendBlobAppendBlockFromUrlExceptionHeaders = {
      serializedName: "AppendBlob_appendBlockFromUrlExceptionHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobAppendBlockFromUrlExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.AppendBlobAppendBlockFromUrlExceptionHeaders = AppendBlobAppendBlockFromUrlExceptionHeaders;
    var AppendBlobSealHeaders = {
      serializedName: "AppendBlob_sealHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobSealHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isSealed: {
            serializedName: "x-ms-blob-sealed",
            xmlName: "x-ms-blob-sealed",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    };
    exports.AppendBlobSealHeaders = AppendBlobSealHeaders;
    var AppendBlobSealExceptionHeaders = {
      serializedName: "AppendBlob_sealExceptionHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobSealExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.AppendBlobSealExceptionHeaders = AppendBlobSealExceptionHeaders;
    var BlockBlobUploadHeaders = {
      serializedName: "BlockBlob_uploadHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobUploadHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlockBlobUploadHeaders = BlockBlobUploadHeaders;
    var BlockBlobUploadExceptionHeaders = {
      serializedName: "BlockBlob_uploadExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobUploadExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlockBlobUploadExceptionHeaders = BlockBlobUploadExceptionHeaders;
    var BlockBlobPutBlobFromUrlHeaders = {
      serializedName: "BlockBlob_putBlobFromUrlHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobPutBlobFromUrlHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlockBlobPutBlobFromUrlHeaders = BlockBlobPutBlobFromUrlHeaders;
    var BlockBlobPutBlobFromUrlExceptionHeaders = {
      serializedName: "BlockBlob_putBlobFromUrlExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobPutBlobFromUrlExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlockBlobPutBlobFromUrlExceptionHeaders = BlockBlobPutBlobFromUrlExceptionHeaders;
    var BlockBlobStageBlockHeaders = {
      serializedName: "BlockBlob_stageBlockHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobStageBlockHeaders",
        modelProperties: {
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlockBlobStageBlockHeaders = BlockBlobStageBlockHeaders;
    var BlockBlobStageBlockExceptionHeaders = {
      serializedName: "BlockBlob_stageBlockExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobStageBlockExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlockBlobStageBlockExceptionHeaders = BlockBlobStageBlockExceptionHeaders;
    var BlockBlobStageBlockFromURLHeaders = {
      serializedName: "BlockBlob_stageBlockFromURLHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobStageBlockFromURLHeaders",
        modelProperties: {
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlockBlobStageBlockFromURLHeaders = BlockBlobStageBlockFromURLHeaders;
    var BlockBlobStageBlockFromURLExceptionHeaders = {
      serializedName: "BlockBlob_stageBlockFromURLExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobStageBlockFromURLExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlockBlobStageBlockFromURLExceptionHeaders = BlockBlobStageBlockFromURLExceptionHeaders;
    var BlockBlobCommitBlockListHeaders = {
      serializedName: "BlockBlob_commitBlockListHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobCommitBlockListHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlockBlobCommitBlockListHeaders = BlockBlobCommitBlockListHeaders;
    var BlockBlobCommitBlockListExceptionHeaders = {
      serializedName: "BlockBlob_commitBlockListExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobCommitBlockListExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlockBlobCommitBlockListExceptionHeaders = BlockBlobCommitBlockListExceptionHeaders;
    var BlockBlobGetBlockListHeaders = {
      serializedName: "BlockBlob_getBlockListHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobGetBlockListHeaders",
        modelProperties: {
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          blobContentLength: {
            serializedName: "x-ms-blob-content-length",
            xmlName: "x-ms-blob-content-length",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlockBlobGetBlockListHeaders = BlockBlobGetBlockListHeaders;
    var BlockBlobGetBlockListExceptionHeaders = {
      serializedName: "BlockBlob_getBlockListExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobGetBlockListExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    exports.BlockBlobGetBlockListExceptionHeaders = BlockBlobGetBlockListExceptionHeaders;
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.multipartContentType = exports.metadata = exports.maxSize = exports.maxPageSize = exports.marker = exports.listType = exports.legalHold1 = exports.legalHold = exports.leaseId1 = exports.leaseId = exports.keyInfo = exports.include1 = exports.include = exports.immutabilityPolicyMode = exports.immutabilityPolicyExpiry = exports.ifUnmodifiedSince = exports.ifTags = exports.ifSequenceNumberLessThanOrEqualTo = exports.ifSequenceNumberLessThan = exports.ifSequenceNumberEqualTo = exports.ifNoneMatch = exports.ifModifiedSince = exports.ifMatch = exports.expiryOptions = exports.expiresOn = exports.encryptionScope = exports.encryptionKeySha256 = exports.encryptionKey = exports.encryptionAlgorithm = exports.duration = exports.delimiter = exports.deletedContainerVersion = exports.deletedContainerName = exports.deleteSnapshots = exports.defaultEncryptionScope = exports.copySourceTags = exports.copySourceBlobProperties = exports.copySourceAuthorization = exports.copySource = exports.copyId = exports.copyActionAbortConstant = exports.contentType1 = exports.contentType = exports.contentLength = exports.containerAcl = exports.comp9 = exports.comp8 = exports.comp7 = exports.comp6 = exports.comp5 = exports.comp4 = exports.comp3 = exports.comp25 = exports.comp24 = exports.comp23 = exports.comp22 = exports.comp21 = exports.comp20 = exports.comp2 = exports.comp19 = exports.comp18 = exports.comp17 = exports.comp16 = exports.comp15 = exports.comp14 = exports.comp13 = exports.comp12 = exports.comp11 = exports.comp10 = exports.comp1 = exports.comp = exports.breakPeriod = exports.body1 = exports.body = exports.blocks = exports.blockId = exports.blobType2 = exports.blobType1 = exports.blobType = exports.blobTagsString = exports.blobServiceProperties = exports.blobSequenceNumber = exports.blobDeleteType = exports.blobContentType = exports.blobContentMD5 = exports.blobContentLength = exports.blobContentLanguage = exports.blobContentEncoding = exports.blobContentDisposition = exports.blobCacheControl = exports.appendPosition = exports.action4 = exports.action3 = exports.action2 = exports.action1 = exports.action = exports.access = exports.accept2 = exports.accept1 = exports.accept = void 0;
    exports.xMsRequiresSync = exports.where = exports.versionId = exports.version = exports.url = exports.transactionalContentMD5 = exports.transactionalContentCrc64 = exports.timeoutInSeconds = exports.tier1 = exports.tier = exports.tags = exports.sourceUrl = exports.sourceRange1 = exports.sourceRange = exports.sourceLeaseId = exports.sourceIfUnmodifiedSince = exports.sourceIfTags = exports.sourceIfNoneMatch = exports.sourceIfModifiedSince = exports.sourceIfMatch = exports.sourceContentMD5 = exports.sourceContentCrc64 = exports.sourceContainerName = exports.snapshot = exports.sequenceNumberAction = exports.sealBlob = exports.restype2 = exports.restype1 = exports.restype = exports.requestId = exports.rehydratePriority = exports.rangeGetContentMD5 = exports.rangeGetContentCRC64 = exports.range1 = exports.range = exports.queryRequest = exports.proposedLeaseId1 = exports.proposedLeaseId = exports.prevsnapshot = exports.preventEncryptionScopeOverride = exports.prevSnapshotUrl = exports.prefix = exports.pageWrite1 = exports.pageWrite = void 0;

    var _coreHttp = require("@azure/core-http");

    var _mappers = require("../models/mappers");
    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */


    var contentType = {
      parameterPath: ["options", "contentType"],
      mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
          name: "String"
        }
      }
    };
    exports.contentType = contentType;
    var blobServiceProperties = {
      parameterPath: "blobServiceProperties",
      mapper: _mappers.BlobServiceProperties
    };
    exports.blobServiceProperties = blobServiceProperties;
    var accept = {
      parameterPath: "accept",
      mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Accept",
        type: {
          name: "String"
        }
      }
    };
    exports.accept = accept;
    var url = {
      parameterPath: "url",
      mapper: {
        serializedName: "url",
        required: true,
        xmlName: "url",
        type: {
          name: "String"
        }
      },
      skipEncoding: true
    };
    exports.url = url;
    var restype = {
      parameterPath: "restype",
      mapper: {
        defaultValue: "service",
        isConstant: true,
        serializedName: "restype",
        type: {
          name: "String"
        }
      }
    };
    exports.restype = restype;
    var comp = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "properties",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp = comp;
    var timeoutInSeconds = {
      parameterPath: ["options", "timeoutInSeconds"],
      mapper: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "timeout",
        xmlName: "timeout",
        type: {
          name: "Number"
        }
      }
    };
    exports.timeoutInSeconds = timeoutInSeconds;
    var version = {
      parameterPath: "version",
      mapper: {
        defaultValue: "2021-06-08",
        isConstant: true,
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    };
    exports.version = version;
    var requestId = {
      parameterPath: ["options", "requestId"],
      mapper: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      }
    };
    exports.requestId = requestId;
    var accept1 = {
      parameterPath: "accept",
      mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Accept",
        type: {
          name: "String"
        }
      }
    };
    exports.accept1 = accept1;
    var comp1 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "stats",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp1 = comp1;
    var comp2 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "list",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp2 = comp2;
    var prefix = {
      parameterPath: ["options", "prefix"],
      mapper: {
        serializedName: "prefix",
        xmlName: "prefix",
        type: {
          name: "String"
        }
      }
    };
    exports.prefix = prefix;
    var marker = {
      parameterPath: ["options", "marker"],
      mapper: {
        serializedName: "marker",
        xmlName: "marker",
        type: {
          name: "String"
        }
      }
    };
    exports.marker = marker;
    var maxPageSize = {
      parameterPath: ["options", "maxPageSize"],
      mapper: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "maxresults",
        xmlName: "maxresults",
        type: {
          name: "Number"
        }
      }
    };
    exports.maxPageSize = maxPageSize;
    var include = {
      parameterPath: ["options", "include"],
      mapper: {
        serializedName: "include",
        xmlName: "include",
        xmlElementName: "ListContainersIncludeType",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["metadata", "deleted", "system"]
            }
          }
        }
      },
      collectionFormat: _coreHttp.QueryCollectionFormat.Csv
    };
    exports.include = include;
    var keyInfo = {
      parameterPath: "keyInfo",
      mapper: _mappers.KeyInfo
    };
    exports.keyInfo = keyInfo;
    var comp3 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "userdelegationkey",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp3 = comp3;
    var restype1 = {
      parameterPath: "restype",
      mapper: {
        defaultValue: "account",
        isConstant: true,
        serializedName: "restype",
        type: {
          name: "String"
        }
      }
    };
    exports.restype1 = restype1;
    var body = {
      parameterPath: "body",
      mapper: {
        serializedName: "body",
        required: true,
        xmlName: "body",
        type: {
          name: "Stream"
        }
      }
    };
    exports.body = body;
    var comp4 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "batch",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp4 = comp4;
    var contentLength = {
      parameterPath: "contentLength",
      mapper: {
        serializedName: "Content-Length",
        required: true,
        xmlName: "Content-Length",
        type: {
          name: "Number"
        }
      }
    };
    exports.contentLength = contentLength;
    var multipartContentType = {
      parameterPath: "multipartContentType",
      mapper: {
        serializedName: "Content-Type",
        required: true,
        xmlName: "Content-Type",
        type: {
          name: "String"
        }
      }
    };
    exports.multipartContentType = multipartContentType;
    var comp5 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "blobs",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp5 = comp5;
    var where = {
      parameterPath: ["options", "where"],
      mapper: {
        serializedName: "where",
        xmlName: "where",
        type: {
          name: "String"
        }
      }
    };
    exports.where = where;
    var restype2 = {
      parameterPath: "restype",
      mapper: {
        defaultValue: "container",
        isConstant: true,
        serializedName: "restype",
        type: {
          name: "String"
        }
      }
    };
    exports.restype2 = restype2;
    var metadata = {
      parameterPath: ["options", "metadata"],
      mapper: {
        serializedName: "x-ms-meta",
        xmlName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        },
        headerCollectionPrefix: "x-ms-meta-"
      }
    };
    exports.metadata = metadata;
    var access = {
      parameterPath: ["options", "access"],
      mapper: {
        serializedName: "x-ms-blob-public-access",
        xmlName: "x-ms-blob-public-access",
        type: {
          name: "Enum",
          allowedValues: ["container", "blob"]
        }
      }
    };
    exports.access = access;
    var defaultEncryptionScope = {
      parameterPath: ["options", "containerEncryptionScope", "defaultEncryptionScope"],
      mapper: {
        serializedName: "x-ms-default-encryption-scope",
        xmlName: "x-ms-default-encryption-scope",
        type: {
          name: "String"
        }
      }
    };
    exports.defaultEncryptionScope = defaultEncryptionScope;
    var preventEncryptionScopeOverride = {
      parameterPath: ["options", "containerEncryptionScope", "preventEncryptionScopeOverride"],
      mapper: {
        serializedName: "x-ms-deny-encryption-scope-override",
        xmlName: "x-ms-deny-encryption-scope-override",
        type: {
          name: "Boolean"
        }
      }
    };
    exports.preventEncryptionScopeOverride = preventEncryptionScopeOverride;
    var leaseId = {
      parameterPath: ["options", "leaseAccessConditions", "leaseId"],
      mapper: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      }
    };
    exports.leaseId = leaseId;
    var ifModifiedSince = {
      parameterPath: ["options", "modifiedAccessConditions", "ifModifiedSince"],
      mapper: {
        serializedName: "If-Modified-Since",
        xmlName: "If-Modified-Since",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    };
    exports.ifModifiedSince = ifModifiedSince;
    var ifUnmodifiedSince = {
      parameterPath: ["options", "modifiedAccessConditions", "ifUnmodifiedSince"],
      mapper: {
        serializedName: "If-Unmodified-Since",
        xmlName: "If-Unmodified-Since",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    };
    exports.ifUnmodifiedSince = ifUnmodifiedSince;
    var comp6 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "metadata",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp6 = comp6;
    var comp7 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "acl",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp7 = comp7;
    var containerAcl = {
      parameterPath: ["options", "containerAcl"],
      mapper: {
        serializedName: "containerAcl",
        xmlName: "SignedIdentifiers",
        xmlIsWrapped: true,
        xmlElementName: "SignedIdentifier",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SignedIdentifier"
            }
          }
        }
      }
    };
    exports.containerAcl = containerAcl;
    var comp8 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "undelete",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp8 = comp8;
    var deletedContainerName = {
      parameterPath: ["options", "deletedContainerName"],
      mapper: {
        serializedName: "x-ms-deleted-container-name",
        xmlName: "x-ms-deleted-container-name",
        type: {
          name: "String"
        }
      }
    };
    exports.deletedContainerName = deletedContainerName;
    var deletedContainerVersion = {
      parameterPath: ["options", "deletedContainerVersion"],
      mapper: {
        serializedName: "x-ms-deleted-container-version",
        xmlName: "x-ms-deleted-container-version",
        type: {
          name: "String"
        }
      }
    };
    exports.deletedContainerVersion = deletedContainerVersion;
    var comp9 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "rename",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp9 = comp9;
    var sourceContainerName = {
      parameterPath: "sourceContainerName",
      mapper: {
        serializedName: "x-ms-source-container-name",
        required: true,
        xmlName: "x-ms-source-container-name",
        type: {
          name: "String"
        }
      }
    };
    exports.sourceContainerName = sourceContainerName;
    var sourceLeaseId = {
      parameterPath: ["options", "sourceLeaseId"],
      mapper: {
        serializedName: "x-ms-source-lease-id",
        xmlName: "x-ms-source-lease-id",
        type: {
          name: "String"
        }
      }
    };
    exports.sourceLeaseId = sourceLeaseId;
    var comp10 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "lease",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp10 = comp10;
    var action = {
      parameterPath: "action",
      mapper: {
        defaultValue: "acquire",
        isConstant: true,
        serializedName: "x-ms-lease-action",
        type: {
          name: "String"
        }
      }
    };
    exports.action = action;
    var duration = {
      parameterPath: ["options", "duration"],
      mapper: {
        serializedName: "x-ms-lease-duration",
        xmlName: "x-ms-lease-duration",
        type: {
          name: "Number"
        }
      }
    };
    exports.duration = duration;
    var proposedLeaseId = {
      parameterPath: ["options", "proposedLeaseId"],
      mapper: {
        serializedName: "x-ms-proposed-lease-id",
        xmlName: "x-ms-proposed-lease-id",
        type: {
          name: "String"
        }
      }
    };
    exports.proposedLeaseId = proposedLeaseId;
    var action1 = {
      parameterPath: "action",
      mapper: {
        defaultValue: "release",
        isConstant: true,
        serializedName: "x-ms-lease-action",
        type: {
          name: "String"
        }
      }
    };
    exports.action1 = action1;
    var leaseId1 = {
      parameterPath: "leaseId",
      mapper: {
        serializedName: "x-ms-lease-id",
        required: true,
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      }
    };
    exports.leaseId1 = leaseId1;
    var action2 = {
      parameterPath: "action",
      mapper: {
        defaultValue: "renew",
        isConstant: true,
        serializedName: "x-ms-lease-action",
        type: {
          name: "String"
        }
      }
    };
    exports.action2 = action2;
    var action3 = {
      parameterPath: "action",
      mapper: {
        defaultValue: "break",
        isConstant: true,
        serializedName: "x-ms-lease-action",
        type: {
          name: "String"
        }
      }
    };
    exports.action3 = action3;
    var breakPeriod = {
      parameterPath: ["options", "breakPeriod"],
      mapper: {
        serializedName: "x-ms-lease-break-period",
        xmlName: "x-ms-lease-break-period",
        type: {
          name: "Number"
        }
      }
    };
    exports.breakPeriod = breakPeriod;
    var action4 = {
      parameterPath: "action",
      mapper: {
        defaultValue: "change",
        isConstant: true,
        serializedName: "x-ms-lease-action",
        type: {
          name: "String"
        }
      }
    };
    exports.action4 = action4;
    var proposedLeaseId1 = {
      parameterPath: "proposedLeaseId",
      mapper: {
        serializedName: "x-ms-proposed-lease-id",
        required: true,
        xmlName: "x-ms-proposed-lease-id",
        type: {
          name: "String"
        }
      }
    };
    exports.proposedLeaseId1 = proposedLeaseId1;
    var include1 = {
      parameterPath: ["options", "include"],
      mapper: {
        serializedName: "include",
        xmlName: "include",
        xmlElementName: "ListBlobsIncludeItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["copy", "deleted", "metadata", "snapshots", "uncommittedblobs", "versions", "tags", "immutabilitypolicy", "legalhold", "deletedwithversions"]
            }
          }
        }
      },
      collectionFormat: _coreHttp.QueryCollectionFormat.Csv
    };
    exports.include1 = include1;
    var delimiter = {
      parameterPath: "delimiter",
      mapper: {
        serializedName: "delimiter",
        required: true,
        xmlName: "delimiter",
        type: {
          name: "String"
        }
      }
    };
    exports.delimiter = delimiter;
    var snapshot = {
      parameterPath: ["options", "snapshot"],
      mapper: {
        serializedName: "snapshot",
        xmlName: "snapshot",
        type: {
          name: "String"
        }
      }
    };
    exports.snapshot = snapshot;
    var versionId = {
      parameterPath: ["options", "versionId"],
      mapper: {
        serializedName: "versionid",
        xmlName: "versionid",
        type: {
          name: "String"
        }
      }
    };
    exports.versionId = versionId;
    var range = {
      parameterPath: ["options", "range"],
      mapper: {
        serializedName: "x-ms-range",
        xmlName: "x-ms-range",
        type: {
          name: "String"
        }
      }
    };
    exports.range = range;
    var rangeGetContentMD5 = {
      parameterPath: ["options", "rangeGetContentMD5"],
      mapper: {
        serializedName: "x-ms-range-get-content-md5",
        xmlName: "x-ms-range-get-content-md5",
        type: {
          name: "Boolean"
        }
      }
    };
    exports.rangeGetContentMD5 = rangeGetContentMD5;
    var rangeGetContentCRC64 = {
      parameterPath: ["options", "rangeGetContentCRC64"],
      mapper: {
        serializedName: "x-ms-range-get-content-crc64",
        xmlName: "x-ms-range-get-content-crc64",
        type: {
          name: "Boolean"
        }
      }
    };
    exports.rangeGetContentCRC64 = rangeGetContentCRC64;
    var encryptionKey = {
      parameterPath: ["options", "cpkInfo", "encryptionKey"],
      mapper: {
        serializedName: "x-ms-encryption-key",
        xmlName: "x-ms-encryption-key",
        type: {
          name: "String"
        }
      }
    };
    exports.encryptionKey = encryptionKey;
    var encryptionKeySha256 = {
      parameterPath: ["options", "cpkInfo", "encryptionKeySha256"],
      mapper: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      }
    };
    exports.encryptionKeySha256 = encryptionKeySha256;
    var encryptionAlgorithm = {
      parameterPath: ["options", "cpkInfo", "encryptionAlgorithm"],
      mapper: {
        serializedName: "x-ms-encryption-algorithm",
        xmlName: "x-ms-encryption-algorithm",
        type: {
          name: "String"
        }
      }
    };
    exports.encryptionAlgorithm = encryptionAlgorithm;
    var ifMatch = {
      parameterPath: ["options", "modifiedAccessConditions", "ifMatch"],
      mapper: {
        serializedName: "If-Match",
        xmlName: "If-Match",
        type: {
          name: "String"
        }
      }
    };
    exports.ifMatch = ifMatch;
    var ifNoneMatch = {
      parameterPath: ["options", "modifiedAccessConditions", "ifNoneMatch"],
      mapper: {
        serializedName: "If-None-Match",
        xmlName: "If-None-Match",
        type: {
          name: "String"
        }
      }
    };
    exports.ifNoneMatch = ifNoneMatch;
    var ifTags = {
      parameterPath: ["options", "modifiedAccessConditions", "ifTags"],
      mapper: {
        serializedName: "x-ms-if-tags",
        xmlName: "x-ms-if-tags",
        type: {
          name: "String"
        }
      }
    };
    exports.ifTags = ifTags;
    var deleteSnapshots = {
      parameterPath: ["options", "deleteSnapshots"],
      mapper: {
        serializedName: "x-ms-delete-snapshots",
        xmlName: "x-ms-delete-snapshots",
        type: {
          name: "Enum",
          allowedValues: ["include", "only"]
        }
      }
    };
    exports.deleteSnapshots = deleteSnapshots;
    var blobDeleteType = {
      parameterPath: ["options", "blobDeleteType"],
      mapper: {
        serializedName: "deletetype",
        xmlName: "deletetype",
        type: {
          name: "String"
        }
      }
    };
    exports.blobDeleteType = blobDeleteType;
    var comp11 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "expiry",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp11 = comp11;
    var expiryOptions = {
      parameterPath: "expiryOptions",
      mapper: {
        serializedName: "x-ms-expiry-option",
        required: true,
        xmlName: "x-ms-expiry-option",
        type: {
          name: "String"
        }
      }
    };
    exports.expiryOptions = expiryOptions;
    var expiresOn = {
      parameterPath: ["options", "expiresOn"],
      mapper: {
        serializedName: "x-ms-expiry-time",
        xmlName: "x-ms-expiry-time",
        type: {
          name: "String"
        }
      }
    };
    exports.expiresOn = expiresOn;
    var blobCacheControl = {
      parameterPath: ["options", "blobHttpHeaders", "blobCacheControl"],
      mapper: {
        serializedName: "x-ms-blob-cache-control",
        xmlName: "x-ms-blob-cache-control",
        type: {
          name: "String"
        }
      }
    };
    exports.blobCacheControl = blobCacheControl;
    var blobContentType = {
      parameterPath: ["options", "blobHttpHeaders", "blobContentType"],
      mapper: {
        serializedName: "x-ms-blob-content-type",
        xmlName: "x-ms-blob-content-type",
        type: {
          name: "String"
        }
      }
    };
    exports.blobContentType = blobContentType;
    var blobContentMD5 = {
      parameterPath: ["options", "blobHttpHeaders", "blobContentMD5"],
      mapper: {
        serializedName: "x-ms-blob-content-md5",
        xmlName: "x-ms-blob-content-md5",
        type: {
          name: "ByteArray"
        }
      }
    };
    exports.blobContentMD5 = blobContentMD5;
    var blobContentEncoding = {
      parameterPath: ["options", "blobHttpHeaders", "blobContentEncoding"],
      mapper: {
        serializedName: "x-ms-blob-content-encoding",
        xmlName: "x-ms-blob-content-encoding",
        type: {
          name: "String"
        }
      }
    };
    exports.blobContentEncoding = blobContentEncoding;
    var blobContentLanguage = {
      parameterPath: ["options", "blobHttpHeaders", "blobContentLanguage"],
      mapper: {
        serializedName: "x-ms-blob-content-language",
        xmlName: "x-ms-blob-content-language",
        type: {
          name: "String"
        }
      }
    };
    exports.blobContentLanguage = blobContentLanguage;
    var blobContentDisposition = {
      parameterPath: ["options", "blobHttpHeaders", "blobContentDisposition"],
      mapper: {
        serializedName: "x-ms-blob-content-disposition",
        xmlName: "x-ms-blob-content-disposition",
        type: {
          name: "String"
        }
      }
    };
    exports.blobContentDisposition = blobContentDisposition;
    var comp12 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "immutabilityPolicies",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp12 = comp12;
    var immutabilityPolicyExpiry = {
      parameterPath: ["options", "immutabilityPolicyExpiry"],
      mapper: {
        serializedName: "x-ms-immutability-policy-until-date",
        xmlName: "x-ms-immutability-policy-until-date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    };
    exports.immutabilityPolicyExpiry = immutabilityPolicyExpiry;
    var immutabilityPolicyMode = {
      parameterPath: ["options", "immutabilityPolicyMode"],
      mapper: {
        serializedName: "x-ms-immutability-policy-mode",
        xmlName: "x-ms-immutability-policy-mode",
        type: {
          name: "Enum",
          allowedValues: ["Mutable", "Unlocked", "Locked"]
        }
      }
    };
    exports.immutabilityPolicyMode = immutabilityPolicyMode;
    var comp13 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "legalhold",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp13 = comp13;
    var legalHold = {
      parameterPath: "legalHold",
      mapper: {
        serializedName: "x-ms-legal-hold",
        required: true,
        xmlName: "x-ms-legal-hold",
        type: {
          name: "Boolean"
        }
      }
    };
    exports.legalHold = legalHold;
    var encryptionScope = {
      parameterPath: ["options", "encryptionScope"],
      mapper: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      }
    };
    exports.encryptionScope = encryptionScope;
    var comp14 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "snapshot",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp14 = comp14;
    var tier = {
      parameterPath: ["options", "tier"],
      mapper: {
        serializedName: "x-ms-access-tier",
        xmlName: "x-ms-access-tier",
        type: {
          name: "Enum",
          allowedValues: ["P4", "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive"]
        }
      }
    };
    exports.tier = tier;
    var rehydratePriority = {
      parameterPath: ["options", "rehydratePriority"],
      mapper: {
        serializedName: "x-ms-rehydrate-priority",
        xmlName: "x-ms-rehydrate-priority",
        type: {
          name: "Enum",
          allowedValues: ["High", "Standard"]
        }
      }
    };
    exports.rehydratePriority = rehydratePriority;
    var sourceIfModifiedSince = {
      parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfModifiedSince"],
      mapper: {
        serializedName: "x-ms-source-if-modified-since",
        xmlName: "x-ms-source-if-modified-since",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    };
    exports.sourceIfModifiedSince = sourceIfModifiedSince;
    var sourceIfUnmodifiedSince = {
      parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfUnmodifiedSince"],
      mapper: {
        serializedName: "x-ms-source-if-unmodified-since",
        xmlName: "x-ms-source-if-unmodified-since",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    };
    exports.sourceIfUnmodifiedSince = sourceIfUnmodifiedSince;
    var sourceIfMatch = {
      parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfMatch"],
      mapper: {
        serializedName: "x-ms-source-if-match",
        xmlName: "x-ms-source-if-match",
        type: {
          name: "String"
        }
      }
    };
    exports.sourceIfMatch = sourceIfMatch;
    var sourceIfNoneMatch = {
      parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfNoneMatch"],
      mapper: {
        serializedName: "x-ms-source-if-none-match",
        xmlName: "x-ms-source-if-none-match",
        type: {
          name: "String"
        }
      }
    };
    exports.sourceIfNoneMatch = sourceIfNoneMatch;
    var sourceIfTags = {
      parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfTags"],
      mapper: {
        serializedName: "x-ms-source-if-tags",
        xmlName: "x-ms-source-if-tags",
        type: {
          name: "String"
        }
      }
    };
    exports.sourceIfTags = sourceIfTags;
    var copySource = {
      parameterPath: "copySource",
      mapper: {
        serializedName: "x-ms-copy-source",
        required: true,
        xmlName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      }
    };
    exports.copySource = copySource;
    var blobTagsString = {
      parameterPath: ["options", "blobTagsString"],
      mapper: {
        serializedName: "x-ms-tags",
        xmlName: "x-ms-tags",
        type: {
          name: "String"
        }
      }
    };
    exports.blobTagsString = blobTagsString;
    var sealBlob = {
      parameterPath: ["options", "sealBlob"],
      mapper: {
        serializedName: "x-ms-seal-blob",
        xmlName: "x-ms-seal-blob",
        type: {
          name: "Boolean"
        }
      }
    };
    exports.sealBlob = sealBlob;
    var legalHold1 = {
      parameterPath: ["options", "legalHold"],
      mapper: {
        serializedName: "x-ms-legal-hold",
        xmlName: "x-ms-legal-hold",
        type: {
          name: "Boolean"
        }
      }
    };
    exports.legalHold1 = legalHold1;
    var xMsRequiresSync = {
      parameterPath: "xMsRequiresSync",
      mapper: {
        defaultValue: "true",
        isConstant: true,
        serializedName: "x-ms-requires-sync",
        type: {
          name: "String"
        }
      }
    };
    exports.xMsRequiresSync = xMsRequiresSync;
    var sourceContentMD5 = {
      parameterPath: ["options", "sourceContentMD5"],
      mapper: {
        serializedName: "x-ms-source-content-md5",
        xmlName: "x-ms-source-content-md5",
        type: {
          name: "ByteArray"
        }
      }
    };
    exports.sourceContentMD5 = sourceContentMD5;
    var copySourceAuthorization = {
      parameterPath: ["options", "copySourceAuthorization"],
      mapper: {
        serializedName: "x-ms-copy-source-authorization",
        xmlName: "x-ms-copy-source-authorization",
        type: {
          name: "String"
        }
      }
    };
    exports.copySourceAuthorization = copySourceAuthorization;
    var copySourceTags = {
      parameterPath: ["options", "copySourceTags"],
      mapper: {
        serializedName: "x-ms-copy-source-tag-option",
        xmlName: "x-ms-copy-source-tag-option",
        type: {
          name: "Enum",
          allowedValues: ["REPLACE", "COPY"]
        }
      }
    };
    exports.copySourceTags = copySourceTags;
    var comp15 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "copy",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp15 = comp15;
    var copyActionAbortConstant = {
      parameterPath: "copyActionAbortConstant",
      mapper: {
        defaultValue: "abort",
        isConstant: true,
        serializedName: "x-ms-copy-action",
        type: {
          name: "String"
        }
      }
    };
    exports.copyActionAbortConstant = copyActionAbortConstant;
    var copyId = {
      parameterPath: "copyId",
      mapper: {
        serializedName: "copyid",
        required: true,
        xmlName: "copyid",
        type: {
          name: "String"
        }
      }
    };
    exports.copyId = copyId;
    var comp16 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "tier",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp16 = comp16;
    var tier1 = {
      parameterPath: "tier",
      mapper: {
        serializedName: "x-ms-access-tier",
        required: true,
        xmlName: "x-ms-access-tier",
        type: {
          name: "Enum",
          allowedValues: ["P4", "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive"]
        }
      }
    };
    exports.tier1 = tier1;
    var queryRequest = {
      parameterPath: ["options", "queryRequest"],
      mapper: _mappers.QueryRequest
    };
    exports.queryRequest = queryRequest;
    var comp17 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "query",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp17 = comp17;
    var comp18 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "tags",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp18 = comp18;
    var tags = {
      parameterPath: ["options", "tags"],
      mapper: _mappers.BlobTags
    };
    exports.tags = tags;
    var transactionalContentMD5 = {
      parameterPath: ["options", "transactionalContentMD5"],
      mapper: {
        serializedName: "Content-MD5",
        xmlName: "Content-MD5",
        type: {
          name: "ByteArray"
        }
      }
    };
    exports.transactionalContentMD5 = transactionalContentMD5;
    var transactionalContentCrc64 = {
      parameterPath: ["options", "transactionalContentCrc64"],
      mapper: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      }
    };
    exports.transactionalContentCrc64 = transactionalContentCrc64;
    var blobType = {
      parameterPath: "blobType",
      mapper: {
        defaultValue: "PageBlob",
        isConstant: true,
        serializedName: "x-ms-blob-type",
        type: {
          name: "String"
        }
      }
    };
    exports.blobType = blobType;
    var blobContentLength = {
      parameterPath: "blobContentLength",
      mapper: {
        serializedName: "x-ms-blob-content-length",
        required: true,
        xmlName: "x-ms-blob-content-length",
        type: {
          name: "Number"
        }
      }
    };
    exports.blobContentLength = blobContentLength;
    var blobSequenceNumber = {
      parameterPath: ["options", "blobSequenceNumber"],
      mapper: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      }
    };
    exports.blobSequenceNumber = blobSequenceNumber;
    var contentType1 = {
      parameterPath: ["options", "contentType"],
      mapper: {
        defaultValue: "application/octet-stream",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
          name: "String"
        }
      }
    };
    exports.contentType1 = contentType1;
    var body1 = {
      parameterPath: "body",
      mapper: {
        serializedName: "body",
        required: true,
        xmlName: "body",
        type: {
          name: "Stream"
        }
      }
    };
    exports.body1 = body1;
    var accept2 = {
      parameterPath: "accept",
      mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Accept",
        type: {
          name: "String"
        }
      }
    };
    exports.accept2 = accept2;
    var comp19 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "page",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp19 = comp19;
    var pageWrite = {
      parameterPath: "pageWrite",
      mapper: {
        defaultValue: "update",
        isConstant: true,
        serializedName: "x-ms-page-write",
        type: {
          name: "String"
        }
      }
    };
    exports.pageWrite = pageWrite;
    var ifSequenceNumberLessThanOrEqualTo = {
      parameterPath: ["options", "sequenceNumberAccessConditions", "ifSequenceNumberLessThanOrEqualTo"],
      mapper: {
        serializedName: "x-ms-if-sequence-number-le",
        xmlName: "x-ms-if-sequence-number-le",
        type: {
          name: "Number"
        }
      }
    };
    exports.ifSequenceNumberLessThanOrEqualTo = ifSequenceNumberLessThanOrEqualTo;
    var ifSequenceNumberLessThan = {
      parameterPath: ["options", "sequenceNumberAccessConditions", "ifSequenceNumberLessThan"],
      mapper: {
        serializedName: "x-ms-if-sequence-number-lt",
        xmlName: "x-ms-if-sequence-number-lt",
        type: {
          name: "Number"
        }
      }
    };
    exports.ifSequenceNumberLessThan = ifSequenceNumberLessThan;
    var ifSequenceNumberEqualTo = {
      parameterPath: ["options", "sequenceNumberAccessConditions", "ifSequenceNumberEqualTo"],
      mapper: {
        serializedName: "x-ms-if-sequence-number-eq",
        xmlName: "x-ms-if-sequence-number-eq",
        type: {
          name: "Number"
        }
      }
    };
    exports.ifSequenceNumberEqualTo = ifSequenceNumberEqualTo;
    var pageWrite1 = {
      parameterPath: "pageWrite",
      mapper: {
        defaultValue: "clear",
        isConstant: true,
        serializedName: "x-ms-page-write",
        type: {
          name: "String"
        }
      }
    };
    exports.pageWrite1 = pageWrite1;
    var sourceUrl = {
      parameterPath: "sourceUrl",
      mapper: {
        serializedName: "x-ms-copy-source",
        required: true,
        xmlName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      }
    };
    exports.sourceUrl = sourceUrl;
    var sourceRange = {
      parameterPath: "sourceRange",
      mapper: {
        serializedName: "x-ms-source-range",
        required: true,
        xmlName: "x-ms-source-range",
        type: {
          name: "String"
        }
      }
    };
    exports.sourceRange = sourceRange;
    var sourceContentCrc64 = {
      parameterPath: ["options", "sourceContentCrc64"],
      mapper: {
        serializedName: "x-ms-source-content-crc64",
        xmlName: "x-ms-source-content-crc64",
        type: {
          name: "ByteArray"
        }
      }
    };
    exports.sourceContentCrc64 = sourceContentCrc64;
    var range1 = {
      parameterPath: "range",
      mapper: {
        serializedName: "x-ms-range",
        required: true,
        xmlName: "x-ms-range",
        type: {
          name: "String"
        }
      }
    };
    exports.range1 = range1;
    var comp20 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "pagelist",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp20 = comp20;
    var prevsnapshot = {
      parameterPath: ["options", "prevsnapshot"],
      mapper: {
        serializedName: "prevsnapshot",
        xmlName: "prevsnapshot",
        type: {
          name: "String"
        }
      }
    };
    exports.prevsnapshot = prevsnapshot;
    var prevSnapshotUrl = {
      parameterPath: ["options", "prevSnapshotUrl"],
      mapper: {
        serializedName: "x-ms-previous-snapshot-url",
        xmlName: "x-ms-previous-snapshot-url",
        type: {
          name: "String"
        }
      }
    };
    exports.prevSnapshotUrl = prevSnapshotUrl;
    var sequenceNumberAction = {
      parameterPath: "sequenceNumberAction",
      mapper: {
        serializedName: "x-ms-sequence-number-action",
        required: true,
        xmlName: "x-ms-sequence-number-action",
        type: {
          name: "Enum",
          allowedValues: ["max", "update", "increment"]
        }
      }
    };
    exports.sequenceNumberAction = sequenceNumberAction;
    var comp21 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "incrementalcopy",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp21 = comp21;
    var blobType1 = {
      parameterPath: "blobType",
      mapper: {
        defaultValue: "AppendBlob",
        isConstant: true,
        serializedName: "x-ms-blob-type",
        type: {
          name: "String"
        }
      }
    };
    exports.blobType1 = blobType1;
    var comp22 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "appendblock",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp22 = comp22;
    var maxSize = {
      parameterPath: ["options", "appendPositionAccessConditions", "maxSize"],
      mapper: {
        serializedName: "x-ms-blob-condition-maxsize",
        xmlName: "x-ms-blob-condition-maxsize",
        type: {
          name: "Number"
        }
      }
    };
    exports.maxSize = maxSize;
    var appendPosition = {
      parameterPath: ["options", "appendPositionAccessConditions", "appendPosition"],
      mapper: {
        serializedName: "x-ms-blob-condition-appendpos",
        xmlName: "x-ms-blob-condition-appendpos",
        type: {
          name: "Number"
        }
      }
    };
    exports.appendPosition = appendPosition;
    var sourceRange1 = {
      parameterPath: ["options", "sourceRange"],
      mapper: {
        serializedName: "x-ms-source-range",
        xmlName: "x-ms-source-range",
        type: {
          name: "String"
        }
      }
    };
    exports.sourceRange1 = sourceRange1;
    var comp23 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "seal",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp23 = comp23;
    var blobType2 = {
      parameterPath: "blobType",
      mapper: {
        defaultValue: "BlockBlob",
        isConstant: true,
        serializedName: "x-ms-blob-type",
        type: {
          name: "String"
        }
      }
    };
    exports.blobType2 = blobType2;
    var copySourceBlobProperties = {
      parameterPath: ["options", "copySourceBlobProperties"],
      mapper: {
        serializedName: "x-ms-copy-source-blob-properties",
        xmlName: "x-ms-copy-source-blob-properties",
        type: {
          name: "Boolean"
        }
      }
    };
    exports.copySourceBlobProperties = copySourceBlobProperties;
    var comp24 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "block",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp24 = comp24;
    var blockId = {
      parameterPath: "blockId",
      mapper: {
        serializedName: "blockid",
        required: true,
        xmlName: "blockid",
        type: {
          name: "String"
        }
      }
    };
    exports.blockId = blockId;
    var blocks = {
      parameterPath: "blocks",
      mapper: _mappers.BlockLookupList
    };
    exports.blocks = blocks;
    var comp25 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "blocklist",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    exports.comp25 = comp25;
    var listType = {
      parameterPath: "listType",
      mapper: {
        defaultValue: "committed",
        serializedName: "blocklisttype",
        required: true,
        xmlName: "blocklisttype",
        type: {
          name: "Enum",
          allowedValues: ["committed", "uncommitted", "all"]
        }
      }
    };
    exports.listType = listType;
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "../models/mappers": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Service = void 0;

    var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

    var Mappers = _interopRequireWildcard(require("../models/mappers"));

    var Parameters = _interopRequireWildcard(require("../models/parameters"));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function (nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj.default = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /** Class representing a Service. */


    var Service = /*#__PURE__*/function () {
      /**
       * Initialize a new instance of the class Service class.
       * @param client Reference to the service client
       */
      function Service(client) {
        _classCallCheck(this, Service);

        this.client = client;
      }
      /**
       * Sets properties for a storage account's Blob service endpoint, including properties for Storage
       * Analytics and CORS (Cross-Origin Resource Sharing) rules
       * @param blobServiceProperties The StorageService properties.
       * @param options The options parameters.
       */


      _createClass(Service, [{
        key: "setProperties",
        value: function setProperties(blobServiceProperties, options) {
          var operationArguments = {
            blobServiceProperties: blobServiceProperties,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, setPropertiesOperationSpec);
        }
        /**
         * gets the properties of a storage account's Blob service, including properties for Storage Analytics
         * and CORS (Cross-Origin Resource Sharing) rules.
         * @param options The options parameters.
         */

      }, {
        key: "getProperties",
        value: function getProperties(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, getPropertiesOperationSpec);
        }
        /**
         * Retrieves statistics related to replication for the Blob service. It is only available on the
         * secondary location endpoint when read-access geo-redundant replication is enabled for the storage
         * account.
         * @param options The options parameters.
         */

      }, {
        key: "getStatistics",
        value: function getStatistics(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, getStatisticsOperationSpec);
        }
        /**
         * The List Containers Segment operation returns a list of the containers under the specified account
         * @param options The options parameters.
         */

      }, {
        key: "listContainersSegment",
        value: function listContainersSegment(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, listContainersSegmentOperationSpec);
        }
        /**
         * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
         * bearer token authentication.
         * @param keyInfo Key information
         * @param options The options parameters.
         */

      }, {
        key: "getUserDelegationKey",
        value: function getUserDelegationKey(keyInfo, options) {
          var operationArguments = {
            keyInfo: keyInfo,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, getUserDelegationKeyOperationSpec);
        }
        /**
         * Returns the sku name and account kind
         * @param options The options parameters.
         */

      }, {
        key: "getAccountInfo",
        value: function getAccountInfo(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, getAccountInfoOperationSpec);
        }
        /**
         * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
         * @param contentLength The length of the request.
         * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch
         *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>
         * @param body Initial data
         * @param options The options parameters.
         */

      }, {
        key: "submitBatch",
        value: function submitBatch(contentLength, multipartContentType, body, options) {
          var operationArguments = {
            contentLength: contentLength,
            multipartContentType: multipartContentType,
            body: body,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, submitBatchOperationSpec);
        }
        /**
         * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a
         * given search expression.  Filter blobs searches across all containers within a storage account but
         * can be scoped within the expression to a single container.
         * @param options The options parameters.
         */

      }, {
        key: "filterBlobs",
        value: function filterBlobs(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, filterBlobsOperationSpec);
        }
      }]);

      return Service;
    }(); // Operation Specifications


    exports.Service = Service;
    var xmlSerializer = new coreHttp.Serializer(Mappers,
    /* isXml */
    true);
    var setPropertiesOperationSpec = {
      path: "/",
      httpMethod: "PUT",
      responses: {
        202: {
          headersMapper: Mappers.ServiceSetPropertiesHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ServiceSetPropertiesExceptionHeaders
        }
      },
      requestBody: Parameters.blobServiceProperties,
      queryParameters: [Parameters.restype, Parameters.comp, Parameters.timeoutInSeconds],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer
    };
    var getPropertiesOperationSpec = {
      path: "/",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: Mappers.BlobServiceProperties,
          headersMapper: Mappers.ServiceGetPropertiesHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ServiceGetPropertiesExceptionHeaders
        }
      },
      queryParameters: [Parameters.restype, Parameters.comp, Parameters.timeoutInSeconds],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
      isXML: true,
      serializer: xmlSerializer
    };
    var getStatisticsOperationSpec = {
      path: "/",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: Mappers.BlobServiceStatistics,
          headersMapper: Mappers.ServiceGetStatisticsHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ServiceGetStatisticsExceptionHeaders
        }
      },
      queryParameters: [Parameters.restype, Parameters.timeoutInSeconds, Parameters.comp1],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
      isXML: true,
      serializer: xmlSerializer
    };
    var listContainersSegmentOperationSpec = {
      path: "/",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: Mappers.ListContainersSegmentResponse,
          headersMapper: Mappers.ServiceListContainersSegmentHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ServiceListContainersSegmentExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2, Parameters.prefix, Parameters.marker, Parameters.maxPageSize, Parameters.include],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
      isXML: true,
      serializer: xmlSerializer
    };
    var getUserDelegationKeyOperationSpec = {
      path: "/",
      httpMethod: "POST",
      responses: {
        200: {
          bodyMapper: Mappers.UserDelegationKey,
          headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ServiceGetUserDelegationKeyExceptionHeaders
        }
      },
      requestBody: Parameters.keyInfo,
      queryParameters: [Parameters.restype, Parameters.timeoutInSeconds, Parameters.comp3],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer
    };
    var getAccountInfoOperationSpec = {
      path: "/",
      httpMethod: "GET",
      responses: {
        200: {
          headersMapper: Mappers.ServiceGetAccountInfoHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ServiceGetAccountInfoExceptionHeaders
        }
      },
      queryParameters: [Parameters.comp, Parameters.restype1],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.accept1],
      isXML: true,
      serializer: xmlSerializer
    };
    var submitBatchOperationSpec = {
      path: "/",
      httpMethod: "POST",
      responses: {
        202: {
          bodyMapper: {
            type: {
              name: "Stream"
            },
            serializedName: "parsedResponse"
          },
          headersMapper: Mappers.ServiceSubmitBatchHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ServiceSubmitBatchExceptionHeaders
        }
      },
      requestBody: Parameters.body,
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.multipartContentType],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer
    };
    var filterBlobsOperationSpec = {
      path: "/",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: Mappers.FilterBlobSegment,
          headersMapper: Mappers.ServiceFilterBlobsHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ServiceFilterBlobsExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.comp5, Parameters.where],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
      isXML: true,
      serializer: xmlSerializer
    };
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "../models/mappers": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js",
    "../models/parameters": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Container = void 0;

    var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

    var Mappers = _interopRequireWildcard(require("../models/mappers"));

    var Parameters = _interopRequireWildcard(require("../models/parameters"));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function (nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj.default = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /** Class representing a Container. */


    var Container = /*#__PURE__*/function () {
      /**
       * Initialize a new instance of the class Container class.
       * @param client Reference to the service client
       */
      function Container(client) {
        _classCallCheck(this, Container);

        this.client = client;
      }
      /**
       * creates a new container under the specified account. If the container with the same name already
       * exists, the operation fails
       * @param options The options parameters.
       */


      _createClass(Container, [{
        key: "create",
        value: function create(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, createOperationSpec);
        }
        /**
         * returns all user-defined metadata and system properties for the specified container. The data
         * returned does not include the container's list of blobs
         * @param options The options parameters.
         */

      }, {
        key: "getProperties",
        value: function getProperties(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, getPropertiesOperationSpec);
        }
        /**
         * operation marks the specified container for deletion. The container and any blobs contained within
         * it are later deleted during garbage collection
         * @param options The options parameters.
         */

      }, {
        key: "delete",
        value: function _delete(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, deleteOperationSpec);
        }
        /**
         * operation sets one or more user-defined name-value pairs for the specified container.
         * @param options The options parameters.
         */

      }, {
        key: "setMetadata",
        value: function setMetadata(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, setMetadataOperationSpec);
        }
        /**
         * gets the permissions for the specified container. The permissions indicate whether container data
         * may be accessed publicly.
         * @param options The options parameters.
         */

      }, {
        key: "getAccessPolicy",
        value: function getAccessPolicy(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, getAccessPolicyOperationSpec);
        }
        /**
         * sets the permissions for the specified container. The permissions indicate whether blobs in a
         * container may be accessed publicly.
         * @param options The options parameters.
         */

      }, {
        key: "setAccessPolicy",
        value: function setAccessPolicy(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, setAccessPolicyOperationSpec);
        }
        /**
         * Restores a previously-deleted container.
         * @param options The options parameters.
         */

      }, {
        key: "restore",
        value: function restore(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, restoreOperationSpec);
        }
        /**
         * Renames an existing container.
         * @param sourceContainerName Required.  Specifies the name of the container to rename.
         * @param options The options parameters.
         */

      }, {
        key: "rename",
        value: function rename(sourceContainerName, options) {
          var operationArguments = {
            sourceContainerName: sourceContainerName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, renameOperationSpec);
        }
        /**
         * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
         * @param contentLength The length of the request.
         * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch
         *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>
         * @param body Initial data
         * @param options The options parameters.
         */

      }, {
        key: "submitBatch",
        value: function submitBatch(contentLength, multipartContentType, body, options) {
          var operationArguments = {
            contentLength: contentLength,
            multipartContentType: multipartContentType,
            body: body,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, submitBatchOperationSpec);
        }
        /**
         * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given
         * search expression.  Filter blobs searches within the given container.
         * @param options The options parameters.
         */

      }, {
        key: "filterBlobs",
        value: function filterBlobs(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, filterBlobsOperationSpec);
        }
        /**
         * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
         * be 15 to 60 seconds, or can be infinite
         * @param options The options parameters.
         */

      }, {
        key: "acquireLease",
        value: function acquireLease(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, acquireLeaseOperationSpec);
        }
        /**
         * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
         * be 15 to 60 seconds, or can be infinite
         * @param leaseId Specifies the current lease ID on the resource.
         * @param options The options parameters.
         */

      }, {
        key: "releaseLease",
        value: function releaseLease(leaseId, options) {
          var operationArguments = {
            leaseId: leaseId,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, releaseLeaseOperationSpec);
        }
        /**
         * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
         * be 15 to 60 seconds, or can be infinite
         * @param leaseId Specifies the current lease ID on the resource.
         * @param options The options parameters.
         */

      }, {
        key: "renewLease",
        value: function renewLease(leaseId, options) {
          var operationArguments = {
            leaseId: leaseId,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, renewLeaseOperationSpec);
        }
        /**
         * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
         * be 15 to 60 seconds, or can be infinite
         * @param options The options parameters.
         */

      }, {
        key: "breakLease",
        value: function breakLease(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, breakLeaseOperationSpec);
        }
        /**
         * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
         * be 15 to 60 seconds, or can be infinite
         * @param leaseId Specifies the current lease ID on the resource.
         * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400
         *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor
         *                        (String) for a list of valid GUID string formats.
         * @param options The options parameters.
         */

      }, {
        key: "changeLease",
        value: function changeLease(leaseId, proposedLeaseId, options) {
          var operationArguments = {
            leaseId: leaseId,
            proposedLeaseId: proposedLeaseId,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, changeLeaseOperationSpec);
        }
        /**
         * [Update] The List Blobs operation returns a list of the blobs under the specified container
         * @param options The options parameters.
         */

      }, {
        key: "listBlobFlatSegment",
        value: function listBlobFlatSegment(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, listBlobFlatSegmentOperationSpec);
        }
        /**
         * [Update] The List Blobs operation returns a list of the blobs under the specified container
         * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix
         *                  element in the response body that acts as a placeholder for all blobs whose names begin with the
         *                  same substring up to the appearance of the delimiter character. The delimiter may be a single
         *                  character or a string.
         * @param options The options parameters.
         */

      }, {
        key: "listBlobHierarchySegment",
        value: function listBlobHierarchySegment(delimiter, options) {
          var operationArguments = {
            delimiter: delimiter,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, listBlobHierarchySegmentOperationSpec);
        }
        /**
         * Returns the sku name and account kind
         * @param options The options parameters.
         */

      }, {
        key: "getAccountInfo",
        value: function getAccountInfo(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, getAccountInfoOperationSpec);
        }
      }]);

      return Container;
    }(); // Operation Specifications


    exports.Container = Container;
    var xmlSerializer = new coreHttp.Serializer(Mappers,
    /* isXml */
    true);
    var createOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.ContainerCreateHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerCreateExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.access, Parameters.defaultEncryptionScope, Parameters.preventEncryptionScopeOverride],
      isXML: true,
      serializer: xmlSerializer
    };
    var getPropertiesOperationSpec = {
      path: "/{containerName}",
      httpMethod: "GET",
      responses: {
        200: {
          headersMapper: Mappers.ContainerGetPropertiesHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerGetPropertiesExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId],
      isXML: true,
      serializer: xmlSerializer
    };
    var deleteOperationSpec = {
      path: "/{containerName}",
      httpMethod: "DELETE",
      responses: {
        202: {
          headersMapper: Mappers.ContainerDeleteHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerDeleteExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],
      isXML: true,
      serializer: xmlSerializer
    };
    var setMetadataOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.ContainerSetMetadataHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerSetMetadataExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp6],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince],
      isXML: true,
      serializer: xmlSerializer
    };
    var getAccessPolicyOperationSpec = {
      path: "/{containerName}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "SignedIdentifier"
                }
              }
            },
            serializedName: "SignedIdentifiers",
            xmlName: "SignedIdentifiers",
            xmlIsWrapped: true,
            xmlElementName: "SignedIdentifier"
          },
          headersMapper: Mappers.ContainerGetAccessPolicyHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerGetAccessPolicyExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp7],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId],
      isXML: true,
      serializer: xmlSerializer
    };
    var setAccessPolicyOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.ContainerSetAccessPolicyHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerSetAccessPolicyExceptionHeaders
        }
      },
      requestBody: Parameters.containerAcl,
      queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp7],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.access, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer
    };
    var restoreOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.ContainerRestoreHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerRestoreExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp8],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.deletedContainerName, Parameters.deletedContainerVersion],
      isXML: true,
      serializer: xmlSerializer
    };
    var renameOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.ContainerRenameHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerRenameExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp9],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.sourceContainerName, Parameters.sourceLeaseId],
      isXML: true,
      serializer: xmlSerializer
    };
    var submitBatchOperationSpec = {
      path: "/{containerName}",
      httpMethod: "POST",
      responses: {
        202: {
          bodyMapper: {
            type: {
              name: "Stream"
            },
            serializedName: "parsedResponse"
          },
          headersMapper: Mappers.ContainerSubmitBatchHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerSubmitBatchExceptionHeaders
        }
      },
      requestBody: Parameters.body,
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4, Parameters.restype2],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.multipartContentType],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer
    };
    var filterBlobsOperationSpec = {
      path: "/{containerName}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: Mappers.FilterBlobSegment,
          headersMapper: Mappers.ContainerFilterBlobsHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerFilterBlobsExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.comp5, Parameters.where, Parameters.restype2],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
      isXML: true,
      serializer: xmlSerializer
    };
    var acquireLeaseOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.ContainerAcquireLeaseHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerAcquireLeaseExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action, Parameters.duration, Parameters.proposedLeaseId],
      isXML: true,
      serializer: xmlSerializer
    };
    var releaseLeaseOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.ContainerReleaseLeaseHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerReleaseLeaseExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action1, Parameters.leaseId1],
      isXML: true,
      serializer: xmlSerializer
    };
    var renewLeaseOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.ContainerRenewLeaseHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerRenewLeaseExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action2],
      isXML: true,
      serializer: xmlSerializer
    };
    var breakLeaseOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        202: {
          headersMapper: Mappers.ContainerBreakLeaseHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerBreakLeaseExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action3, Parameters.breakPeriod],
      isXML: true,
      serializer: xmlSerializer
    };
    var changeLeaseOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.ContainerChangeLeaseHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerChangeLeaseExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action4, Parameters.proposedLeaseId1],
      isXML: true,
      serializer: xmlSerializer
    };
    var listBlobFlatSegmentOperationSpec = {
      path: "/{containerName}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: Mappers.ListBlobsFlatSegmentResponse,
          headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerListBlobFlatSegmentExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2, Parameters.prefix, Parameters.marker, Parameters.maxPageSize, Parameters.restype2, Parameters.include1],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
      isXML: true,
      serializer: xmlSerializer
    };
    var listBlobHierarchySegmentOperationSpec = {
      path: "/{containerName}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,
          headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerListBlobHierarchySegmentExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2, Parameters.prefix, Parameters.marker, Parameters.maxPageSize, Parameters.restype2, Parameters.include1, Parameters.delimiter],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
      isXML: true,
      serializer: xmlSerializer
    };
    var getAccountInfoOperationSpec = {
      path: "/{containerName}",
      httpMethod: "GET",
      responses: {
        200: {
          headersMapper: Mappers.ContainerGetAccountInfoHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.ContainerGetAccountInfoExceptionHeaders
        }
      },
      queryParameters: [Parameters.comp, Parameters.restype1],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.accept1],
      isXML: true,
      serializer: xmlSerializer
    };
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "../models/mappers": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js",
    "../models/parameters": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Blob = void 0;

    var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

    var Mappers = _interopRequireWildcard(require("../models/mappers"));

    var Parameters = _interopRequireWildcard(require("../models/parameters"));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function (nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj.default = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /** Class representing a Blob. */


    var Blob = /*#__PURE__*/function () {
      /**
       * Initialize a new instance of the class Blob class.
       * @param client Reference to the service client
       */
      function Blob(client) {
        _classCallCheck(this, Blob);

        this.client = client;
      }
      /**
       * The Download operation reads or downloads a blob from the system, including its metadata and
       * properties. You can also call Download to read a snapshot.
       * @param options The options parameters.
       */


      _createClass(Blob, [{
        key: "download",
        value: function download(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, downloadOperationSpec);
        }
        /**
         * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system
         * properties for the blob. It does not return the content of the blob.
         * @param options The options parameters.
         */

      }, {
        key: "getProperties",
        value: function getProperties(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, getPropertiesOperationSpec);
        }
        /**
         * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is
         * permanently removed from the storage account. If the storage account's soft delete feature is
         * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible
         * immediately. However, the blob service retains the blob or snapshot for the number of days specified
         * by the DeleteRetentionPolicy section of [Storage service properties]
         * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is
         * permanently removed from the storage account. Note that you continue to be charged for the
         * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the
         * "include=deleted" query parameter to discover which blobs and snapshots have been soft deleted. You
         * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a
         * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404
         * (ResourceNotFound).
         * @param options The options parameters.
         */

      }, {
        key: "delete",
        value: function _delete(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, deleteOperationSpec);
        }
        /**
         * Undelete a blob that was previously soft deleted
         * @param options The options parameters.
         */

      }, {
        key: "undelete",
        value: function undelete(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, undeleteOperationSpec);
        }
        /**
         * Sets the time a blob will expire and be deleted.
         * @param expiryOptions Required. Indicates mode of the expiry time
         * @param options The options parameters.
         */

      }, {
        key: "setExpiry",
        value: function setExpiry(expiryOptions, options) {
          var operationArguments = {
            expiryOptions: expiryOptions,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, setExpiryOperationSpec);
        }
        /**
         * The Set HTTP Headers operation sets system properties on the blob
         * @param options The options parameters.
         */

      }, {
        key: "setHttpHeaders",
        value: function setHttpHeaders(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, setHttpHeadersOperationSpec);
        }
        /**
         * The Set Immutability Policy operation sets the immutability policy on the blob
         * @param options The options parameters.
         */

      }, {
        key: "setImmutabilityPolicy",
        value: function setImmutabilityPolicy(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, setImmutabilityPolicyOperationSpec);
        }
        /**
         * The Delete Immutability Policy operation deletes the immutability policy on the blob
         * @param options The options parameters.
         */

      }, {
        key: "deleteImmutabilityPolicy",
        value: function deleteImmutabilityPolicy(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, deleteImmutabilityPolicyOperationSpec);
        }
        /**
         * The Set Legal Hold operation sets a legal hold on the blob.
         * @param legalHold Specified if a legal hold should be set on the blob.
         * @param options The options parameters.
         */

      }, {
        key: "setLegalHold",
        value: function setLegalHold(legalHold, options) {
          var operationArguments = {
            legalHold: legalHold,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, setLegalHoldOperationSpec);
        }
        /**
         * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more
         * name-value pairs
         * @param options The options parameters.
         */

      }, {
        key: "setMetadata",
        value: function setMetadata(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, setMetadataOperationSpec);
        }
        /**
         * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
         * operations
         * @param options The options parameters.
         */

      }, {
        key: "acquireLease",
        value: function acquireLease(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, acquireLeaseOperationSpec);
        }
        /**
         * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
         * operations
         * @param leaseId Specifies the current lease ID on the resource.
         * @param options The options parameters.
         */

      }, {
        key: "releaseLease",
        value: function releaseLease(leaseId, options) {
          var operationArguments = {
            leaseId: leaseId,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, releaseLeaseOperationSpec);
        }
        /**
         * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
         * operations
         * @param leaseId Specifies the current lease ID on the resource.
         * @param options The options parameters.
         */

      }, {
        key: "renewLease",
        value: function renewLease(leaseId, options) {
          var operationArguments = {
            leaseId: leaseId,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, renewLeaseOperationSpec);
        }
        /**
         * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
         * operations
         * @param leaseId Specifies the current lease ID on the resource.
         * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400
         *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor
         *                        (String) for a list of valid GUID string formats.
         * @param options The options parameters.
         */

      }, {
        key: "changeLease",
        value: function changeLease(leaseId, proposedLeaseId, options) {
          var operationArguments = {
            leaseId: leaseId,
            proposedLeaseId: proposedLeaseId,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, changeLeaseOperationSpec);
        }
        /**
         * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
         * operations
         * @param options The options parameters.
         */

      }, {
        key: "breakLease",
        value: function breakLease(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, breakLeaseOperationSpec);
        }
        /**
         * The Create Snapshot operation creates a read-only snapshot of a blob
         * @param options The options parameters.
         */

      }, {
        key: "createSnapshot",
        value: function createSnapshot(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, createSnapshotOperationSpec);
        }
        /**
         * The Start Copy From URL operation copies a blob or an internet resource to a new blob.
         * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
         *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
         *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
         *                   access signature.
         * @param options The options parameters.
         */

      }, {
        key: "startCopyFromURL",
        value: function startCopyFromURL(copySource, options) {
          var operationArguments = {
            copySource: copySource,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, startCopyFromURLOperationSpec);
        }
        /**
         * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return
         * a response until the copy is complete.
         * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
         *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
         *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
         *                   access signature.
         * @param options The options parameters.
         */

      }, {
        key: "copyFromURL",
        value: function copyFromURL(copySource, options) {
          var operationArguments = {
            copySource: copySource,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, copyFromURLOperationSpec);
        }
        /**
         * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination
         * blob with zero length and full metadata.
         * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob
         *               operation.
         * @param options The options parameters.
         */

      }, {
        key: "abortCopyFromURL",
        value: function abortCopyFromURL(copyId, options) {
          var operationArguments = {
            copyId: copyId,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, abortCopyFromURLOperationSpec);
        }
        /**
         * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium
         * storage account and on a block blob in a blob storage account (locally redundant storage only). A
         * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block
         * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's
         * ETag.
         * @param tier Indicates the tier to be set on the blob.
         * @param options The options parameters.
         */

      }, {
        key: "setTier",
        value: function setTier(tier, options) {
          var operationArguments = {
            tier: tier,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, setTierOperationSpec);
        }
        /**
         * Returns the sku name and account kind
         * @param options The options parameters.
         */

      }, {
        key: "getAccountInfo",
        value: function getAccountInfo(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, getAccountInfoOperationSpec);
        }
        /**
         * The Query operation enables users to select/project on blob data by providing simple query
         * expressions.
         * @param options The options parameters.
         */

      }, {
        key: "query",
        value: function query(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, queryOperationSpec);
        }
        /**
         * The Get Tags operation enables users to get the tags associated with a blob.
         * @param options The options parameters.
         */

      }, {
        key: "getTags",
        value: function getTags(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, getTagsOperationSpec);
        }
        /**
         * The Set Tags operation enables users to set tags on a blob.
         * @param options The options parameters.
         */

      }, {
        key: "setTags",
        value: function setTags(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, setTagsOperationSpec);
        }
      }]);

      return Blob;
    }(); // Operation Specifications


    exports.Blob = Blob;
    var xmlSerializer = new coreHttp.Serializer(Mappers,
    /* isXml */
    true);
    var downloadOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: {
            type: {
              name: "Stream"
            },
            serializedName: "parsedResponse"
          },
          headersMapper: Mappers.BlobDownloadHeaders
        },
        206: {
          bodyMapper: {
            type: {
              name: "Stream"
            },
            serializedName: "parsedResponse"
          },
          headersMapper: Mappers.BlobDownloadHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobDownloadExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.rangeGetContentMD5, Parameters.rangeGetContentCRC64, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
      isXML: true,
      serializer: xmlSerializer
    };
    var getPropertiesOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "HEAD",
      responses: {
        200: {
          headersMapper: Mappers.BlobGetPropertiesHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobGetPropertiesExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
      isXML: true,
      serializer: xmlSerializer
    };
    var deleteOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "DELETE",
      responses: {
        202: {
          headersMapper: Mappers.BlobDeleteHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobDeleteExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.blobDeleteType],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.deleteSnapshots],
      isXML: true,
      serializer: xmlSerializer
    };
    var undeleteOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.BlobUndeleteHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobUndeleteExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp8],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
      isXML: true,
      serializer: xmlSerializer
    };
    var setExpiryOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.BlobSetExpiryHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobSetExpiryExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp11],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.expiryOptions, Parameters.expiresOn],
      isXML: true,
      serializer: xmlSerializer
    };
    var setHttpHeadersOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.BlobSetHttpHeadersHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobSetHttpHeadersExceptionHeaders
        }
      },
      queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition],
      isXML: true,
      serializer: xmlSerializer
    };
    var setImmutabilityPolicyOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.BlobSetImmutabilityPolicyHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobSetImmutabilityPolicyExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifUnmodifiedSince, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode],
      isXML: true,
      serializer: xmlSerializer
    };
    var deleteImmutabilityPolicyOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "DELETE",
      responses: {
        200: {
          headersMapper: Mappers.BlobDeleteImmutabilityPolicyHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobDeleteImmutabilityPolicyExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
      isXML: true,
      serializer: xmlSerializer
    };
    var setLegalHoldOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.BlobSetLegalHoldHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobSetLegalHoldExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp13],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.legalHold],
      isXML: true,
      serializer: xmlSerializer
    };
    var setMetadataOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.BlobSetMetadataHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobSetMetadataExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp6],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope],
      isXML: true,
      serializer: xmlSerializer
    };
    var acquireLeaseOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.BlobAcquireLeaseHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobAcquireLeaseExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action, Parameters.duration, Parameters.proposedLeaseId, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
      isXML: true,
      serializer: xmlSerializer
    };
    var releaseLeaseOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.BlobReleaseLeaseHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobReleaseLeaseExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action1, Parameters.leaseId1, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
      isXML: true,
      serializer: xmlSerializer
    };
    var renewLeaseOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.BlobRenewLeaseHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobRenewLeaseExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action2, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
      isXML: true,
      serializer: xmlSerializer
    };
    var changeLeaseOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.BlobChangeLeaseHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobChangeLeaseExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action4, Parameters.proposedLeaseId1, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
      isXML: true,
      serializer: xmlSerializer
    };
    var breakLeaseOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        202: {
          headersMapper: Mappers.BlobBreakLeaseHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobBreakLeaseExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action3, Parameters.breakPeriod, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
      isXML: true,
      serializer: xmlSerializer
    };
    var createSnapshotOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.BlobCreateSnapshotHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobCreateSnapshotExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp14],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope],
      isXML: true,
      serializer: xmlSerializer
    };
    var startCopyFromURLOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        202: {
          headersMapper: Mappers.BlobStartCopyFromURLHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobStartCopyFromURLExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.tier, Parameters.rehydratePriority, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceIfTags, Parameters.copySource, Parameters.blobTagsString, Parameters.sealBlob, Parameters.legalHold1],
      isXML: true,
      serializer: xmlSerializer
    };
    var copyFromURLOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        202: {
          headersMapper: Mappers.BlobCopyFromURLHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobCopyFromURLExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.copySource, Parameters.blobTagsString, Parameters.legalHold1, Parameters.xMsRequiresSync, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.copySourceTags],
      isXML: true,
      serializer: xmlSerializer
    };
    var abortCopyFromURLOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        204: {
          headersMapper: Mappers.BlobAbortCopyFromURLHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobAbortCopyFromURLExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp15, Parameters.copyId],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.copyActionAbortConstant],
      isXML: true,
      serializer: xmlSerializer
    };
    var setTierOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.BlobSetTierHeaders
        },
        202: {
          headersMapper: Mappers.BlobSetTierHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobSetTierExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.comp16],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifTags, Parameters.rehydratePriority, Parameters.tier1],
      isXML: true,
      serializer: xmlSerializer
    };
    var getAccountInfoOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "GET",
      responses: {
        200: {
          headersMapper: Mappers.BlobGetAccountInfoHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobGetAccountInfoExceptionHeaders
        }
      },
      queryParameters: [Parameters.comp, Parameters.restype1],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.accept1],
      isXML: true,
      serializer: xmlSerializer
    };
    var queryOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "POST",
      responses: {
        200: {
          bodyMapper: {
            type: {
              name: "Stream"
            },
            serializedName: "parsedResponse"
          },
          headersMapper: Mappers.BlobQueryHeaders
        },
        206: {
          bodyMapper: {
            type: {
              name: "Stream"
            },
            serializedName: "parsedResponse"
          },
          headersMapper: Mappers.BlobQueryHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobQueryExceptionHeaders
        }
      },
      requestBody: Parameters.queryRequest,
      queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.comp17],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer
    };
    var getTagsOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: Mappers.BlobTags,
          headersMapper: Mappers.BlobGetTagsHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobGetTagsExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.comp18],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifTags],
      isXML: true,
      serializer: xmlSerializer
    };
    var setTagsOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        204: {
          headersMapper: Mappers.BlobSetTagsHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlobSetTagsExceptionHeaders
        }
      },
      requestBody: Parameters.tags,
      queryParameters: [Parameters.timeoutInSeconds, Parameters.versionId, Parameters.comp18],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.leaseId, Parameters.ifTags, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer
    };
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "../models/mappers": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js",
    "../models/parameters": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PageBlob = void 0;

    var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

    var Mappers = _interopRequireWildcard(require("../models/mappers"));

    var Parameters = _interopRequireWildcard(require("../models/parameters"));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function (nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj.default = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /** Class representing a PageBlob. */


    var PageBlob = /*#__PURE__*/function () {
      /**
       * Initialize a new instance of the class PageBlob class.
       * @param client Reference to the service client
       */
      function PageBlob(client) {
        _classCallCheck(this, PageBlob);

        this.client = client;
      }
      /**
       * The Create operation creates a new page blob.
       * @param contentLength The length of the request.
       * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The
       *                          page blob size must be aligned to a 512-byte boundary.
       * @param options The options parameters.
       */


      _createClass(PageBlob, [{
        key: "create",
        value: function create(contentLength, blobContentLength, options) {
          var operationArguments = {
            contentLength: contentLength,
            blobContentLength: blobContentLength,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, createOperationSpec);
        }
        /**
         * The Upload Pages operation writes a range of pages to a page blob
         * @param contentLength The length of the request.
         * @param body Initial data
         * @param options The options parameters.
         */

      }, {
        key: "uploadPages",
        value: function uploadPages(contentLength, body, options) {
          var operationArguments = {
            contentLength: contentLength,
            body: body,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, uploadPagesOperationSpec);
        }
        /**
         * The Clear Pages operation clears a set of pages from a page blob
         * @param contentLength The length of the request.
         * @param options The options parameters.
         */

      }, {
        key: "clearPages",
        value: function clearPages(contentLength, options) {
          var operationArguments = {
            contentLength: contentLength,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, clearPagesOperationSpec);
        }
        /**
         * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a
         * URL
         * @param sourceUrl Specify a URL to the copy source.
         * @param sourceRange Bytes of source data in the specified range. The length of this range should
         *                    match the ContentLength header and x-ms-range/Range destination range header.
         * @param contentLength The length of the request.
         * @param range The range of bytes to which the source range would be written. The range should be 512
         *              aligned and range-end is required.
         * @param options The options parameters.
         */

      }, {
        key: "uploadPagesFromURL",
        value: function uploadPagesFromURL(sourceUrl, sourceRange, contentLength, range, options) {
          var operationArguments = {
            sourceUrl: sourceUrl,
            sourceRange: sourceRange,
            contentLength: contentLength,
            range: range,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, uploadPagesFromURLOperationSpec);
        }
        /**
         * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a
         * page blob
         * @param options The options parameters.
         */

      }, {
        key: "getPageRanges",
        value: function getPageRanges(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, getPageRangesOperationSpec);
        }
        /**
         * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were
         * changed between target blob and previous snapshot.
         * @param options The options parameters.
         */

      }, {
        key: "getPageRangesDiff",
        value: function getPageRangesDiff(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, getPageRangesDiffOperationSpec);
        }
        /**
         * Resize the Blob
         * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The
         *                          page blob size must be aligned to a 512-byte boundary.
         * @param options The options parameters.
         */

      }, {
        key: "resize",
        value: function resize(blobContentLength, options) {
          var operationArguments = {
            blobContentLength: blobContentLength,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, resizeOperationSpec);
        }
        /**
         * Update the sequence number of the blob
         * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.
         *                             This property applies to page blobs only. This property indicates how the service should modify the
         *                             blob's sequence number
         * @param options The options parameters.
         */

      }, {
        key: "updateSequenceNumber",
        value: function updateSequenceNumber(sequenceNumberAction, options) {
          var operationArguments = {
            sequenceNumberAction: sequenceNumberAction,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, updateSequenceNumberOperationSpec);
        }
        /**
         * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.
         * The snapshot is copied such that only the differential changes between the previously copied
         * snapshot are transferred to the destination. The copied snapshots are complete copies of the
         * original snapshot and can be read or copied from as usual. This API is supported since REST version
         * 2016-05-31.
         * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
         *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
         *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
         *                   access signature.
         * @param options The options parameters.
         */

      }, {
        key: "copyIncremental",
        value: function copyIncremental(copySource, options) {
          var operationArguments = {
            copySource: copySource,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, copyIncrementalOperationSpec);
        }
      }]);

      return PageBlob;
    }(); // Operation Specifications


    exports.PageBlob = PageBlob;
    var xmlSerializer = new coreHttp.Serializer(Mappers,
    /* isXml */
    true);
    var serializer = new coreHttp.Serializer(Mappers,
    /* isXml */
    false);
    var createOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.PageBlobCreateHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.PageBlobCreateExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.blobTagsString, Parameters.legalHold1, Parameters.blobType, Parameters.blobContentLength, Parameters.blobSequenceNumber],
      isXML: true,
      serializer: xmlSerializer
    };
    var uploadPagesOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.PageBlobUploadPagesHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.PageBlobUploadPagesExceptionHeaders
        }
      },
      requestBody: Parameters.body1,
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2, Parameters.pageWrite, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo],
      mediaType: "binary",
      serializer: serializer
    };
    var clearPagesOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.PageBlobClearPagesHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.PageBlobClearPagesExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo, Parameters.pageWrite1],
      isXML: true,
      serializer: xmlSerializer
    };
    var uploadPagesFromURLOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.PageBlobUploadPagesFromURLHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.PageBlobUploadPagesFromURLExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.pageWrite, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo, Parameters.sourceUrl, Parameters.sourceRange, Parameters.sourceContentCrc64, Parameters.range1],
      isXML: true,
      serializer: xmlSerializer
    };
    var getPageRangesOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: Mappers.PageList,
          headersMapper: Mappers.PageBlobGetPageRangesHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.PageBlobGetPageRangesExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.snapshot, Parameters.comp20],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
      isXML: true,
      serializer: xmlSerializer
    };
    var getPageRangesDiffOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: Mappers.PageList,
          headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.PageBlobGetPageRangesDiffExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.snapshot, Parameters.comp20, Parameters.prevsnapshot],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.prevSnapshotUrl],
      isXML: true,
      serializer: xmlSerializer
    };
    var resizeOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.PageBlobResizeHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.PageBlobResizeExceptionHeaders
        }
      },
      queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.blobContentLength],
      isXML: true,
      serializer: xmlSerializer
    };
    var updateSequenceNumberOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.PageBlobUpdateSequenceNumberExceptionHeaders
        }
      },
      queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobSequenceNumber, Parameters.sequenceNumberAction],
      isXML: true,
      serializer: xmlSerializer
    };
    var copyIncrementalOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        202: {
          headersMapper: Mappers.PageBlobCopyIncrementalHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.PageBlobCopyIncrementalExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp21],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.copySource],
      isXML: true,
      serializer: xmlSerializer
    };
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "../models/mappers": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js",
    "../models/parameters": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AppendBlob = void 0;

    var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

    var Mappers = _interopRequireWildcard(require("../models/mappers"));

    var Parameters = _interopRequireWildcard(require("../models/parameters"));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function (nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj.default = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /** Class representing a AppendBlob. */


    var AppendBlob = /*#__PURE__*/function () {
      /**
       * Initialize a new instance of the class AppendBlob class.
       * @param client Reference to the service client
       */
      function AppendBlob(client) {
        _classCallCheck(this, AppendBlob);

        this.client = client;
      }
      /**
       * The Create Append Blob operation creates a new append blob.
       * @param contentLength The length of the request.
       * @param options The options parameters.
       */


      _createClass(AppendBlob, [{
        key: "create",
        value: function create(contentLength, options) {
          var operationArguments = {
            contentLength: contentLength,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, createOperationSpec);
        }
        /**
         * The Append Block operation commits a new block of data to the end of an existing append blob. The
         * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to
         * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.
         * @param contentLength The length of the request.
         * @param body Initial data
         * @param options The options parameters.
         */

      }, {
        key: "appendBlock",
        value: function appendBlock(contentLength, body, options) {
          var operationArguments = {
            contentLength: contentLength,
            body: body,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, appendBlockOperationSpec);
        }
        /**
         * The Append Block operation commits a new block of data to the end of an existing append blob where
         * the contents are read from a source url. The Append Block operation is permitted only if the blob
         * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version
         * 2015-02-21 version or later.
         * @param sourceUrl Specify a URL to the copy source.
         * @param contentLength The length of the request.
         * @param options The options parameters.
         */

      }, {
        key: "appendBlockFromUrl",
        value: function appendBlockFromUrl(sourceUrl, contentLength, options) {
          var operationArguments = {
            sourceUrl: sourceUrl,
            contentLength: contentLength,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, appendBlockFromUrlOperationSpec);
        }
        /**
         * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version
         * 2019-12-12 version or later.
         * @param options The options parameters.
         */

      }, {
        key: "seal",
        value: function seal(options) {
          var operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, sealOperationSpec);
        }
      }]);

      return AppendBlob;
    }(); // Operation Specifications


    exports.AppendBlob = AppendBlob;
    var xmlSerializer = new coreHttp.Serializer(Mappers,
    /* isXml */
    true);
    var serializer = new coreHttp.Serializer(Mappers,
    /* isXml */
    false);
    var createOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.AppendBlobCreateHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.AppendBlobCreateExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.blobTagsString, Parameters.legalHold1, Parameters.blobType1],
      isXML: true,
      serializer: xmlSerializer
    };
    var appendBlockOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.AppendBlobAppendBlockHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.AppendBlobAppendBlockExceptionHeaders
        }
      },
      requestBody: Parameters.body1,
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2, Parameters.maxSize, Parameters.appendPosition],
      mediaType: "binary",
      serializer: serializer
    };
    var appendBlockFromUrlOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.AppendBlobAppendBlockFromUrlHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.AppendBlobAppendBlockFromUrlExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.transactionalContentMD5, Parameters.sourceUrl, Parameters.sourceContentCrc64, Parameters.maxSize, Parameters.appendPosition, Parameters.sourceRange1],
      isXML: true,
      serializer: xmlSerializer
    };
    var sealOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: Mappers.AppendBlobSealHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.AppendBlobSealExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp23],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.appendPosition],
      isXML: true,
      serializer: xmlSerializer
    };
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "../models/mappers": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js",
    "../models/parameters": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BlockBlob = void 0;

    var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

    var Mappers = _interopRequireWildcard(require("../models/mappers"));

    var Parameters = _interopRequireWildcard(require("../models/parameters"));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function (nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj.default = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /** Class representing a BlockBlob. */


    var BlockBlob = /*#__PURE__*/function () {
      /**
       * Initialize a new instance of the class BlockBlob class.
       * @param client Reference to the service client
       */
      function BlockBlob(client) {
        _classCallCheck(this, BlockBlob);

        this.client = client;
      }
      /**
       * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing
       * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put
       * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a
       * partial update of the content of a block blob, use the Put Block List operation.
       * @param contentLength The length of the request.
       * @param body Initial data
       * @param options The options parameters.
       */


      _createClass(BlockBlob, [{
        key: "upload",
        value: function upload(contentLength, body, options) {
          var operationArguments = {
            contentLength: contentLength,
            body: body,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, uploadOperationSpec);
        }
        /**
         * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read
         * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are
         * not supported with Put Blob from URL; the content of an existing blob is overwritten with the
         * content of the new blob.  To perform partial updates to a block blob’s contents using a source URL,
         * use the Put Block from URL API in conjunction with Put Block List.
         * @param contentLength The length of the request.
         * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
         *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
         *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
         *                   access signature.
         * @param options The options parameters.
         */

      }, {
        key: "putBlobFromUrl",
        value: function putBlobFromUrl(contentLength, copySource, options) {
          var operationArguments = {
            contentLength: contentLength,
            copySource: copySource,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, putBlobFromUrlOperationSpec);
        }
        /**
         * The Stage Block operation creates a new block to be committed as part of a blob
         * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string
         *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified
         *                for the blockid parameter must be the same size for each block.
         * @param contentLength The length of the request.
         * @param body Initial data
         * @param options The options parameters.
         */

      }, {
        key: "stageBlock",
        value: function stageBlock(blockId, contentLength, body, options) {
          var operationArguments = {
            blockId: blockId,
            contentLength: contentLength,
            body: body,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, stageBlockOperationSpec);
        }
        /**
         * The Stage Block operation creates a new block to be committed as part of a blob where the contents
         * are read from a URL.
         * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string
         *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified
         *                for the blockid parameter must be the same size for each block.
         * @param contentLength The length of the request.
         * @param sourceUrl Specify a URL to the copy source.
         * @param options The options parameters.
         */

      }, {
        key: "stageBlockFromURL",
        value: function stageBlockFromURL(blockId, contentLength, sourceUrl, options) {
          var operationArguments = {
            blockId: blockId,
            contentLength: contentLength,
            sourceUrl: sourceUrl,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, stageBlockFromURLOperationSpec);
        }
        /**
         * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the
         * blob. In order to be written as part of a blob, a block must have been successfully written to the
         * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading
         * only those blocks that have changed, then committing the new and existing blocks together. You can
         * do this by specifying whether to commit a block from the committed block list or from the
         * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list
         * it may belong to.
         * @param blocks Blob Blocks.
         * @param options The options parameters.
         */

      }, {
        key: "commitBlockList",
        value: function commitBlockList(blocks, options) {
          var operationArguments = {
            blocks: blocks,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, commitBlockListOperationSpec);
        }
        /**
         * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block
         * blob
         * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted
         *                 blocks, or both lists together.
         * @param options The options parameters.
         */

      }, {
        key: "getBlockList",
        value: function getBlockList(listType, options) {
          var operationArguments = {
            listType: listType,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
          };
          return this.client.sendOperationRequest(operationArguments, getBlockListOperationSpec);
        }
      }]);

      return BlockBlob;
    }(); // Operation Specifications


    exports.BlockBlob = BlockBlob;
    var xmlSerializer = new coreHttp.Serializer(Mappers,
    /* isXml */
    true);
    var serializer = new coreHttp.Serializer(Mappers,
    /* isXml */
    false);
    var uploadOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.BlockBlobUploadHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlockBlobUploadExceptionHeaders
        }
      },
      requestBody: Parameters.body1,
      queryParameters: [Parameters.timeoutInSeconds],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.blobTagsString, Parameters.legalHold1, Parameters.transactionalContentMD5, Parameters.contentType1, Parameters.accept2, Parameters.blobType2],
      mediaType: "binary",
      serializer: serializer
    };
    var putBlobFromUrlOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.BlockBlobPutBlobFromUrlHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlockBlobPutBlobFromUrlExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.encryptionScope, Parameters.tier, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceIfTags, Parameters.copySource, Parameters.blobTagsString, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.copySourceTags, Parameters.transactionalContentMD5, Parameters.blobType2, Parameters.copySourceBlobProperties],
      isXML: true,
      serializer: xmlSerializer
    };
    var stageBlockOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.BlockBlobStageBlockHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlockBlobStageBlockExceptionHeaders
        }
      },
      requestBody: Parameters.body1,
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp24, Parameters.blockId],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.leaseId, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.encryptionScope, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2],
      mediaType: "binary",
      serializer: serializer
    };
    var stageBlockFromURLOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlockBlobStageBlockFromURLExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp24, Parameters.blockId],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.encryptionScope, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.sourceUrl, Parameters.sourceContentCrc64, Parameters.sourceRange1],
      isXML: true,
      serializer: xmlSerializer
    };
    var commitBlockListOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: Mappers.BlockBlobCommitBlockListHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlockBlobCommitBlockListExceptionHeaders
        }
      },
      requestBody: Parameters.blocks,
      queryParameters: [Parameters.timeoutInSeconds, Parameters.comp25],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.blobTagsString, Parameters.legalHold1, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer
    };
    var getBlockListOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: Mappers.BlockList,
          headersMapper: Mappers.BlockBlobGetBlockListHeaders
        },
        default: {
          bodyMapper: Mappers.StorageError,
          headersMapper: Mappers.BlockBlobGetBlockListExceptionHeaders
        }
      },
      queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.comp25, Parameters.listType],
      urlParameters: [Parameters.url],
      headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifTags],
      isXML: true,
      serializer: xmlSerializer
    };
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "../models/mappers": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js",
    "../models/parameters": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _service = require("./service");

    Object.keys(_service).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _service[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _service[key];
        }
      });
    });

    var _container = require("./container");

    Object.keys(_container).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _container[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _container[key];
        }
      });
    });

    var _blob = require("./blob");

    Object.keys(_blob).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _blob[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _blob[key];
        }
      });
    });

    var _pageBlob = require("./pageBlob");

    Object.keys(_pageBlob).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _pageBlob[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _pageBlob[key];
        }
      });
    });

    var _appendBlob = require("./appendBlob");

    Object.keys(_appendBlob).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _appendBlob[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _appendBlob[key];
        }
      });
    });

    var _blockBlob = require("./blockBlob");

    Object.keys(_blockBlob).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _blockBlob[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _blockBlob[key];
        }
      });
    });
  }, {
    "./service": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js",
    "./container": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js",
    "./blob": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js",
    "./pageBlob": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js",
    "./appendBlob": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js",
    "./blockBlob": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.logger = void 0;

    var _logger = require("@azure/logger"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * The `@azure/logger` configuration for this package.
     */


    var logger = (0, _logger.createClientLogger)("storage-blob");
    exports.logger = logger;
  }, {
    "@azure/logger": "../node_modules/@azure/logger/dist-esm/src/index.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.URLConstants = exports.StorageOAuthScopes = exports.StorageBlobLoggingAllowedQueryParameters = exports.StorageBlobLoggingAllowedHeaderNames = exports.SIZE_1_MB = exports.SERVICE_VERSION = exports.SDK_VERSION = exports.HeaderConstants = exports.HTTP_VERSION_1_1 = exports.HTTP_LINE_ENDING = exports.HTTPURLConnection = exports.EncryptionAlgorithmAES25 = exports.ETagNone = exports.ETagAny = exports.DevelopmentConnectionString = exports.DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = exports.DEFAULT_BLOCK_BUFFER_SIZE_BYTES = exports.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = exports.BlobUsesCustomerSpecifiedEncryptionMsg = exports.BlobDoesNotUseCustomerSpecifiedEncryption = exports.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = exports.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = exports.BLOCK_BLOB_MAX_BLOCKS = exports.BATCH_MAX_REQUEST = exports.BATCH_MAX_PAYLOAD_IN_BYTES = void 0; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    var SDK_VERSION = "12.10.0";
    exports.SDK_VERSION = SDK_VERSION;
    var SERVICE_VERSION = "2021-06-08";
    exports.SERVICE_VERSION = SERVICE_VERSION;
    var BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = 256 * 1024 * 1024; // 256MB

    exports.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;
    var BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = 4000 * 1024 * 1024; // 4000MB

    exports.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES;
    var BLOCK_BLOB_MAX_BLOCKS = 50000;
    exports.BLOCK_BLOB_MAX_BLOCKS = BLOCK_BLOB_MAX_BLOCKS;
    var DEFAULT_BLOCK_BUFFER_SIZE_BYTES = 8 * 1024 * 1024; // 8MB

    exports.DEFAULT_BLOCK_BUFFER_SIZE_BYTES = DEFAULT_BLOCK_BUFFER_SIZE_BYTES;
    var DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = 4 * 1024 * 1024; // 4MB

    exports.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
    var DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = 5;
    /**
     * The OAuth scope to use with Azure Storage.
     */

    exports.DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;
    var StorageOAuthScopes = "https://storage.azure.com/.default";
    exports.StorageOAuthScopes = StorageOAuthScopes;
    var URLConstants = {
      Parameters: {
        FORCE_BROWSER_NO_CACHE: "_",
        SIGNATURE: "sig",
        SNAPSHOT: "snapshot",
        VERSIONID: "versionid",
        TIMEOUT: "timeout"
      }
    };
    exports.URLConstants = URLConstants;
    var HTTPURLConnection = {
      HTTP_ACCEPTED: 202,
      HTTP_CONFLICT: 409,
      HTTP_NOT_FOUND: 404,
      HTTP_PRECON_FAILED: 412,
      HTTP_RANGE_NOT_SATISFIABLE: 416
    };
    exports.HTTPURLConnection = HTTPURLConnection;
    var HeaderConstants = {
      AUTHORIZATION: "Authorization",
      AUTHORIZATION_SCHEME: "Bearer",
      CONTENT_ENCODING: "Content-Encoding",
      CONTENT_ID: "Content-ID",
      CONTENT_LANGUAGE: "Content-Language",
      CONTENT_LENGTH: "Content-Length",
      CONTENT_MD5: "Content-Md5",
      CONTENT_TRANSFER_ENCODING: "Content-Transfer-Encoding",
      CONTENT_TYPE: "Content-Type",
      COOKIE: "Cookie",
      DATE: "date",
      IF_MATCH: "if-match",
      IF_MODIFIED_SINCE: "if-modified-since",
      IF_NONE_MATCH: "if-none-match",
      IF_UNMODIFIED_SINCE: "if-unmodified-since",
      PREFIX_FOR_STORAGE: "x-ms-",
      RANGE: "Range",
      USER_AGENT: "User-Agent",
      X_MS_CLIENT_REQUEST_ID: "x-ms-client-request-id",
      X_MS_COPY_SOURCE: "x-ms-copy-source",
      X_MS_DATE: "x-ms-date",
      X_MS_ERROR_CODE: "x-ms-error-code",
      X_MS_VERSION: "x-ms-version"
    };
    exports.HeaderConstants = HeaderConstants;
    var ETagNone = "";
    exports.ETagNone = ETagNone;
    var ETagAny = "*";
    exports.ETagAny = ETagAny;
    var SIZE_1_MB = 1 * 1024 * 1024;
    exports.SIZE_1_MB = SIZE_1_MB;
    var BATCH_MAX_REQUEST = 256;
    exports.BATCH_MAX_REQUEST = BATCH_MAX_REQUEST;
    var BATCH_MAX_PAYLOAD_IN_BYTES = 4 * SIZE_1_MB;
    exports.BATCH_MAX_PAYLOAD_IN_BYTES = BATCH_MAX_PAYLOAD_IN_BYTES;
    var HTTP_LINE_ENDING = "\r\n";
    exports.HTTP_LINE_ENDING = HTTP_LINE_ENDING;
    var HTTP_VERSION_1_1 = "HTTP/1.1";
    exports.HTTP_VERSION_1_1 = HTTP_VERSION_1_1;
    var EncryptionAlgorithmAES25 = "AES256";
    exports.EncryptionAlgorithmAES25 = EncryptionAlgorithmAES25;
    var DevelopmentConnectionString = "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;";
    exports.DevelopmentConnectionString = DevelopmentConnectionString;
    var StorageBlobLoggingAllowedHeaderNames = ["Access-Control-Allow-Origin", "Cache-Control", "Content-Length", "Content-Type", "Date", "Request-Id", "traceparent", "Transfer-Encoding", "User-Agent", "x-ms-client-request-id", "x-ms-date", "x-ms-error-code", "x-ms-request-id", "x-ms-return-client-request-id", "x-ms-version", "Accept-Ranges", "Content-Disposition", "Content-Encoding", "Content-Language", "Content-MD5", "Content-Range", "ETag", "Last-Modified", "Server", "Vary", "x-ms-content-crc64", "x-ms-copy-action", "x-ms-copy-completion-time", "x-ms-copy-id", "x-ms-copy-progress", "x-ms-copy-status", "x-ms-has-immutability-policy", "x-ms-has-legal-hold", "x-ms-lease-state", "x-ms-lease-status", "x-ms-range", "x-ms-request-server-encrypted", "x-ms-server-encrypted", "x-ms-snapshot", "x-ms-source-range", "If-Match", "If-Modified-Since", "If-None-Match", "If-Unmodified-Since", "x-ms-access-tier", "x-ms-access-tier-change-time", "x-ms-access-tier-inferred", "x-ms-account-kind", "x-ms-archive-status", "x-ms-blob-append-offset", "x-ms-blob-cache-control", "x-ms-blob-committed-block-count", "x-ms-blob-condition-appendpos", "x-ms-blob-condition-maxsize", "x-ms-blob-content-disposition", "x-ms-blob-content-encoding", "x-ms-blob-content-language", "x-ms-blob-content-length", "x-ms-blob-content-md5", "x-ms-blob-content-type", "x-ms-blob-public-access", "x-ms-blob-sequence-number", "x-ms-blob-type", "x-ms-copy-destination-snapshot", "x-ms-creation-time", "x-ms-default-encryption-scope", "x-ms-delete-snapshots", "x-ms-delete-type-permanent", "x-ms-deny-encryption-scope-override", "x-ms-encryption-algorithm", "x-ms-if-sequence-number-eq", "x-ms-if-sequence-number-le", "x-ms-if-sequence-number-lt", "x-ms-incremental-copy", "x-ms-lease-action", "x-ms-lease-break-period", "x-ms-lease-duration", "x-ms-lease-id", "x-ms-lease-time", "x-ms-page-write", "x-ms-proposed-lease-id", "x-ms-range-get-content-md5", "x-ms-rehydrate-priority", "x-ms-sequence-number-action", "x-ms-sku-name", "x-ms-source-content-md5", "x-ms-source-if-match", "x-ms-source-if-modified-since", "x-ms-source-if-none-match", "x-ms-source-if-unmodified-since", "x-ms-tag-count", "x-ms-encryption-key-sha256", "x-ms-if-tags", "x-ms-source-if-tags"];
    exports.StorageBlobLoggingAllowedHeaderNames = StorageBlobLoggingAllowedHeaderNames;
    var StorageBlobLoggingAllowedQueryParameters = ["comp", "maxresults", "rscc", "rscd", "rsce", "rscl", "rsct", "se", "si", "sip", "sp", "spr", "sr", "srt", "ss", "st", "sv", "include", "marker", "prefix", "copyid", "restype", "blockid", "blocklisttype", "delimiter", "prevsnapshot", "ske", "skoid", "sks", "skt", "sktid", "skv", "snapshot"];
    exports.StorageBlobLoggingAllowedQueryParameters = StorageBlobLoggingAllowedQueryParameters;
    var BlobUsesCustomerSpecifiedEncryptionMsg = "BlobUsesCustomerSpecifiedEncryption";
    exports.BlobUsesCustomerSpecifiedEncryptionMsg = BlobUsesCustomerSpecifiedEncryptionMsg;
    var BlobDoesNotUseCustomerSpecifiedEncryption = "BlobDoesNotUseCustomerSpecifiedEncryption";
    exports.BlobDoesNotUseCustomerSpecifiedEncryption = BlobDoesNotUseCustomerSpecifiedEncryption;
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js": [function (require, module, exports) {
    var define;

    var Buffer = require("buffer").Buffer;

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BlobNameToString = BlobNameToString;
    exports.ConvertInternalResponseOfListBlobFlat = ConvertInternalResponseOfListBlobFlat;
    exports.ConvertInternalResponseOfListBlobHierarchy = ConvertInternalResponseOfListBlobHierarchy;
    exports.ExtractPageRangeInfoItems = ExtractPageRangeInfoItems;
    exports.ProcessBlobItems = ProcessBlobItems;
    exports.ProcessBlobPrefixes = ProcessBlobPrefixes;
    exports.appendToURLPath = appendToURLPath;
    exports.appendToURLQuery = appendToURLQuery;
    exports.attachCredential = attachCredential;
    exports.base64decode = base64decode;
    exports.base64encode = base64encode;
    exports.delay = delay;
    exports.escapeURLPath = escapeURLPath;
    exports.extractConnectionStringParts = extractConnectionStringParts;
    exports.generateBlockID = generateBlockID;
    exports.getAccountNameFromUrl = getAccountNameFromUrl;
    exports.getURLParameter = getURLParameter;
    exports.getURLPath = getURLPath;
    exports.getURLPathAndQuery = getURLPathAndQuery;
    exports.getURLQueries = getURLQueries;
    exports.getURLScheme = getURLScheme;
    exports.getValueInConnString = getValueInConnString;
    exports.httpAuthorizationToString = httpAuthorizationToString;
    exports.iEqual = iEqual;
    exports.isIpEndpointStyle = isIpEndpointStyle;
    exports.padStart = padStart;
    exports.parseObjectReplicationRecord = parseObjectReplicationRecord;
    exports.sanitizeHeaders = sanitizeHeaders;
    exports.sanitizeURL = sanitizeURL;
    exports.setURLHost = setURLHost;
    exports.setURLParameter = setURLParameter;
    exports.toBlobTags = toBlobTags;
    exports.toBlobTagsString = toBlobTagsString;
    exports.toQuerySerialization = toQuerySerialization;
    exports.toTags = toTags;
    exports.truncatedISO8061Date = truncatedISO8061Date;

    var _coreHttp = require("@azure/core-http");

    var _constants = require("./constants");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    var _marked = /*#__PURE__*/_regeneratorRuntime().mark(ExtractPageRangeInfoItems);

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }
    /**
     * Reserved URL characters must be properly escaped for Storage services like Blob or File.
     *
     * ## URL encode and escape strategy for JS SDKs
     *
     * When customers pass a URL string into XxxClient classes constructor, the URL string may already be URL encoded or not.
     * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL
     * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.
     *
     * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.
     *
     * This is what legacy V2 SDK does, simple and works for most of the cases.
     * - When customer URL string is "http://account.blob.core.windows.net/con/b:",
     *   SDK will encode it to "http://account.blob.core.windows.net/con/b%3A" and send to server. A blob named "b:" will be created.
     * - When customer URL string is "http://account.blob.core.windows.net/con/b%3A",
     *   SDK will encode it to "http://account.blob.core.windows.net/con/b%253A" and send to server. A blob named "b%3A" will be created.
     *
     * But this strategy will make it not possible to create a blob with "?" in it's name. Because when customer URL string is
     * "http://account.blob.core.windows.net/con/blob?name", the "?name" will be treated as URL paramter instead of blob name.
     * If customer URL string is "http://account.blob.core.windows.net/con/blob%3Fname", a blob named "blob%3Fname" will be created.
     * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.
     * We cannot accept a SDK cannot create a blob name with "?". So we implement strategy two:
     *
     * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.
     *
     * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.
     * - When customer URL string is "http://account.blob.core.windows.net/con/b:",
     *   SDK will escape ":" like "http://account.blob.core.windows.net/con/b%3A" and send to server. A blob named "b:" will be created.
     * - When customer URL string is "http://account.blob.core.windows.net/con/b%3A",
     *   There is no special characters, so send "http://account.blob.core.windows.net/con/b%3A" to server. A blob named "b:" will be created.
     * - When customer URL string is "http://account.blob.core.windows.net/con/b%253A",
     *   There is no special characters, so send "http://account.blob.core.windows.net/con/b%253A" to server. A blob named "b%3A" will be created.
     *
     * This strategy gives us flexibility to create with any special characters. But "%" will be treated as a special characters, if the URL string
     * is not encoded, there shouldn't a "%" in the URL string, otherwise the URL is not a valid URL.
     * If customer needs to create a blob with "%" in it's blob name, use "%25" instead of "%". Just like above 3rd sample.
     * And following URL strings are invalid:
     * - "http://account.blob.core.windows.net/con/b%"
     * - "http://account.blob.core.windows.net/con/b%2"
     * - "http://account.blob.core.windows.net/con/b%G"
     *
     * Another special character is "?", use "%2F" to represent a blob name with "?" in a URL string.
     *
     * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`
     *
     * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata
     *
     * @param url -
     */


    function escapeURLPath(url) {
      var urlParsed = _coreHttp.URLBuilder.parse(url);

      var path = urlParsed.getPath();
      path = path || "/";
      path = escape(path);
      urlParsed.setPath(path);
      return urlParsed.toString();
    }

    function getProxyUriFromDevConnString(connectionString) {
      // Development Connection String
      // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key
      var proxyUri = "";

      if (connectionString.search("DevelopmentStorageProxyUri=") !== -1) {
        // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri
        var matchCredentials = connectionString.split(";");

        var _iterator = _createForOfIteratorHelper(matchCredentials),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var element = _step.value;

            if (element.trim().startsWith("DevelopmentStorageProxyUri=")) {
              proxyUri = element.trim().match("DevelopmentStorageProxyUri=(.*)")[1];
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return proxyUri;
    }

    function getValueInConnString(connectionString, argument) {
      var elements = connectionString.split(";");

      var _iterator2 = _createForOfIteratorHelper(elements),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var element = _step2.value;

          if (element.trim().startsWith(argument)) {
            return element.trim().match(argument + "=(.*)")[1];
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return "";
    }
    /**
     * Extracts the parts of an Azure Storage account connection string.
     *
     * @param connectionString - Connection string.
     * @returns String key value pairs of the storage account's url and credentials.
     */


    function extractConnectionStringParts(connectionString) {
      var proxyUri = "";

      if (connectionString.startsWith("UseDevelopmentStorage=true")) {
        // Development connection string
        proxyUri = getProxyUriFromDevConnString(connectionString);
        connectionString = _constants.DevelopmentConnectionString;
      } // Matching BlobEndpoint in the Account connection string


      var blobEndpoint = getValueInConnString(connectionString, "BlobEndpoint"); // Slicing off '/' at the end if exists
      // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)

      blobEndpoint = blobEndpoint.endsWith("/") ? blobEndpoint.slice(0, -1) : blobEndpoint;

      if (connectionString.search("DefaultEndpointsProtocol=") !== -1 && connectionString.search("AccountKey=") !== -1) {
        // Account connection string
        var defaultEndpointsProtocol = "";
        var accountName = "";
        var accountKey = Buffer.from("accountKey", "base64");
        var endpointSuffix = ""; // Get account name and key

        accountName = getValueInConnString(connectionString, "AccountName");
        accountKey = Buffer.from(getValueInConnString(connectionString, "AccountKey"), "base64");

        if (!blobEndpoint) {
          // BlobEndpoint is not present in the Account connection string
          // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`
          defaultEndpointsProtocol = getValueInConnString(connectionString, "DefaultEndpointsProtocol");
          var protocol = defaultEndpointsProtocol.toLowerCase();

          if (protocol !== "https" && protocol !== "http") {
            throw new Error("Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'");
          }

          endpointSuffix = getValueInConnString(connectionString, "EndpointSuffix");

          if (!endpointSuffix) {
            throw new Error("Invalid EndpointSuffix in the provided Connection String");
          }

          blobEndpoint = "".concat(defaultEndpointsProtocol, "://").concat(accountName, ".blob.").concat(endpointSuffix);
        }

        if (!accountName) {
          throw new Error("Invalid AccountName in the provided Connection String");
        } else if (accountKey.length === 0) {
          throw new Error("Invalid AccountKey in the provided Connection String");
        }

        return {
          kind: "AccountConnString",
          url: blobEndpoint,
          accountName: accountName,
          accountKey: accountKey,
          proxyUri: proxyUri
        };
      } else {
        // SAS connection string
        var accountSas = getValueInConnString(connectionString, "SharedAccessSignature");

        var _accountName = getAccountNameFromUrl(blobEndpoint);

        if (!blobEndpoint) {
          throw new Error("Invalid BlobEndpoint in the provided SAS Connection String");
        } else if (!accountSas) {
          throw new Error("Invalid SharedAccessSignature in the provided SAS Connection String");
        }

        return {
          kind: "SASConnString",
          url: blobEndpoint,
          accountName: _accountName,
          accountSas: accountSas
        };
      }
    }
    /**
     * Internal escape method implemented Strategy Two mentioned in escapeURL() description.
     *
     * @param text -
     */


    function escape(text) {
      return encodeURIComponent(text).replace(/%2F/g, "/") // Don't escape for "/"
      .replace(/'/g, "%27") // Escape for "'"
      .replace(/\+/g, "%20").replace(/%25/g, "%"); // Revert encoded "%"
    }
    /**
     * Append a string to URL path. Will remove duplicated "/" in front of the string
     * when URL path ends with a "/".
     *
     * @param url - Source URL string
     * @param name - String to be appended to URL
     * @returns An updated URL string
     */


    function appendToURLPath(url, name) {
      var urlParsed = _coreHttp.URLBuilder.parse(url);

      var path = urlParsed.getPath();
      path = path ? path.endsWith("/") ? "".concat(path).concat(name) : "".concat(path, "/").concat(name) : name;
      urlParsed.setPath(path);
      return urlParsed.toString();
    }
    /**
     * Set URL parameter name and value. If name exists in URL parameters, old value
     * will be replaced by name key. If not provide value, the parameter will be deleted.
     *
     * @param url - Source URL string
     * @param name - Parameter name
     * @param value - Parameter value
     * @returns An updated URL string
     */


    function setURLParameter(url, name, value) {
      var urlParsed = _coreHttp.URLBuilder.parse(url);

      urlParsed.setQueryParameter(name, value);
      return urlParsed.toString();
    }
    /**
     * Get URL parameter by name.
     *
     * @param url -
     * @param name -
     */


    function getURLParameter(url, name) {
      var urlParsed = _coreHttp.URLBuilder.parse(url);

      return urlParsed.getQueryParameterValue(name);
    }
    /**
     * Set URL host.
     *
     * @param url - Source URL string
     * @param host - New host string
     * @returns An updated URL string
     */


    function setURLHost(url, host) {
      var urlParsed = _coreHttp.URLBuilder.parse(url);

      urlParsed.setHost(host);
      return urlParsed.toString();
    }
    /**
     * Get URL path from an URL string.
     *
     * @param url - Source URL string
     */


    function getURLPath(url) {
      var urlParsed = _coreHttp.URLBuilder.parse(url);

      return urlParsed.getPath();
    }
    /**
     * Get URL scheme from an URL string.
     *
     * @param url - Source URL string
     */


    function getURLScheme(url) {
      var urlParsed = _coreHttp.URLBuilder.parse(url);

      return urlParsed.getScheme();
    }
    /**
     * Get URL path and query from an URL string.
     *
     * @param url - Source URL string
     */


    function getURLPathAndQuery(url) {
      var urlParsed = _coreHttp.URLBuilder.parse(url);

      var pathString = urlParsed.getPath();

      if (!pathString) {
        throw new RangeError("Invalid url without valid path.");
      }

      var queryString = urlParsed.getQuery() || "";
      queryString = queryString.trim();

      if (queryString !== "") {
        queryString = queryString.startsWith("?") ? queryString : "?".concat(queryString); // Ensure query string start with '?'
      }

      return "".concat(pathString).concat(queryString);
    }
    /**
     * Get URL query key value pairs from an URL string.
     *
     * @param url -
     */


    function getURLQueries(url) {
      var queryString = _coreHttp.URLBuilder.parse(url).getQuery();

      if (!queryString) {
        return {};
      }

      queryString = queryString.trim();
      queryString = queryString.startsWith("?") ? queryString.substr(1) : queryString;
      var querySubStrings = queryString.split("&");
      querySubStrings = querySubStrings.filter(function (value) {
        var indexOfEqual = value.indexOf("=");
        var lastIndexOfEqual = value.lastIndexOf("=");
        return indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1;
      });
      var queries = {};

      var _iterator3 = _createForOfIteratorHelper(querySubStrings),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var querySubString = _step3.value;
          var splitResults = querySubString.split("=");
          var key = splitResults[0];
          var value = splitResults[1];
          queries[key] = value;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return queries;
    }
    /**
     * Append a string to URL query.
     *
     * @param url - Source URL string.
     * @param queryParts - String to be appended to the URL query.
     * @returns An updated URL string.
     */


    function appendToURLQuery(url, queryParts) {
      var urlParsed = _coreHttp.URLBuilder.parse(url);

      var query = urlParsed.getQuery();

      if (query) {
        query += "&" + queryParts;
      } else {
        query = queryParts;
      }

      urlParsed.setQuery(query);
      return urlParsed.toString();
    }
    /**
     * Rounds a date off to seconds.
     *
     * @param date -
     * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;
     *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.
     * @returns Date string in ISO8061 format, with or without 7 milliseconds component
     */


    function truncatedISO8061Date(date) {
      var withMilliseconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true; // Date.toISOString() will return like "2018-10-29T06:34:36.139Z"

      var dateString = date.toISOString();
      return withMilliseconds ? dateString.substring(0, dateString.length - 1) + "0000" + "Z" : dateString.substring(0, dateString.length - 5) + "Z";
    }
    /**
     * Base64 encode.
     *
     * @param content -
     */


    function base64encode(content) {
      return !_coreHttp.isNode ? btoa(content) : Buffer.from(content).toString("base64");
    }
    /**
     * Base64 decode.
     *
     * @param encodedString -
     */


    function base64decode(encodedString) {
      return !_coreHttp.isNode ? atob(encodedString) : Buffer.from(encodedString, "base64").toString();
    }
    /**
     * Generate a 64 bytes base64 block ID string.
     *
     * @param blockIndex -
     */


    function generateBlockID(blockIDPrefix, blockIndex) {
      // To generate a 64 bytes base64 string, source string should be 48
      var maxSourceStringLength = 48; // A blob can have a maximum of 100,000 uncommitted blocks at any given time

      var maxBlockIndexLength = 6;
      var maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;

      if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {
        blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);
      }

      var res = blockIDPrefix + padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, "0");
      return base64encode(res);
    }
    /**
     * Delay specified time interval.
     *
     * @param timeInMs -
     * @param aborter -
     * @param abortError -
     */


    function delay(_x, _x2, _x3) {
      return _delay.apply(this, arguments);
    }
    /**
     * String.prototype.padStart()
     *
     * @param currentString -
     * @param targetLength -
     * @param padString -
     */


    function _delay() {
      _delay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(timeInMs, aborter, abortError) {
        return _regeneratorRuntime().wrap(function _callee$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", new Promise(function (resolve, reject) {
                  /* eslint-disable-next-line prefer-const */
                  var timeout;

                  var abortHandler = function abortHandler() {
                    if (timeout !== undefined) {
                      clearTimeout(timeout);
                    }

                    reject(abortError);
                  };

                  var resolveHandler = function resolveHandler() {
                    if (aborter !== undefined) {
                      aborter.removeEventListener("abort", abortHandler);
                    }

                    resolve();
                  };

                  timeout = setTimeout(resolveHandler, timeInMs);

                  if (aborter !== undefined) {
                    aborter.addEventListener("abort", abortHandler);
                  }
                }));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee);
      }));
      return _delay.apply(this, arguments);
    }

    function padStart(currentString, targetLength) {
      var padString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : " "; // @ts-expect-error: TS doesn't know this code needs to run downlevel sometimes

      if (String.prototype.padStart) {
        return currentString.padStart(targetLength, padString);
      }

      padString = padString || " ";

      if (currentString.length > targetLength) {
        return currentString;
      } else {
        targetLength = targetLength - currentString.length;

        if (targetLength > padString.length) {
          padString += padString.repeat(targetLength / padString.length);
        }

        return padString.slice(0, targetLength) + currentString;
      }
    }

    function sanitizeURL(url) {
      var safeURL = url;

      if (getURLParameter(safeURL, _constants.URLConstants.Parameters.SIGNATURE)) {
        safeURL = setURLParameter(safeURL, _constants.URLConstants.Parameters.SIGNATURE, "*****");
      }

      return safeURL;
    }

    function sanitizeHeaders(originalHeader) {
      var headers = new _coreHttp.HttpHeaders();

      var _iterator4 = _createForOfIteratorHelper(originalHeader.headersArray()),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var header = _step4.value;

          if (header.name.toLowerCase() === _constants.HeaderConstants.AUTHORIZATION.toLowerCase()) {
            headers.set(header.name, "*****");
          } else if (header.name.toLowerCase() === _constants.HeaderConstants.X_MS_COPY_SOURCE) {
            headers.set(header.name, sanitizeURL(header.value));
          } else {
            headers.set(header.name, header.value);
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return headers;
    }
    /**
     * If two strings are equal when compared case insensitive.
     *
     * @param str1 -
     * @param str2 -
     */


    function iEqual(str1, str2) {
      return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();
    }
    /**
     * Extracts account name from the url
     * @param url - url to extract the account name from
     * @returns with the account name
     */


    function getAccountNameFromUrl(url) {
      var parsedUrl = _coreHttp.URLBuilder.parse(url);

      var accountName;

      try {
        if (parsedUrl.getHost().split(".")[1] === "blob") {
          // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;
          accountName = parsedUrl.getHost().split(".")[0];
        } else if (isIpEndpointStyle(parsedUrl)) {
          // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/
          // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/
          // .getPath() -> /devstoreaccount1/
          accountName = parsedUrl.getPath().split("/")[1];
        } else {
          // Custom domain case: "https://customdomain.com/containername/blob".
          accountName = "";
        }

        return accountName;
      } catch (error) {
        throw new Error("Unable to extract accountName with provided information.");
      }
    }

    function isIpEndpointStyle(parsedUrl) {
      if (parsedUrl.getHost() === undefined) {
        return false;
      }

      var host = parsedUrl.getHost() + (parsedUrl.getPort() === undefined ? "" : ":" + parsedUrl.getPort()); // Case 1: Ipv6, use a broad regex to find out candidates whose host contains two ':'.
      // Case 2: localhost(:port), use broad regex to match port part.
      // Case 3: Ipv4, use broad regex which just check if host contains Ipv4.
      // For valid host please refer to https://man7.org/linux/man-pages/man7/hostname.7.html.

      return /^.*:.*:.*$|^localhost(:[0-9]+)?$|^(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])(\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])){3}(:[0-9]+)?$/.test(host);
    }
    /**
     * Convert Tags to encoded string.
     *
     * @param tags -
     */


    function toBlobTagsString(tags) {
      if (tags === undefined) {
        return undefined;
      }

      var tagPairs = [];

      for (var key in tags) {
        if (Object.prototype.hasOwnProperty.call(tags, key)) {
          var value = tags[key];
          tagPairs.push("".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(value)));
        }
      }

      return tagPairs.join("&");
    }
    /**
     * Convert Tags type to BlobTags.
     *
     * @param tags -
     */


    function toBlobTags(tags) {
      if (tags === undefined) {
        return undefined;
      }

      var res = {
        blobTagSet: []
      };

      for (var key in tags) {
        if (Object.prototype.hasOwnProperty.call(tags, key)) {
          var value = tags[key];
          res.blobTagSet.push({
            key: key,
            value: value
          });
        }
      }

      return res;
    }
    /**
     * Covert BlobTags to Tags type.
     *
     * @param tags -
     */


    function toTags(tags) {
      if (tags === undefined) {
        return undefined;
      }

      var res = {};

      var _iterator5 = _createForOfIteratorHelper(tags.blobTagSet),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var blobTag = _step5.value;
          res[blobTag.key] = blobTag.value;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return res;
    }
    /**
     * Convert BlobQueryTextConfiguration to QuerySerialization type.
     *
     * @param textConfiguration -
     */


    function toQuerySerialization(textConfiguration) {
      if (textConfiguration === undefined) {
        return undefined;
      }

      switch (textConfiguration.kind) {
        case "csv":
          return {
            format: {
              type: "delimited",
              delimitedTextConfiguration: {
                columnSeparator: textConfiguration.columnSeparator || ",",
                fieldQuote: textConfiguration.fieldQuote || "",
                recordSeparator: textConfiguration.recordSeparator,
                escapeChar: textConfiguration.escapeCharacter || "",
                headersPresent: textConfiguration.hasHeaders || false
              }
            }
          };

        case "json":
          return {
            format: {
              type: "json",
              jsonTextConfiguration: {
                recordSeparator: textConfiguration.recordSeparator
              }
            }
          };

        case "arrow":
          return {
            format: {
              type: "arrow",
              arrowConfiguration: {
                schema: textConfiguration.schema
              }
            }
          };

        case "parquet":
          return {
            format: {
              type: "parquet"
            }
          };

        default:
          throw Error("Invalid BlobQueryTextConfiguration.");
      }
    }

    function parseObjectReplicationRecord(objectReplicationRecord) {
      if (!objectReplicationRecord) {
        return undefined;
      }

      if ("policy-id" in objectReplicationRecord) {
        // If the dictionary contains a key with policy id, we are not required to do any parsing since
        // the policy id should already be stored in the ObjectReplicationDestinationPolicyId.
        return undefined;
      }

      var orProperties = [];

      var _loop = function _loop(key) {
        var ids = key.split("_");
        var policyPrefix = "or-";

        if (ids[0].startsWith(policyPrefix)) {
          ids[0] = ids[0].substring(policyPrefix.length);
        }

        var rule = {
          ruleId: ids[1],
          replicationStatus: objectReplicationRecord[key]
        };
        var policyIndex = orProperties.findIndex(function (policy) {
          return policy.policyId === ids[0];
        });

        if (policyIndex > -1) {
          orProperties[policyIndex].rules.push(rule);
        } else {
          orProperties.push({
            policyId: ids[0],
            rules: [rule]
          });
        }
      };

      for (var key in objectReplicationRecord) {
        _loop(key);
      }

      return orProperties;
    }
    /**
     * Attach a TokenCredential to an object.
     *
     * @param thing -
     * @param credential -
     */


    function attachCredential(thing, credential) {
      thing.credential = credential;
      return thing;
    }

    function httpAuthorizationToString(httpAuthorization) {
      return httpAuthorization ? httpAuthorization.scheme + " " + httpAuthorization.value : undefined;
    }

    function BlobNameToString(name) {
      if (name.encoded) {
        return decodeURIComponent(name.content);
      } else {
        return name.content;
      }
    }

    function ConvertInternalResponseOfListBlobFlat(internalResponse) {
      return Object.assign(Object.assign({}, internalResponse), {
        segment: {
          blobItems: internalResponse.segment.blobItems.map(function (blobItemInteral) {
            var blobItem = Object.assign(Object.assign({}, blobItemInteral), {
              name: BlobNameToString(blobItemInteral.name)
            });
            return blobItem;
          })
        }
      });
    }

    function ConvertInternalResponseOfListBlobHierarchy(internalResponse) {
      var _a;

      return Object.assign(Object.assign({}, internalResponse), {
        segment: {
          blobPrefixes: (_a = internalResponse.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map(function (blobPrefixInternal) {
            var blobPrefix = {
              name: BlobNameToString(blobPrefixInternal.name)
            };
            return blobPrefix;
          }),
          blobItems: internalResponse.segment.blobItems.map(function (blobItemInteral) {
            var blobItem = Object.assign(Object.assign({}, blobItemInteral), {
              name: BlobNameToString(blobItemInteral.name)
            });
            return blobItem;
          })
        }
      });
    }

    function decodeBase64String(value) {
      if (_coreHttp.isNode) {
        return Buffer.from(value, "base64");
      } else {
        var byteString = atob(value);
        var arr = new Uint8Array(byteString.length);

        for (var i = 0; i < byteString.length; i++) {
          arr[i] = byteString.charCodeAt(i);
        }

        return arr;
      }
    }

    function ParseBoolean(content) {
      if (content === undefined) return undefined;
      if (content === "true") return true;
      if (content === "false") return false;
      return undefined;
    }

    function ParseBlobName(blobNameInXML) {
      if (blobNameInXML["$"] !== undefined && blobNameInXML["#"] !== undefined) {
        return {
          encoded: ParseBoolean(blobNameInXML["$"]["Encoded"]),
          content: blobNameInXML["#"]
        };
      } else {
        return {
          encoded: false,
          content: blobNameInXML
        };
      }
    }

    function ParseBlobProperties(blobPropertiesInXML) {
      var blobProperties = blobPropertiesInXML;

      if (blobPropertiesInXML["Creation-Time"]) {
        blobProperties.createdOn = new Date(blobPropertiesInXML["Creation-Time"]);
        delete blobProperties["Creation-Time"];
      }

      if (blobPropertiesInXML["Last-Modified"]) {
        blobProperties.lastModified = new Date(blobPropertiesInXML["Last-Modified"]);
        delete blobProperties["Last-Modified"];
      }

      if (blobPropertiesInXML["Etag"]) {
        blobProperties.etag = blobPropertiesInXML["Etag"];
        delete blobProperties["Etag"];
      }

      if (blobPropertiesInXML["Content-Length"]) {
        blobProperties.contentLength = parseFloat(blobPropertiesInXML["Content-Length"]);
        delete blobProperties["Content-Length"];
      }

      if (blobPropertiesInXML["Content-Type"]) {
        blobProperties.contentType = blobPropertiesInXML["Content-Type"];
        delete blobProperties["Content-Type"];
      }

      if (blobPropertiesInXML["Content-Encoding"]) {
        blobProperties.contentEncoding = blobPropertiesInXML["Content-Encoding"];
        delete blobProperties["Content-Encoding"];
      }

      if (blobPropertiesInXML["Content-Language"]) {
        blobProperties.contentLanguage = blobPropertiesInXML["Content-Language"];
        delete blobProperties["Content-Language"];
      }

      if (blobPropertiesInXML["Content-MD5"]) {
        blobProperties.contentMD5 = decodeBase64String(blobPropertiesInXML["Content-MD5"]);
        delete blobProperties["Content-MD5"];
      }

      if (blobPropertiesInXML["Content-Disposition"]) {
        blobProperties.contentDisposition = blobPropertiesInXML["Content-Disposition"];
        delete blobProperties["Content-Disposition"];
      }

      if (blobPropertiesInXML["Cache-Control"]) {
        blobProperties.cacheControl = blobPropertiesInXML["Cache-Control"];
        delete blobProperties["Cache-Control"];
      }

      if (blobPropertiesInXML["x-ms-blob-sequence-number"]) {
        blobProperties.blobSequenceNumber = parseFloat(blobPropertiesInXML["x-ms-blob-sequence-number"]);
        delete blobProperties["x-ms-blob-sequence-number"];
      }

      if (blobPropertiesInXML["BlobType"]) {
        blobProperties.blobType = blobPropertiesInXML["BlobType"];
        delete blobProperties["BlobType"];
      }

      if (blobPropertiesInXML["LeaseStatus"]) {
        blobProperties.leaseStatus = blobPropertiesInXML["LeaseStatus"];
        delete blobProperties["LeaseStatus"];
      }

      if (blobPropertiesInXML["LeaseState"]) {
        blobProperties.leaseState = blobPropertiesInXML["LeaseState"];
        delete blobProperties["LeaseState"];
      }

      if (blobPropertiesInXML["LeaseDuration"]) {
        blobProperties.leaseDuration = blobPropertiesInXML["LeaseDuration"];
        delete blobProperties["LeaseDuration"];
      }

      if (blobPropertiesInXML["CopyId"]) {
        blobProperties.copyId = blobPropertiesInXML["CopyId"];
        delete blobProperties["CopyId"];
      }

      if (blobPropertiesInXML["CopyStatus"]) {
        blobProperties.copyStatus = blobPropertiesInXML["CopyStatus"];
        delete blobProperties["CopyStatus"];
      }

      if (blobPropertiesInXML["CopySource"]) {
        blobProperties.copySource = blobPropertiesInXML["CopySource"];
        delete blobProperties["CopySource"];
      }

      if (blobPropertiesInXML["CopyProgress"]) {
        blobProperties.copyProgress = blobPropertiesInXML["CopyProgress"];
        delete blobProperties["CopyProgress"];
      }

      if (blobPropertiesInXML["CopyCompletionTime"]) {
        blobProperties.copyCompletedOn = new Date(blobPropertiesInXML["CopyCompletionTime"]);
        delete blobProperties["CopyCompletionTime"];
      }

      if (blobPropertiesInXML["CopyStatusDescription"]) {
        blobProperties.copyStatusDescription = blobPropertiesInXML["CopyStatusDescription"];
        delete blobProperties["CopyStatusDescription"];
      }

      if (blobPropertiesInXML["ServerEncrypted"]) {
        blobProperties.serverEncrypted = ParseBoolean(blobPropertiesInXML["ServerEncrypted"]);
        delete blobProperties["ServerEncrypted"];
      }

      if (blobPropertiesInXML["IncrementalCopy"]) {
        blobProperties.incrementalCopy = ParseBoolean(blobPropertiesInXML["IncrementalCopy"]);
        delete blobProperties["IncrementalCopy"];
      }

      if (blobPropertiesInXML["DestinationSnapshot"]) {
        blobProperties.destinationSnapshot = blobPropertiesInXML["DestinationSnapshot"];
        delete blobProperties["DestinationSnapshot"];
      }

      if (blobPropertiesInXML["DeletedTime"]) {
        blobProperties.deletedOn = new Date(blobPropertiesInXML["DeletedTime"]);
        delete blobProperties["DeletedTime"];
      }

      if (blobPropertiesInXML["RemainingRetentionDays"]) {
        blobProperties.remainingRetentionDays = parseFloat(blobPropertiesInXML["RemainingRetentionDays"]);
        delete blobProperties["RemainingRetentionDays"];
      }

      if (blobPropertiesInXML["AccessTier"]) {
        blobProperties.accessTier = blobPropertiesInXML["AccessTier"];
        delete blobProperties["AccessTier"];
      }

      if (blobPropertiesInXML["AccessTierInferred"]) {
        blobProperties.accessTierInferred = ParseBoolean(blobPropertiesInXML["AccessTierInferred"]);
        delete blobProperties["AccessTierInferred"];
      }

      if (blobPropertiesInXML["ArchiveStatus"]) {
        blobProperties.archiveStatus = blobPropertiesInXML["ArchiveStatus"];
        delete blobProperties["ArchiveStatus"];
      }

      if (blobPropertiesInXML["CustomerProvidedKeySha256"]) {
        blobProperties.customerProvidedKeySha256 = blobPropertiesInXML["CustomerProvidedKeySha256"];
        delete blobProperties["CustomerProvidedKeySha256"];
      }

      if (blobPropertiesInXML["EncryptionScope"]) {
        blobProperties.encryptionScope = blobPropertiesInXML["EncryptionScope"];
        delete blobProperties["EncryptionScope"];
      }

      if (blobPropertiesInXML["AccessTierChangeTime"]) {
        blobProperties.accessTierChangedOn = new Date(blobPropertiesInXML["AccessTierChangeTime"]);
        delete blobProperties["AccessTierChangeTime"];
      }

      if (blobPropertiesInXML["TagCount"]) {
        blobProperties.tagCount = parseFloat(blobPropertiesInXML["TagCount"]);
        delete blobProperties["TagCount"];
      }

      if (blobPropertiesInXML["Expiry-Time"]) {
        blobProperties.expiresOn = new Date(blobPropertiesInXML["Expiry-Time"]);
        delete blobProperties["Expiry-Time"];
      }

      if (blobPropertiesInXML["Sealed"]) {
        blobProperties.isSealed = ParseBoolean(blobPropertiesInXML["Sealed"]);
        delete blobProperties["Sealed"];
      }

      if (blobPropertiesInXML["RehydratePriority"]) {
        blobProperties.rehydratePriority = blobPropertiesInXML["RehydratePriority"];
        delete blobProperties["RehydratePriority"];
      }

      if (blobPropertiesInXML["LastAccessTime"]) {
        blobProperties.lastAccessedOn = new Date(blobPropertiesInXML["LastAccessTime"]);
        delete blobProperties["LastAccessTime"];
      }

      if (blobPropertiesInXML["ImmutabilityPolicyUntilDate"]) {
        blobProperties.immutabilityPolicyExpiresOn = new Date(blobPropertiesInXML["ImmutabilityPolicyUntilDate"]);
        delete blobProperties["ImmutabilityPolicyUntilDate"];
      }

      if (blobPropertiesInXML["ImmutabilityPolicyMode"]) {
        blobProperties.immutabilityPolicyMode = blobPropertiesInXML["ImmutabilityPolicyMode"];
        delete blobProperties["ImmutabilityPolicyMode"];
      }

      if (blobPropertiesInXML["LegalHold"]) {
        blobProperties.legalHold = ParseBoolean(blobPropertiesInXML["LegalHold"]);
        delete blobProperties["LegalHold"];
      }

      return blobProperties;
    }

    function ParseBlobItem(blobInXML) {
      var blobItem = blobInXML;
      blobItem.properties = ParseBlobProperties(blobInXML["Properties"]);
      delete blobItem["Properties"];
      blobItem.name = ParseBlobName(blobInXML["Name"]);
      delete blobItem["Name"];
      blobItem.deleted = ParseBoolean(blobInXML["Deleted"]);
      delete blobItem["Deleted"];

      if (blobInXML["Snapshot"]) {
        blobItem.snapshot = blobInXML["Snapshot"];
        delete blobItem["Snapshot"];
      }

      if (blobInXML["VersionId"]) {
        blobItem.versionId = blobInXML["VersionId"];
        delete blobItem["VersionId"];
      }

      if (blobInXML["IsCurrentVersion"]) {
        blobItem.isCurrentVersion = ParseBoolean(blobInXML["IsCurrentVersion"]);
        delete blobItem["IsCurrentVersion"];
      }

      if (blobInXML["Metadata"]) {
        blobItem.metadata = blobInXML["Metadata"];
        delete blobItem["Metadata"];
      }

      if (blobInXML["Tags"]) {
        blobItem.blobTags = ParseBlobTags(blobInXML["Tags"]);
        delete blobItem["Tags"];
      }

      if (blobInXML["OrMetadata"]) {
        blobItem.objectReplicationMetadata = blobInXML["OrMetadata"];
        delete blobItem["OrMetadata"];
      }

      if (blobInXML["HasVersionsOnly"]) {
        blobItem.hasVersionsOnly = ParseBoolean(blobInXML["HasVersionsOnly"]);
        delete blobItem["HasVersionsOnly"];
      }

      return blobItem;
    }

    function ParseBlobPrefix(blobPrefixInXML) {
      return {
        name: ParseBlobName(blobPrefixInXML["Name"])
      };
    }

    function ParseBlobTag(blobTagInXML) {
      return {
        key: blobTagInXML["Key"],
        value: blobTagInXML["Value"]
      };
    }

    function ParseBlobTags(blobTagsInXML) {
      if (blobTagsInXML === undefined || blobTagsInXML["TagSet"] === undefined || blobTagsInXML["TagSet"]["Tag"] === undefined) {
        return undefined;
      }

      var blobTagSet = [];

      if (blobTagsInXML["TagSet"]["Tag"] instanceof Array) {
        blobTagsInXML["TagSet"]["Tag"].forEach(function (blobTagInXML) {
          blobTagSet.push(ParseBlobTag(blobTagInXML));
        });
      } else {
        blobTagSet.push(ParseBlobTag(blobTagsInXML["TagSet"]["Tag"]));
      }

      return {
        blobTagSet: blobTagSet
      };
    }

    function ProcessBlobItems(blobArrayInXML) {
      var blobItems = [];

      if (blobArrayInXML instanceof Array) {
        blobArrayInXML.forEach(function (blobInXML) {
          blobItems.push(ParseBlobItem(blobInXML));
        });
      } else {
        blobItems.push(ParseBlobItem(blobArrayInXML));
      }

      return blobItems;
    }

    function ProcessBlobPrefixes(blobPrefixesInXML) {
      var blobPrefixes = [];

      if (blobPrefixesInXML instanceof Array) {
        blobPrefixesInXML.forEach(function (blobPrefixInXML) {
          blobPrefixes.push(ParseBlobPrefix(blobPrefixInXML));
        });
      } else {
        blobPrefixes.push(ParseBlobPrefix(blobPrefixesInXML));
      }

      return blobPrefixes;
    }

    function ExtractPageRangeInfoItems(getPageRangesSegment) {
      var pageRange, clearRange, pageRangeIndex, clearRangeIndex;
      return _regeneratorRuntime().wrap(function ExtractPageRangeInfoItems$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              pageRange = [];
              clearRange = [];
              if (getPageRangesSegment.pageRange) pageRange = getPageRangesSegment.pageRange;
              if (getPageRangesSegment.clearRange) clearRange = getPageRangesSegment.clearRange;
              pageRangeIndex = 0;
              clearRangeIndex = 0;

            case 6:
              if (!(pageRangeIndex < pageRange.length && clearRangeIndex < clearRange.length)) {
                _context.next = 18;
                break;
              }

              if (!(pageRange[pageRangeIndex].start < clearRange[clearRangeIndex].start)) {
                _context.next = 13;
                break;
              }

              _context.next = 10;
              return {
                start: pageRange[pageRangeIndex].start,
                end: pageRange[pageRangeIndex].end,
                isClear: false
              };

            case 10:
              ++pageRangeIndex;
              _context.next = 16;
              break;

            case 13:
              _context.next = 15;
              return {
                start: clearRange[clearRangeIndex].start,
                end: clearRange[clearRangeIndex].end,
                isClear: true
              };

            case 15:
              ++clearRangeIndex;

            case 16:
              _context.next = 6;
              break;

            case 18:
              if (!(pageRangeIndex < pageRange.length)) {
                _context.next = 24;
                break;
              }

              _context.next = 21;
              return {
                start: pageRange[pageRangeIndex].start,
                end: pageRange[pageRangeIndex].end,
                isClear: false
              };

            case 21:
              ++pageRangeIndex;
              _context.next = 18;
              break;

            case 24:
              if (!(clearRangeIndex < clearRange.length)) {
                _context.next = 30;
                break;
              }

              _context.next = 27;
              return {
                start: clearRange[clearRangeIndex].start,
                end: clearRange[clearRangeIndex].end,
                isClear: true
              };

            case 27:
              ++clearRangeIndex;
              _context.next = 24;
              break;

            case 30:
            case "end":
              return _context.stop();
          }
        }
      }, _marked);
    }
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "./constants": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js",
    "buffer": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StorageBrowserPolicy = void 0;

    var _coreHttp = require("@azure/core-http");

    var _constants = require("../utils/constants");

    var _utils = require("../utils/utils.common");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:
     *
     * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.
     * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL
     * thus avoid the browser cache.
     *
     * 2. Remove cookie header for security
     *
     * 3. Remove content-length header to avoid browsers warning
     */


    var StorageBrowserPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(StorageBrowserPolicy, _BaseRequestPolicy);

      var _super = _createSuper(StorageBrowserPolicy);
      /**
       * Creates an instance of StorageBrowserPolicy.
       * @param nextPolicy -
       * @param options -
       */
      // The base class has a protected constructor. Adding a public one to enable constructing of this class.

      /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/


      function StorageBrowserPolicy(nextPolicy, options) {
        _classCallCheck(this, StorageBrowserPolicy);

        return _super.call(this, nextPolicy, options);
      }
      /**
       * Sends out request.
       *
       * @param request -
       */


      _createClass(StorageBrowserPolicy, [{
        key: "sendRequest",
        value: function () {
          var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!_coreHttp.isNode) {
                      _context.next = 2;
                      break;
                    }

                    return _context.abrupt("return", this._nextPolicy.sendRequest(request));

                  case 2:
                    if (request.method.toUpperCase() === "GET" || request.method.toUpperCase() === "HEAD") {
                      request.url = (0, _utils.setURLParameter)(request.url, _constants.URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());
                    }

                    request.headers.remove(_constants.HeaderConstants.COOKIE); // According to XHR standards, content-length should be fully controlled by browsers

                    request.headers.remove(_constants.HeaderConstants.CONTENT_LENGTH);
                    return _context.abrupt("return", this._nextPolicy.sendRequest(request));

                  case 6:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function sendRequest(_x) {
            return _sendRequest.apply(this, arguments);
          }

          return sendRequest;
        }()
      }]);

      return StorageBrowserPolicy;
    }(_coreHttp.BaseRequestPolicy);

    exports.StorageBrowserPolicy = StorageBrowserPolicy;
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "../utils/constants": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js",
    "../utils/utils.common": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "StorageBrowserPolicy", {
      enumerable: true,
      get: function () {
        return _StorageBrowserPolicy.StorageBrowserPolicy;
      }
    });
    exports.StorageBrowserPolicyFactory = void 0;

    var _StorageBrowserPolicy = require("./policies/StorageBrowserPolicy");

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /**
     * StorageBrowserPolicyFactory is a factory class helping generating StorageBrowserPolicy objects.
     */


    var StorageBrowserPolicyFactory = /*#__PURE__*/function () {
      function StorageBrowserPolicyFactory() {
        _classCallCheck(this, StorageBrowserPolicyFactory);
      }

      _createClass(StorageBrowserPolicyFactory, [{
        key: "create",
        value:
        /**
         * Creates a StorageBrowserPolicyFactory object.
         *
         * @param nextPolicy -
         * @param options -
         */
        function create(nextPolicy, options) {
          return new _StorageBrowserPolicy.StorageBrowserPolicy(nextPolicy, options);
        }
      }]);

      return StorageBrowserPolicyFactory;
    }();

    exports.StorageBrowserPolicyFactory = StorageBrowserPolicyFactory;
  }, {
    "./policies/StorageBrowserPolicy": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NewRetryPolicyFactory = NewRetryPolicyFactory;
    exports.StorageRetryPolicyType = exports.StorageRetryPolicy = void 0;

    var _abortController = require("@azure/abort-controller");

    var _coreHttp = require("@azure/core-http");

    var _constants = require("../utils/constants");

    var _utils = require("../utils/utils.common");

    var _log = require("../log");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * A factory method used to generated a RetryPolicy factory.
     *
     * @param retryOptions -
     */


    function NewRetryPolicyFactory(retryOptions) {
      return {
        create: function create(nextPolicy, options) {
          return new StorageRetryPolicy(nextPolicy, options, retryOptions);
        }
      };
    }
    /**
     * RetryPolicy types.
     */


    var StorageRetryPolicyType;
    exports.StorageRetryPolicyType = StorageRetryPolicyType;

    (function (StorageRetryPolicyType) {
      /**
       * Exponential retry. Retry time delay grows exponentially.
       */
      StorageRetryPolicyType[StorageRetryPolicyType["EXPONENTIAL"] = 0] = "EXPONENTIAL";
      /**
       * Linear retry. Retry time delay grows linearly.
       */

      StorageRetryPolicyType[StorageRetryPolicyType["FIXED"] = 1] = "FIXED";
    })(StorageRetryPolicyType || (exports.StorageRetryPolicyType = StorageRetryPolicyType = {})); // Default values of StorageRetryOptions


    var DEFAULT_RETRY_OPTIONS = {
      maxRetryDelayInMs: 120 * 1000,
      maxTries: 4,
      retryDelayInMs: 4 * 1000,
      retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,
      secondaryHost: "",
      tryTimeoutInMs: undefined // Use server side default timeout strategy

    };
    var RETRY_ABORT_ERROR = new _abortController.AbortError("The operation was aborted.");
    /**
     * Retry policy with exponential retry and linear retry implemented.
     */

    var StorageRetryPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(StorageRetryPolicy, _BaseRequestPolicy);

      var _super = _createSuper(StorageRetryPolicy);
      /**
       * Creates an instance of RetryPolicy.
       *
       * @param nextPolicy -
       * @param options -
       * @param retryOptions -
       */


      function StorageRetryPolicy(nextPolicy, options) {
        var _this;

        var retryOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETRY_OPTIONS;

        _classCallCheck(this, StorageRetryPolicy);

        _this = _super.call(this, nextPolicy, options); // Initialize retry options

        _this.retryOptions = {
          retryPolicyType: retryOptions.retryPolicyType ? retryOptions.retryPolicyType : DEFAULT_RETRY_OPTIONS.retryPolicyType,
          maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1 ? Math.floor(retryOptions.maxTries) : DEFAULT_RETRY_OPTIONS.maxTries,
          tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0 ? retryOptions.tryTimeoutInMs : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,
          retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0 ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs) : DEFAULT_RETRY_OPTIONS.retryDelayInMs,
          maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0 ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,
          secondaryHost: retryOptions.secondaryHost ? retryOptions.secondaryHost : DEFAULT_RETRY_OPTIONS.secondaryHost
        };
        return _this;
      }
      /**
       * Sends request.
       *
       * @param request -
       */


      _createClass(StorageRetryPolicy, [{
        key: "sendRequest",
        value: function () {
          var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    return _context.abrupt("return", this.attemptSendRequest(request, false, 1));

                  case 1:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function sendRequest(_x) {
            return _sendRequest.apply(this, arguments);
          }

          return sendRequest;
        }()
        /**
         * Decide and perform next retry. Won't mutate request parameter.
         *
         * @param request -
         * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then
         *                                   the resource was not found. This may be due to replication delay. So, in this
         *                                   case, we'll never try the secondary again for this operation.
         * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes
         *                                   the attempt will be performed by this method call.
         */

      }, {
        key: "attemptSendRequest",
        value: function () {
          var _attemptSendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request, secondaryHas404, attempt) {
            var newRequest, isPrimaryRetry, response;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    newRequest = request.clone();
                    isPrimaryRetry = secondaryHas404 || !this.retryOptions.secondaryHost || !(request.method === "GET" || request.method === "HEAD" || request.method === "OPTIONS") || attempt % 2 === 1;

                    if (!isPrimaryRetry) {
                      newRequest.url = (0, _utils.setURLHost)(newRequest.url, this.retryOptions.secondaryHost);
                    } // Set the server-side timeout query parameter "timeout=[seconds]"


                    if (this.retryOptions.tryTimeoutInMs) {
                      newRequest.url = (0, _utils.setURLParameter)(newRequest.url, _constants.URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1000).toString());
                    }

                    _context2.prev = 4;

                    _log.logger.info("RetryPolicy: =====> Try=".concat(attempt, " ").concat(isPrimaryRetry ? "Primary" : "Secondary"));

                    _context2.next = 8;
                    return this._nextPolicy.sendRequest(newRequest);

                  case 8:
                    response = _context2.sent;

                    if (this.shouldRetry(isPrimaryRetry, attempt, response)) {
                      _context2.next = 11;
                      break;
                    }

                    return _context2.abrupt("return", response);

                  case 11:
                    secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;
                    _context2.next = 19;
                    break;

                  case 14:
                    _context2.prev = 14;
                    _context2.t0 = _context2["catch"](4);

                    _log.logger.error("RetryPolicy: Caught error, message: ".concat(_context2.t0.message, ", code: ").concat(_context2.t0.code));

                    if (this.shouldRetry(isPrimaryRetry, attempt, response, _context2.t0)) {
                      _context2.next = 19;
                      break;
                    }

                    throw _context2.t0;

                  case 19:
                    _context2.next = 21;
                    return this.delay(isPrimaryRetry, attempt, request.abortSignal);

                  case 21:
                    return _context2.abrupt("return", this.attemptSendRequest(request, secondaryHas404, ++attempt));

                  case 22:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this, [[4, 14]]);
          }));

          function attemptSendRequest(_x2, _x3, _x4) {
            return _attemptSendRequest.apply(this, arguments);
          }

          return attemptSendRequest;
        }()
        /**
         * Decide whether to retry according to last HTTP response and retry counters.
         *
         * @param isPrimaryRetry -
         * @param attempt -
         * @param response -
         * @param err -
         */

      }, {
        key: "shouldRetry",
        value: function shouldRetry(isPrimaryRetry, attempt, response, err) {
          if (attempt >= this.retryOptions.maxTries) {
            _log.logger.info("RetryPolicy: Attempt(s) ".concat(attempt, " >= maxTries ").concat(this.retryOptions.maxTries, ", no further try."));

            return false;
          } // Handle network failures, you may need to customize the list when you implement
          // your own http client


          var retriableErrors = ["ETIMEDOUT", "ESOCKETTIMEDOUT", "ECONNREFUSED", "ECONNRESET", "ENOENT", "ENOTFOUND", "TIMEOUT", "EPIPE", "REQUEST_SEND_ERROR" // For default xhr based http client provided in ms-rest-js
          ];

          if (err) {
            var _iterator = _createForOfIteratorHelper(retriableErrors),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var retriableError = _step.value;

                if (err.name.toUpperCase().includes(retriableError) || err.message.toUpperCase().includes(retriableError) || err.code && err.code.toString().toUpperCase() === retriableError) {
                  _log.logger.info("RetryPolicy: Network error ".concat(retriableError, " found, will retry."));

                  return true;
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          } // If attempt was against the secondary & it returned a StatusNotFound (404), then
          // the resource was not found. This may be due to replication delay. So, in this
          // case, we'll never try the secondary again for this operation.


          if (response || err) {
            var statusCode = response ? response.status : err ? err.statusCode : 0;

            if (!isPrimaryRetry && statusCode === 404) {
              _log.logger.info("RetryPolicy: Secondary access with 404, will retry.");

              return true;
            } // Server internal error or server timeout


            if (statusCode === 503 || statusCode === 500) {
              _log.logger.info("RetryPolicy: Will retry for status code ".concat(statusCode, "."));

              return true;
            }
          }

          if ((err === null || err === void 0 ? void 0 : err.code) === "PARSE_ERROR" && (err === null || err === void 0 ? void 0 : err.message.startsWith("Error \"Error: Unclosed root tag"))) {
            _log.logger.info("RetryPolicy: Incomplete XML response likely due to service timeout, will retry.");

            return true;
          }

          return false;
        }
        /**
         * Delay a calculated time between retries.
         *
         * @param isPrimaryRetry -
         * @param attempt -
         * @param abortSignal -
         */

      }, {
        key: "delay",
        value: function () {
          var _delay2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(isPrimaryRetry, attempt, abortSignal) {
            var delayTimeInMs;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    delayTimeInMs = 0;

                    if (!isPrimaryRetry) {
                      _context3.next = 11;
                      break;
                    }

                    _context3.t0 = this.retryOptions.retryPolicyType;
                    _context3.next = _context3.t0 === StorageRetryPolicyType.EXPONENTIAL ? 5 : _context3.t0 === StorageRetryPolicyType.FIXED ? 7 : 9;
                    break;

                  case 5:
                    delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);
                    return _context3.abrupt("break", 9);

                  case 7:
                    delayTimeInMs = this.retryOptions.retryDelayInMs;
                    return _context3.abrupt("break", 9);

                  case 9:
                    _context3.next = 12;
                    break;

                  case 11:
                    delayTimeInMs = Math.random() * 1000;

                  case 12:
                    _log.logger.info("RetryPolicy: Delay for ".concat(delayTimeInMs, "ms"));

                    return _context3.abrupt("return", (0, _utils.delay)(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR));

                  case 14:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function delay(_x5, _x6, _x7) {
            return _delay2.apply(this, arguments);
          }

          return delay;
        }()
      }]);

      return StorageRetryPolicy;
    }(_coreHttp.BaseRequestPolicy);

    exports.StorageRetryPolicy = StorageRetryPolicy;
  }, {
    "@azure/abort-controller": "../node_modules/@azure/abort-controller/dist-esm/src/index.js",
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "../utils/constants": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js",
    "../utils/utils.common": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js",
    "../log": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "StorageRetryPolicy", {
      enumerable: true,
      get: function () {
        return _StorageRetryPolicy.StorageRetryPolicy;
      }
    });
    exports.StorageRetryPolicyFactory = void 0;
    Object.defineProperty(exports, "StorageRetryPolicyType", {
      enumerable: true,
      get: function () {
        return _StorageRetryPolicy.StorageRetryPolicyType;
      }
    });

    var _StorageRetryPolicy = require("./policies/StorageRetryPolicy");

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /**
     * StorageRetryPolicyFactory is a factory class helping generating {@link StorageRetryPolicy} objects.
     */


    var StorageRetryPolicyFactory = /*#__PURE__*/function () {
      /**
       * Creates an instance of StorageRetryPolicyFactory.
       * @param retryOptions -
       */
      function StorageRetryPolicyFactory(retryOptions) {
        _classCallCheck(this, StorageRetryPolicyFactory);

        this.retryOptions = retryOptions;
      }
      /**
       * Creates a StorageRetryPolicy object.
       *
       * @param nextPolicy -
       * @param options -
       */


      _createClass(StorageRetryPolicyFactory, [{
        key: "create",
        value: function create(nextPolicy, options) {
          return new _StorageRetryPolicy.StorageRetryPolicy(nextPolicy, options, this.retryOptions);
        }
      }]);

      return StorageRetryPolicyFactory;
    }();

    exports.StorageRetryPolicyFactory = StorageRetryPolicyFactory;
  }, {
    "./policies/StorageRetryPolicy": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CredentialPolicy = void 0;

    var _coreHttp = require("@azure/core-http");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * Credential policy used to sign HTTP(S) requests before sending. This is an
     * abstract class.
     */


    var CredentialPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(CredentialPolicy, _BaseRequestPolicy);

      var _super = _createSuper(CredentialPolicy);

      function CredentialPolicy() {
        _classCallCheck(this, CredentialPolicy);

        return _super.apply(this, arguments);
      }

      _createClass(CredentialPolicy, [{
        key: "sendRequest",
        value:
        /**
         * Sends out request.
         *
         * @param request -
         */
        function sendRequest(request) {
          return this._nextPolicy.sendRequest(this.signRequest(request));
        }
        /**
         * Child classes must implement this method with request signing. This method
         * will be executed in {@link sendRequest}.
         *
         * @param request -
         */

      }, {
        key: "signRequest",
        value: function signRequest(request) {
          // Child classes must override this method with request signing. This method
          // will be executed in sendRequest().
          return request;
        }
      }]);

      return CredentialPolicy;
    }(_coreHttp.BaseRequestPolicy);

    exports.CredentialPolicy = CredentialPolicy;
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AnonymousCredentialPolicy = void 0;

    var _CredentialPolicy2 = require("./CredentialPolicy");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources
     * or for use with Shared Access Signatures (SAS).
     */


    var AnonymousCredentialPolicy = /*#__PURE__*/function (_CredentialPolicy) {
      _inherits(AnonymousCredentialPolicy, _CredentialPolicy);

      var _super = _createSuper(AnonymousCredentialPolicy);
      /**
       * Creates an instance of AnonymousCredentialPolicy.
       * @param nextPolicy -
       * @param options -
       */
      // The base class has a protected constructor. Adding a public one to enable constructing of this class.

      /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/


      function AnonymousCredentialPolicy(nextPolicy, options) {
        _classCallCheck(this, AnonymousCredentialPolicy);

        return _super.call(this, nextPolicy, options);
      }

      return _createClass(AnonymousCredentialPolicy);
    }(_CredentialPolicy2.CredentialPolicy);

    exports.AnonymousCredentialPolicy = AnonymousCredentialPolicy;
  }, {
    "./CredentialPolicy": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Credential = void 0;

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Credential is an abstract class for Azure Storage HTTP requests signing. This
     * class will host an credentialPolicyCreator factory which generates CredentialPolicy.
     */


    var Credential = /*#__PURE__*/function () {
      function Credential() {
        _classCallCheck(this, Credential);
      }

      _createClass(Credential, [{
        key: "create",
        value:
        /**
         * Creates a RequestPolicy object.
         *
         * @param _nextPolicy -
         * @param _options -
         */
        function create(_nextPolicy, _options) {
          throw new Error("Method should be implemented in children classes.");
        }
      }]);

      return Credential;
    }();

    exports.Credential = Credential;
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AnonymousCredential = void 0;

    var _AnonymousCredentialPolicy = require("../policies/AnonymousCredentialPolicy");

    var _Credential2 = require("./Credential");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * AnonymousCredential provides a credentialPolicyCreator member used to create
     * AnonymousCredentialPolicy objects. AnonymousCredentialPolicy is used with
     * HTTP(S) requests that read public resources or for use with Shared Access
     * Signatures (SAS).
     */


    var AnonymousCredential = /*#__PURE__*/function (_Credential) {
      _inherits(AnonymousCredential, _Credential);

      var _super = _createSuper(AnonymousCredential);

      function AnonymousCredential() {
        _classCallCheck(this, AnonymousCredential);

        return _super.apply(this, arguments);
      }

      _createClass(AnonymousCredential, [{
        key: "create",
        value:
        /**
         * Creates an {@link AnonymousCredentialPolicy} object.
         *
         * @param nextPolicy -
         * @param options -
         */
        function create(nextPolicy, options) {
          return new _AnonymousCredentialPolicy.AnonymousCredentialPolicy(nextPolicy, options);
        }
      }]);

      return AnonymousCredential;
    }(_Credential2.Credential);

    exports.AnonymousCredential = AnonymousCredential;
  }, {
    "../policies/AnonymousCredentialPolicy": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js",
    "./Credential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/TelemetryPolicy.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TelemetryPolicy = void 0;

    var _coreHttp = require("@azure/core-http");

    var _constants = require("../utils/constants");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * TelemetryPolicy is a policy used to tag user-agent header for every requests.
     */


    var TelemetryPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(TelemetryPolicy, _BaseRequestPolicy);

      var _super = _createSuper(TelemetryPolicy);
      /**
       * Creates an instance of TelemetryPolicy.
       * @param nextPolicy -
       * @param options -
       * @param telemetry -
       */


      function TelemetryPolicy(nextPolicy, options, telemetry) {
        var _this;

        _classCallCheck(this, TelemetryPolicy);

        _this = _super.call(this, nextPolicy, options);
        _this.telemetry = telemetry;
        return _this;
      }
      /**
       * Sends out request.
       *
       * @param request -
       */


      _createClass(TelemetryPolicy, [{
        key: "sendRequest",
        value: function () {
          var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (_coreHttp.isNode) {
                      if (!request.headers) {
                        request.headers = new _coreHttp.HttpHeaders();
                      }

                      if (!request.headers.get(_constants.HeaderConstants.USER_AGENT)) {
                        request.headers.set(_constants.HeaderConstants.USER_AGENT, this.telemetry);
                      }
                    }

                    return _context.abrupt("return", this._nextPolicy.sendRequest(request));

                  case 2:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function sendRequest(_x) {
            return _sendRequest.apply(this, arguments);
          }

          return sendRequest;
        }()
      }]);

      return TelemetryPolicy;
    }(_coreHttp.BaseRequestPolicy);

    exports.TelemetryPolicy = TelemetryPolicy;
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "../utils/constants": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/TelemetryPolicyFactory.js": [function (require, module, exports) {
    var process = require("process");

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TelemetryPolicyFactory = void 0;

    var _coreHttp = require("@azure/core-http");

    var os = _interopRequireWildcard(require("os"));

    var _TelemetryPolicy = require("./policies/TelemetryPolicy");

    var _constants = require("./utils/constants");

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function (nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj.default = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /**
     * TelemetryPolicyFactory is a factory class helping generating {@link TelemetryPolicy} objects.
     */


    var TelemetryPolicyFactory = /*#__PURE__*/function () {
      /**
       * Creates an instance of TelemetryPolicyFactory.
       * @param telemetry -
       */
      function TelemetryPolicyFactory(telemetry) {
        _classCallCheck(this, TelemetryPolicyFactory);

        var userAgentInfo = [];

        if (_coreHttp.isNode) {
          if (telemetry) {
            var telemetryString = telemetry.userAgentPrefix || "";

            if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) {
              userAgentInfo.push(telemetryString);
            }
          } // e.g. azsdk-js-storageblob/10.0.0


          var libInfo = "azsdk-js-storageblob/".concat(_constants.SDK_VERSION);

          if (userAgentInfo.indexOf(libInfo) === -1) {
            userAgentInfo.push(libInfo);
          } // e.g. (NODE-VERSION 4.9.1; Windows_NT 10.0.16299)


          var runtimeInfo = "(NODE-VERSION ".concat(process.version, ")");

          if (os) {
            runtimeInfo = "(NODE-VERSION ".concat(process.version, "; ").concat(os.type(), " ").concat(os.release(), ")");
          }

          if (userAgentInfo.indexOf(runtimeInfo) === -1) {
            userAgentInfo.push(runtimeInfo);
          }
        }

        this.telemetryString = userAgentInfo.join(" ");
      }
      /**
       * Creates a TelemetryPolicy object.
       *
       * @param nextPolicy -
       * @param options -
       */


      _createClass(TelemetryPolicyFactory, [{
        key: "create",
        value: function create(nextPolicy, options) {
          return new _TelemetryPolicy.TelemetryPolicy(nextPolicy, options, this.telemetryString);
        }
      }]);

      return TelemetryPolicyFactory;
    }();

    exports.TelemetryPolicyFactory = TelemetryPolicyFactory;
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "os": "../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/_empty.js",
    "./policies/TelemetryPolicy": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/TelemetryPolicy.js",
    "./utils/constants": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js",
    "process": "../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/_empty.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getCachedDefaultHttpClient = getCachedDefaultHttpClient;

    var _coreHttp = require("@azure/core-http"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.


    var _defaultHttpClient = new _coreHttp.DefaultHttpClient();

    function getCachedDefaultHttpClient() {
      return _defaultHttpClient;
    }
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBearerTokenChallengeAuthenticationPolicy.js": [function (require, module, exports) {
    var define;
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.storageBearerTokenChallengeAuthenticationPolicy = storageBearerTokenChallengeAuthenticationPolicy;

    var _coreHttp = require("@azure/core-http");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;

      var _s, _e;

      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }
    /**
     * A set of constants used internally when processing requests.
     */


    var Constants = {
      DefaultScope: "/.default",

      /**
       * Defines constants for use with HTTP headers.
       */
      HeaderConstants: {
        /**
         * The Authorization header.
         */
        AUTHORIZATION: "authorization"
      }
    }; // Default options for the cycler if none are provided

    var DEFAULT_CYCLER_OPTIONS = {
      forcedRefreshWindowInMs: 1000,
      retryIntervalInMs: 3000,
      refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry

    };
    /**
     * Converts an an unreliable access token getter (which may resolve with null)
     * into an AccessTokenGetter by retrying the unreliable getter in a regular
     * interval.
     *
     * @param getAccessToken - a function that produces a promise of an access
     * token that may fail by returning null
     * @param retryIntervalInMs - the time (in milliseconds) to wait between retry
     * attempts
     * @param timeoutInMs - the timestamp after which the refresh attempt will fail,
     * throwing an exception
     * @returns - a promise that, if it resolves, will resolve with an access token
     */

    function beginRefresh(_x, _x2, _x3) {
      return _beginRefresh.apply(this, arguments);
    }
    /**
     * Creates a token cycler from a credential, scopes, and optional settings.
     *
     * A token cycler represents a way to reliably retrieve a valid access token
     * from a TokenCredential. It will handle initializing the token, refreshing it
     * when it nears expiration, and synchronizes refresh attempts to avoid
     * concurrency hazards.
     *
     * @param credential - the underlying TokenCredential that provides the access
     * token
     * @param scopes - the scopes to request authorization for
     * @param tokenCyclerOptions - optionally override default settings for the cycler
     *
     * @returns - a function that reliably produces a valid access token
     */


    function _beginRefresh() {
      _beginRefresh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(getAccessToken, retryIntervalInMs, timeoutInMs) {
        var tryGetAccessToken, _tryGetAccessToken, token;

        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _tryGetAccessToken = function _tryGetAccessToken3() {
                  _tryGetAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
                    var finalToken;
                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            if (!(Date.now() < timeoutInMs)) {
                              _context3.next = 12;
                              break;
                            }

                            _context3.prev = 1;
                            _context3.next = 4;
                            return getAccessToken();

                          case 4:
                            return _context3.abrupt("return", _context3.sent);

                          case 7:
                            _context3.prev = 7;
                            _context3.t0 = _context3["catch"](1);
                            return _context3.abrupt("return", null);

                          case 10:
                            _context3.next = 18;
                            break;

                          case 12:
                            _context3.next = 14;
                            return getAccessToken();

                          case 14:
                            finalToken = _context3.sent;

                            if (!(finalToken === null)) {
                              _context3.next = 17;
                              break;
                            }

                            throw new Error("Failed to refresh access token.");

                          case 17:
                            return _context3.abrupt("return", finalToken);

                          case 18:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3, null, [[1, 7]]);
                  }));
                  return _tryGetAccessToken.apply(this, arguments);
                };

                tryGetAccessToken = function _tryGetAccessToken2() {
                  return _tryGetAccessToken.apply(this, arguments);
                };

                _context4.next = 4;
                return tryGetAccessToken();

              case 4:
                token = _context4.sent;

              case 5:
                if (!(token === null)) {
                  _context4.next = 13;
                  break;
                }

                _context4.next = 8;
                return (0, _coreHttp.delay)(retryIntervalInMs);

              case 8:
                _context4.next = 10;
                return tryGetAccessToken();

              case 10:
                token = _context4.sent;
                _context4.next = 5;
                break;

              case 13:
                return _context4.abrupt("return", token);

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
      return _beginRefresh.apply(this, arguments);
    }

    function createTokenCycler(credential, scopes, tokenCyclerOptions) {
      var refreshWorker = null;
      var token = null;
      var options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);
      /**
       * This little holder defines several predicates that we use to construct
       * the rules of refreshing the token.
       */

      var cycler = {
        /**
         * Produces true if a refresh job is currently in progress.
         */
        get isRefreshing() {
          return refreshWorker !== null;
        },

        /**
         * Produces true if the cycler SHOULD refresh (we are within the refresh
         * window and not already refreshing)
         */
        get shouldRefresh() {
          var _a;

          return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();
        },

        /**
         * Produces true if the cycler MUST refresh (null or nearly-expired
         * token).
         */
        get mustRefresh() {
          return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();
        }

      };
      /**
       * Starts a refresh job or returns the existing job if one is already
       * running.
       */

      function refresh(getTokenOptions) {
        var _a;

        if (!cycler.isRefreshing) {
          // We bind `scopes` here to avoid passing it around a lot
          var tryGetAccessToken = function tryGetAccessToken() {
            return credential.getToken(scopes, getTokenOptions);
          }; // Take advantage of promise chaining to insert an assignment to `token`
          // before the refresh can be considered done.


          refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, // If we don't have a token, then we should timeout immediately
          (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(function (_token) {
            refreshWorker = null;
            token = _token;
            return token;
          }).catch(function (reason) {
            // We also should reset the refresher if we enter a failed state.  All
            // existing awaiters will throw, but subsequent requests will start a
            // new retry chain.
            refreshWorker = null;
            token = null;
            throw reason;
          });
        }

        return refreshWorker;
      }

      return /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tokenOptions) {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!cycler.mustRefresh) {
                    _context.next = 2;
                    break;
                  }

                  return _context.abrupt("return", refresh(tokenOptions));

                case 2:
                  if (cycler.shouldRefresh) {
                    refresh(tokenOptions);
                  }

                  return _context.abrupt("return", token);

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x4) {
          return _ref.apply(this, arguments);
        };
      }();
    }
    /**
     * We will retrieve the challenge only if the response status code was 401,
     * and if the response contained the header "WWW-Authenticate" with a non-empty value.
     */


    function getChallenge(response) {
      var challenge = response.headers.get("WWW-Authenticate");

      if (response.status === 401 && challenge) {
        return challenge;
      }

      return;
    }
    /**
     * Converts: `Bearer a="b" c="d"`.
     * Into: `[ { a: 'b', c: 'd' }]`.
     *
     * @internal
     */


    function parseChallenge(challenge) {
      var bearerChallenge = challenge.slice("Bearer ".length);
      var challengeParts = "".concat(bearerChallenge.trim(), " ").split(" ").filter(function (x) {
        return x;
      });
      var keyValuePairs = challengeParts.map(function (keyValue) {
        return function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
              key = _ref3[0],
              value = _ref3[1];

          return _defineProperty({}, key, value);
        }(keyValue.trim().split("="));
      }); // Key-value pairs to plain object:

      return keyValuePairs.reduce(function (a, b) {
        return Object.assign(Object.assign({}, a), b);
      }, {});
    } // #endregion

    /**
     * Creates a new factory for a RequestPolicy that applies a bearer token to
     * the requests' `Authorization` headers.
     *
     * @param credential - The TokenCredential implementation that can supply the bearer token.
     * @param scopes - The scopes for which the bearer token applies.
     */


    function storageBearerTokenChallengeAuthenticationPolicy(credential, scopes) {
      // This simple function encapsulates the entire process of reliably retrieving the token
      var getToken = createTokenCycler(credential, scopes);

      var StorageBearerTokenChallengeAuthenticationPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
        _inherits(StorageBearerTokenChallengeAuthenticationPolicy, _BaseRequestPolicy);

        var _super = _createSuper(StorageBearerTokenChallengeAuthenticationPolicy);

        function StorageBearerTokenChallengeAuthenticationPolicy(nextPolicy, options) {
          _classCallCheck(this, StorageBearerTokenChallengeAuthenticationPolicy);

          return _super.call(this, nextPolicy, options);
        }

        _createClass(StorageBearerTokenChallengeAuthenticationPolicy, [{
          key: "sendRequest",
          value: function () {
            var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(webResource) {
              var getTokenInternal, token, response, challenge, challengeInfo, challengeScopes, parsedAuthUri, pathSegments, tenantId, getTokenForChallenge, tokenForChallenge;
              return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      if (webResource.url.toLowerCase().startsWith("https://")) {
                        _context2.next = 2;
                        break;
                      }

                      throw new Error("Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.");

                    case 2:
                      getTokenInternal = getToken;
                      _context2.next = 5;
                      return getTokenInternal({
                        abortSignal: webResource.abortSignal,
                        tracingOptions: {
                          tracingContext: webResource.tracingContext
                        }
                      });

                    case 5:
                      token = _context2.sent.token;
                      webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, "Bearer ".concat(token));
                      _context2.next = 9;
                      return this._nextPolicy.sendRequest(webResource);

                    case 9:
                      response = _context2.sent;

                      if (!((response === null || response === void 0 ? void 0 : response.status) === 401)) {
                        _context2.next = 25;
                        break;
                      }

                      challenge = getChallenge(response);

                      if (!challenge) {
                        _context2.next = 25;
                        break;
                      }

                      challengeInfo = parseChallenge(challenge);
                      challengeScopes = challengeInfo.resource_id + Constants.DefaultScope;
                      parsedAuthUri = _coreHttp.URLBuilder.parse(challengeInfo.authorization_uri);
                      pathSegments = parsedAuthUri.getPath().split("/");
                      tenantId = pathSegments[1];
                      getTokenForChallenge = createTokenCycler(credential, challengeScopes);
                      _context2.next = 21;
                      return getTokenForChallenge({
                        abortSignal: webResource.abortSignal,
                        tracingOptions: {
                          tracingContext: webResource.tracingContext
                        },
                        tenantId: tenantId
                      });

                    case 21:
                      tokenForChallenge = _context2.sent.token;
                      getToken = getTokenForChallenge;
                      webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, "Bearer ".concat(tokenForChallenge));
                      return _context2.abrupt("return", this._nextPolicy.sendRequest(webResource));

                    case 25:
                      return _context2.abrupt("return", response);

                    case 26:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2, this);
            }));

            function sendRequest(_x5) {
              return _sendRequest.apply(this, arguments);
            }

            return sendRequest;
          }()
        }]);

        return StorageBearerTokenChallengeAuthenticationPolicy;
      }(_coreHttp.BaseRequestPolicy);

      return {
        create: function create(nextPolicy, options) {
          return new StorageBearerTokenChallengeAuthenticationPolicy(nextPolicy, options);
        }
      };
    }
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "BaseRequestPolicy", {
      enumerable: true,
      get: function () {
        return _coreHttp.BaseRequestPolicy;
      }
    });
    Object.defineProperty(exports, "HttpHeaders", {
      enumerable: true,
      get: function () {
        return _coreHttp.HttpHeaders;
      }
    });
    exports.Pipeline = void 0;
    Object.defineProperty(exports, "RequestPolicyOptions", {
      enumerable: true,
      get: function () {
        return _coreHttp.RequestPolicyOptions;
      }
    });
    Object.defineProperty(exports, "StorageOAuthScopes", {
      enumerable: true,
      get: function () {
        return _constants.StorageOAuthScopes;
      }
    });
    Object.defineProperty(exports, "WebResource", {
      enumerable: true,
      get: function () {
        return _coreHttp.WebResource;
      }
    });
    Object.defineProperty(exports, "deserializationPolicy", {
      enumerable: true,
      get: function () {
        return _coreHttp.deserializationPolicy;
      }
    });
    exports.isPipelineLike = isPipelineLike;
    exports.newPipeline = newPipeline;

    var _coreHttp = require("@azure/core-http");

    var _log = require("./log");

    var _StorageBrowserPolicyFactory = require("./StorageBrowserPolicyFactory");

    var _StorageRetryPolicyFactory = require("./StorageRetryPolicyFactory");

    var _AnonymousCredential = require("./credentials/AnonymousCredential");

    var _constants = require("./utils/constants");

    var _TelemetryPolicyFactory = require("./TelemetryPolicyFactory");

    var _cache = require("./utils/cache");

    var _utils = require("./utils/utils.common");

    var _StorageBearerTokenChallengeAuthenticationPolicy = require("./policies/StorageBearerTokenChallengeAuthenticationPolicy");

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }
    /**
     * A helper to decide if a given argument satisfies the Pipeline contract
     * @param pipeline - An argument that may be a Pipeline
     * @returns true when the argument satisfies the Pipeline contract
     */


    function isPipelineLike(pipeline) {
      if (!pipeline || _typeof(pipeline) !== "object") {
        return false;
      }

      var castPipeline = pipeline;
      return Array.isArray(castPipeline.factories) && _typeof(castPipeline.options) === "object" && typeof castPipeline.toServiceClientOptions === "function";
    }
    /**
     * A Pipeline class containing HTTP request policies.
     * You can create a default Pipeline by calling {@link newPipeline}.
     * Or you can create a Pipeline with your own policies by the constructor of Pipeline.
     *
     * Refer to {@link newPipeline} and provided policies before implementing your
     * customized Pipeline.
     */


    var Pipeline = /*#__PURE__*/function () {
      /**
       * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.
       *
       * @param factories -
       * @param options -
       */
      function Pipeline(factories) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, Pipeline);

        this.factories = factories; // when options.httpClient is not specified, passing in a DefaultHttpClient instance to
        // avoid each client creating its own http client.

        this.options = Object.assign(Object.assign({}, options), {
          httpClient: options.httpClient || (0, _cache.getCachedDefaultHttpClient)()
        });
      }
      /**
       * Transfer Pipeline object to ServiceClientOptions object which is required by
       * ServiceClient constructor.
       *
       * @returns The ServiceClientOptions object from this Pipeline.
       */


      _createClass(Pipeline, [{
        key: "toServiceClientOptions",
        value: function toServiceClientOptions() {
          return {
            httpClient: this.options.httpClient,
            requestPolicyFactories: this.factories
          };
        }
      }]);

      return Pipeline;
    }();
    /**
     * Creates a new Pipeline object with Credential provided.
     *
     * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
     * @param pipelineOptions - Optional. Options.
     * @returns A new Pipeline object.
     */


    exports.Pipeline = Pipeline;

    function newPipeline(credential) {
      var pipelineOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var _a;

      if (credential === undefined) {
        credential = new _AnonymousCredential.AnonymousCredential();
      } // Order is important. Closer to the API at the top & closer to the network at the bottom.
      // The credential's policy factory must appear close to the wire so it can sign any
      // changes made by other factories (like UniqueRequestIDPolicyFactory)


      var telemetryPolicy = new _TelemetryPolicyFactory.TelemetryPolicyFactory(pipelineOptions.userAgentOptions);
      var factories = [(0, _coreHttp.tracingPolicy)({
        userAgent: telemetryPolicy.telemetryString
      }), (0, _coreHttp.keepAlivePolicy)(pipelineOptions.keepAliveOptions), telemetryPolicy, (0, _coreHttp.generateClientRequestIdPolicy)(), new _StorageBrowserPolicyFactory.StorageBrowserPolicyFactory(), new _StorageRetryPolicyFactory.StorageRetryPolicyFactory(pipelineOptions.retryOptions), // Default deserializationPolicy is provided by protocol layer
      // Use customized XML char key of "#" so we could deserialize metadata
      // with "_" key
      (0, _coreHttp.deserializationPolicy)(undefined, {
        xmlCharKey: "#"
      }), (0, _coreHttp.logPolicy)({
        logger: _log.logger.info,
        allowedHeaderNames: _constants.StorageBlobLoggingAllowedHeaderNames,
        allowedQueryParameters: _constants.StorageBlobLoggingAllowedQueryParameters
      })];

      if (_coreHttp.isNode) {
        // policies only available in Node.js runtime, not in browsers
        factories.push((0, _coreHttp.proxyPolicy)(pipelineOptions.proxyOptions));
        factories.push((0, _coreHttp.disableResponseDecompressionPolicy)());
      }

      factories.push((0, _coreHttp.isTokenCredential)(credential) ? (0, _utils.attachCredential)((0, _StorageBearerTokenChallengeAuthenticationPolicy.storageBearerTokenChallengeAuthenticationPolicy)(credential, (_a = pipelineOptions.audience) !== null && _a !== void 0 ? _a : _constants.StorageOAuthScopes), credential) : credential);
      return new Pipeline(factories, pipelineOptions);
    }
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "./log": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js",
    "./StorageBrowserPolicyFactory": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js",
    "./StorageRetryPolicyFactory": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js",
    "./credentials/AnonymousCredential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js",
    "./utils/constants": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js",
    "./TelemetryPolicyFactory": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/TelemetryPolicyFactory.js",
    "./utils/cache": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js",
    "./utils/utils.common": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js",
    "./policies/StorageBearerTokenChallengeAuthenticationPolicy": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBearerTokenChallengeAuthenticationPolicy.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StorageSharedKeyCredential = void 0;

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.


    var StorageSharedKeyCredential = /*#__PURE__*/_createClass(function StorageSharedKeyCredential() {
      _classCallCheck(this, StorageSharedKeyCredential);
    });

    exports.StorageSharedKeyCredential = StorageSharedKeyCredential;
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClientContext.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StorageClientContext = void 0;

    var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function (nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj.default = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    var packageName = "azure-storage-blob";
    var packageVersion = "12.10.0";

    var StorageClientContext = /*#__PURE__*/function (_coreHttp$ServiceClie) {
      _inherits(StorageClientContext, _coreHttp$ServiceClie);

      var _super = _createSuper(StorageClientContext);
      /**
       * Initializes a new instance of the StorageClientContext class.
       * @param url The URL of the service account, container, or blob that is the target of the desired
       *            operation.
       * @param options The parameter options
       */


      function StorageClientContext(url, options) {
        var _this;

        _classCallCheck(this, StorageClientContext);

        if (url === undefined) {
          throw new Error("'url' cannot be null");
        } // Initializing default values for options


        if (!options) {
          options = {};
        }

        if (!options.userAgent) {
          var defaultUserAgent = coreHttp.getDefaultUserAgentValue();
          options.userAgent = "".concat(packageName, "/").concat(packageVersion, " ").concat(defaultUserAgent);
        }

        _this = _super.call(this, undefined, options);
        _this.requestContentType = "application/json; charset=utf-8";
        _this.baseUri = options.endpoint || "{url}"; // Parameter assignments

        _this.url = url; // Assigning values to Constant parameters

        _this.version = options.version || "2021-06-08";
        return _this;
      }

      return _createClass(StorageClientContext);
    }(coreHttp.ServiceClient);

    exports.StorageClientContext = StorageClientContext;
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StorageClient = void 0;

    var _storageClientContext = require("./generated/src/storageClientContext");

    var _utils = require("./utils/utils.common");

    var _AnonymousCredential = require("./credentials/AnonymousCredential");

    var _StorageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");

    var _coreHttp = require("@azure/core-http");

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    /**
     * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}
     * and etc.
     */


    var StorageClient = /*#__PURE__*/_createClass(
    /**
     * Creates an instance of StorageClient.
     * @param url - url to resource
     * @param pipeline - request policy pipeline.
     */
    function StorageClient(url, pipeline) {
      _classCallCheck(this, StorageClient); // URL should be encoded and only once, protocol layer shouldn't encode URL again


      this.url = (0, _utils.escapeURLPath)(url);
      this.accountName = (0, _utils.getAccountNameFromUrl)(url);
      this.pipeline = pipeline;
      this.storageClientContext = new _storageClientContext.StorageClientContext(this.url, pipeline.toServiceClientOptions());
      this.isHttps = (0, _utils.iEqual)((0, _utils.getURLScheme)(this.url) || "", "https");
      this.credential = new _AnonymousCredential.AnonymousCredential();

      var _iterator = _createForOfIteratorHelper(this.pipeline.factories),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var factory = _step.value;

          if (_coreHttp.isNode && factory instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || factory instanceof _AnonymousCredential.AnonymousCredential) {
            this.credential = factory;
          } else if ((0, _coreHttp.isTokenCredential)(factory.credential)) {
            // Only works if the factory has been attached a "credential" property.
            // We do that in newPipeline() when using TokenCredential.
            this.credential = factory.credential;
          }
        } // Override protocol layer's default content-type

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var storageClientContext = this.storageClientContext;
      storageClientContext.requestContentType = undefined;
    });

    exports.StorageClient = StorageClient;
  }, {
    "./generated/src/storageClientContext": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClientContext.js",
    "./utils/utils.common": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js",
    "./credentials/AnonymousCredential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js",
    "./credentials/StorageSharedKeyCredential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js",
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.convertTracingToRequestOptionsBase = convertTracingToRequestOptionsBase;
    exports.createSpan = void 0;

    var _coreTracing = require("@azure/core-tracing"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Creates a span using the global tracer.
     * @internal
     */


    var createSpan = (0, _coreTracing.createSpanFunction)({
      packagePrefix: "Azure.Storage.Blob",
      namespace: "Microsoft.Storage"
    });
    /**
     * @internal
     *
     * Adapt the tracing options from OperationOptions to what they need to be for
     * RequestOptionsBase (when we update to later OpenTelemetry versions this is now
     * two separate fields, not just one).
     */

    exports.createSpan = createSpan;

    function convertTracingToRequestOptionsBase(options) {
      var _a, _b;

      return {
        // By passing spanOptions if they exist at runtime, we're backwards compatible with @azure/core-tracing@preview.13 and earlier.
        spanOptions: (_a = options === null || options === void 0 ? void 0 : options.tracingOptions) === null || _a === void 0 ? void 0 : _a.spanOptions,
        tracingContext: (_b = options === null || options === void 0 ? void 0 : options.tracingOptions) === null || _b === void 0 ? void 0 : _b.tracingContext
      };
    }
  }, {
    "@azure/core-tracing": "../node_modules/@azure/core-tracing/dist-esm/src/index.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BlobSASPermissions = void 0;

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting
     * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all
     * the values are set, this should be serialized with toString and set as the permissions field on a
     * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but
     * the order of the permissions is particular and this class guarantees correctness.
     */


    var BlobSASPermissions = /*#__PURE__*/function () {
      function BlobSASPermissions() {
        _classCallCheck(this, BlobSASPermissions);
        /**
         * Specifies Read access granted.
         */


        this.read = false;
        /**
         * Specifies Add access granted.
         */

        this.add = false;
        /**
         * Specifies Create access granted.
         */

        this.create = false;
        /**
         * Specifies Write access granted.
         */

        this.write = false;
        /**
         * Specifies Delete access granted.
         */

        this.delete = false;
        /**
         * Specifies Delete version access granted.
         */

        this.deleteVersion = false;
        /**
         * Specfies Tag access granted.
         */

        this.tag = false;
        /**
         * Specifies Move access granted.
         */

        this.move = false;
        /**
         * Specifies Execute access granted.
         */

        this.execute = false;
        /**
         * Specifies SetImmutabilityPolicy access granted.
         */

        this.setImmutabilityPolicy = false;
        /**
         * Specifies that Permanent Delete is permitted.
         */

        this.permanentDelete = false;
      }
      /**
       * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an
       * Error if it encounters a character that does not correspond to a valid permission.
       *
       * @param permissions -
       */


      _createClass(BlobSASPermissions, [{
        key: "toString",
        value:
        /**
         * Converts the given permissions to a string. Using this method will guarantee the permissions are in an
         * order accepted by the service.
         *
         * @returns A string which represents the BlobSASPermissions
         */
        function toString() {
          var permissions = [];

          if (this.read) {
            permissions.push("r");
          }

          if (this.add) {
            permissions.push("a");
          }

          if (this.create) {
            permissions.push("c");
          }

          if (this.write) {
            permissions.push("w");
          }

          if (this.delete) {
            permissions.push("d");
          }

          if (this.deleteVersion) {
            permissions.push("x");
          }

          if (this.tag) {
            permissions.push("t");
          }

          if (this.move) {
            permissions.push("m");
          }

          if (this.execute) {
            permissions.push("e");
          }

          if (this.setImmutabilityPolicy) {
            permissions.push("i");
          }

          if (this.permanentDelete) {
            permissions.push("y");
          }

          return permissions.join("");
        }
      }], [{
        key: "parse",
        value: function parse(permissions) {
          var blobSASPermissions = new BlobSASPermissions();

          var _iterator = _createForOfIteratorHelper(permissions),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var char = _step.value;

              switch (char) {
                case "r":
                  blobSASPermissions.read = true;
                  break;

                case "a":
                  blobSASPermissions.add = true;
                  break;

                case "c":
                  blobSASPermissions.create = true;
                  break;

                case "w":
                  blobSASPermissions.write = true;
                  break;

                case "d":
                  blobSASPermissions.delete = true;
                  break;

                case "x":
                  blobSASPermissions.deleteVersion = true;
                  break;

                case "t":
                  blobSASPermissions.tag = true;
                  break;

                case "m":
                  blobSASPermissions.move = true;
                  break;

                case "e":
                  blobSASPermissions.execute = true;
                  break;

                case "i":
                  blobSASPermissions.setImmutabilityPolicy = true;
                  break;

                case "y":
                  blobSASPermissions.permanentDelete = true;
                  break;

                default:
                  throw new RangeError("Invalid permission: ".concat(char));
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          return blobSASPermissions;
        }
        /**
         * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it
         * and boolean values for them.
         *
         * @param permissionLike -
         */

      }, {
        key: "from",
        value: function from(permissionLike) {
          var blobSASPermissions = new BlobSASPermissions();

          if (permissionLike.read) {
            blobSASPermissions.read = true;
          }

          if (permissionLike.add) {
            blobSASPermissions.add = true;
          }

          if (permissionLike.create) {
            blobSASPermissions.create = true;
          }

          if (permissionLike.write) {
            blobSASPermissions.write = true;
          }

          if (permissionLike.delete) {
            blobSASPermissions.delete = true;
          }

          if (permissionLike.deleteVersion) {
            blobSASPermissions.deleteVersion = true;
          }

          if (permissionLike.tag) {
            blobSASPermissions.tag = true;
          }

          if (permissionLike.move) {
            blobSASPermissions.move = true;
          }

          if (permissionLike.execute) {
            blobSASPermissions.execute = true;
          }

          if (permissionLike.setImmutabilityPolicy) {
            blobSASPermissions.setImmutabilityPolicy = true;
          }

          if (permissionLike.permanentDelete) {
            blobSASPermissions.permanentDelete = true;
          }

          return blobSASPermissions;
        }
      }]);

      return BlobSASPermissions;
    }();

    exports.BlobSASPermissions = BlobSASPermissions;
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ContainerSASPermissions = void 0;

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.
     * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.
     * Once all the values are set, this should be serialized with toString and set as the permissions field on a
     * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but
     * the order of the permissions is particular and this class guarantees correctness.
     */


    var ContainerSASPermissions = /*#__PURE__*/function () {
      function ContainerSASPermissions() {
        _classCallCheck(this, ContainerSASPermissions);
        /**
         * Specifies Read access granted.
         */


        this.read = false;
        /**
         * Specifies Add access granted.
         */

        this.add = false;
        /**
         * Specifies Create access granted.
         */

        this.create = false;
        /**
         * Specifies Write access granted.
         */

        this.write = false;
        /**
         * Specifies Delete access granted.
         */

        this.delete = false;
        /**
         * Specifies Delete version access granted.
         */

        this.deleteVersion = false;
        /**
         * Specifies List access granted.
         */

        this.list = false;
        /**
         * Specfies Tag access granted.
         */

        this.tag = false;
        /**
         * Specifies Move access granted.
         */

        this.move = false;
        /**
         * Specifies Execute access granted.
         */

        this.execute = false;
        /**
         * Specifies SetImmutabilityPolicy access granted.
         */

        this.setImmutabilityPolicy = false;
        /**
         * Specifies that Permanent Delete is permitted.
         */

        this.permanentDelete = false;
        /**
         * Specifies that Filter Blobs by Tags is permitted.
         */

        this.filterByTags = false;
      }
      /**
       * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an
       * Error if it encounters a character that does not correspond to a valid permission.
       *
       * @param permissions -
       */


      _createClass(ContainerSASPermissions, [{
        key: "toString",
        value:
        /**
         * Converts the given permissions to a string. Using this method will guarantee the permissions are in an
         * order accepted by the service.
         *
         * The order of the characters should be as specified here to ensure correctness.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
         *
         */
        function toString() {
          var permissions = [];

          if (this.read) {
            permissions.push("r");
          }

          if (this.add) {
            permissions.push("a");
          }

          if (this.create) {
            permissions.push("c");
          }

          if (this.write) {
            permissions.push("w");
          }

          if (this.delete) {
            permissions.push("d");
          }

          if (this.deleteVersion) {
            permissions.push("x");
          }

          if (this.list) {
            permissions.push("l");
          }

          if (this.tag) {
            permissions.push("t");
          }

          if (this.move) {
            permissions.push("m");
          }

          if (this.execute) {
            permissions.push("e");
          }

          if (this.setImmutabilityPolicy) {
            permissions.push("i");
          }

          if (this.permanentDelete) {
            permissions.push("y");
          }

          if (this.filterByTags) {
            permissions.push("f");
          }

          return permissions.join("");
        }
      }], [{
        key: "parse",
        value: function parse(permissions) {
          var containerSASPermissions = new ContainerSASPermissions();

          var _iterator = _createForOfIteratorHelper(permissions),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var char = _step.value;

              switch (char) {
                case "r":
                  containerSASPermissions.read = true;
                  break;

                case "a":
                  containerSASPermissions.add = true;
                  break;

                case "c":
                  containerSASPermissions.create = true;
                  break;

                case "w":
                  containerSASPermissions.write = true;
                  break;

                case "d":
                  containerSASPermissions.delete = true;
                  break;

                case "l":
                  containerSASPermissions.list = true;
                  break;

                case "t":
                  containerSASPermissions.tag = true;
                  break;

                case "x":
                  containerSASPermissions.deleteVersion = true;
                  break;

                case "m":
                  containerSASPermissions.move = true;
                  break;

                case "e":
                  containerSASPermissions.execute = true;
                  break;

                case "i":
                  containerSASPermissions.setImmutabilityPolicy = true;
                  break;

                case "y":
                  containerSASPermissions.permanentDelete = true;
                  break;

                case "f":
                  containerSASPermissions.filterByTags = true;
                  break;

                default:
                  throw new RangeError("Invalid permission ".concat(char));
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          return containerSASPermissions;
        }
        /**
         * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it
         * and boolean values for them.
         *
         * @param permissionLike -
         */

      }, {
        key: "from",
        value: function from(permissionLike) {
          var containerSASPermissions = new ContainerSASPermissions();

          if (permissionLike.read) {
            containerSASPermissions.read = true;
          }

          if (permissionLike.add) {
            containerSASPermissions.add = true;
          }

          if (permissionLike.create) {
            containerSASPermissions.create = true;
          }

          if (permissionLike.write) {
            containerSASPermissions.write = true;
          }

          if (permissionLike.delete) {
            containerSASPermissions.delete = true;
          }

          if (permissionLike.list) {
            containerSASPermissions.list = true;
          }

          if (permissionLike.deleteVersion) {
            containerSASPermissions.deleteVersion = true;
          }

          if (permissionLike.tag) {
            containerSASPermissions.tag = true;
          }

          if (permissionLike.move) {
            containerSASPermissions.move = true;
          }

          if (permissionLike.execute) {
            containerSASPermissions.execute = true;
          }

          if (permissionLike.setImmutabilityPolicy) {
            containerSASPermissions.setImmutabilityPolicy = true;
          }

          if (permissionLike.permanentDelete) {
            containerSASPermissions.permanentDelete = true;
          }

          if (permissionLike.filterByTags) {
            containerSASPermissions.filterByTags = true;
          }

          return containerSASPermissions;
        }
      }]);

      return ContainerSASPermissions;
    }();

    exports.ContainerSASPermissions = ContainerSASPermissions;
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserDelegationKeyCredential = void 0;

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.


    var UserDelegationKeyCredential = /*#__PURE__*/_createClass(function UserDelegationKeyCredential() {
      _classCallCheck(this, UserDelegationKeyCredential);
    });

    exports.UserDelegationKeyCredential = UserDelegationKeyCredential;
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ipRangeToString = ipRangeToString; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Generate SasIPRange format string. For example:
     *
     * "8.8.8.8" or "1.1.1.1-255.255.255.255"
     *
     * @param ipRange -
     */

    function ipRangeToString(ipRange) {
      return ipRange.end ? "".concat(ipRange.start, "-").concat(ipRange.end) : ipRange.start;
    }
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SASQueryParameters = exports.SASProtocol = void 0;

    var _SasIPRange = require("./SasIPRange");

    var _utils = require("../utils/utils.common");

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /**
     * Protocols for generated SAS.
     */


    var SASProtocol;
    exports.SASProtocol = SASProtocol;

    (function (SASProtocol) {
      /**
       * Protocol that allows HTTPS only
       */
      SASProtocol["Https"] = "https";
      /**
       * Protocol that allows both HTTPS and HTTP
       */

      SASProtocol["HttpsAndHttp"] = "https,http";
    })(SASProtocol || (exports.SASProtocol = SASProtocol = {}));
    /**
     * Represents the components that make up an Azure Storage SAS' query parameters. This type is not constructed directly
     * by the user; it is only generated by the {@link AccountSASSignatureValues} and {@link BlobSASSignatureValues}
     * types. Once generated, it can be encoded into a {@link String} and appended to a URL directly (though caution should
     * be taken here in case there are existing query parameters, which might affect the appropriate means of appending
     * these query parameters).
     *
     * NOTE: Instances of this class are immutable.
     */


    var SASQueryParameters = /*#__PURE__*/function () {
      function SASQueryParameters(version, signature, permissionsOrOptions, services, resourceTypes, protocol, startsOn, expiresOn, ipRange, identifier, resource, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, userDelegationKey, preauthorizedAgentObjectId, correlationId, encryptionScope) {
        _classCallCheck(this, SASQueryParameters);

        this.version = version;
        this.signature = signature;

        if (permissionsOrOptions !== undefined && typeof permissionsOrOptions !== "string") {
          // SASQueryParametersOptions
          this.permissions = permissionsOrOptions.permissions;
          this.services = permissionsOrOptions.services;
          this.resourceTypes = permissionsOrOptions.resourceTypes;
          this.protocol = permissionsOrOptions.protocol;
          this.startsOn = permissionsOrOptions.startsOn;
          this.expiresOn = permissionsOrOptions.expiresOn;
          this.ipRangeInner = permissionsOrOptions.ipRange;
          this.identifier = permissionsOrOptions.identifier;
          this.encryptionScope = permissionsOrOptions.encryptionScope;
          this.resource = permissionsOrOptions.resource;
          this.cacheControl = permissionsOrOptions.cacheControl;
          this.contentDisposition = permissionsOrOptions.contentDisposition;
          this.contentEncoding = permissionsOrOptions.contentEncoding;
          this.contentLanguage = permissionsOrOptions.contentLanguage;
          this.contentType = permissionsOrOptions.contentType;

          if (permissionsOrOptions.userDelegationKey) {
            this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId;
            this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId;
            this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn;
            this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn;
            this.signedService = permissionsOrOptions.userDelegationKey.signedService;
            this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion;
            this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId;
            this.correlationId = permissionsOrOptions.correlationId;
          }
        } else {
          this.services = services;
          this.resourceTypes = resourceTypes;
          this.expiresOn = expiresOn;
          this.permissions = permissionsOrOptions;
          this.protocol = protocol;
          this.startsOn = startsOn;
          this.ipRangeInner = ipRange;
          this.encryptionScope = encryptionScope;
          this.identifier = identifier;
          this.resource = resource;
          this.cacheControl = cacheControl;
          this.contentDisposition = contentDisposition;
          this.contentEncoding = contentEncoding;
          this.contentLanguage = contentLanguage;
          this.contentType = contentType;

          if (userDelegationKey) {
            this.signedOid = userDelegationKey.signedObjectId;
            this.signedTenantId = userDelegationKey.signedTenantId;
            this.signedStartsOn = userDelegationKey.signedStartsOn;
            this.signedExpiresOn = userDelegationKey.signedExpiresOn;
            this.signedService = userDelegationKey.signedService;
            this.signedVersion = userDelegationKey.signedVersion;
            this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;
            this.correlationId = correlationId;
          }
        }
      }
      /**
       * Optional. IP range allowed for this SAS.
       *
       * @readonly
       */


      _createClass(SASQueryParameters, [{
        key: "ipRange",
        get: function get() {
          if (this.ipRangeInner) {
            return {
              end: this.ipRangeInner.end,
              start: this.ipRangeInner.start
            };
          }

          return undefined;
        }
        /**
         * Encodes all SAS query parameters into a string that can be appended to a URL.
         *
         */

      }, {
        key: "toString",
        value: function toString() {
          var params = ["sv", "ss", "srt", "spr", "st", "se", "sip", "si", "ses", "skoid", "sktid", "skt", "ske", "sks", "skv", "sr", "sp", "sig", "rscc", "rscd", "rsce", "rscl", "rsct", "saoid", "scid"];
          var queries = [];

          for (var _i = 0, _params = params; _i < _params.length; _i++) {
            var param = _params[_i];

            switch (param) {
              case "sv":
                this.tryAppendQueryParameter(queries, param, this.version);
                break;

              case "ss":
                this.tryAppendQueryParameter(queries, param, this.services);
                break;

              case "srt":
                this.tryAppendQueryParameter(queries, param, this.resourceTypes);
                break;

              case "spr":
                this.tryAppendQueryParameter(queries, param, this.protocol);
                break;

              case "st":
                this.tryAppendQueryParameter(queries, param, this.startsOn ? (0, _utils.truncatedISO8061Date)(this.startsOn, false) : undefined);
                break;

              case "se":
                this.tryAppendQueryParameter(queries, param, this.expiresOn ? (0, _utils.truncatedISO8061Date)(this.expiresOn, false) : undefined);
                break;

              case "sip":
                this.tryAppendQueryParameter(queries, param, this.ipRange ? (0, _SasIPRange.ipRangeToString)(this.ipRange) : undefined);
                break;

              case "si":
                this.tryAppendQueryParameter(queries, param, this.identifier);
                break;

              case "ses":
                this.tryAppendQueryParameter(queries, param, this.encryptionScope);
                break;

              case "skoid":
                // Signed object ID
                this.tryAppendQueryParameter(queries, param, this.signedOid);
                break;

              case "sktid":
                // Signed tenant ID
                this.tryAppendQueryParameter(queries, param, this.signedTenantId);
                break;

              case "skt":
                // Signed key start time
                this.tryAppendQueryParameter(queries, param, this.signedStartsOn ? (0, _utils.truncatedISO8061Date)(this.signedStartsOn, false) : undefined);
                break;

              case "ske":
                // Signed key expiry time
                this.tryAppendQueryParameter(queries, param, this.signedExpiresOn ? (0, _utils.truncatedISO8061Date)(this.signedExpiresOn, false) : undefined);
                break;

              case "sks":
                // Signed key service
                this.tryAppendQueryParameter(queries, param, this.signedService);
                break;

              case "skv":
                // Signed key version
                this.tryAppendQueryParameter(queries, param, this.signedVersion);
                break;

              case "sr":
                this.tryAppendQueryParameter(queries, param, this.resource);
                break;

              case "sp":
                this.tryAppendQueryParameter(queries, param, this.permissions);
                break;

              case "sig":
                this.tryAppendQueryParameter(queries, param, this.signature);
                break;

              case "rscc":
                this.tryAppendQueryParameter(queries, param, this.cacheControl);
                break;

              case "rscd":
                this.tryAppendQueryParameter(queries, param, this.contentDisposition);
                break;

              case "rsce":
                this.tryAppendQueryParameter(queries, param, this.contentEncoding);
                break;

              case "rscl":
                this.tryAppendQueryParameter(queries, param, this.contentLanguage);
                break;

              case "rsct":
                this.tryAppendQueryParameter(queries, param, this.contentType);
                break;

              case "saoid":
                this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);
                break;

              case "scid":
                this.tryAppendQueryParameter(queries, param, this.correlationId);
                break;
            }
          }

          return queries.join("&");
        }
        /**
         * A private helper method used to filter and append query key/value pairs into an array.
         *
         * @param queries -
         * @param key -
         * @param value -
         */

      }, {
        key: "tryAppendQueryParameter",
        value: function tryAppendQueryParameter(queries, key, value) {
          if (!value) {
            return;
          }

          key = encodeURIComponent(key);
          value = encodeURIComponent(value);

          if (key.length > 0 && value.length > 0) {
            queries.push("".concat(key, "=").concat(value));
          }
        }
      }]);

      return SASQueryParameters;
    }();

    exports.SASQueryParameters = SASQueryParameters;
  }, {
    "./SasIPRange": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js",
    "../utils/utils.common": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.generateBlobSASQueryParameters = generateBlobSASQueryParameters;

    var _BlobSASPermissions = require("./BlobSASPermissions");

    var _ContainerSASPermissions = require("./ContainerSASPermissions");

    var _StorageSharedKeyCredential = require("../credentials/StorageSharedKeyCredential");

    var _UserDelegationKeyCredential = require("../credentials/UserDelegationKeyCredential");

    var _SasIPRange = require("./SasIPRange");

    var _SASQueryParameters = require("./SASQueryParameters");

    var _constants = require("../utils/constants");

    var _utils = require("../utils/utils.common"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.


    function generateBlobSASQueryParameters(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {
      var version = blobSASSignatureValues.version ? blobSASSignatureValues.version : _constants.SERVICE_VERSION;
      var sharedKeyCredential = sharedKeyCredentialOrUserDelegationKey instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential ? sharedKeyCredentialOrUserDelegationKey : undefined;
      var userDelegationKeyCredential;

      if (sharedKeyCredential === undefined && accountName !== undefined) {
        userDelegationKeyCredential = new _UserDelegationKeyCredential.UserDelegationKeyCredential(accountName, sharedKeyCredentialOrUserDelegationKey);
      }

      if (sharedKeyCredential === undefined && userDelegationKeyCredential === undefined) {
        throw TypeError("Invalid sharedKeyCredential, userDelegationKey or accountName.");
      } // Version 2020-12-06 adds support for encryptionscope in SAS.


      if (version >= "2020-12-06") {
        if (sharedKeyCredential !== undefined) {
          return generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential);
        } else {
          return generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential);
        }
      } // Version 2019-12-12 adds support for the blob tags permission.
      // Version 2018-11-09 adds support for the signed resource and signed blob snapshot time fields.
      // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas#constructing-the-signature-string


      if (version >= "2018-11-09") {
        if (sharedKeyCredential !== undefined) {
          return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);
        } else {
          // Version 2020-02-10 delegation SAS signature construction includes preauthorizedAgentObjectId, agentObjectId, correlationId.
          if (version >= "2020-02-10") {
            return generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential);
          } else {
            return generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential);
          }
        }
      }

      if (version >= "2015-04-05") {
        if (sharedKeyCredential !== undefined) {
          return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);
        } else {
          throw new RangeError("'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.");
        }
      }

      throw new RangeError("'version' must be >= '2015-04-05'.");
    }
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     * IMPLEMENTATION FOR API VERSION FROM 2015-04-05 AND BEFORE 2018-11-09.
     *
     * Creates an instance of SASQueryParameters.
     *
     * Only accepts required settings needed to create a SAS. For optional settings please
     * set corresponding properties directly, such as permissions, startsOn and identifier.
     *
     * WARNING: When identifier is not provided, permissions and expiresOn are required.
     * You MUST assign value to identifier or expiresOn & permissions manually if you initial with
     * this constructor.
     *
     * @param blobSASSignatureValues -
     * @param sharedKeyCredential -
     */


    function generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential) {
      blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);

      if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
        throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
      }

      var resource = "c";

      if (blobSASSignatureValues.blobName) {
        resource = "b";
      } // Calling parse and toString guarantees the proper ordering and throws on invalid characters.


      var verifiedPermissions;

      if (blobSASSignatureValues.permissions) {
        if (blobSASSignatureValues.blobName) {
          verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        } else {
          verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        }
      } // Signature is generated on the un-url-encoded values.


      var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), blobSASSignatureValues.identifier, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "", blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "", blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "", blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "", blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""].join("\n");
      var signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
      return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);
    }
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.
     *
     * Creates an instance of SASQueryParameters.
     *
     * Only accepts required settings needed to create a SAS. For optional settings please
     * set corresponding properties directly, such as permissions, startsOn and identifier.
     *
     * WARNING: When identifier is not provided, permissions and expiresOn are required.
     * You MUST assign value to identifier or expiresOn & permissions manually if you initial with
     * this constructor.
     *
     * @param blobSASSignatureValues -
     * @param sharedKeyCredential -
     */


    function generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential) {
      blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);

      if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
        throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
      }

      var resource = "c";
      var timestamp = blobSASSignatureValues.snapshotTime;

      if (blobSASSignatureValues.blobName) {
        resource = "b";

        if (blobSASSignatureValues.snapshotTime) {
          resource = "bs";
        } else if (blobSASSignatureValues.versionId) {
          resource = "bv";
          timestamp = blobSASSignatureValues.versionId;
        }
      } // Calling parse and toString guarantees the proper ordering and throws on invalid characters.


      var verifiedPermissions;

      if (blobSASSignatureValues.permissions) {
        if (blobSASSignatureValues.blobName) {
          verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        } else {
          verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        }
      } // Signature is generated on the un-url-encoded values.


      var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), blobSASSignatureValues.identifier, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "", blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "", blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "", blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "", blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""].join("\n");
      var signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
      return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);
    }
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.
     *
     * Creates an instance of SASQueryParameters.
     *
     * Only accepts required settings needed to create a SAS. For optional settings please
     * set corresponding properties directly, such as permissions, startsOn and identifier.
     *
     * WARNING: When identifier is not provided, permissions and expiresOn are required.
     * You MUST assign value to identifier or expiresOn & permissions manually if you initial with
     * this constructor.
     *
     * @param blobSASSignatureValues -
     * @param sharedKeyCredential -
     */


    function generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential) {
      blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);

      if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
        throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
      }

      var resource = "c";
      var timestamp = blobSASSignatureValues.snapshotTime;

      if (blobSASSignatureValues.blobName) {
        resource = "b";

        if (blobSASSignatureValues.snapshotTime) {
          resource = "bs";
        } else if (blobSASSignatureValues.versionId) {
          resource = "bv";
          timestamp = blobSASSignatureValues.versionId;
        }
      } // Calling parse and toString guarantees the proper ordering and throws on invalid characters.


      var verifiedPermissions;

      if (blobSASSignatureValues.permissions) {
        if (blobSASSignatureValues.blobName) {
          verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        } else {
          verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        }
      } // Signature is generated on the un-url-encoded values.


      var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), blobSASSignatureValues.identifier, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.encryptionScope, blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "", blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "", blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "", blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "", blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""].join("\n");
      var signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
      return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, undefined, undefined, undefined, blobSASSignatureValues.encryptionScope);
    }
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.
     *
     * Creates an instance of SASQueryParameters.
     *
     * Only accepts required settings needed to create a SAS. For optional settings please
     * set corresponding properties directly, such as permissions, startsOn.
     *
     * WARNING: identifier will be ignored, permissions and expiresOn are required.
     *
     * @param blobSASSignatureValues -
     * @param userDelegationKeyCredential -
     */


    function generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential) {
      blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues); // Stored access policies are not supported for a user delegation SAS.

      if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
        throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
      }

      var resource = "c";
      var timestamp = blobSASSignatureValues.snapshotTime;

      if (blobSASSignatureValues.blobName) {
        resource = "b";

        if (blobSASSignatureValues.snapshotTime) {
          resource = "bs";
        } else if (blobSASSignatureValues.versionId) {
          resource = "bv";
          timestamp = blobSASSignatureValues.versionId;
        }
      } // Calling parse and toString guarantees the proper ordering and throws on invalid characters.


      var verifiedPermissions;

      if (blobSASSignatureValues.permissions) {
        if (blobSASSignatureValues.blobName) {
          verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        } else {
          verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        }
      } // Signature is generated on the un-url-encoded values.


      var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), userDelegationKeyCredential.userDelegationKey.signedObjectId, userDelegationKeyCredential.userDelegationKey.signedTenantId, userDelegationKeyCredential.userDelegationKey.signedStartsOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedService, userDelegationKeyCredential.userDelegationKey.signedVersion, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType].join("\n");
      var signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
      return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey);
    }
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     * IMPLEMENTATION FOR API VERSION FROM 2020-02-10.
     *
     * Creates an instance of SASQueryParameters.
     *
     * Only accepts required settings needed to create a SAS. For optional settings please
     * set corresponding properties directly, such as permissions, startsOn.
     *
     * WARNING: identifier will be ignored, permissions and expiresOn are required.
     *
     * @param blobSASSignatureValues -
     * @param userDelegationKeyCredential -
     */


    function generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential) {
      blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues); // Stored access policies are not supported for a user delegation SAS.

      if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
        throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
      }

      var resource = "c";
      var timestamp = blobSASSignatureValues.snapshotTime;

      if (blobSASSignatureValues.blobName) {
        resource = "b";

        if (blobSASSignatureValues.snapshotTime) {
          resource = "bs";
        } else if (blobSASSignatureValues.versionId) {
          resource = "bv";
          timestamp = blobSASSignatureValues.versionId;
        }
      } // Calling parse and toString guarantees the proper ordering and throws on invalid characters.


      var verifiedPermissions;

      if (blobSASSignatureValues.permissions) {
        if (blobSASSignatureValues.blobName) {
          verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        } else {
          verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        }
      } // Signature is generated on the un-url-encoded values.


      var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), userDelegationKeyCredential.userDelegationKey.signedObjectId, userDelegationKeyCredential.userDelegationKey.signedTenantId, userDelegationKeyCredential.userDelegationKey.signedStartsOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedService, userDelegationKeyCredential.userDelegationKey.signedVersion, blobSASSignatureValues.preauthorizedAgentObjectId, undefined, blobSASSignatureValues.correlationId, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType].join("\n");
      var signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
      return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId);
    }
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.
     *
     * Creates an instance of SASQueryParameters.
     *
     * Only accepts required settings needed to create a SAS. For optional settings please
     * set corresponding properties directly, such as permissions, startsOn.
     *
     * WARNING: identifier will be ignored, permissions and expiresOn are required.
     *
     * @param blobSASSignatureValues -
     * @param userDelegationKeyCredential -
     */


    function generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential) {
      blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues); // Stored access policies are not supported for a user delegation SAS.

      if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
        throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
      }

      var resource = "c";
      var timestamp = blobSASSignatureValues.snapshotTime;

      if (blobSASSignatureValues.blobName) {
        resource = "b";

        if (blobSASSignatureValues.snapshotTime) {
          resource = "bs";
        } else if (blobSASSignatureValues.versionId) {
          resource = "bv";
          timestamp = blobSASSignatureValues.versionId;
        }
      } // Calling parse and toString guarantees the proper ordering and throws on invalid characters.


      var verifiedPermissions;

      if (blobSASSignatureValues.permissions) {
        if (blobSASSignatureValues.blobName) {
          verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        } else {
          verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        }
      } // Signature is generated on the un-url-encoded values.


      var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), userDelegationKeyCredential.userDelegationKey.signedObjectId, userDelegationKeyCredential.userDelegationKey.signedTenantId, userDelegationKeyCredential.userDelegationKey.signedStartsOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedService, userDelegationKeyCredential.userDelegationKey.signedVersion, blobSASSignatureValues.preauthorizedAgentObjectId, undefined, blobSASSignatureValues.correlationId, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.encryptionScope, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType].join("\n");
      var signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
      return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId, blobSASSignatureValues.encryptionScope);
    }

    function getCanonicalName(accountName, containerName, blobName) {
      // Container: "/blob/account/containerName"
      // Blob:      "/blob/account/containerName/blobName"
      var elements = ["/blob/".concat(accountName, "/").concat(containerName)];

      if (blobName) {
        elements.push("/".concat(blobName));
      }

      return elements.join("");
    }

    function SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues) {
      var version = blobSASSignatureValues.version ? blobSASSignatureValues.version : _constants.SERVICE_VERSION;

      if (blobSASSignatureValues.snapshotTime && version < "2018-11-09") {
        throw RangeError("'version' must be >= '2018-11-09' when providing 'snapshotTime'.");
      }

      if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.snapshotTime) {
        throw RangeError("Must provide 'blobName' when providing 'snapshotTime'.");
      }

      if (blobSASSignatureValues.versionId && version < "2019-10-10") {
        throw RangeError("'version' must be >= '2019-10-10' when providing 'versionId'.");
      }

      if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.versionId) {
        throw RangeError("Must provide 'blobName' when providing 'versionId'.");
      }

      if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.setImmutabilityPolicy && version < "2020-08-04") {
        throw RangeError("'version' must be >= '2020-08-04' when provided 'i' permission.");
      }

      if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.deleteVersion && version < "2019-10-10") {
        throw RangeError("'version' must be >= '2019-10-10' when providing 'x' permission.");
      }

      if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.permanentDelete && version < "2019-10-10") {
        throw RangeError("'version' must be >= '2019-10-10' when providing 'y' permission.");
      }

      if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.tag && version < "2019-12-12") {
        throw RangeError("'version' must be >= '2019-12-12' when providing 't' permission.");
      }

      if (version < "2020-02-10" && blobSASSignatureValues.permissions && (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)) {
        throw RangeError("'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.");
      }

      if (version < "2021-04-10" && blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.filterByTags) {
        throw RangeError("'version' must be >= '2021-04-10' when providing the 'f' permission.");
      }

      if (version < "2020-02-10" && (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)) {
        throw RangeError("'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.");
      }

      if (blobSASSignatureValues.encryptionScope && version < "2020-12-06") {
        throw RangeError("'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.");
      }

      blobSASSignatureValues.version = version;
      return blobSASSignatureValues;
    }
  }, {
    "./BlobSASPermissions": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js",
    "./ContainerSASPermissions": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js",
    "../credentials/StorageSharedKeyCredential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js",
    "../credentials/UserDelegationKeyCredential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.browser.js",
    "./SasIPRange": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js",
    "./SASQueryParameters": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js",
    "../utils/constants": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js",
    "../utils/utils.common": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StorageClient = void 0;

    var _operations = require("./operations");

    var _storageClientContext = require("./storageClientContext");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    var StorageClient = /*#__PURE__*/function (_StorageClientContext) {
      _inherits(StorageClient, _StorageClientContext);

      var _super = _createSuper(StorageClient);
      /**
       * Initializes a new instance of the StorageClient class.
       * @param url The URL of the service account, container, or blob that is the target of the desired
       *            operation.
       * @param options The parameter options
       */


      function StorageClient(url, options) {
        var _this;

        _classCallCheck(this, StorageClient);

        _this = _super.call(this, url, options);
        _this.service = new _operations.Service(_assertThisInitialized(_this));
        _this.container = new _operations.Container(_assertThisInitialized(_this));
        _this.blob = new _operations.Blob(_assertThisInitialized(_this));
        _this.pageBlob = new _operations.PageBlob(_assertThisInitialized(_this));
        _this.appendBlob = new _operations.AppendBlob(_assertThisInitialized(_this));
        _this.blockBlob = new _operations.BlockBlob(_assertThisInitialized(_this));
        return _this;
      }

      return _createClass(StorageClient);
    }(_storageClientContext.StorageClientContext);

    exports.StorageClient = StorageClient;
  }, {
    "./operations": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js",
    "./storageClientContext": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClientContext.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      StorageClient: true,
      StorageClientContext: true
    };
    Object.defineProperty(exports, "StorageClient", {
      enumerable: true,
      get: function () {
        return _storageClient.StorageClient;
      }
    });
    Object.defineProperty(exports, "StorageClientContext", {
      enumerable: true,
      get: function () {
        return _storageClientContext.StorageClientContext;
      }
    });

    var _models = require("./models");

    Object.keys(_models).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _models[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _models[key];
        }
      });
    });

    var _storageClient = require("./storageClient");

    var _storageClientContext = require("./storageClientContext");
  }, {
    "./models": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/index.js",
    "./storageClient": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js",
    "./storageClientContext": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClientContext.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BlobLeaseClient = void 0;

    var _coreHttp = require("@azure/core-http");

    var _index = require("./generated/src/index");

    var _coreTracing = require("@azure/core-tracing");

    var _operations = require("./generated/src/operations");

    var _constants = require("./utils/constants");

    var _tracing = require("./utils/tracing");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /**
     * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.
     */


    var BlobLeaseClient = /*#__PURE__*/function () {
      /**
       * Creates an instance of BlobLeaseClient.
       * @param client - The client to make the lease operation requests.
       * @param leaseId - Initial proposed lease id.
       */
      function BlobLeaseClient(client, leaseId) {
        _classCallCheck(this, BlobLeaseClient);

        var clientContext = new _index.StorageClientContext(client.url, client.pipeline.toServiceClientOptions());
        this._url = client.url;

        if (client.name === undefined) {
          this._isContainer = true;
          this._containerOrBlobOperation = new _operations.Container(clientContext);
        } else {
          this._isContainer = false;
          this._containerOrBlobOperation = new _operations.Blob(clientContext);
        }

        if (!leaseId) {
          leaseId = (0, _coreHttp.generateUuid)();
        }

        this._leaseId = leaseId;
      }
      /**
       * Gets the lease Id.
       *
       * @readonly
       */


      _createClass(BlobLeaseClient, [{
        key: "leaseId",
        get: function get() {
          return this._leaseId;
        }
        /**
         * Gets the url.
         *
         * @readonly
         */

      }, {
        key: "url",
        get: function get() {
          return this._url;
        }
        /**
         * Establishes and manages a lock on a container for delete operations, or on a blob
         * for write and delete operations.
         * The lock duration can be 15 to 60 seconds, or can be infinite.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
         * and
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
         *
         * @param duration - Must be between 15 to 60 seconds, or infinite (-1)
         * @param options - option to configure lease management operations.
         * @returns Response data for acquire lease operation.
         */

      }, {
        key: "acquireLease",
        value: function () {
          var _acquireLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(duration) {
            var options,
                _a,
                _b,
                _c,
                _d,
                _e,
                _f,
                _createSpan,
                span,
                updatedOptions,
                _args = arguments;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                    _createSpan = (0, _tracing.createSpan)("BlobLeaseClient-acquireLease", options), span = _createSpan.span, updatedOptions = _createSpan.updatedOptions;

                    if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {
                      _context.next = 4;
                      break;
                    }

                    throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");

                  case 4:
                    _context.prev = 4;
                    _context.next = 7;
                    return this._containerOrBlobOperation.acquireLease(Object.assign({
                      abortSignal: options.abortSignal,
                      duration: duration,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions
                      }),
                      proposedLeaseId: this._leaseId
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    return _context.abrupt("return", _context.sent);

                  case 10:
                    _context.prev = 10;
                    _context.t0 = _context["catch"](4);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context.t0.message
                    });
                    throw _context.t0;

                  case 14:
                    _context.prev = 14;
                    span.end();
                    return _context.finish(14);

                  case 17:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[4, 10, 14, 17]]);
          }));

          function acquireLease(_x) {
            return _acquireLease.apply(this, arguments);
          }

          return acquireLease;
        }()
        /**
         * To change the ID of the lease.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
         * and
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
         *
         * @param proposedLeaseId - the proposed new lease Id.
         * @param options - option to configure lease management operations.
         * @returns Response data for change lease operation.
         */

      }, {
        key: "changeLease",
        value: function () {
          var _changeLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(proposedLeaseId) {
            var options,
                _a,
                _b,
                _c,
                _d,
                _e,
                _f,
                _createSpan2,
                span,
                updatedOptions,
                response,
                _args2 = arguments;

            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                    _createSpan2 = (0, _tracing.createSpan)("BlobLeaseClient-changeLease", options), span = _createSpan2.span, updatedOptions = _createSpan2.updatedOptions;

                    if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {
                      _context2.next = 4;
                      break;
                    }

                    throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");

                  case 4:
                    _context2.prev = 4;
                    _context2.next = 7;
                    return this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, Object.assign({
                      abortSignal: options.abortSignal,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions
                      })
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    response = _context2.sent;
                    this._leaseId = proposedLeaseId;
                    return _context2.abrupt("return", response);

                  case 12:
                    _context2.prev = 12;
                    _context2.t0 = _context2["catch"](4);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context2.t0.message
                    });
                    throw _context2.t0;

                  case 16:
                    _context2.prev = 16;
                    span.end();
                    return _context2.finish(16);

                  case 19:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this, [[4, 12, 16, 19]]);
          }));

          function changeLease(_x2) {
            return _changeLease.apply(this, arguments);
          }

          return changeLease;
        }()
        /**
         * To free the lease if it is no longer needed so that another client may
         * immediately acquire a lease against the container or the blob.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
         * and
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
         *
         * @param options - option to configure lease management operations.
         * @returns Response data for release lease operation.
         */

      }, {
        key: "releaseLease",
        value: function () {
          var _releaseLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var options,
                _a,
                _b,
                _c,
                _d,
                _e,
                _f,
                _createSpan3,
                span,
                updatedOptions,
                _args3 = arguments;

            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
                    _createSpan3 = (0, _tracing.createSpan)("BlobLeaseClient-releaseLease", options), span = _createSpan3.span, updatedOptions = _createSpan3.updatedOptions;

                    if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {
                      _context3.next = 4;
                      break;
                    }

                    throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");

                  case 4:
                    _context3.prev = 4;
                    _context3.next = 7;
                    return this._containerOrBlobOperation.releaseLease(this._leaseId, Object.assign({
                      abortSignal: options.abortSignal,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions
                      })
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    return _context3.abrupt("return", _context3.sent);

                  case 10:
                    _context3.prev = 10;
                    _context3.t0 = _context3["catch"](4);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context3.t0.message
                    });
                    throw _context3.t0;

                  case 14:
                    _context3.prev = 14;
                    span.end();
                    return _context3.finish(14);

                  case 17:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this, [[4, 10, 14, 17]]);
          }));

          function releaseLease() {
            return _releaseLease.apply(this, arguments);
          }

          return releaseLease;
        }()
        /**
         * To renew the lease.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
         * and
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
         *
         * @param options - Optional option to configure lease management operations.
         * @returns Response data for renew lease operation.
         */

      }, {
        key: "renewLease",
        value: function () {
          var _renewLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
            var options,
                _a,
                _b,
                _c,
                _d,
                _e,
                _f,
                _createSpan4,
                span,
                updatedOptions,
                _args4 = arguments;

            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};
                    _createSpan4 = (0, _tracing.createSpan)("BlobLeaseClient-renewLease", options), span = _createSpan4.span, updatedOptions = _createSpan4.updatedOptions;

                    if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {
                      _context4.next = 4;
                      break;
                    }

                    throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");

                  case 4:
                    _context4.prev = 4;
                    _context4.next = 7;
                    return this._containerOrBlobOperation.renewLease(this._leaseId, Object.assign({
                      abortSignal: options.abortSignal,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions
                      })
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    return _context4.abrupt("return", _context4.sent);

                  case 10:
                    _context4.prev = 10;
                    _context4.t0 = _context4["catch"](4);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context4.t0.message
                    });
                    throw _context4.t0;

                  case 14:
                    _context4.prev = 14;
                    span.end();
                    return _context4.finish(14);

                  case 17:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this, [[4, 10, 14, 17]]);
          }));

          function renewLease() {
            return _renewLease.apply(this, arguments);
          }

          return renewLease;
        }()
        /**
         * To end the lease but ensure that another client cannot acquire a new lease
         * until the current lease period has expired.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
         * and
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
         *
         * @param breakPeriod - Break period
         * @param options - Optional options to configure lease management operations.
         * @returns Response data for break lease operation.
         */

      }, {
        key: "breakLease",
        value: function () {
          var _breakLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(breakPeriod) {
            var options,
                _a,
                _b,
                _c,
                _d,
                _e,
                _f,
                _createSpan5,
                span,
                updatedOptions,
                operationOptions,
                _args5 = arguments;

            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};
                    _createSpan5 = (0, _tracing.createSpan)("BlobLeaseClient-breakLease", options), span = _createSpan5.span, updatedOptions = _createSpan5.updatedOptions;

                    if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {
                      _context5.next = 4;
                      break;
                    }

                    throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");

                  case 4:
                    _context5.prev = 4;
                    operationOptions = Object.assign({
                      abortSignal: options.abortSignal,
                      breakPeriod: breakPeriod,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions
                      })
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions));
                    _context5.next = 8;
                    return this._containerOrBlobOperation.breakLease(operationOptions);

                  case 8:
                    return _context5.abrupt("return", _context5.sent);

                  case 11:
                    _context5.prev = 11;
                    _context5.t0 = _context5["catch"](4);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context5.t0.message
                    });
                    throw _context5.t0;

                  case 15:
                    _context5.prev = 15;
                    span.end();
                    return _context5.finish(15);

                  case 18:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this, [[4, 11, 15, 18]]);
          }));

          function breakLease(_x3) {
            return _breakLease.apply(this, arguments);
          }

          return breakLease;
        }()
      }]);

      return BlobLeaseClient;
    }();

    exports.BlobLeaseClient = BlobLeaseClient;
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "./generated/src/index": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/index.js",
    "@azure/core-tracing": "../node_modules/@azure/core-tracing/dist-esm/src/index.js",
    "./generated/src/operations": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js",
    "./utils/constants": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js",
    "./utils/tracing": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BlobDownloadResponse = void 0; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    // This file is used as a shim of "BlobDownloadResponse" for some browser bundlers
    // when trying to bundle "BlobDownloadResponse"
    // "BlobDownloadResponse" class is only available in Node.js runtime

    var BlobDownloadResponse = 1;
    exports.BlobDownloadResponse = BlobDownloadResponse;
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BlobQueryResponse = void 0;

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * ONLY AVAILABLE IN BROWSER RUNTIME.
     *
     * BlobQueryResponse implements BlobDownloadResponseModel interface, and in browser runtime it will
     * parse avor data returned by blob query.
     */


    var BlobQueryResponse = /*#__PURE__*/function () {
      /**
       * Creates an instance of BlobQueryResponse.
       *
       * @param originalResponse -
       * @param options -
       */
      function BlobQueryResponse(originalResponse) {
        var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, BlobQueryResponse);

        this.originalResponse = originalResponse;
      }
      /**
       * Indicates that the service supports
       * requests for partial file content.
       *
       * @readonly
       */


      _createClass(BlobQueryResponse, [{
        key: "acceptRanges",
        get: function get() {
          return this.originalResponse.acceptRanges;
        }
        /**
         * Returns if it was previously specified
         * for the file.
         *
         * @readonly
         */

      }, {
        key: "cacheControl",
        get: function get() {
          return this.originalResponse.cacheControl;
        }
        /**
         * Returns the value that was specified
         * for the 'x-ms-content-disposition' header and specifies how to process the
         * response.
         *
         * @readonly
         */

      }, {
        key: "contentDisposition",
        get: function get() {
          return this.originalResponse.contentDisposition;
        }
        /**
         * Returns the value that was specified
         * for the Content-Encoding request header.
         *
         * @readonly
         */

      }, {
        key: "contentEncoding",
        get: function get() {
          return this.originalResponse.contentEncoding;
        }
        /**
         * Returns the value that was specified
         * for the Content-Language request header.
         *
         * @readonly
         */

      }, {
        key: "contentLanguage",
        get: function get() {
          return this.originalResponse.contentLanguage;
        }
        /**
         * The current sequence number for a
         * page blob. This header is not returned for block blobs or append blobs.
         *
         * @readonly
         */

      }, {
        key: "blobSequenceNumber",
        get: function get() {
          return this.originalResponse.blobSequenceNumber;
        }
        /**
         * The blob's type. Possible values include:
         * 'BlockBlob', 'PageBlob', 'AppendBlob'.
         *
         * @readonly
         */

      }, {
        key: "blobType",
        get: function get() {
          return this.originalResponse.blobType;
        }
        /**
         * The number of bytes present in the
         * response body.
         *
         * @readonly
         */

      }, {
        key: "contentLength",
        get: function get() {
          return this.originalResponse.contentLength;
        }
        /**
         * If the file has an MD5 hash and the
         * request is to read the full file, this response header is returned so that
         * the client can check for message content integrity. If the request is to
         * read a specified range and the 'x-ms-range-get-content-md5' is set to
         * true, then the request returns an MD5 hash for the range, as long as the
         * range size is less than or equal to 4 MB. If neither of these sets of
         * conditions is true, then no value is returned for the 'Content-MD5'
         * header.
         *
         * @readonly
         */

      }, {
        key: "contentMD5",
        get: function get() {
          return this.originalResponse.contentMD5;
        }
        /**
         * Indicates the range of bytes returned if
         * the client requested a subset of the file by setting the Range request
         * header.
         *
         * @readonly
         */

      }, {
        key: "contentRange",
        get: function get() {
          return this.originalResponse.contentRange;
        }
        /**
         * The content type specified for the file.
         * The default content type is 'application/octet-stream'
         *
         * @readonly
         */

      }, {
        key: "contentType",
        get: function get() {
          return this.originalResponse.contentType;
        }
        /**
         * Conclusion time of the last attempted
         * Copy File operation where this file was the destination file. This value
         * can specify the time of a completed, aborted, or failed copy attempt.
         *
         * @readonly
         */

      }, {
        key: "copyCompletedOn",
        get: function get() {
          return undefined;
        }
        /**
         * String identifier for the last attempted Copy
         * File operation where this file was the destination file.
         *
         * @readonly
         */

      }, {
        key: "copyId",
        get: function get() {
          return this.originalResponse.copyId;
        }
        /**
         * Contains the number of bytes copied and
         * the total bytes in the source in the last attempted Copy File operation
         * where this file was the destination file. Can show between 0 and
         * Content-Length bytes copied.
         *
         * @readonly
         */

      }, {
        key: "copyProgress",
        get: function get() {
          return this.originalResponse.copyProgress;
        }
        /**
         * URL up to 2KB in length that specifies the
         * source file used in the last attempted Copy File operation where this file
         * was the destination file.
         *
         * @readonly
         */

      }, {
        key: "copySource",
        get: function get() {
          return this.originalResponse.copySource;
        }
        /**
         * State of the copy operation
         * identified by 'x-ms-copy-id'. Possible values include: 'pending',
         * 'success', 'aborted', 'failed'
         *
         * @readonly
         */

      }, {
        key: "copyStatus",
        get: function get() {
          return this.originalResponse.copyStatus;
        }
        /**
         * Only appears when
         * x-ms-copy-status is failed or pending. Describes cause of fatal or
         * non-fatal copy operation failure.
         *
         * @readonly
         */

      }, {
        key: "copyStatusDescription",
        get: function get() {
          return this.originalResponse.copyStatusDescription;
        }
        /**
         * When a blob is leased,
         * specifies whether the lease is of infinite or fixed duration. Possible
         * values include: 'infinite', 'fixed'.
         *
         * @readonly
         */

      }, {
        key: "leaseDuration",
        get: function get() {
          return this.originalResponse.leaseDuration;
        }
        /**
         * Lease state of the blob. Possible
         * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.
         *
         * @readonly
         */

      }, {
        key: "leaseState",
        get: function get() {
          return this.originalResponse.leaseState;
        }
        /**
         * The current lease status of the
         * blob. Possible values include: 'locked', 'unlocked'.
         *
         * @readonly
         */

      }, {
        key: "leaseStatus",
        get: function get() {
          return this.originalResponse.leaseStatus;
        }
        /**
         * A UTC date/time value generated by the service that
         * indicates the time at which the response was initiated.
         *
         * @readonly
         */

      }, {
        key: "date",
        get: function get() {
          return this.originalResponse.date;
        }
        /**
         * The number of committed blocks
         * present in the blob. This header is returned only for append blobs.
         *
         * @readonly
         */

      }, {
        key: "blobCommittedBlockCount",
        get: function get() {
          return this.originalResponse.blobCommittedBlockCount;
        }
        /**
         * The ETag contains a value that you can use to
         * perform operations conditionally, in quotes.
         *
         * @readonly
         */

      }, {
        key: "etag",
        get: function get() {
          return this.originalResponse.etag;
        }
        /**
         * The error code.
         *
         * @readonly
         */

      }, {
        key: "errorCode",
        get: function get() {
          return this.originalResponse.errorCode;
        }
        /**
         * The value of this header is set to
         * true if the file data and application metadata are completely encrypted
         * using the specified algorithm. Otherwise, the value is set to false (when
         * the file is unencrypted, or if only parts of the file/application metadata
         * are encrypted).
         *
         * @readonly
         */

      }, {
        key: "isServerEncrypted",
        get: function get() {
          return this.originalResponse.isServerEncrypted;
        }
        /**
         * If the blob has a MD5 hash, and if
         * request contains range header (Range or x-ms-range), this response header
         * is returned with the value of the whole blob's MD5 value. This value may
         * or may not be equal to the value returned in Content-MD5 header, with the
         * latter calculated from the requested range.
         *
         * @readonly
         */

      }, {
        key: "blobContentMD5",
        get: function get() {
          return this.originalResponse.blobContentMD5;
        }
        /**
         * Returns the date and time the file was last
         * modified. Any operation that modifies the file or its properties updates
         * the last modified time.
         *
         * @readonly
         */

      }, {
        key: "lastModified",
        get: function get() {
          return this.originalResponse.lastModified;
        }
        /**
         * A name-value pair
         * to associate with a file storage object.
         *
         * @readonly
         */

      }, {
        key: "metadata",
        get: function get() {
          return this.originalResponse.metadata;
        }
        /**
         * This header uniquely identifies the request
         * that was made and can be used for troubleshooting the request.
         *
         * @readonly
         */

      }, {
        key: "requestId",
        get: function get() {
          return this.originalResponse.requestId;
        }
        /**
         * If a client request id header is sent in the request, this header will be present in the
         * response with the same value.
         *
         * @readonly
         */

      }, {
        key: "clientRequestId",
        get: function get() {
          return this.originalResponse.clientRequestId;
        }
        /**
         * Indicates the version of the File service used
         * to execute the request.
         *
         * @readonly
         */

      }, {
        key: "version",
        get: function get() {
          return this.originalResponse.version;
        }
        /**
         * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned
         * when the blob was encrypted with a customer-provided key.
         *
         * @readonly
         */

      }, {
        key: "encryptionKeySha256",
        get: function get() {
          return this.originalResponse.encryptionKeySha256;
        }
        /**
         * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to
         * true, then the request returns a crc64 for the range, as long as the range size is less than
         * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is
         * specified in the same request, it will fail with 400(Bad Request)
         */

      }, {
        key: "contentCrc64",
        get: function get() {
          return this.originalResponse.contentCrc64;
        }
        /**
         * The response body as a browser Blob.
         * Always undefined in node.js.
         *
         * @readonly
         */

      }, {
        key: "blobBody",
        get: function get() {
          throw Error("Quick query in browser is not supported yet.");
        }
        /**
         * The response body as a node.js Readable stream.
         * Always undefined in the browser.
         *
         * @readonly
         */

      }, {
        key: "readableStreamBody",
        get: function get() {
          return undefined;
        }
        /**
         * The HTTP response.
         */

      }, {
        key: "_response",
        get: function get() {
          return this.originalResponse._response;
        }
      }]);

      return BlobQueryResponse;
    }();

    exports.BlobQueryResponse = BlobQueryResponse;
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StorageBlobAudience = exports.PremiumPageBlobTier = exports.BlockBlobTier = void 0;
    exports.ensureCpkIfSpecified = ensureCpkIfSpecified;
    exports.toAccessTier = toAccessTier;

    var _constants = require("./utils/constants"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Represents the access tier on a blob.
     * For detailed information about block blob level tiering see {@link https://docs.microsoft.com/azure/storage/blobs/storage-blob-storage-tiers|Hot, cool and archive storage tiers.}
     */


    var BlockBlobTier;
    exports.BlockBlobTier = BlockBlobTier;

    (function (BlockBlobTier) {
      /**
       * Optimized for storing data that is accessed frequently.
       */
      BlockBlobTier["Hot"] = "Hot";
      /**
       * Optimized for storing data that is infrequently accessed and stored for at least 30 days.
       */

      BlockBlobTier["Cool"] = "Cool";
      /**
       * Optimized for storing data that is rarely accessed and stored for at least 180 days
       * with flexible latency requirements (on the order of hours).
       */

      BlockBlobTier["Archive"] = "Archive";
    })(BlockBlobTier || (exports.BlockBlobTier = BlockBlobTier = {}));
    /**
     * Specifies the page blob tier to set the blob to. This is only applicable to page blobs on premium storage accounts.
     * Please see {@link https://docs.microsoft.com/azure/storage/storage-premium-storage#scalability-and-performance-targets|here}
     * for detailed information on the corresponding IOPS and throughput per PageBlobTier.
     */


    var PremiumPageBlobTier;
    exports.PremiumPageBlobTier = PremiumPageBlobTier;

    (function (PremiumPageBlobTier) {
      /**
       * P4 Tier.
       */
      PremiumPageBlobTier["P4"] = "P4";
      /**
       * P6 Tier.
       */

      PremiumPageBlobTier["P6"] = "P6";
      /**
       * P10 Tier.
       */

      PremiumPageBlobTier["P10"] = "P10";
      /**
       * P15 Tier.
       */

      PremiumPageBlobTier["P15"] = "P15";
      /**
       * P20 Tier.
       */

      PremiumPageBlobTier["P20"] = "P20";
      /**
       * P30 Tier.
       */

      PremiumPageBlobTier["P30"] = "P30";
      /**
       * P40 Tier.
       */

      PremiumPageBlobTier["P40"] = "P40";
      /**
       * P50 Tier.
       */

      PremiumPageBlobTier["P50"] = "P50";
      /**
       * P60 Tier.
       */

      PremiumPageBlobTier["P60"] = "P60";
      /**
       * P70 Tier.
       */

      PremiumPageBlobTier["P70"] = "P70";
      /**
       * P80 Tier.
       */

      PremiumPageBlobTier["P80"] = "P80";
    })(PremiumPageBlobTier || (exports.PremiumPageBlobTier = PremiumPageBlobTier = {}));

    function toAccessTier(tier) {
      if (tier === undefined) {
        return undefined;
      }

      return tier; // No more check if string is a valid AccessTier, and left this to underlay logic to decide(service).
    }

    function ensureCpkIfSpecified(cpk, isHttps) {
      if (cpk && !isHttps) {
        throw new RangeError("Customer-provided encryption key must be used over HTTPS.");
      }

      if (cpk && !cpk.encryptionAlgorithm) {
        cpk.encryptionAlgorithm = _constants.EncryptionAlgorithmAES25;
      }
    }
    /**
     * Defines the known cloud audiences for Storage.
     */


    var StorageBlobAudience;
    exports.StorageBlobAudience = StorageBlobAudience;

    (function (StorageBlobAudience) {
      /**
       * The OAuth scope to use to retrieve an AAD token for Azure Storage.
       */
      StorageBlobAudience["StorageOAuthScopes"] = "https://storage.azure.com/.default";
      /**
       * The OAuth scope to use to retrieve an AAD token for Azure Disk.
       */

      StorageBlobAudience["DiskComputeOAuthScopes"] = "https://disk.compute.azure.com/.default";
    })(StorageBlobAudience || (exports.StorageBlobAudience = StorageBlobAudience = {}));
  }, {
    "./utils/constants": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.rangeResponseFromModel = rangeResponseFromModel; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Function that converts PageRange and ClearRange to a common Range object.
     * PageRange and ClearRange have start and end while Range offset and count
     * this function normalizes to Range.
     * @param response - Model PageBlob Range response
     */

    function rangeResponseFromModel(response) {
      var pageRange = (response._response.parsedBody.pageRange || []).map(function (x) {
        return {
          offset: x.start,
          count: x.end - x.start
        };
      });
      var clearRange = (response._response.parsedBody.clearRange || []).map(function (x) {
        return {
          offset: x.start,
          count: x.end - x.start
        };
      });
      return Object.assign(Object.assign({}, response), {
        pageRange: pageRange,
        clearRange: clearRange,
        _response: Object.assign(Object.assign({}, response._response), {
          parsedBody: {
            pageRange: pageRange,
            clearRange: clearRange
          }
        })
      });
    }
  }, {}],
  "../node_modules/@azure/core-lro/dist-esm/src/pollOperation.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@azure/core-lro/dist-esm/src/poller.js": [function (require, module, exports) {
    var define;
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PollerStoppedError = exports.PollerCancelledError = exports.Poller = void 0;

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? new Map() : undefined;

      _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;

        if (typeof Class !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }

        if (typeof _cache !== "undefined") {
          if (_cache.has(Class)) return _cache.get(Class);

          _cache.set(Class, Wrapper);
        }

        function Wrapper() {
          return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }

        Wrapper.prototype = Object.create(Class.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        return _setPrototypeOf(Wrapper, Class);
      };

      return _wrapNativeSuper(Class);
    }

    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct.bind();
      } else {
        _construct = function _construct(Parent, args, Class) {
          var a = [null];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class) _setPrototypeOf(instance, Class.prototype);
          return instance;
        };
      }

      return _construct.apply(null, arguments);
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * When a poller is manually stopped through the `stopPolling` method,
     * the poller will be rejected with an instance of the PollerStoppedError.
     */


    var PollerStoppedError = /*#__PURE__*/function (_Error) {
      _inherits(PollerStoppedError, _Error);

      var _super = _createSuper(PollerStoppedError);

      function PollerStoppedError(message) {
        var _this;

        _classCallCheck(this, PollerStoppedError);

        _this = _super.call(this, message);
        _this.name = "PollerStoppedError";
        Object.setPrototypeOf(_assertThisInitialized(_this), PollerStoppedError.prototype);
        return _this;
      }

      return _createClass(PollerStoppedError);
    }( /*#__PURE__*/_wrapNativeSuper(Error));
    /**
     * When a poller is cancelled through the `cancelOperation` method,
     * the poller will be rejected with an instance of the PollerCancelledError.
     */


    exports.PollerStoppedError = PollerStoppedError;

    var PollerCancelledError = /*#__PURE__*/function (_Error2) {
      _inherits(PollerCancelledError, _Error2);

      var _super2 = _createSuper(PollerCancelledError);

      function PollerCancelledError(message) {
        var _this2;

        _classCallCheck(this, PollerCancelledError);

        _this2 = _super2.call(this, message);
        _this2.name = "PollerCancelledError";
        Object.setPrototypeOf(_assertThisInitialized(_this2), PollerCancelledError.prototype);
        return _this2;
      }

      return _createClass(PollerCancelledError);
    }( /*#__PURE__*/_wrapNativeSuper(Error));
    /**
     * A class that represents the definition of a program that polls through consecutive requests
     * until it reaches a state of completion.
     *
     * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.
     * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.
     * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.
     *
     * ```ts
     * const poller = new MyPoller();
     *
     * // Polling just once:
     * await poller.poll();
     *
     * // We can try to cancel the request here, by calling:
     * //
     * //     await poller.cancelOperation();
     * //
     *
     * // Getting the final result:
     * const result = await poller.pollUntilDone();
     * ```
     *
     * The Poller is defined by two types, a type representing the state of the poller, which
     * must include a basic set of properties from `PollOperationState<TResult>`,
     * and a return type defined by `TResult`, which can be anything.
     *
     * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having
     * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.
     *
     * ```ts
     * class Client {
     *   public async makePoller: PollerLike<MyOperationState, MyResult> {
     *     const poller = new MyPoller({});
     *     // It might be preferred to return the poller after the first request is made,
     *     // so that some information can be obtained right away.
     *     await poller.poll();
     *     return poller;
     *   }
     * }
     *
     * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();
     * ```
     *
     * A poller can be created through its constructor, then it can be polled until it's completed.
     * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.
     * At any point in time, the intermediate forms of the result type can be requested without delay.
     * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.
     *
     * ```ts
     * const poller = myClient.makePoller();
     * const state: MyOperationState = poller.getOperationState();
     *
     * // The intermediate result can be obtained at any time.
     * const result: MyResult | undefined = poller.getResult();
     *
     * // The final result can only be obtained after the poller finishes.
     * const result: MyResult = await poller.pollUntilDone();
     * ```
     *
     */
    // eslint-disable-next-line no-use-before-define


    exports.PollerCancelledError = PollerCancelledError;

    var Poller = /*#__PURE__*/function () {
      /**
       * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.
       *
       * When writing an implementation of a Poller, this implementation needs to deal with the initialization
       * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's
       * operation has already been defined, at least its basic properties. The code below shows how to approach
       * the definition of the constructor of a new custom poller.
       *
       * ```ts
       * export class MyPoller extends Poller<MyOperationState, string> {
       *   constructor({
       *     // Anything you might need outside of the basics
       *   }) {
       *     let state: MyOperationState = {
       *       privateProperty: private,
       *       publicProperty: public,
       *     };
       *
       *     const operation = {
       *       state,
       *       update,
       *       cancel,
       *       toString
       *     }
       *
       *     // Sending the operation to the parent's constructor.
       *     super(operation);
       *
       *     // You can assign more local properties here.
       *   }
       * }
       * ```
       *
       * Inside of this constructor, a new promise is created. This will be used to
       * tell the user when the poller finishes (see `pollUntilDone()`). The promise's
       * resolve and reject methods are also used internally to control when to resolve
       * or reject anyone waiting for the poller to finish.
       *
       * The constructor of a custom implementation of a poller is where any serialized version of
       * a previous poller's operation should be deserialized into the operation sent to the
       * base constructor. For example:
       *
       * ```ts
       * export class MyPoller extends Poller<MyOperationState, string> {
       *   constructor(
       *     baseOperation: string | undefined
       *   ) {
       *     let state: MyOperationState = {};
       *     if (baseOperation) {
       *       state = {
       *         ...JSON.parse(baseOperation).state,
       *         ...state
       *       };
       *     }
       *     const operation = {
       *       state,
       *       // ...
       *     }
       *     super(operation);
       *   }
       * }
       * ```
       *
       * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.
       */
      function Poller(operation) {
        var _this3 = this;

        _classCallCheck(this, Poller);

        this.stopped = true;
        this.pollProgressCallbacks = [];
        this.operation = operation;
        this.promise = new Promise(function (resolve, reject) {
          _this3.resolve = resolve;
          _this3.reject = reject;
        }); // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.
        // The above warning would get thrown if `poller.poll` is called, it returns an error,
        // and pullUntilDone did not have a .catch or await try/catch on it's return value.

        this.promise.catch(function () {
          /* intentionally blank */
        });
      }
      /**
       * Starts a loop that will break only if the poller is done
       * or if the poller is stopped.
       */


      _createClass(Poller, [{
        key: "startPolling",
        value: function () {
          var _startPolling = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (this.stopped) {
                      this.stopped = false;
                    }

                  case 1:
                    if (!(!this.isStopped() && !this.isDone())) {
                      _context.next = 8;
                      break;
                    }

                    _context.next = 4;
                    return this.poll();

                  case 4:
                    _context.next = 6;
                    return this.delay();

                  case 6:
                    _context.next = 1;
                    break;

                  case 8:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function startPolling() {
            return _startPolling.apply(this, arguments);
          }

          return startPolling;
        }()
        /**
         * pollOnce does one polling, by calling to the update method of the underlying
         * poll operation to make any relevant change effective.
         *
         * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
         *
         * @param options - Optional properties passed to the operation's update method.
         */

      }, {
        key: "pollOnce",
        value: function () {
          var _pollOnce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var options,
                _args2 = arguments;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
                    _context2.prev = 1;

                    if (this.isDone()) {
                      _context2.next = 7;
                      break;
                    }

                    _context2.next = 5;
                    return this.operation.update({
                      abortSignal: options.abortSignal,
                      fireProgress: this.fireProgress.bind(this)
                    });

                  case 5:
                    this.operation = _context2.sent;

                    if (this.isDone() && this.resolve) {
                      // If the poller has finished polling, this means we now have a result.
                      // However, it can be the case that TResult is instantiated to void, so
                      // we are not expecting a result anyway. To assert that we might not
                      // have a result eventually after finishing polling, we cast the result
                      // to TResult.
                      this.resolve(this.operation.state.result);
                    }

                  case 7:
                    _context2.next = 14;
                    break;

                  case 9:
                    _context2.prev = 9;
                    _context2.t0 = _context2["catch"](1);
                    this.operation.state.error = _context2.t0;

                    if (this.reject) {
                      this.reject(_context2.t0);
                    }

                    throw _context2.t0;

                  case 14:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this, [[1, 9]]);
          }));

          function pollOnce() {
            return _pollOnce.apply(this, arguments);
          }

          return pollOnce;
        }()
        /**
         * fireProgress calls the functions passed in via onProgress the method of the poller.
         *
         * It loops over all of the callbacks received from onProgress, and executes them, sending them
         * the current operation state.
         *
         * @param state - The current operation state.
         */

      }, {
        key: "fireProgress",
        value: function fireProgress(state) {
          var _iterator = _createForOfIteratorHelper(this.pollProgressCallbacks),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var callback = _step.value;
              callback(state);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
        /**
         * Invokes the underlying operation's cancel method, and rejects the
         * pollUntilDone promise.
         */

      }, {
        key: "cancelOnce",
        value: function () {
          var _cancelOnce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var options,
                _args3 = arguments;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
                    _context3.next = 3;
                    return this.operation.cancel(options);

                  case 3:
                    this.operation = _context3.sent;

                    if (this.reject) {
                      this.reject(new PollerCancelledError("Poller cancelled"));
                    }

                  case 5:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function cancelOnce() {
            return _cancelOnce.apply(this, arguments);
          }

          return cancelOnce;
        }()
        /**
         * Returns a promise that will resolve once a single polling request finishes.
         * It does this by calling the update method of the Poller's operation.
         *
         * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
         *
         * @param options - Optional properties passed to the operation's update method.
         */

      }, {
        key: "poll",
        value: function poll() {
          var _this4 = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          if (!this.pollOncePromise) {
            this.pollOncePromise = this.pollOnce(options);

            var clearPollOncePromise = function clearPollOncePromise() {
              _this4.pollOncePromise = undefined;
            };

            this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);
          }

          return this.pollOncePromise;
        }
        /**
         * Returns a promise that will resolve once the underlying operation is completed.
         */

      }, {
        key: "pollUntilDone",
        value: function () {
          var _pollUntilDone = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    if (this.stopped) {
                      this.startPolling().catch(this.reject);
                    }

                    return _context4.abrupt("return", this.promise);

                  case 2:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function pollUntilDone() {
            return _pollUntilDone.apply(this, arguments);
          }

          return pollUntilDone;
        }()
        /**
         * Invokes the provided callback after each polling is completed,
         * sending the current state of the poller's operation.
         *
         * It returns a method that can be used to stop receiving updates on the given callback function.
         */

      }, {
        key: "onProgress",
        value: function onProgress(callback) {
          var _this5 = this;

          this.pollProgressCallbacks.push(callback);
          return function () {
            _this5.pollProgressCallbacks = _this5.pollProgressCallbacks.filter(function (c) {
              return c !== callback;
            });
          };
        }
        /**
         * Returns true if the poller has finished polling.
         */

      }, {
        key: "isDone",
        value: function isDone() {
          var state = this.operation.state;
          return Boolean(state.isCompleted || state.isCancelled || state.error);
        }
        /**
         * Stops the poller from continuing to poll.
         */

      }, {
        key: "stopPolling",
        value: function stopPolling() {
          if (!this.stopped) {
            this.stopped = true;

            if (this.reject) {
              this.reject(new PollerStoppedError("This poller is already stopped"));
            }
          }
        }
        /**
         * Returns true if the poller is stopped.
         */

      }, {
        key: "isStopped",
        value: function isStopped() {
          return this.stopped;
        }
        /**
         * Attempts to cancel the underlying operation.
         *
         * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
         *
         * If it's called again before it finishes, it will throw an error.
         *
         * @param options - Optional properties passed to the operation's update method.
         */

      }, {
        key: "cancelOperation",
        value: function cancelOperation() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          if (!this.stopped) {
            this.stopped = true;
          }

          if (!this.cancelPromise) {
            this.cancelPromise = this.cancelOnce(options);
          } else if (options.abortSignal) {
            throw new Error("A cancel request is currently pending");
          }

          return this.cancelPromise;
        }
        /**
         * Returns the state of the operation.
         *
         * Even though TState will be the same type inside any of the methods of any extension of the Poller class,
         * implementations of the pollers can customize what's shared with the public by writing their own
         * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller
         * and a public type representing a safe to share subset of the properties of the internal state.
         * Their definition of getOperationState can then return their public type.
         *
         * Example:
         *
         * ```ts
         * // Let's say we have our poller's operation state defined as:
         * interface MyOperationState extends PollOperationState<ResultType> {
         *   privateProperty?: string;
         *   publicProperty?: string;
         * }
         *
         * // To allow us to have a true separation of public and private state, we have to define another interface:
         * interface PublicState extends PollOperationState<ResultType> {
         *   publicProperty?: string;
         * }
         *
         * // Then, we define our Poller as follows:
         * export class MyPoller extends Poller<MyOperationState, ResultType> {
         *   // ... More content is needed here ...
         *
         *   public getOperationState(): PublicState {
         *     const state: PublicState = this.operation.state;
         *     return {
         *       // Properties from PollOperationState<TResult>
         *       isStarted: state.isStarted,
         *       isCompleted: state.isCompleted,
         *       isCancelled: state.isCancelled,
         *       error: state.error,
         *       result: state.result,
         *
         *       // The only other property needed by PublicState.
         *       publicProperty: state.publicProperty
         *     }
         *   }
         * }
         * ```
         *
         * You can see this in the tests of this repository, go to the file:
         * `../test/utils/testPoller.ts`
         * and look for the getOperationState implementation.
         */

      }, {
        key: "getOperationState",
        value: function getOperationState() {
          return this.operation.state;
        }
        /**
         * Returns the result value of the operation,
         * regardless of the state of the poller.
         * It can return undefined or an incomplete form of the final TResult value
         * depending on the implementation.
         */

      }, {
        key: "getResult",
        value: function getResult() {
          var state = this.operation.state;
          return state.result;
        }
        /**
         * Returns a serialized version of the poller's operation
         * by invoking the operation's toString method.
         */

      }, {
        key: "toString",
        value: function toString() {
          return this.operation.toString();
        }
      }]);

      return Poller;
    }();

    exports.Poller = Poller;
  }, {}],
  "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/requestUtils.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getPollingUrl = getPollingUrl;
    exports.inferLroMode = inferLroMode;
    exports.isUnexpectedInitialResponse = isUnexpectedInitialResponse;
    exports.isUnexpectedPollingResponse = isUnexpectedPollingResponse;

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? new Map() : undefined;

      _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;

        if (typeof Class !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }

        if (typeof _cache !== "undefined") {
          if (_cache.has(Class)) return _cache.get(Class);

          _cache.set(Class, Wrapper);
        }

        function Wrapper() {
          return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }

        Wrapper.prototype = Object.create(Class.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        return _setPrototypeOf(Wrapper, Class);
      };

      return _wrapNativeSuper(Class);
    }

    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct.bind();
      } else {
        _construct = function _construct(Parent, args, Class) {
          var a = [null];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class) _setPrototypeOf(instance, Class.prototype);
          return instance;
        };
      }

      return _construct.apply(null, arguments);
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Detects where the continuation token is and returns it. Notice that azure-asyncoperation
     * must be checked first before the other location headers because there are scenarios
     * where both azure-asyncoperation and location could be present in the same response but
     * azure-asyncoperation should be the one to use for polling.
     */


    function getPollingUrl(rawResponse, defaultPath) {
      var _a, _b, _c;

      return (_c = (_b = (_a = getAzureAsyncOperation(rawResponse)) !== null && _a !== void 0 ? _a : getOperationLocation(rawResponse)) !== null && _b !== void 0 ? _b : getLocation(rawResponse)) !== null && _c !== void 0 ? _c : defaultPath;
    }

    function getLocation(rawResponse) {
      return rawResponse.headers["location"];
    }

    function getOperationLocation(rawResponse) {
      return rawResponse.headers["operation-location"];
    }

    function getAzureAsyncOperation(rawResponse) {
      return rawResponse.headers["azure-asyncoperation"];
    }

    function findResourceLocation(requestMethod, rawResponse, requestPath) {
      switch (requestMethod) {
        case "PUT":
          {
            return requestPath;
          }

        case "POST":
        case "PATCH":
          {
            return getLocation(rawResponse);
          }

        default:
          {
            return undefined;
          }
      }
    }

    function inferLroMode(requestPath, requestMethod, rawResponse) {
      if (getAzureAsyncOperation(rawResponse) !== undefined || getOperationLocation(rawResponse) !== undefined) {
        return {
          mode: "Location",
          resourceLocation: findResourceLocation(requestMethod, rawResponse, requestPath)
        };
      } else if (getLocation(rawResponse) !== undefined) {
        return {
          mode: "Location"
        };
      } else if (["PUT", "PATCH"].includes(requestMethod)) {
        return {
          mode: "Body"
        };
      }

      return {};
    }

    var SimpleRestError = /*#__PURE__*/function (_Error) {
      _inherits(SimpleRestError, _Error);

      var _super = _createSuper(SimpleRestError);

      function SimpleRestError(message, statusCode) {
        var _this;

        _classCallCheck(this, SimpleRestError);

        _this = _super.call(this, message);
        _this.name = "RestError";
        _this.statusCode = statusCode;
        Object.setPrototypeOf(_assertThisInitialized(_this), SimpleRestError.prototype);
        return _this;
      }

      return _createClass(SimpleRestError);
    }( /*#__PURE__*/_wrapNativeSuper(Error));

    function isUnexpectedInitialResponse(rawResponse) {
      var code = rawResponse.statusCode;

      if (![203, 204, 202, 201, 200, 500].includes(code)) {
        throw new SimpleRestError("Received unexpected HTTP status code ".concat(code, " in the initial response. This may indicate a server issue."), code);
      }

      return false;
    }

    function isUnexpectedPollingResponse(rawResponse) {
      var code = rawResponse.statusCode;

      if (![202, 201, 200, 500].includes(code)) {
        throw new SimpleRestError("Received unexpected HTTP status code ".concat(code, " while polling. This may indicate a server issue."), code);
      }

      return false;
    }
  }, {}],
  "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/models.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.terminalStates = exports.successStates = exports.failureStates = void 0; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    var successStates = ["succeeded"];
    exports.successStates = successStates;
    var failureStates = ["failed", "canceled", "cancelled"];
    /**
     * The LRO states that signal that the LRO has completed.
     */

    exports.failureStates = failureStates;
    var terminalStates = successStates.concat(failureStates);
    exports.terminalStates = terminalStates;
  }, {}],
  "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/bodyPolling.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isBodyPollingDone = isBodyPollingDone;
    exports.processBodyPollingOperationResult = processBodyPollingOperationResult;

    var _models = require("./models");

    var _requestUtils = require("./requestUtils"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.


    function getProvisioningState(rawResponse) {
      var _a, _b;

      var _ref = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {},
          properties = _ref.properties,
          provisioningState = _ref.provisioningState;

      var state = (_b = properties === null || properties === void 0 ? void 0 : properties.provisioningState) !== null && _b !== void 0 ? _b : provisioningState;
      return typeof state === "string" ? state.toLowerCase() : "succeeded";
    }

    function isBodyPollingDone(rawResponse) {
      var state = getProvisioningState(rawResponse);

      if ((0, _requestUtils.isUnexpectedPollingResponse)(rawResponse) || _models.failureStates.includes(state)) {
        throw new Error("The long running operation has failed. The provisioning state: ".concat(state, "."));
      }

      return _models.successStates.includes(state);
    }
    /**
     * Creates a polling strategy based on BodyPolling which uses the provisioning state
     * from the result to determine the current operation state
     */


    function processBodyPollingOperationResult(response) {
      return Object.assign(Object.assign({}, response), {
        done: isBodyPollingDone(response.rawResponse)
      });
    }
  }, {
    "./models": "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/models.js",
    "./requestUtils": "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/requestUtils.js"
  }],
  "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/logger.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.logger = void 0;

    var _logger = require("@azure/logger"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * The `@azure/logger` configuration for this package.
     * @internal
     */


    var logger = (0, _logger.createClientLogger)("core-lro");
    exports.logger = logger;
  }, {
    "@azure/logger": "../node_modules/@azure/logger/dist-esm/src/index.js"
  }],
  "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/locationPolling.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.processLocationPollingOperationResult = processLocationPollingOperationResult;

    var _models = require("./models");

    var _requestUtils = require("./requestUtils");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function isPollingDone(rawResponse) {
      var _a;

      if ((0, _requestUtils.isUnexpectedPollingResponse)(rawResponse) || rawResponse.statusCode === 202) {
        return false;
      }

      var _ref = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {},
          status = _ref.status;

      var state = typeof status === "string" ? status.toLowerCase() : "succeeded";

      if ((0, _requestUtils.isUnexpectedPollingResponse)(rawResponse) || _models.failureStates.includes(state)) {
        throw new Error("The long running operation has failed. The provisioning state: ".concat(state, "."));
      }

      return _models.successStates.includes(state);
    }
    /**
     * Sends a request to the URI of the provisioned resource if needed.
     */


    function sendFinalRequest(_x, _x2, _x3) {
      return _sendFinalRequest.apply(this, arguments);
    }

    function _sendFinalRequest() {
      _sendFinalRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(lro, resourceLocation, lroResourceLocationConfig) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.t0 = lroResourceLocationConfig;
                _context2.next = _context2.t0 === "original-uri" ? 3 : _context2.t0 === "azure-async-operation" ? 4 : _context2.t0 === "location" ? 5 : 5;
                break;

              case 3:
                return _context2.abrupt("return", lro.sendPollRequest(lro.requestPath));

              case 4:
                return _context2.abrupt("return", undefined);

              case 5:
                return _context2.abrupt("return", lro.sendPollRequest(resourceLocation !== null && resourceLocation !== void 0 ? resourceLocation : lro.requestPath));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      return _sendFinalRequest.apply(this, arguments);
    }

    function processLocationPollingOperationResult(lro, resourceLocation, lroResourceLocationConfig) {
      return function (response) {
        if (isPollingDone(response.rawResponse)) {
          if (resourceLocation === undefined) {
            return Object.assign(Object.assign({}, response), {
              done: true
            });
          } else {
            return Object.assign(Object.assign({}, response), {
              done: false,
              next: function () {
                var _next2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                  var finalResponse;
                  return _regeneratorRuntime().wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return sendFinalRequest(lro, resourceLocation, lroResourceLocationConfig);

                        case 2:
                          finalResponse = _context.sent;
                          return _context.abrupt("return", Object.assign(Object.assign({}, finalResponse !== null && finalResponse !== void 0 ? finalResponse : response), {
                            done: true
                          }));

                        case 4:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                function next() {
                  return _next2.apply(this, arguments);
                }

                return next;
              }()
            });
          }
        }

        return Object.assign(Object.assign({}, response), {
          done: false
        });
      };
    }
  }, {
    "./models": "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/models.js",
    "./requestUtils": "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/requestUtils.js"
  }],
  "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/passthrough.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.processPassthroughOperationResult = processPassthroughOperationResult; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    function processPassthroughOperationResult(response) {
      return Object.assign(Object.assign({}, response), {
        done: true
      });
    }
  }, {}],
  "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/stateMachine.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createGetLroStatusFromResponse = createGetLroStatusFromResponse;
    exports.createInitializeState = createInitializeState;
    exports.createPoll = createPoll;

    var _requestUtils = require("./requestUtils");

    var _bodyPolling = require("./bodyPolling");

    var _logger = require("./logger");

    var _locationPolling = require("./locationPolling");

    var _passthrough = require("./passthrough");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }
    /**
     * creates a stepping function that maps an LRO state to another.
     */


    function createGetLroStatusFromResponse(lroPrimitives, config, lroResourceLocationConfig) {
      switch (config.mode) {
        case "Location":
          {
            return (0, _locationPolling.processLocationPollingOperationResult)(lroPrimitives, config.resourceLocation, lroResourceLocationConfig);
          }

        case "Body":
          {
            return _bodyPolling.processBodyPollingOperationResult;
          }

        default:
          {
            return _passthrough.processPassthroughOperationResult;
          }
      }
    }
    /**
     * Creates a polling operation.
     */


    function createPoll(lroPrimitives) {
      return /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path, pollerConfig, getLroStatusFromResponse) {
          var response, retryAfter, retryAfterInSeconds;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return lroPrimitives.sendPollRequest(path);

                case 2:
                  response = _context.sent;
                  retryAfter = response.rawResponse.headers["retry-after"];

                  if (retryAfter !== undefined) {
                    // Retry-After header value is either in HTTP date format, or in seconds
                    retryAfterInSeconds = parseInt(retryAfter);
                    pollerConfig.intervalInMs = isNaN(retryAfterInSeconds) ? calculatePollingIntervalFromDate(new Date(retryAfter), pollerConfig.intervalInMs) : retryAfterInSeconds * 1000;
                  }

                  return _context.abrupt("return", getLroStatusFromResponse(response));

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x, _x2, _x3) {
          return _ref.apply(this, arguments);
        };
      }();
    }

    function calculatePollingIntervalFromDate(retryAfterDate, defaultIntervalInMs) {
      var timeNow = Math.floor(new Date().getTime());
      var retryAfterTime = retryAfterDate.getTime();

      if (timeNow < retryAfterTime) {
        return retryAfterTime - timeNow;
      }

      return defaultIntervalInMs;
    }
    /**
     * Creates a callback to be used to initialize the polling operation state.
     * @param state - of the polling operation
     * @param operationSpec - of the LRO
     * @param callback - callback to be called when the operation is done
     * @returns callback that initializes the state of the polling operation
     */


    function createInitializeState(state, requestPath, requestMethod) {
      return function (response) {
        if ((0, _requestUtils.isUnexpectedInitialResponse)(response.rawResponse)) return true;
        state.initialRawResponse = response.rawResponse;
        state.isStarted = true;
        state.pollingURL = (0, _requestUtils.getPollingUrl)(state.initialRawResponse, requestPath);
        state.config = (0, _requestUtils.inferLroMode)(requestPath, requestMethod, state.initialRawResponse);
        /** short circuit polling if body polling is done in the initial request */

        if (state.config.mode === undefined || state.config.mode === "Body" && (0, _bodyPolling.isBodyPollingDone)(state.initialRawResponse)) {
          state.result = response.flatResponse;
          state.isCompleted = true;
        }

        _logger.logger.verbose("LRO: initial state: ".concat(JSON.stringify(state)));

        return Boolean(state.isCompleted);
      };
    }
  }, {
    "./requestUtils": "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/requestUtils.js",
    "./bodyPolling": "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/bodyPolling.js",
    "./logger": "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/logger.js",
    "./locationPolling": "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/locationPolling.js",
    "./passthrough": "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/passthrough.js"
  }],
  "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/operation.js": [function (require, module, exports) {
    var define;
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GenericPollOperation = void 0;

    var _stateMachine = require("./stateMachine");

    var _requestUtils = require("./requestUtils");

    var _logger = require("./logger");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    var GenericPollOperation = /*#__PURE__*/function () {
      function GenericPollOperation(state, lro, lroResourceLocationConfig, processResult, updateState, isDone) {
        _classCallCheck(this, GenericPollOperation);

        this.state = state;
        this.lro = lro;
        this.lroResourceLocationConfig = lroResourceLocationConfig;
        this.processResult = processResult;
        this.updateState = updateState;
        this.isDone = isDone;
      }

      _createClass(GenericPollOperation, [{
        key: "setPollerConfig",
        value: function setPollerConfig(pollerConfig) {
          this.pollerConfig = pollerConfig;
        }
        /**
         * General update function for LROPoller, the general process is as follows
         * 1. Check initial operation result to determine the strategy to use
         *  - Strategies: Location, Azure-AsyncOperation, Original Uri
         * 2. Check if the operation result has a terminal state
         *  - Terminal state will be determined by each strategy
         *  2.1 If it is terminal state Check if a final GET request is required, if so
         *      send final GET request and return result from operation. If no final GET
         *      is required, just return the result from operation.
         *      - Determining what to call for final request is responsibility of each strategy
         *  2.2 If it is not terminal state, call the polling operation and go to step 1
         *      - Determining what to call for polling is responsibility of each strategy
         *      - Strategies will always use the latest URI for polling if provided otherwise
         *        the last known one
         */

      }, {
        key: "update",
        value: function () {
          var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {
            var _this = this;

            var _a, _b, _c, state, lastResponse, initializeState, isDone, currentState;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    state = this.state;
                    lastResponse = undefined;

                    if (state.isStarted) {
                      _context.next = 8;
                      break;
                    }

                    initializeState = (0, _stateMachine.createInitializeState)(state, this.lro.requestPath, this.lro.requestMethod);
                    _context.next = 6;
                    return this.lro.sendInitialRequest();

                  case 6:
                    lastResponse = _context.sent;
                    initializeState(lastResponse);

                  case 8:
                    if (state.isCompleted) {
                      _context.next = 23;
                      break;
                    }

                    if (!(!this.poll || !this.getLroStatusFromResponse)) {
                      _context.next = 15;
                      break;
                    }

                    if (state.config) {
                      _context.next = 12;
                      break;
                    }

                    throw new Error("Bad state: LRO mode is undefined. Please check if the serialized state is well-formed.");

                  case 12:
                    isDone = this.isDone;
                    this.getLroStatusFromResponse = isDone ? function (response) {
                      return Object.assign(Object.assign({}, response), {
                        done: isDone(response.flatResponse, _this.state)
                      });
                    } : (0, _stateMachine.createGetLroStatusFromResponse)(this.lro, state.config, this.lroResourceLocationConfig);
                    this.poll = (0, _stateMachine.createPoll)(this.lro);

                  case 15:
                    if (state.pollingURL) {
                      _context.next = 17;
                      break;
                    }

                    throw new Error("Bad state: polling URL is undefined. Please check if the serialized state is well-formed.");

                  case 17:
                    _context.next = 19;
                    return this.poll(state.pollingURL, this.pollerConfig, this.getLroStatusFromResponse);

                  case 19:
                    currentState = _context.sent;

                    _logger.logger.verbose("LRO: polling response: ".concat(JSON.stringify(currentState.rawResponse)));

                    if (currentState.done) {
                      state.result = this.processResult ? this.processResult(currentState.flatResponse, state) : currentState.flatResponse;
                      state.isCompleted = true;
                    } else {
                      this.poll = (_a = currentState.next) !== null && _a !== void 0 ? _a : this.poll;
                      state.pollingURL = (0, _requestUtils.getPollingUrl)(currentState.rawResponse, state.pollingURL);
                    }

                    lastResponse = currentState;

                  case 23:
                    _logger.logger.verbose("LRO: current state: ".concat(JSON.stringify(state)));

                    if (lastResponse) {
                      (_b = this.updateState) === null || _b === void 0 ? void 0 : _b.call(this, state, lastResponse === null || lastResponse === void 0 ? void 0 : lastResponse.rawResponse);
                    } else {
                      _logger.logger.error("LRO: no response was received");
                    }

                    (_c = options === null || options === void 0 ? void 0 : options.fireProgress) === null || _c === void 0 ? void 0 : _c.call(options, state);
                    return _context.abrupt("return", this);

                  case 27:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function update(_x) {
            return _update.apply(this, arguments);
          }

          return update;
        }()
      }, {
        key: "cancel",
        value: function () {
          var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    this.state.isCancelled = true;
                    return _context2.abrupt("return", this);

                  case 2:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function cancel() {
            return _cancel.apply(this, arguments);
          }

          return cancel;
        }()
        /**
         * Serializes the Poller operation.
         */

      }, {
        key: "toString",
        value: function toString() {
          return JSON.stringify({
            state: this.state
          });
        }
      }]);

      return GenericPollOperation;
    }();

    exports.GenericPollOperation = GenericPollOperation;
  }, {
    "./stateMachine": "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/stateMachine.js",
    "./requestUtils": "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/requestUtils.js",
    "./logger": "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/logger.js"
  }],
  "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/lroEngine.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LroEngine = void 0;

    var _operation = require("./operation");

    var _poller = require("../poller");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function deserializeState(serializedState) {
      try {
        return JSON.parse(serializedState).state;
      } catch (e) {
        throw new Error("LroEngine: Unable to deserialize state: ".concat(serializedState));
      }
    }
    /**
     * The LRO Engine, a class that performs polling.
     */


    var LroEngine = /*#__PURE__*/function (_Poller) {
      _inherits(LroEngine, _Poller);

      var _super = _createSuper(LroEngine);

      function LroEngine(lro, options) {
        var _this;

        _classCallCheck(this, LroEngine);

        var _ref = options || {},
            _ref$intervalInMs = _ref.intervalInMs,
            intervalInMs = _ref$intervalInMs === void 0 ? 2000 : _ref$intervalInMs,
            resumeFrom = _ref.resumeFrom;

        var state = resumeFrom ? deserializeState(resumeFrom) : {};
        var operation = new _operation.GenericPollOperation(state, lro, options === null || options === void 0 ? void 0 : options.lroResourceLocationConfig, options === null || options === void 0 ? void 0 : options.processResult, options === null || options === void 0 ? void 0 : options.updateState, options === null || options === void 0 ? void 0 : options.isDone);
        _this = _super.call(this, operation);
        _this.config = {
          intervalInMs: intervalInMs
        };
        operation.setPollerConfig(_this.config);
        return _this;
      }
      /**
       * The method used by the poller to wait before attempting to update its operation.
       */


      _createClass(LroEngine, [{
        key: "delay",
        value: function delay() {
          var _this2 = this;

          return new Promise(function (resolve) {
            return setTimeout(function () {
              return resolve();
            }, _this2.config.intervalInMs);
          });
        }
      }]);

      return LroEngine;
    }(_poller.Poller);

    exports.LroEngine = LroEngine;
  }, {
    "./operation": "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/operation.js",
    "../poller": "../node_modules/@azure/core-lro/dist-esm/src/poller.js"
  }],
  "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "LroEngine", {
      enumerable: true,
      get: function () {
        return _lroEngine.LroEngine;
      }
    });

    var _lroEngine = require("./lroEngine");
  }, {
    "./lroEngine": "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/lroEngine.js"
  }],
  "../node_modules/@azure/core-lro/dist-esm/src/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _pollOperation = require("./pollOperation");

    Object.keys(_pollOperation).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _pollOperation[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _pollOperation[key];
        }
      });
    });

    var _poller = require("./poller");

    Object.keys(_poller).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _poller[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _poller[key];
        }
      });
    });

    var _lroEngine = require("./lroEngine");

    Object.keys(_lroEngine).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _lroEngine[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _lroEngine[key];
        }
      });
    });
  }, {
    "./pollOperation": "../node_modules/@azure/core-lro/dist-esm/src/pollOperation.js",
    "./poller": "../node_modules/@azure/core-lro/dist-esm/src/poller.js",
    "./lroEngine": "../node_modules/@azure/core-lro/dist-esm/src/lroEngine/index.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BlobBeginCopyFromUrlPoller = void 0;

    var _coreHttp = require("@azure/core-http");

    var _coreLro = require("@azure/core-lro");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * This is the poller returned by {@link BlobClient.beginCopyFromURL}.
     * This can not be instantiated directly outside of this package.
     *
     * @hidden
     */


    var BlobBeginCopyFromUrlPoller = /*#__PURE__*/function (_Poller) {
      _inherits(BlobBeginCopyFromUrlPoller, _Poller);

      var _super = _createSuper(BlobBeginCopyFromUrlPoller);

      function BlobBeginCopyFromUrlPoller(options) {
        var _this;

        _classCallCheck(this, BlobBeginCopyFromUrlPoller);

        var blobClient = options.blobClient,
            copySource = options.copySource,
            _options$intervalInMs = options.intervalInMs,
            intervalInMs = _options$intervalInMs === void 0 ? 15000 : _options$intervalInMs,
            onProgress = options.onProgress,
            resumeFrom = options.resumeFrom,
            startCopyFromURLOptions = options.startCopyFromURLOptions;
        var state;

        if (resumeFrom) {
          state = JSON.parse(resumeFrom).state;
        }

        var operation = makeBlobBeginCopyFromURLPollOperation(Object.assign(Object.assign({}, state), {
          blobClient: blobClient,
          copySource: copySource,
          startCopyFromURLOptions: startCopyFromURLOptions
        }));
        _this = _super.call(this, operation);

        if (typeof onProgress === "function") {
          _this.onProgress(onProgress);
        }

        _this.intervalInMs = intervalInMs;
        return _this;
      }

      _createClass(BlobBeginCopyFromUrlPoller, [{
        key: "delay",
        value: function delay() {
          return (0, _coreHttp.delay)(this.intervalInMs);
        }
      }]);

      return BlobBeginCopyFromUrlPoller;
    }(_coreLro.Poller);
    /**
     * Note: Intentionally using function expression over arrow function expression
     * so that the function can be invoked with a different context.
     * This affects what `this` refers to.
     * @hidden
     */


    exports.BlobBeginCopyFromUrlPoller = BlobBeginCopyFromUrlPoller;

    var cancel = /*#__PURE__*/function () {
      var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var options,
            state,
            copyId,
            _args = arguments;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
                state = this.state;
                copyId = state.copyId;

                if (!state.isCompleted) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return", makeBlobBeginCopyFromURLPollOperation(state));

              case 5:
                if (copyId) {
                  _context.next = 8;
                  break;
                }

                state.isCancelled = true;
                return _context.abrupt("return", makeBlobBeginCopyFromURLPollOperation(state));

              case 8:
                _context.next = 10;
                return state.blobClient.abortCopyFromURL(copyId, {
                  abortSignal: options.abortSignal
                });

              case 10:
                state.isCancelled = true;
                return _context.abrupt("return", makeBlobBeginCopyFromURLPollOperation(state));

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function cancel() {
        return _cancel.apply(this, arguments);
      }

      return cancel;
    }();
    /**
     * Note: Intentionally using function expression over arrow function expression
     * so that the function can be invoked with a different context.
     * This affects what `this` refers to.
     * @hidden
     */


    var update = /*#__PURE__*/function () {
      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var options,
            state,
            blobClient,
            copySource,
            startCopyFromURLOptions,
            result,
            _result,
            copyStatus,
            copyProgress,
            prevCopyProgress,
            _args2 = arguments;

        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
                state = this.state;
                blobClient = state.blobClient, copySource = state.copySource, startCopyFromURLOptions = state.startCopyFromURLOptions;

                if (state.isStarted) {
                  _context2.next = 12;
                  break;
                }

                state.isStarted = true;
                _context2.next = 7;
                return blobClient.startCopyFromURL(copySource, startCopyFromURLOptions);

              case 7:
                result = _context2.sent; // copyId is needed to abort

                state.copyId = result.copyId;

                if (result.copyStatus === "success") {
                  state.result = result;
                  state.isCompleted = true;
                }

                _context2.next = 27;
                break;

              case 12:
                if (state.isCompleted) {
                  _context2.next = 27;
                  break;
                }

                _context2.prev = 13;
                _context2.next = 16;
                return state.blobClient.getProperties({
                  abortSignal: options.abortSignal
                });

              case 16:
                _result = _context2.sent;
                copyStatus = _result.copyStatus, copyProgress = _result.copyProgress;
                prevCopyProgress = state.copyProgress;

                if (copyProgress) {
                  state.copyProgress = copyProgress;
                }

                if (copyStatus === "pending" && copyProgress !== prevCopyProgress && typeof options.fireProgress === "function") {
                  // trigger in setTimeout, or swallow error?
                  options.fireProgress(state);
                } else if (copyStatus === "success") {
                  state.result = _result;
                  state.isCompleted = true;
                } else if (copyStatus === "failed") {
                  state.error = new Error("Blob copy failed with reason: \"".concat(_result.copyStatusDescription || "unknown", "\""));
                  state.isCompleted = true;
                }

                _context2.next = 27;
                break;

              case 23:
                _context2.prev = 23;
                _context2.t0 = _context2["catch"](13);
                state.error = _context2.t0;
                state.isCompleted = true;

              case 27:
                return _context2.abrupt("return", makeBlobBeginCopyFromURLPollOperation(state));

              case 28:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[13, 23]]);
      }));

      function update() {
        return _update.apply(this, arguments);
      }

      return update;
    }();
    /**
     * Note: Intentionally using function expression over arrow function expression
     * so that the function can be invoked with a different context.
     * This affects what `this` refers to.
     * @hidden
     */


    var toString = function toString() {
      return JSON.stringify({
        state: this.state
      }, function (key, value) {
        // remove blobClient from serialized state since a client can't be hydrated from this info.
        if (key === "blobClient") {
          return undefined;
        }

        return value;
      });
    };
    /**
     * Creates a poll operation given the provided state.
     * @hidden
     */


    function makeBlobBeginCopyFromURLPollOperation(state) {
      return {
        state: Object.assign({}, state),
        cancel: cancel,
        toString: toString,
        update: update
      };
    }
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "@azure/core-lro": "../node_modules/@azure/core-lro/dist-esm/src/index.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.rangeToString = rangeToString; // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Generate a range string. For example:
     *
     * "bytes=255-" or "bytes=0-511"
     *
     * @param iRange -
     */

    function rangeToString(iRange) {
      if (iRange.offset < 0) {
        throw new RangeError("Range.offset cannot be smaller than 0.");
      }

      if (iRange.count && iRange.count <= 0) {
        throw new RangeError("Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.");
      }

      return iRange.count ? "bytes=".concat(iRange.offset, "-").concat(iRange.offset + iRange.count - 1) : "bytes=".concat(iRange.offset, "-");
    }
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Batch = void 0;

    var _events = require("events");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /**
     * States for Batch.
     */


    var BatchStates;

    (function (BatchStates) {
      BatchStates[BatchStates["Good"] = 0] = "Good";
      BatchStates[BatchStates["Error"] = 1] = "Error";
    })(BatchStates || (BatchStates = {}));
    /**
     * Batch provides basic parallel execution with concurrency limits.
     * Will stop execute left operations when one of the executed operation throws an error.
     * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.
     */


    var Batch = /*#__PURE__*/function () {
      /**
       * Creates an instance of Batch.
       * @param concurrency -
       */
      function Batch() {
        var concurrency = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;

        _classCallCheck(this, Batch);
        /**
         * Number of active operations under execution.
         */


        this.actives = 0;
        /**
         * Number of completed operations under execution.
         */

        this.completed = 0;
        /**
         * Offset of next operation to be executed.
         */

        this.offset = 0;
        /**
         * Operation array to be executed.
         */

        this.operations = [];
        /**
         * States of Batch. When an error happens, state will turn into error.
         * Batch will stop execute left operations.
         */

        this.state = BatchStates.Good;

        if (concurrency < 1) {
          throw new RangeError("concurrency must be larger than 0");
        }

        this.concurrency = concurrency;
        this.emitter = new _events.EventEmitter();
      }
      /**
       * Add a operation into queue.
       *
       * @param operation -
       */


      _createClass(Batch, [{
        key: "addOperation",
        value: function addOperation(operation) {
          var _this = this;

          this.operations.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.prev = 0;
                    _this.actives++;
                    _context.next = 4;
                    return operation();

                  case 4:
                    _this.actives--;
                    _this.completed++;

                    _this.parallelExecute();

                    _context.next = 12;
                    break;

                  case 9:
                    _context.prev = 9;
                    _context.t0 = _context["catch"](0);

                    _this.emitter.emit("error", _context.t0);

                  case 12:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, null, [[0, 9]]);
          })));
        }
        /**
         * Start execute operations in the queue.
         *
         */

      }, {
        key: "do",
        value: function () {
          var _do2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var _this2 = this;

            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    if (!(this.operations.length === 0)) {
                      _context2.next = 2;
                      break;
                    }

                    return _context2.abrupt("return", Promise.resolve());

                  case 2:
                    this.parallelExecute();
                    return _context2.abrupt("return", new Promise(function (resolve, reject) {
                      _this2.emitter.on("finish", resolve);

                      _this2.emitter.on("error", function (error) {
                        _this2.state = BatchStates.Error;
                        reject(error);
                      });
                    }));

                  case 4:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function _do() {
            return _do2.apply(this, arguments);
          }

          return _do;
        }()
        /**
         * Get next operation to be executed. Return null when reaching ends.
         *
         */

      }, {
        key: "nextOperation",
        value: function nextOperation() {
          if (this.offset < this.operations.length) {
            return this.operations[this.offset++];
          }

          return null;
        }
        /**
         * Start execute operations. One one the most important difference between
         * this method with do() is that do() wraps as an sync method.
         *
         */

      }, {
        key: "parallelExecute",
        value: function parallelExecute() {
          if (this.state === BatchStates.Error) {
            return;
          }

          if (this.completed >= this.operations.length) {
            this.emitter.emit("finish");
            return;
          }

          while (this.actives < this.concurrency) {
            var operation = this.nextOperation();

            if (operation) {
              operation();
            } else {
              return;
            }
          }
        }
      }]);

      return Batch;
    }();

    exports.Batch = Batch;
  }, {
    "events": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/events/events.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BufferScheduler = void 0;

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    // This file is used as a shim of "BufferScheduler" for some browser bundlers
    // when trying to bundle "BufferScheduler"
    // "BufferScheduler" class is only available in Node.js runtime


    var BufferScheduler = /*#__PURE__*/_createClass(function BufferScheduler() {
      _classCallCheck(this, BufferScheduler);
    });

    exports.BufferScheduler = BufferScheduler;
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-common/src/index.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _BufferScheduler = require("./BufferScheduler.browser");

    Object.keys(_BufferScheduler).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _BufferScheduler[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _BufferScheduler[key];
        }
      });
    });
  }, {
    "./BufferScheduler.browser": "../node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.browser.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.blobToArrayBuffer = blobToArrayBuffer;
    exports.blobToString = blobToString;
    exports.fsStat = exports.fsCreateReadStream = void 0;
    exports.readStreamToLocalFile = readStreamToLocalFile;
    exports.streamToBuffer = streamToBuffer;
    exports.streamToBuffer2 = streamToBuffer2;

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * Convert a Browser Blob object into ArrayBuffer.
     *
     * @param blob -
     */


    function blobToArrayBuffer(_x) {
      return _blobToArrayBuffer.apply(this, arguments);
    }
    /**
     * Convert a Browser Blob object into string.
     *
     * @param blob -
     */


    function _blobToArrayBuffer() {
      _blobToArrayBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(blob) {
        var fileReader;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                fileReader = new FileReader();
                return _context.abrupt("return", new Promise(function (resolve, reject) {
                  fileReader.onloadend = function (ev) {
                    resolve(ev.target.result);
                  };

                  fileReader.onerror = reject;
                  fileReader.readAsArrayBuffer(blob);
                }));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _blobToArrayBuffer.apply(this, arguments);
    }

    function blobToString(_x2) {
      return _blobToString.apply(this, arguments);
    }

    function _blobToString() {
      _blobToString = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(blob) {
        var fileReader;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                fileReader = new FileReader();
                return _context2.abrupt("return", new Promise(function (resolve, reject) {
                  fileReader.onloadend = function (ev) {
                    resolve(ev.target.result);
                  };

                  fileReader.onerror = reject;
                  fileReader.readAsText(blob);
                }));

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      return _blobToString.apply(this, arguments);
    }

    function streamToBuffer() {
      /* empty */
    }

    function streamToBuffer2() {
      /* empty */
    }

    function readStreamToLocalFile() {
      /* empty */
    }

    var fsStat = function stat() {
      /* empty */
    };

    exports.fsStat = fsStat;

    var fsCreateReadStream = function createReadStream() {
      /* empty */
    };

    exports.fsCreateReadStream = fsCreateReadStream;
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js": [function (require, module, exports) {
    var define;

    var Buffer = require("buffer").Buffer;

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PageBlobClient = exports.BlockBlobClient = exports.BlobClient = exports.AppendBlobClient = void 0;

    var _tslib = require("tslib");

    var _coreHttp = require("@azure/core-http");

    var _coreTracing = require("@azure/core-tracing");

    var _BlobDownloadResponse = require("./BlobDownloadResponse");

    var _BlobQueryResponse = require("./BlobQueryResponse");

    var _AnonymousCredential = require("./credentials/AnonymousCredential");

    var _StorageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");

    var _operations = require("./generated/src/operations");

    var _models = require("./models");

    var _PageBlobRangeResponse = require("./PageBlobRangeResponse");

    var _Pipeline = require("./Pipeline");

    var _BlobStartCopyFromUrlPoller = require("./pollers/BlobStartCopyFromUrlPoller");

    var _Range = require("./Range");

    var _StorageClient2 = require("./StorageClient");

    var _Batch = require("./utils/Batch");

    var _src = require("../../storage-common/src");

    var _constants = require("./utils/constants");

    var _tracing = require("./utils/tracing");

    var _utils = require("./utils/utils.common");

    var _utils2 = require("./utils/utils.node");

    var _BlobSASSignatureValues = require("./sas/BlobSASSignatureValues");

    var _BlobLeaseClient = require("./BlobLeaseClient");

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * A BlobClient represents a URL to an Azure Storage blob; the blob may be a block blob,
     * append blob, or page blob.
     */


    var BlobClient = /*#__PURE__*/function (_StorageClient) {
      _inherits(BlobClient, _StorageClient);

      var _super = _createSuper(BlobClient);

      function BlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.

      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
      options) {
        var _this;

        _classCallCheck(this, BlobClient);

        options = options || {};
        var pipeline;
        var url;

        if ((0, _Pipeline.isPipelineLike)(credentialOrPipelineOrContainerName)) {
          // (url: string, pipeline: Pipeline)
          url = urlOrConnectionString;
          pipeline = credentialOrPipelineOrContainerName;
        } else if (_coreHttp.isNode && credentialOrPipelineOrContainerName instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrPipelineOrContainerName)) {
          // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
          url = urlOrConnectionString;
          options = blobNameOrOptions;
          pipeline = (0, _Pipeline.newPipeline)(credentialOrPipelineOrContainerName, options);
        } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
          // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
          // The second parameter is undefined. Use anonymous credential.
          url = urlOrConnectionString;
          pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
        } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
          // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
          var containerName = credentialOrPipelineOrContainerName;
          var blobName = blobNameOrOptions;
          var extractedCreds = (0, _utils.extractConnectionStringParts)(urlOrConnectionString);

          if (extractedCreds.kind === "AccountConnString") {
            if (_coreHttp.isNode) {
              var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
              url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));

              if (!options.proxyOptions) {
                options.proxyOptions = (0, _coreHttp.getDefaultProxySettings)(extractedCreds.proxyUri);
              }

              pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
            } else {
              throw new Error("Account connection string is only supported in Node.js environment");
            }
          } else if (extractedCreds.kind === "SASConnString") {
            url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
            pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
          } else {
            throw new Error("Connection string must be either an Account connection string or a SAS connection string");
          }
        } else {
          throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        }

        _this = _super.call(this, url, pipeline);

        var _this$getBlobAndConta = _this.getBlobAndContainerNamesFromUrl();

        _this._name = _this$getBlobAndConta.blobName;
        _this._containerName = _this$getBlobAndConta.containerName;
        _this.blobContext = new _operations.Blob(_this.storageClientContext);
        _this._snapshot = (0, _utils.getURLParameter)(_this.url, _constants.URLConstants.Parameters.SNAPSHOT);
        _this._versionId = (0, _utils.getURLParameter)(_this.url, _constants.URLConstants.Parameters.VERSIONID);
        return _this;
      }
      /**
       * The name of the blob.
       */


      _createClass(BlobClient, [{
        key: "name",
        get: function get() {
          return this._name;
        }
        /**
         * The name of the storage container the blob is associated with.
         */

      }, {
        key: "containerName",
        get: function get() {
          return this._containerName;
        }
        /**
         * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.
         * Provide "" will remove the snapshot and return a Client to the base blob.
         *
         * @param snapshot - The snapshot timestamp.
         * @returns A new BlobClient object identical to the source but with the specified snapshot timestamp
         */

      }, {
        key: "withSnapshot",
        value: function withSnapshot(snapshot) {
          return new BlobClient((0, _utils.setURLParameter)(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
        }
        /**
         * Creates a new BlobClient object pointing to a version of this blob.
         * Provide "" will remove the versionId and return a Client to the base blob.
         *
         * @param versionId - The versionId.
         * @returns A new BlobClient object pointing to the version of this blob.
         */

      }, {
        key: "withVersion",
        value: function withVersion(versionId) {
          return new BlobClient((0, _utils.setURLParameter)(this.url, _constants.URLConstants.Parameters.VERSIONID, versionId.length === 0 ? undefined : versionId), this.pipeline);
        }
        /**
         * Creates a AppendBlobClient object.
         *
         */

      }, {
        key: "getAppendBlobClient",
        value: function getAppendBlobClient() {
          return new AppendBlobClient(this.url, this.pipeline);
        }
        /**
         * Creates a BlockBlobClient object.
         *
         */

      }, {
        key: "getBlockBlobClient",
        value: function getBlockBlobClient() {
          return new BlockBlobClient(this.url, this.pipeline);
        }
        /**
         * Creates a PageBlobClient object.
         *
         */

      }, {
        key: "getPageBlobClient",
        value: function getPageBlobClient() {
          return new PageBlobClient(this.url, this.pipeline);
        }
        /**
         * Reads or downloads a blob from the system, including its metadata and properties.
         * You can also call Get Blob to read a snapshot.
         *
         * * In Node.js, data returns in a Readable stream readableStreamBody
         * * In browsers, data returns in a promise blobBody
         *
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob
         *
         * @param offset - From which position of the blob to download, greater than or equal to 0
         * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined
         * @param options - Optional options to Blob Download operation.
         *
         *
         * Example usage (Node.js):
         *
         * ```js
         * // Download and convert a blob to a string
         * const downloadBlockBlobResponse = await blobClient.download();
         * const downloaded = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);
         * console.log("Downloaded blob content:", downloaded.toString());
         *
         * async function streamToBuffer(readableStream) {
         * return new Promise((resolve, reject) => {
         * const chunks = [];
         * readableStream.on("data", (data) => {
         * chunks.push(data instanceof Buffer ? data : Buffer.from(data));
         * });
         * readableStream.on("end", () => {
         * resolve(Buffer.concat(chunks));
         * });
         * readableStream.on("error", reject);
         * });
         * }
         * ```
         *
         * Example usage (browser):
         *
         * ```js
         * // Download and convert a blob to a string
         * const downloadBlockBlobResponse = await blobClient.download();
         * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);
         * console.log(
         *   "Downloaded blob content",
         *   downloaded
         * );
         *
         * async function blobToString(blob: Blob): Promise<string> {
         *   const fileReader = new FileReader();
         *   return new Promise<string>((resolve, reject) => {
         *     fileReader.onloadend = (ev: any) => {
         *       resolve(ev.target!.result);
         *     };
         *     fileReader.onerror = reject;
         *     fileReader.readAsText(blob);
         *   });
         * }
         * ```
         */

      }, {
        key: "download",
        value: function () {
          var _download = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var _this2 = this;

            var offset,
                count,
                options,
                _a,
                _createSpan,
                span,
                updatedOptions,
                res,
                wrappedRes,
                _args2 = arguments;

            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    offset = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : 0;
                    count = _args2.length > 1 ? _args2[1] : undefined;
                    options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
                    options.conditions = options.conditions || {};
                    options.conditions = options.conditions || {};
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _createSpan = (0, _tracing.createSpan)("BlobClient-download", options), span = _createSpan.span, updatedOptions = _createSpan.updatedOptions;
                    _context2.prev = 7;
                    _context2.next = 10;
                    return this.blobContext.download(Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      requestOptions: {
                        onDownloadProgress: _coreHttp.isNode ? undefined : options.onProgress // for Node.js, progress is reported by RetriableReadableStream

                      },
                      range: offset === 0 && !count ? undefined : (0, _Range.rangeToString)({
                        offset: offset,
                        count: count
                      }),
                      rangeGetContentMD5: options.rangeGetContentMD5,
                      rangeGetContentCRC64: options.rangeGetContentCrc64,
                      snapshot: options.snapshot,
                      cpkInfo: options.customerProvidedKey
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 10:
                    res = _context2.sent;
                    wrappedRes = Object.assign(Object.assign({}, res), {
                      _response: res._response,
                      objectReplicationDestinationPolicyId: res.objectReplicationPolicyId,
                      objectReplicationSourceProperties: (0, _utils.parseObjectReplicationRecord)(res.objectReplicationRules)
                    }); // Return browser response immediately

                    if (_coreHttp.isNode) {
                      _context2.next = 14;
                      break;
                    }

                    return _context2.abrupt("return", wrappedRes);

                  case 14:
                    // We support retrying when download stream unexpected ends in Node.js runtime
                    // Following code shouldn't be bundled into browser build, however some
                    // bundlers may try to bundle following code and "FileReadResponse.ts".
                    // In this case, "FileDownloadResponse.browser.ts" will be used as a shim of "FileDownloadResponse.ts"
                    // The config is in package.json "browser" field
                    if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) {
                      // TODO: Default value or make it a required parameter?
                      options.maxRetryRequests = _constants.DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;
                    }

                    if (!(res.contentLength === undefined)) {
                      _context2.next = 17;
                      break;
                    }

                    throw new RangeError("File download response doesn't contain valid content length header");

                  case 17:
                    if (res.etag) {
                      _context2.next = 19;
                      break;
                    }

                    throw new RangeError("File download response doesn't contain valid etag header");

                  case 19:
                    return _context2.abrupt("return", new _BlobDownloadResponse.BlobDownloadResponse(wrappedRes, /*#__PURE__*/function () {
                      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(start) {
                        var _a, updatedDownloadOptions;

                        return _regeneratorRuntime().wrap(function _callee$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                updatedDownloadOptions = {
                                  leaseAccessConditions: options.conditions,
                                  modifiedAccessConditions: {
                                    ifMatch: options.conditions.ifMatch || res.etag,
                                    ifModifiedSince: options.conditions.ifModifiedSince,
                                    ifNoneMatch: options.conditions.ifNoneMatch,
                                    ifUnmodifiedSince: options.conditions.ifUnmodifiedSince,
                                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                                  },
                                  range: (0, _Range.rangeToString)({
                                    count: offset + res.contentLength - start,
                                    offset: start
                                  }),
                                  rangeGetContentMD5: options.rangeGetContentMD5,
                                  rangeGetContentCRC64: options.rangeGetContentCrc64,
                                  snapshot: options.snapshot,
                                  cpkInfo: options.customerProvidedKey
                                }; // Debug purpose only
                                // console.log(
                                //   `Read from internal stream, range: ${
                                //     updatedOptions.range
                                //   }, options: ${JSON.stringify(updatedOptions)}`
                                // );

                                _context.next = 3;
                                return _this2.blobContext.download(Object.assign({
                                  abortSignal: options.abortSignal
                                }, updatedDownloadOptions));

                              case 3:
                                return _context.abrupt("return", _context.sent.readableStreamBody);

                              case 4:
                              case "end":
                                return _context.stop();
                            }
                          }
                        }, _callee);
                      }));

                      return function (_x) {
                        return _ref.apply(this, arguments);
                      };
                    }(), offset, res.contentLength, {
                      maxRetryRequests: options.maxRetryRequests,
                      onProgress: options.onProgress
                    }));

                  case 22:
                    _context2.prev = 22;
                    _context2.t0 = _context2["catch"](7);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context2.t0.message
                    });
                    throw _context2.t0;

                  case 26:
                    _context2.prev = 26;
                    span.end();
                    return _context2.finish(26);

                  case 29:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this, [[7, 22, 26, 29]]);
          }));

          function download() {
            return _download.apply(this, arguments);
          }

          return download;
        }()
        /**
         * Returns true if the Azure blob resource represented by this client exists; false otherwise.
         *
         * NOTE: use this function with care since an existing blob might be deleted by other clients or
         * applications. Vice versa new blobs might be added by other clients or applications after this
         * function completes.
         *
         * @param options - options to Exists operation.
         */

      }, {
        key: "exists",
        value: function () {
          var _exists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var options,
                _createSpan2,
                span,
                updatedOptions,
                _args3 = arguments;

            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
                    _createSpan2 = (0, _tracing.createSpan)("BlobClient-exists", options), span = _createSpan2.span, updatedOptions = _createSpan2.updatedOptions;
                    _context3.prev = 2;
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context3.next = 6;
                    return this.getProperties({
                      abortSignal: options.abortSignal,
                      customerProvidedKey: options.customerProvidedKey,
                      conditions: options.conditions,
                      tracingOptions: updatedOptions.tracingOptions
                    });

                  case 6:
                    return _context3.abrupt("return", true);

                  case 9:
                    _context3.prev = 9;
                    _context3.t0 = _context3["catch"](2);

                    if (!(_context3.t0.statusCode === 404)) {
                      _context3.next = 15;
                      break;
                    }

                    return _context3.abrupt("return", false);

                  case 15:
                    if (!(_context3.t0.statusCode === 409 && (_context3.t0.details.errorCode === _constants.BlobUsesCustomerSpecifiedEncryptionMsg || _context3.t0.details.errorCode === _constants.BlobDoesNotUseCustomerSpecifiedEncryption))) {
                      _context3.next = 17;
                      break;
                    }

                    return _context3.abrupt("return", true);

                  case 17:
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context3.t0.message
                    });
                    throw _context3.t0;

                  case 19:
                    _context3.prev = 19;
                    span.end();
                    return _context3.finish(19);

                  case 22:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this, [[2, 9, 19, 22]]);
          }));

          function exists() {
            return _exists.apply(this, arguments);
          }

          return exists;
        }()
        /**
         * Returns all user-defined metadata, standard HTTP properties, and system properties
         * for the blob. It does not return the content of the blob.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties
         *
         * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
         * they originally contained uppercase characters. This differs from the metadata keys returned by
         * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which
         * will retain their original casing.
         *
         * @param options - Optional options to Get Properties operation.
         */

      }, {
        key: "getProperties",
        value: function () {
          var _getProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
            var options,
                _a,
                _createSpan3,
                span,
                updatedOptions,
                res,
                _args4 = arguments;

            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};
                    _createSpan3 = (0, _tracing.createSpan)("BlobClient-getProperties", options), span = _createSpan3.span, updatedOptions = _createSpan3.updatedOptions;
                    _context4.prev = 2;
                    options.conditions = options.conditions || {};
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context4.next = 7;
                    return this.blobContext.getProperties(Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      cpkInfo: options.customerProvidedKey
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    res = _context4.sent;
                    return _context4.abrupt("return", Object.assign(Object.assign({}, res), {
                      _response: res._response,
                      objectReplicationDestinationPolicyId: res.objectReplicationPolicyId,
                      objectReplicationSourceProperties: (0, _utils.parseObjectReplicationRecord)(res.objectReplicationRules)
                    }));

                  case 11:
                    _context4.prev = 11;
                    _context4.t0 = _context4["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context4.t0.message
                    });
                    throw _context4.t0;

                  case 15:
                    _context4.prev = 15;
                    span.end();
                    return _context4.finish(15);

                  case 18:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this, [[2, 11, 15, 18]]);
          }));

          function getProperties() {
            return _getProperties.apply(this, arguments);
          }

          return getProperties;
        }()
        /**
         * Marks the specified blob or snapshot for deletion. The blob is later deleted
         * during garbage collection. Note that in order to delete a blob, you must delete
         * all of its snapshots. You can delete both at the same time with the Delete
         * Blob operation.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
         *
         * @param options - Optional options to Blob Delete operation.
         */

      }, {
        key: "delete",
        value: function () {
          var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
            var options,
                _a,
                _createSpan4,
                span,
                updatedOptions,
                _args5 = arguments;

            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    options = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
                    _createSpan4 = (0, _tracing.createSpan)("BlobClient-delete", options), span = _createSpan4.span, updatedOptions = _createSpan4.updatedOptions;
                    options.conditions = options.conditions || {};
                    _context5.prev = 3;
                    _context5.next = 6;
                    return this.blobContext.delete(Object.assign({
                      abortSignal: options.abortSignal,
                      deleteSnapshots: options.deleteSnapshots,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      })
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 6:
                    return _context5.abrupt("return", _context5.sent);

                  case 9:
                    _context5.prev = 9;
                    _context5.t0 = _context5["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context5.t0.message
                    });
                    throw _context5.t0;

                  case 13:
                    _context5.prev = 13;
                    span.end();
                    return _context5.finish(13);

                  case 16:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this, [[3, 9, 13, 16]]);
          }));

          function _delete() {
            return _delete2.apply(this, arguments);
          }

          return _delete;
        }()
        /**
         * Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted
         * during garbage collection. Note that in order to delete a blob, you must delete
         * all of its snapshots. You can delete both at the same time with the Delete
         * Blob operation.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
         *
         * @param options - Optional options to Blob Delete operation.
         */

      }, {
        key: "deleteIfExists",
        value: function () {
          var _deleteIfExists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
            var options,
                _a,
                _b,
                _createSpan5,
                span,
                updatedOptions,
                res,
                _args6 = arguments;

            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    options = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};
                    _createSpan5 = (0, _tracing.createSpan)("BlobClient-deleteIfExists", options), span = _createSpan5.span, updatedOptions = _createSpan5.updatedOptions;
                    _context6.prev = 2;
                    _context6.next = 5;
                    return this.delete(updatedOptions);

                  case 5:
                    res = _context6.sent;
                    return _context6.abrupt("return", Object.assign(Object.assign({
                      succeeded: true
                    }, res), {
                      _response: res._response
                    }));

                  case 9:
                    _context6.prev = 9;
                    _context6.t0 = _context6["catch"](2);

                    if (!(((_a = _context6.t0.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "BlobNotFound")) {
                      _context6.next = 14;
                      break;
                    }

                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: "Expected exception when deleting a blob or snapshot only if it exists."
                    });
                    return _context6.abrupt("return", Object.assign(Object.assign({
                      succeeded: false
                    }, (_b = _context6.t0.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                      _response: _context6.t0.response
                    }));

                  case 14:
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context6.t0.message
                    });
                    throw _context6.t0;

                  case 16:
                    _context6.prev = 16;
                    span.end();
                    return _context6.finish(16);

                  case 19:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this, [[2, 9, 16, 19]]);
          }));

          function deleteIfExists() {
            return _deleteIfExists.apply(this, arguments);
          }

          return deleteIfExists;
        }()
        /**
         * Restores the contents and metadata of soft deleted blob and any associated
         * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29
         * or later.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob
         *
         * @param options - Optional options to Blob Undelete operation.
         */

      }, {
        key: "undelete",
        value: function () {
          var _undelete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
            var options,
                _createSpan6,
                span,
                updatedOptions,
                _args7 = arguments;

            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    options = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};
                    _createSpan6 = (0, _tracing.createSpan)("BlobClient-undelete", options), span = _createSpan6.span, updatedOptions = _createSpan6.updatedOptions;
                    _context7.prev = 2;
                    _context7.next = 5;
                    return this.blobContext.undelete(Object.assign({
                      abortSignal: options.abortSignal
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    return _context7.abrupt("return", _context7.sent);

                  case 8:
                    _context7.prev = 8;
                    _context7.t0 = _context7["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context7.t0.message
                    });
                    throw _context7.t0;

                  case 12:
                    _context7.prev = 12;
                    span.end();
                    return _context7.finish(12);

                  case 15:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this, [[2, 8, 12, 15]]);
          }));

          function undelete() {
            return _undelete.apply(this, arguments);
          }

          return undelete;
        }()
        /**
         * Sets system properties on the blob.
         *
         * If no value provided, or no value provided for the specified blob HTTP headers,
         * these blob HTTP headers without a value will be cleared.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
         *
         * @param blobHTTPHeaders - If no value provided, or no value provided for
         *                                                   the specified blob HTTP headers, these blob HTTP
         *                                                   headers without a value will be cleared.
         *                                                   A common header to set is `blobContentType`
         *                                                   enabling the browser to provide functionality
         *                                                   based on file type.
         * @param options - Optional options to Blob Set HTTP Headers operation.
         */

      }, {
        key: "setHTTPHeaders",
        value: function () {
          var _setHTTPHeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(blobHTTPHeaders) {
            var options,
                _a,
                _createSpan7,
                span,
                updatedOptions,
                _args8 = arguments;

            return _regeneratorRuntime().wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    options = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};
                    _createSpan7 = (0, _tracing.createSpan)("BlobClient-setHTTPHeaders", options), span = _createSpan7.span, updatedOptions = _createSpan7.updatedOptions;
                    options.conditions = options.conditions || {};
                    _context8.prev = 3;
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context8.next = 7;
                    return this.blobContext.setHttpHeaders(Object.assign({
                      abortSignal: options.abortSignal,
                      blobHttpHeaders: blobHTTPHeaders,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      })
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    return _context8.abrupt("return", _context8.sent);

                  case 10:
                    _context8.prev = 10;
                    _context8.t0 = _context8["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context8.t0.message
                    });
                    throw _context8.t0;

                  case 14:
                    _context8.prev = 14;
                    span.end();
                    return _context8.finish(14);

                  case 17:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this, [[3, 10, 14, 17]]);
          }));

          function setHTTPHeaders(_x2) {
            return _setHTTPHeaders.apply(this, arguments);
          }

          return setHTTPHeaders;
        }()
        /**
         * Sets user-defined metadata for the specified blob as one or more name-value pairs.
         *
         * If no option provided, or no metadata defined in the parameter, the blob
         * metadata will be removed.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata
         *
         * @param metadata - Replace existing metadata with this value.
         *                               If no value provided the existing metadata will be removed.
         * @param options - Optional options to Set Metadata operation.
         */

      }, {
        key: "setMetadata",
        value: function () {
          var _setMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(metadata) {
            var options,
                _a,
                _createSpan8,
                span,
                updatedOptions,
                _args9 = arguments;

            return _regeneratorRuntime().wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};
                    _createSpan8 = (0, _tracing.createSpan)("BlobClient-setMetadata", options), span = _createSpan8.span, updatedOptions = _createSpan8.updatedOptions;
                    options.conditions = options.conditions || {};
                    _context9.prev = 3;
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context9.next = 7;
                    return this.blobContext.setMetadata(Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      metadata: metadata,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      cpkInfo: options.customerProvidedKey,
                      encryptionScope: options.encryptionScope
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    return _context9.abrupt("return", _context9.sent);

                  case 10:
                    _context9.prev = 10;
                    _context9.t0 = _context9["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context9.t0.message
                    });
                    throw _context9.t0;

                  case 14:
                    _context9.prev = 14;
                    span.end();
                    return _context9.finish(14);

                  case 17:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9, this, [[3, 10, 14, 17]]);
          }));

          function setMetadata(_x3) {
            return _setMetadata.apply(this, arguments);
          }

          return setMetadata;
        }()
        /**
         * Sets tags on the underlying blob.
         * A blob can have up to 10 tags. Tag keys must be between 1 and 128 characters.  Tag values must be between 0 and 256 characters.
         * Valid tag key and value characters include lower and upper case letters, digits (0-9),
         * space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').
         *
         * @param tags -
         * @param options -
         */

      }, {
        key: "setTags",
        value: function () {
          var _setTags = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(tags) {
            var options,
                _a,
                _createSpan9,
                span,
                updatedOptions,
                _args10 = arguments;

            return _regeneratorRuntime().wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    options = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {};
                    _createSpan9 = (0, _tracing.createSpan)("BlobClient-setTags", options), span = _createSpan9.span, updatedOptions = _createSpan9.updatedOptions;
                    _context10.prev = 2;
                    _context10.next = 5;
                    return this.blobContext.setTags(Object.assign(Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      })
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)), {
                      tags: (0, _utils.toBlobTags)(tags)
                    }));

                  case 5:
                    return _context10.abrupt("return", _context10.sent);

                  case 8:
                    _context10.prev = 8;
                    _context10.t0 = _context10["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context10.t0.message
                    });
                    throw _context10.t0;

                  case 12:
                    _context10.prev = 12;
                    span.end();
                    return _context10.finish(12);

                  case 15:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10, this, [[2, 8, 12, 15]]);
          }));

          function setTags(_x4) {
            return _setTags.apply(this, arguments);
          }

          return setTags;
        }()
        /**
         * Gets the tags associated with the underlying blob.
         *
         * @param options -
         */

      }, {
        key: "getTags",
        value: function () {
          var _getTags = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
            var options,
                _a,
                _createSpan10,
                span,
                updatedOptions,
                response,
                wrappedResponse,
                _args11 = arguments;

            return _regeneratorRuntime().wrap(function _callee11$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    options = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};
                    _createSpan10 = (0, _tracing.createSpan)("BlobClient-getTags", options), span = _createSpan10.span, updatedOptions = _createSpan10.updatedOptions;
                    _context11.prev = 2;
                    _context11.next = 5;
                    return this.blobContext.getTags(Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      })
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    response = _context11.sent;
                    wrappedResponse = Object.assign(Object.assign({}, response), {
                      _response: response._response,
                      tags: (0, _utils.toTags)({
                        blobTagSet: response.blobTagSet
                      }) || {}
                    });
                    return _context11.abrupt("return", wrappedResponse);

                  case 10:
                    _context11.prev = 10;
                    _context11.t0 = _context11["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context11.t0.message
                    });
                    throw _context11.t0;

                  case 14:
                    _context11.prev = 14;
                    span.end();
                    return _context11.finish(14);

                  case 17:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee11, this, [[2, 10, 14, 17]]);
          }));

          function getTags() {
            return _getTags.apply(this, arguments);
          }

          return getTags;
        }()
        /**
         * Get a {@link BlobLeaseClient} that manages leases on the blob.
         *
         * @param proposeLeaseId - Initial proposed lease Id.
         * @returns A new BlobLeaseClient object for managing leases on the blob.
         */

      }, {
        key: "getBlobLeaseClient",
        value: function getBlobLeaseClient(proposeLeaseId) {
          return new _BlobLeaseClient.BlobLeaseClient(this, proposeLeaseId);
        }
        /**
         * Creates a read-only snapshot of a blob.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob
         *
         * @param options - Optional options to the Blob Create Snapshot operation.
         */

      }, {
        key: "createSnapshot",
        value: function () {
          var _createSnapshot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
            var options,
                _a,
                _createSpan11,
                span,
                updatedOptions,
                _args12 = arguments;

            return _regeneratorRuntime().wrap(function _callee12$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    options = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};
                    _createSpan11 = (0, _tracing.createSpan)("BlobClient-createSnapshot", options), span = _createSpan11.span, updatedOptions = _createSpan11.updatedOptions;
                    options.conditions = options.conditions || {};
                    _context12.prev = 3;
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context12.next = 7;
                    return this.blobContext.createSnapshot(Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      metadata: options.metadata,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      cpkInfo: options.customerProvidedKey,
                      encryptionScope: options.encryptionScope
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    return _context12.abrupt("return", _context12.sent);

                  case 10:
                    _context12.prev = 10;
                    _context12.t0 = _context12["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context12.t0.message
                    });
                    throw _context12.t0;

                  case 14:
                    _context12.prev = 14;
                    span.end();
                    return _context12.finish(14);

                  case 17:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee12, this, [[3, 10, 14, 17]]);
          }));

          function createSnapshot() {
            return _createSnapshot.apply(this, arguments);
          }

          return createSnapshot;
        }()
        /**
         * Asynchronously copies a blob to a destination within the storage account.
         * This method returns a long running operation poller that allows you to wait
         * indefinitely until the copy is completed.
         * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.
         * Note that the onProgress callback will not be invoked if the operation completes in the first
         * request, and attempting to cancel a completed copy will result in an error being thrown.
         *
         * In version 2012-02-12 and later, the source for a Copy Blob operation can be
         * a committed blob in any Azure storage account.
         * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
         * an Azure file in any Azure storage account.
         * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
         * operation to copy from another storage account.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob
         *
         * Example using automatic polling:
         *
         * ```js
         * const copyPoller = await blobClient.beginCopyFromURL('url');
         * const result = await copyPoller.pollUntilDone();
         * ```
         *
         * Example using manual polling:
         *
         * ```js
         * const copyPoller = await blobClient.beginCopyFromURL('url');
         * while (!poller.isDone()) {
         *    await poller.poll();
         * }
         * const result = copyPoller.getResult();
         * ```
         *
         * Example using progress updates:
         *
         * ```js
         * const copyPoller = await blobClient.beginCopyFromURL('url', {
         *   onProgress(state) {
         *     console.log(`Progress: ${state.copyProgress}`);
         *   }
         * });
         * const result = await copyPoller.pollUntilDone();
         * ```
         *
         * Example using a changing polling interval (default 15 seconds):
         *
         * ```js
         * const copyPoller = await blobClient.beginCopyFromURL('url', {
         *   intervalInMs: 1000 // poll blob every 1 second for copy progress
         * });
         * const result = await copyPoller.pollUntilDone();
         * ```
         *
         * Example using copy cancellation:
         *
         * ```js
         * const copyPoller = await blobClient.beginCopyFromURL('url');
         * // cancel operation after starting it.
         * try {
         *   await copyPoller.cancelOperation();
         *   // calls to get the result now throw PollerCancelledError
         *   await copyPoller.getResult();
         * } catch (err) {
         *   if (err.name === 'PollerCancelledError') {
         *     console.log('The copy was cancelled.');
         *   }
         * }
         * ```
         *
         * @param copySource - url to the source Azure Blob/File.
         * @param options - Optional options to the Blob Start Copy From URL operation.
         */

      }, {
        key: "beginCopyFromURL",
        value: function () {
          var _beginCopyFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(copySource) {
            var _this3 = this;

            var options,
                client,
                poller,
                _args13 = arguments;
            return _regeneratorRuntime().wrap(function _callee13$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    options = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : {};
                    client = {
                      abortCopyFromURL: function abortCopyFromURL() {
                        return _this3.abortCopyFromURL.apply(_this3, arguments);
                      },
                      getProperties: function getProperties() {
                        return _this3.getProperties.apply(_this3, arguments);
                      },
                      startCopyFromURL: function startCopyFromURL() {
                        return _this3.startCopyFromURL.apply(_this3, arguments);
                      }
                    };
                    poller = new _BlobStartCopyFromUrlPoller.BlobBeginCopyFromUrlPoller({
                      blobClient: client,
                      copySource: copySource,
                      intervalInMs: options.intervalInMs,
                      onProgress: options.onProgress,
                      resumeFrom: options.resumeFrom,
                      startCopyFromURLOptions: options
                    }); // Trigger the startCopyFromURL call by calling poll.
                    // Any errors from this method should be surfaced to the user.

                    _context13.next = 5;
                    return poller.poll();

                  case 5:
                    return _context13.abrupt("return", poller);

                  case 6:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee13);
          }));

          function beginCopyFromURL(_x5) {
            return _beginCopyFromURL.apply(this, arguments);
          }

          return beginCopyFromURL;
        }()
        /**
         * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero
         * length and full metadata. Version 2012-02-12 and newer.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob
         *
         * @param copyId - Id of the Copy From URL operation.
         * @param options - Optional options to the Blob Abort Copy From URL operation.
         */

      }, {
        key: "abortCopyFromURL",
        value: function () {
          var _abortCopyFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(copyId) {
            var options,
                _createSpan12,
                span,
                updatedOptions,
                _args14 = arguments;

            return _regeneratorRuntime().wrap(function _callee14$(_context14) {
              while (1) {
                switch (_context14.prev = _context14.next) {
                  case 0:
                    options = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : {};
                    _createSpan12 = (0, _tracing.createSpan)("BlobClient-abortCopyFromURL", options), span = _createSpan12.span, updatedOptions = _createSpan12.updatedOptions;
                    _context14.prev = 2;
                    _context14.next = 5;
                    return this.blobContext.abortCopyFromURL(copyId, Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    return _context14.abrupt("return", _context14.sent);

                  case 8:
                    _context14.prev = 8;
                    _context14.t0 = _context14["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context14.t0.message
                    });
                    throw _context14.t0;

                  case 12:
                    _context14.prev = 12;
                    span.end();
                    return _context14.finish(12);

                  case 15:
                  case "end":
                    return _context14.stop();
                }
              }
            }, _callee14, this, [[2, 8, 12, 15]]);
          }));

          function abortCopyFromURL(_x6) {
            return _abortCopyFromURL.apply(this, arguments);
          }

          return abortCopyFromURL;
        }()
        /**
         * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not
         * return a response until the copy is complete.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url
         *
         * @param copySource - The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication
         * @param options -
         */

      }, {
        key: "syncCopyFromURL",
        value: function () {
          var _syncCopyFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(copySource) {
            var options,
                _a,
                _b,
                _c,
                _createSpan13,
                span,
                updatedOptions,
                _args15 = arguments;

            return _regeneratorRuntime().wrap(function _callee15$(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    options = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};
                    _createSpan13 = (0, _tracing.createSpan)("BlobClient-syncCopyFromURL", options), span = _createSpan13.span, updatedOptions = _createSpan13.updatedOptions;
                    options.conditions = options.conditions || {};
                    options.sourceConditions = options.sourceConditions || {};
                    _context15.prev = 4;
                    _context15.next = 7;
                    return this.blobContext.copyFromURL(copySource, Object.assign({
                      abortSignal: options.abortSignal,
                      metadata: options.metadata,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      sourceModifiedAccessConditions: {
                        sourceIfMatch: options.sourceConditions.ifMatch,
                        sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                        sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                        sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
                      },
                      sourceContentMD5: options.sourceContentMD5,
                      copySourceAuthorization: (0, _utils.httpAuthorizationToString)(options.sourceAuthorization),
                      blobTagsString: (0, _utils.toBlobTagsString)(options.tags),
                      immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                      immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                      legalHold: options.legalHold,
                      encryptionScope: options.encryptionScope,
                      copySourceTags: options.copySourceTags
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    return _context15.abrupt("return", _context15.sent);

                  case 10:
                    _context15.prev = 10;
                    _context15.t0 = _context15["catch"](4);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context15.t0.message
                    });
                    throw _context15.t0;

                  case 14:
                    _context15.prev = 14;
                    span.end();
                    return _context15.finish(14);

                  case 17:
                  case "end":
                    return _context15.stop();
                }
              }
            }, _callee15, this, [[4, 10, 14, 17]]);
          }));

          function syncCopyFromURL(_x7) {
            return _syncCopyFromURL.apply(this, arguments);
          }

          return syncCopyFromURL;
        }()
        /**
         * Sets the tier on a blob. The operation is allowed on a page blob in a premium
         * storage account and on a block blob in a blob storage account (locally redundant
         * storage only). A premium page blob's tier determines the allowed size, IOPS,
         * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive
         * storage type. This operation does not update the blob's ETag.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier
         *
         * @param tier - The tier to be set on the blob. Valid values are Hot, Cool, or Archive.
         * @param options - Optional options to the Blob Set Tier operation.
         */

      }, {
        key: "setAccessTier",
        value: function () {
          var _setAccessTier = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(tier) {
            var options,
                _a,
                _createSpan14,
                span,
                updatedOptions,
                _args16 = arguments;

            return _regeneratorRuntime().wrap(function _callee16$(_context16) {
              while (1) {
                switch (_context16.prev = _context16.next) {
                  case 0:
                    options = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : {};
                    _createSpan14 = (0, _tracing.createSpan)("BlobClient-setAccessTier", options), span = _createSpan14.span, updatedOptions = _createSpan14.updatedOptions;
                    _context16.prev = 2;
                    _context16.next = 5;
                    return this.blobContext.setTier((0, _models.toAccessTier)(tier), Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      rehydratePriority: options.rehydratePriority
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    return _context16.abrupt("return", _context16.sent);

                  case 8:
                    _context16.prev = 8;
                    _context16.t0 = _context16["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context16.t0.message
                    });
                    throw _context16.t0;

                  case 12:
                    _context16.prev = 12;
                    span.end();
                    return _context16.finish(12);

                  case 15:
                  case "end":
                    return _context16.stop();
                }
              }
            }, _callee16, this, [[2, 8, 12, 15]]);
          }));

          function setAccessTier(_x8) {
            return _setAccessTier.apply(this, arguments);
          }

          return setAccessTier;
        }()
      }, {
        key: "downloadToBuffer",
        value: function () {
          var _downloadToBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(param1, param2, param3) {
            var _this4 = this;

            var param4,
                buffer,
                offset,
                count,
                options,
                _createSpan15,
                span,
                updatedOptions,
                _ret,
                _args19 = arguments;

            return _regeneratorRuntime().wrap(function _callee19$(_context19) {
              while (1) {
                switch (_context19.prev = _context19.next) {
                  case 0:
                    param4 = _args19.length > 3 && _args19[3] !== undefined ? _args19[3] : {};
                    offset = 0;
                    count = 0;
                    options = param4;

                    if (param1 instanceof Buffer) {
                      buffer = param1;
                      offset = param2 || 0;
                      count = typeof param3 === "number" ? param3 : 0;
                    } else {
                      offset = typeof param1 === "number" ? param1 : 0;
                      count = typeof param2 === "number" ? param2 : 0;
                      options = param3 || {};
                    }

                    _createSpan15 = (0, _tracing.createSpan)("BlobClient-downloadToBuffer", options), span = _createSpan15.span, updatedOptions = _createSpan15.updatedOptions;
                    _context19.prev = 6;
                    return _context19.delegateYield( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
                      var response, transferProgress, batch, _loop, off;

                      return _regeneratorRuntime().wrap(function _callee18$(_context18) {
                        while (1) {
                          switch (_context18.prev = _context18.next) {
                            case 0:
                              if (!options.blockSize) {
                                options.blockSize = 0;
                              }

                              if (!(options.blockSize < 0)) {
                                _context18.next = 3;
                                break;
                              }

                              throw new RangeError("blockSize option must be >= 0");

                            case 3:
                              if (options.blockSize === 0) {
                                options.blockSize = _constants.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
                              }

                              if (!(offset < 0)) {
                                _context18.next = 6;
                                break;
                              }

                              throw new RangeError("offset option must be >= 0");

                            case 6:
                              if (!(count && count <= 0)) {
                                _context18.next = 8;
                                break;
                              }

                              throw new RangeError("count option must be greater than 0");

                            case 8:
                              if (!options.conditions) {
                                options.conditions = {};
                              } // Customer doesn't specify length, get it


                              if (count) {
                                _context18.next = 16;
                                break;
                              }

                              _context18.next = 12;
                              return _this4.getProperties(Object.assign(Object.assign({}, options), {
                                tracingOptions: Object.assign(Object.assign({}, options.tracingOptions), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))
                              }));

                            case 12:
                              response = _context18.sent;
                              count = response.contentLength - offset;

                              if (!(count < 0)) {
                                _context18.next = 16;
                                break;
                              }

                              throw new RangeError("offset ".concat(offset, " shouldn't be larger than blob size ").concat(response.contentLength));

                            case 16:
                              if (buffer) {
                                _context18.next = 24;
                                break;
                              }

                              _context18.prev = 17;
                              buffer = Buffer.alloc(count);
                              _context18.next = 24;
                              break;

                            case 21:
                              _context18.prev = 21;
                              _context18.t0 = _context18["catch"](17);
                              throw new Error("Unable to allocate the buffer of size: ".concat(count, "(in bytes). Please try passing your own buffer to the \"downloadToBuffer\" method or try using other methods like \"download\" or \"downloadToFile\".\t ").concat(_context18.t0.message));

                            case 24:
                              if (!(buffer.length < count)) {
                                _context18.next = 26;
                                break;
                              }

                              throw new RangeError("The buffer's size should be equal to or larger than the request count of bytes: ".concat(count));

                            case 26:
                              transferProgress = 0;
                              batch = new _Batch.Batch(options.concurrency);

                              _loop = function _loop(off) {
                                batch.addOperation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
                                  var chunkEnd, response, stream;
                                  return _regeneratorRuntime().wrap(function _callee17$(_context17) {
                                    while (1) {
                                      switch (_context17.prev = _context17.next) {
                                        case 0:
                                          // Exclusive chunk end position
                                          chunkEnd = offset + count;

                                          if (off + options.blockSize < chunkEnd) {
                                            chunkEnd = off + options.blockSize;
                                          }

                                          _context17.next = 4;
                                          return _this4.download(off, chunkEnd - off, {
                                            abortSignal: options.abortSignal,
                                            conditions: options.conditions,
                                            maxRetryRequests: options.maxRetryRequestsPerBlock,
                                            customerProvidedKey: options.customerProvidedKey,
                                            tracingOptions: Object.assign(Object.assign({}, options.tracingOptions), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))
                                          });

                                        case 4:
                                          response = _context17.sent;
                                          stream = response.readableStreamBody;
                                          _context17.next = 8;
                                          return (0, _utils2.streamToBuffer)(stream, buffer, off - offset, chunkEnd - offset);

                                        case 8:
                                          // Update progress after block is downloaded, in case of block trying
                                          // Could provide finer grained progress updating inside HTTP requests,
                                          // only if convenience layer download try is enabled
                                          transferProgress += chunkEnd - off;

                                          if (options.onProgress) {
                                            options.onProgress({
                                              loadedBytes: transferProgress
                                            });
                                          }

                                        case 10:
                                        case "end":
                                          return _context17.stop();
                                      }
                                    }
                                  }, _callee17);
                                })));
                              };

                              for (off = offset; off < offset + count; off = off + options.blockSize) {
                                _loop(off);
                              }

                              _context18.next = 32;
                              return batch.do();

                            case 32:
                              return _context18.abrupt("return", {
                                v: buffer
                              });

                            case 33:
                            case "end":
                              return _context18.stop();
                          }
                        }
                      }, _callee18, null, [[17, 21]]);
                    })(), "t0", 8);

                  case 8:
                    _ret = _context19.t0;

                    if (!(_typeof(_ret) === "object")) {
                      _context19.next = 11;
                      break;
                    }

                    return _context19.abrupt("return", _ret.v);

                  case 11:
                    _context19.next = 17;
                    break;

                  case 13:
                    _context19.prev = 13;
                    _context19.t1 = _context19["catch"](6);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context19.t1.message
                    });
                    throw _context19.t1;

                  case 17:
                    _context19.prev = 17;
                    span.end();
                    return _context19.finish(17);

                  case 20:
                  case "end":
                    return _context19.stop();
                }
              }
            }, _callee19, null, [[6, 13, 17, 20]]);
          }));

          function downloadToBuffer(_x9, _x10, _x11) {
            return _downloadToBuffer.apply(this, arguments);
          }

          return downloadToBuffer;
        }()
        /**
         * ONLY AVAILABLE IN NODE.JS RUNTIME.
         *
         * Downloads an Azure Blob to a local file.
         * Fails if the the given file path already exits.
         * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.
         *
         * @param filePath -
         * @param offset - From which position of the block blob to download.
         * @param count - How much data to be downloaded. Will download to the end when passing undefined.
         * @param options - Options to Blob download options.
         * @returns The response data for blob download operation,
         *                                                 but with readableStreamBody set to undefined since its
         *                                                 content is already read and written into a local file
         *                                                 at the specified path.
         */

      }, {
        key: "downloadToFile",
        value: function () {
          var _downloadToFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(filePath) {
            var offset,
                count,
                options,
                _createSpan16,
                span,
                updatedOptions,
                response,
                _args20 = arguments;

            return _regeneratorRuntime().wrap(function _callee20$(_context20) {
              while (1) {
                switch (_context20.prev = _context20.next) {
                  case 0:
                    offset = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : 0;
                    count = _args20.length > 2 ? _args20[2] : undefined;
                    options = _args20.length > 3 && _args20[3] !== undefined ? _args20[3] : {};
                    _createSpan16 = (0, _tracing.createSpan)("BlobClient-downloadToFile", options), span = _createSpan16.span, updatedOptions = _createSpan16.updatedOptions;
                    _context20.prev = 4;
                    _context20.next = 7;
                    return this.download(offset, count, Object.assign(Object.assign({}, options), {
                      tracingOptions: Object.assign(Object.assign({}, options.tracingOptions), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))
                    }));

                  case 7:
                    response = _context20.sent;

                    if (!response.readableStreamBody) {
                      _context20.next = 11;
                      break;
                    }

                    _context20.next = 11;
                    return (0, _utils2.readStreamToLocalFile)(response.readableStreamBody, filePath);

                  case 11:
                    // The stream is no longer accessible so setting it to undefined.
                    response.blobDownloadStream = undefined;
                    return _context20.abrupt("return", response);

                  case 15:
                    _context20.prev = 15;
                    _context20.t0 = _context20["catch"](4);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context20.t0.message
                    });
                    throw _context20.t0;

                  case 19:
                    _context20.prev = 19;
                    span.end();
                    return _context20.finish(19);

                  case 22:
                  case "end":
                    return _context20.stop();
                }
              }
            }, _callee20, this, [[4, 15, 19, 22]]);
          }));

          function downloadToFile(_x12) {
            return _downloadToFile.apply(this, arguments);
          }

          return downloadToFile;
        }()
      }, {
        key: "getBlobAndContainerNamesFromUrl",
        value: function getBlobAndContainerNamesFromUrl() {
          var containerName;
          var blobName;

          try {
            //  URL may look like the following
            // "https://myaccount.blob.core.windows.net/mycontainer/blob?sasString";
            // "https://myaccount.blob.core.windows.net/mycontainer/blob";
            // "https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt?sasString";
            // "https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt";
            // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername/blob`
            // http://localhost:10001/devstoreaccount1/containername/blob
            var parsedUrl = _coreHttp.URLBuilder.parse(this.url);

            if (parsedUrl.getHost().split(".")[1] === "blob") {
              // "https://myaccount.blob.core.windows.net/containername/blob".
              // .getPath() -> /containername/blob
              var pathComponents = parsedUrl.getPath().match("/([^/]*)(/(.*))?");
              containerName = pathComponents[1];
              blobName = pathComponents[3];
            } else if ((0, _utils.isIpEndpointStyle)(parsedUrl)) {
              // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername/blob
              // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername/blob
              // .getPath() -> /devstoreaccount1/containername/blob
              var _pathComponents = parsedUrl.getPath().match("/([^/]*)/([^/]*)(/(.*))?");

              containerName = _pathComponents[2];
              blobName = _pathComponents[4];
            } else {
              // "https://customdomain.com/containername/blob".
              // .getPath() -> /containername/blob
              var _pathComponents2 = parsedUrl.getPath().match("/([^/]*)(/(.*))?");

              containerName = _pathComponents2[1];
              blobName = _pathComponents2[3];
            } // decode the encoded blobName, containerName - to get all the special characters that might be present in them


            containerName = decodeURIComponent(containerName);
            blobName = decodeURIComponent(blobName); // Azure Storage Server will replace "\" with "/" in the blob names
            //   doing the same in the SDK side so that the user doesn't have to replace "\" instances in the blobName

            blobName = blobName.replace(/\\/g, "/");

            if (!containerName) {
              throw new Error("Provided containerName is invalid.");
            }

            return {
              blobName: blobName,
              containerName: containerName
            };
          } catch (error) {
            throw new Error("Unable to extract blobName and containerName with provided information.");
          }
        }
        /**
         * Asynchronously copies a blob to a destination within the storage account.
         * In version 2012-02-12 and later, the source for a Copy Blob operation can be
         * a committed blob in any Azure storage account.
         * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
         * an Azure file in any Azure storage account.
         * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
         * operation to copy from another storage account.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob
         *
         * @param copySource - url to the source Azure Blob/File.
         * @param options - Optional options to the Blob Start Copy From URL operation.
         */

      }, {
        key: "startCopyFromURL",
        value: function () {
          var _startCopyFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(copySource) {
            var options,
                _a,
                _b,
                _c,
                _createSpan17,
                span,
                updatedOptions,
                _args21 = arguments;

            return _regeneratorRuntime().wrap(function _callee21$(_context21) {
              while (1) {
                switch (_context21.prev = _context21.next) {
                  case 0:
                    options = _args21.length > 1 && _args21[1] !== undefined ? _args21[1] : {};
                    _createSpan17 = (0, _tracing.createSpan)("BlobClient-startCopyFromURL", options), span = _createSpan17.span, updatedOptions = _createSpan17.updatedOptions;
                    options.conditions = options.conditions || {};
                    options.sourceConditions = options.sourceConditions || {};
                    _context21.prev = 4;
                    _context21.next = 7;
                    return this.blobContext.startCopyFromURL(copySource, Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      metadata: options.metadata,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      sourceModifiedAccessConditions: {
                        sourceIfMatch: options.sourceConditions.ifMatch,
                        sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                        sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                        sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,
                        sourceIfTags: options.sourceConditions.tagConditions
                      },
                      immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                      immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                      legalHold: options.legalHold,
                      rehydratePriority: options.rehydratePriority,
                      tier: (0, _models.toAccessTier)(options.tier),
                      blobTagsString: (0, _utils.toBlobTagsString)(options.tags),
                      sealBlob: options.sealBlob
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    return _context21.abrupt("return", _context21.sent);

                  case 10:
                    _context21.prev = 10;
                    _context21.t0 = _context21["catch"](4);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context21.t0.message
                    });
                    throw _context21.t0;

                  case 14:
                    _context21.prev = 14;
                    span.end();
                    return _context21.finish(14);

                  case 17:
                  case "end":
                    return _context21.stop();
                }
              }
            }, _callee21, this, [[4, 10, 14, 17]]);
          }));

          function startCopyFromURL(_x13) {
            return _startCopyFromURL.apply(this, arguments);
          }

          return startCopyFromURL;
        }()
        /**
         * Only available for BlobClient constructed with a shared key credential.
         *
         * Generates a Blob Service Shared Access Signature (SAS) URI based on the client properties
         * and parameters passed in. The SAS is signed by the shared key credential of the client.
         *
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
         *
         * @param options - Optional parameters.
         * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
         */

      }, {
        key: "generateSasUrl",
        value: function generateSasUrl(options) {
          var _this5 = this;

          return new Promise(function (resolve) {
            if (!(_this5.credential instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential)) {
              throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
            }

            var sas = (0, _BlobSASSignatureValues.generateBlobSASQueryParameters)(Object.assign({
              containerName: _this5._containerName,
              blobName: _this5._name,
              snapshotTime: _this5._snapshot,
              versionId: _this5._versionId
            }, options), _this5.credential).toString();
            resolve((0, _utils.appendToURLQuery)(_this5.url, sas));
          });
        }
        /**
         * Delete the immutablility policy on the blob.
         *
         * @param options - Optional options to delete immutability policy on the blob.
         */

      }, {
        key: "deleteImmutabilityPolicy",
        value: function () {
          var _deleteImmutabilityPolicy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(options) {
            var _createSpan18, span, updatedOptions;

            return _regeneratorRuntime().wrap(function _callee22$(_context22) {
              while (1) {
                switch (_context22.prev = _context22.next) {
                  case 0:
                    _createSpan18 = (0, _tracing.createSpan)("BlobClient-deleteImmutabilityPolicy", options), span = _createSpan18.span, updatedOptions = _createSpan18.updatedOptions;
                    _context22.prev = 1;
                    _context22.next = 4;
                    return this.blobContext.deleteImmutabilityPolicy(Object.assign({
                      abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 4:
                    return _context22.abrupt("return", _context22.sent);

                  case 7:
                    _context22.prev = 7;
                    _context22.t0 = _context22["catch"](1);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context22.t0.message
                    });
                    throw _context22.t0;

                  case 11:
                    _context22.prev = 11;
                    span.end();
                    return _context22.finish(11);

                  case 14:
                  case "end":
                    return _context22.stop();
                }
              }
            }, _callee22, this, [[1, 7, 11, 14]]);
          }));

          function deleteImmutabilityPolicy(_x14) {
            return _deleteImmutabilityPolicy.apply(this, arguments);
          }

          return deleteImmutabilityPolicy;
        }()
        /**
         * Set immutablility policy on the blob.
         *
         * @param options - Optional options to set immutability policy on the blob.
         */

      }, {
        key: "setImmutabilityPolicy",
        value: function () {
          var _setImmutabilityPolicy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(immutabilityPolicy, options) {
            var _createSpan19, span, updatedOptions;

            return _regeneratorRuntime().wrap(function _callee23$(_context23) {
              while (1) {
                switch (_context23.prev = _context23.next) {
                  case 0:
                    _createSpan19 = (0, _tracing.createSpan)("BlobClient-setImmutabilityPolicy", options), span = _createSpan19.span, updatedOptions = _createSpan19.updatedOptions;
                    _context23.prev = 1;
                    _context23.next = 4;
                    return this.blobContext.setImmutabilityPolicy(Object.assign({
                      abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,
                      immutabilityPolicyExpiry: immutabilityPolicy.expiriesOn,
                      immutabilityPolicyMode: immutabilityPolicy.policyMode,
                      modifiedAccessConditions: options === null || options === void 0 ? void 0 : options.modifiedAccessCondition
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 4:
                    return _context23.abrupt("return", _context23.sent);

                  case 7:
                    _context23.prev = 7;
                    _context23.t0 = _context23["catch"](1);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context23.t0.message
                    });
                    throw _context23.t0;

                  case 11:
                    _context23.prev = 11;
                    span.end();
                    return _context23.finish(11);

                  case 14:
                  case "end":
                    return _context23.stop();
                }
              }
            }, _callee23, this, [[1, 7, 11, 14]]);
          }));

          function setImmutabilityPolicy(_x15, _x16) {
            return _setImmutabilityPolicy.apply(this, arguments);
          }

          return setImmutabilityPolicy;
        }()
        /**
         * Set legal hold on the blob.
         *
         * @param options - Optional options to set legal hold on the blob.
         */

      }, {
        key: "setLegalHold",
        value: function () {
          var _setLegalHold = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(legalHoldEnabled, options) {
            var _createSpan20, span, updatedOptions;

            return _regeneratorRuntime().wrap(function _callee24$(_context24) {
              while (1) {
                switch (_context24.prev = _context24.next) {
                  case 0:
                    _createSpan20 = (0, _tracing.createSpan)("BlobClient-setLegalHold", options), span = _createSpan20.span, updatedOptions = _createSpan20.updatedOptions;
                    _context24.prev = 1;
                    _context24.next = 4;
                    return this.blobContext.setLegalHold(legalHoldEnabled, Object.assign({
                      abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 4:
                    return _context24.abrupt("return", _context24.sent);

                  case 7:
                    _context24.prev = 7;
                    _context24.t0 = _context24["catch"](1);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context24.t0.message
                    });
                    throw _context24.t0;

                  case 11:
                    _context24.prev = 11;
                    span.end();
                    return _context24.finish(11);

                  case 14:
                  case "end":
                    return _context24.stop();
                }
              }
            }, _callee24, this, [[1, 7, 11, 14]]);
          }));

          function setLegalHold(_x17, _x18) {
            return _setLegalHold.apply(this, arguments);
          }

          return setLegalHold;
        }()
      }]);

      return BlobClient;
    }(_StorageClient2.StorageClient);
    /**
     * AppendBlobClient defines a set of operations applicable to append blobs.
     */


    exports.BlobClient = BlobClient;

    var AppendBlobClient = /*#__PURE__*/function (_BlobClient) {
      _inherits(AppendBlobClient, _BlobClient);

      var _super2 = _createSuper(AppendBlobClient);

      function AppendBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.

      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
      options) {
        var _this6;

        _classCallCheck(this, AppendBlobClient); // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.
        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);


        var pipeline;
        var url;
        options = options || {};

        if ((0, _Pipeline.isPipelineLike)(credentialOrPipelineOrContainerName)) {
          // (url: string, pipeline: Pipeline)
          url = urlOrConnectionString;
          pipeline = credentialOrPipelineOrContainerName;
        } else if (_coreHttp.isNode && credentialOrPipelineOrContainerName instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrPipelineOrContainerName)) {
          // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)      url = urlOrConnectionString;
          url = urlOrConnectionString;
          options = blobNameOrOptions;
          pipeline = (0, _Pipeline.newPipeline)(credentialOrPipelineOrContainerName, options);
        } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
          // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
          url = urlOrConnectionString; // The second parameter is undefined. Use anonymous credential.

          pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
        } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
          // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
          var containerName = credentialOrPipelineOrContainerName;
          var blobName = blobNameOrOptions;
          var extractedCreds = (0, _utils.extractConnectionStringParts)(urlOrConnectionString);

          if (extractedCreds.kind === "AccountConnString") {
            if (_coreHttp.isNode) {
              var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
              url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));

              if (!options.proxyOptions) {
                options.proxyOptions = (0, _coreHttp.getDefaultProxySettings)(extractedCreds.proxyUri);
              }

              pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
            } else {
              throw new Error("Account connection string is only supported in Node.js environment");
            }
          } else if (extractedCreds.kind === "SASConnString") {
            url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
            pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
          } else {
            throw new Error("Connection string must be either an Account connection string or a SAS connection string");
          }
        } else {
          throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        }

        _this6 = _super2.call(this, url, pipeline);
        _this6.appendBlobContext = new _operations.AppendBlob(_this6.storageClientContext);
        return _this6;
      }
      /**
       * Creates a new AppendBlobClient object identical to the source but with the
       * specified snapshot timestamp.
       * Provide "" will remove the snapshot and return a Client to the base blob.
       *
       * @param snapshot - The snapshot timestamp.
       * @returns A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.
       */


      _createClass(AppendBlobClient, [{
        key: "withSnapshot",
        value: function withSnapshot(snapshot) {
          return new AppendBlobClient((0, _utils.setURLParameter)(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
        }
        /**
         * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
         * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
         *
         * @param options - Options to the Append Block Create operation.
         *
         *
         * Example usage:
         *
         * ```js
         * const appendBlobClient = containerClient.getAppendBlobClient("<blob name>");
         * await appendBlobClient.create();
         * ```
         */

      }, {
        key: "create",
        value: function () {
          var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {
            var options,
                _a,
                _b,
                _c,
                _createSpan21,
                span,
                updatedOptions,
                _args25 = arguments;

            return _regeneratorRuntime().wrap(function _callee25$(_context25) {
              while (1) {
                switch (_context25.prev = _context25.next) {
                  case 0:
                    options = _args25.length > 0 && _args25[0] !== undefined ? _args25[0] : {};
                    _createSpan21 = (0, _tracing.createSpan)("AppendBlobClient-create", options), span = _createSpan21.span, updatedOptions = _createSpan21.updatedOptions;
                    options.conditions = options.conditions || {};
                    _context25.prev = 3;
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context25.next = 7;
                    return this.appendBlobContext.create(0, Object.assign({
                      abortSignal: options.abortSignal,
                      blobHttpHeaders: options.blobHTTPHeaders,
                      leaseAccessConditions: options.conditions,
                      metadata: options.metadata,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      cpkInfo: options.customerProvidedKey,
                      encryptionScope: options.encryptionScope,
                      immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                      immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                      legalHold: options.legalHold,
                      blobTagsString: (0, _utils.toBlobTagsString)(options.tags)
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    return _context25.abrupt("return", _context25.sent);

                  case 10:
                    _context25.prev = 10;
                    _context25.t0 = _context25["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context25.t0.message
                    });
                    throw _context25.t0;

                  case 14:
                    _context25.prev = 14;
                    span.end();
                    return _context25.finish(14);

                  case 17:
                  case "end":
                    return _context25.stop();
                }
              }
            }, _callee25, this, [[3, 10, 14, 17]]);
          }));

          function create() {
            return _create.apply(this, arguments);
          }

          return create;
        }()
        /**
         * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
         * If the blob with the same name already exists, the content of the existing blob will remain unchanged.
         * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
         *
         * @param options -
         */

      }, {
        key: "createIfNotExists",
        value: function () {
          var _createIfNotExists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {
            var options,
                _a,
                _b,
                _createSpan22,
                span,
                updatedOptions,
                conditions,
                res,
                _args26 = arguments;

            return _regeneratorRuntime().wrap(function _callee26$(_context26) {
              while (1) {
                switch (_context26.prev = _context26.next) {
                  case 0:
                    options = _args26.length > 0 && _args26[0] !== undefined ? _args26[0] : {};
                    _createSpan22 = (0, _tracing.createSpan)("AppendBlobClient-createIfNotExists", options), span = _createSpan22.span, updatedOptions = _createSpan22.updatedOptions;
                    conditions = {
                      ifNoneMatch: _constants.ETagAny
                    };
                    _context26.prev = 3;
                    _context26.next = 6;
                    return this.create(Object.assign(Object.assign({}, updatedOptions), {
                      conditions: conditions
                    }));

                  case 6:
                    res = _context26.sent;
                    return _context26.abrupt("return", Object.assign(Object.assign({
                      succeeded: true
                    }, res), {
                      _response: res._response
                    }));

                  case 10:
                    _context26.prev = 10;
                    _context26.t0 = _context26["catch"](3);

                    if (!(((_a = _context26.t0.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "BlobAlreadyExists")) {
                      _context26.next = 15;
                      break;
                    }

                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: "Expected exception when creating a blob only if it does not already exist."
                    });
                    return _context26.abrupt("return", Object.assign(Object.assign({
                      succeeded: false
                    }, (_b = _context26.t0.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                      _response: _context26.t0.response
                    }));

                  case 15:
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context26.t0.message
                    });
                    throw _context26.t0;

                  case 17:
                    _context26.prev = 17;
                    span.end();
                    return _context26.finish(17);

                  case 20:
                  case "end":
                    return _context26.stop();
                }
              }
            }, _callee26, this, [[3, 10, 17, 20]]);
          }));

          function createIfNotExists() {
            return _createIfNotExists.apply(this, arguments);
          }

          return createIfNotExists;
        }()
        /**
         * Seals the append blob, making it read only.
         *
         * @param options -
         */

      }, {
        key: "seal",
        value: function () {
          var _seal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {
            var options,
                _a,
                _createSpan23,
                span,
                updatedOptions,
                _args27 = arguments;

            return _regeneratorRuntime().wrap(function _callee27$(_context27) {
              while (1) {
                switch (_context27.prev = _context27.next) {
                  case 0:
                    options = _args27.length > 0 && _args27[0] !== undefined ? _args27[0] : {};
                    _createSpan23 = (0, _tracing.createSpan)("AppendBlobClient-seal", options), span = _createSpan23.span, updatedOptions = _createSpan23.updatedOptions;
                    options.conditions = options.conditions || {};
                    _context27.prev = 3;
                    _context27.next = 6;
                    return this.appendBlobContext.seal(Object.assign({
                      abortSignal: options.abortSignal,
                      appendPositionAccessConditions: options.conditions,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      })
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 6:
                    return _context27.abrupt("return", _context27.sent);

                  case 9:
                    _context27.prev = 9;
                    _context27.t0 = _context27["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context27.t0.message
                    });
                    throw _context27.t0;

                  case 13:
                    _context27.prev = 13;
                    span.end();
                    return _context27.finish(13);

                  case 16:
                  case "end":
                    return _context27.stop();
                }
              }
            }, _callee27, this, [[3, 9, 13, 16]]);
          }));

          function seal() {
            return _seal.apply(this, arguments);
          }

          return seal;
        }()
        /**
         * Commits a new block of data to the end of the existing append blob.
         * @see https://docs.microsoft.com/rest/api/storageservices/append-block
         *
         * @param body - Data to be appended.
         * @param contentLength - Length of the body in bytes.
         * @param options - Options to the Append Block operation.
         *
         *
         * Example usage:
         *
         * ```js
         * const content = "Hello World!";
         *
         * // Create a new append blob and append data to the blob.
         * const newAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
         * await newAppendBlobClient.create();
         * await newAppendBlobClient.appendBlock(content, content.length);
         *
         * // Append data to an existing append blob.
         * const existingAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
         * await existingAppendBlobClient.appendBlock(content, content.length);
         * ```
         */

      }, {
        key: "appendBlock",
        value: function () {
          var _appendBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(body, contentLength) {
            var options,
                _a,
                _createSpan24,
                span,
                updatedOptions,
                _args28 = arguments;

            return _regeneratorRuntime().wrap(function _callee28$(_context28) {
              while (1) {
                switch (_context28.prev = _context28.next) {
                  case 0:
                    options = _args28.length > 2 && _args28[2] !== undefined ? _args28[2] : {};
                    _createSpan24 = (0, _tracing.createSpan)("AppendBlobClient-appendBlock", options), span = _createSpan24.span, updatedOptions = _createSpan24.updatedOptions;
                    options.conditions = options.conditions || {};
                    _context28.prev = 3;
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context28.next = 7;
                    return this.appendBlobContext.appendBlock(contentLength, body, Object.assign({
                      abortSignal: options.abortSignal,
                      appendPositionAccessConditions: options.conditions,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      requestOptions: {
                        onUploadProgress: options.onProgress
                      },
                      transactionalContentMD5: options.transactionalContentMD5,
                      transactionalContentCrc64: options.transactionalContentCrc64,
                      cpkInfo: options.customerProvidedKey,
                      encryptionScope: options.encryptionScope
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    return _context28.abrupt("return", _context28.sent);

                  case 10:
                    _context28.prev = 10;
                    _context28.t0 = _context28["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context28.t0.message
                    });
                    throw _context28.t0;

                  case 14:
                    _context28.prev = 14;
                    span.end();
                    return _context28.finish(14);

                  case 17:
                  case "end":
                    return _context28.stop();
                }
              }
            }, _callee28, this, [[3, 10, 14, 17]]);
          }));

          function appendBlock(_x19, _x20) {
            return _appendBlock.apply(this, arguments);
          }

          return appendBlock;
        }()
        /**
         * The Append Block operation commits a new block of data to the end of an existing append blob
         * where the contents are read from a source url.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url
         *
         * @param sourceURL -
         *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can
         *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob
         *                 must either be public or must be authenticated via a shared access signature. If the source blob is
         *                 public, no authentication is required to perform the operation.
         * @param sourceOffset - Offset in source to be appended
         * @param count - Number of bytes to be appended as a block
         * @param options -
         */

      }, {
        key: "appendBlockFromURL",
        value: function () {
          var _appendBlockFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29(sourceURL, sourceOffset, count) {
            var options,
                _a,
                _createSpan25,
                span,
                updatedOptions,
                _args29 = arguments;

            return _regeneratorRuntime().wrap(function _callee29$(_context29) {
              while (1) {
                switch (_context29.prev = _context29.next) {
                  case 0:
                    options = _args29.length > 3 && _args29[3] !== undefined ? _args29[3] : {};
                    _createSpan25 = (0, _tracing.createSpan)("AppendBlobClient-appendBlockFromURL", options), span = _createSpan25.span, updatedOptions = _createSpan25.updatedOptions;
                    options.conditions = options.conditions || {};
                    options.sourceConditions = options.sourceConditions || {};
                    _context29.prev = 4;
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context29.next = 8;
                    return this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, Object.assign({
                      abortSignal: options.abortSignal,
                      sourceRange: (0, _Range.rangeToString)({
                        offset: sourceOffset,
                        count: count
                      }),
                      sourceContentMD5: options.sourceContentMD5,
                      sourceContentCrc64: options.sourceContentCrc64,
                      leaseAccessConditions: options.conditions,
                      appendPositionAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      sourceModifiedAccessConditions: {
                        sourceIfMatch: options.sourceConditions.ifMatch,
                        sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                        sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                        sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
                      },
                      copySourceAuthorization: (0, _utils.httpAuthorizationToString)(options.sourceAuthorization),
                      cpkInfo: options.customerProvidedKey,
                      encryptionScope: options.encryptionScope
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 8:
                    return _context29.abrupt("return", _context29.sent);

                  case 11:
                    _context29.prev = 11;
                    _context29.t0 = _context29["catch"](4);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context29.t0.message
                    });
                    throw _context29.t0;

                  case 15:
                    _context29.prev = 15;
                    span.end();
                    return _context29.finish(15);

                  case 18:
                  case "end":
                    return _context29.stop();
                }
              }
            }, _callee29, this, [[4, 11, 15, 18]]);
          }));

          function appendBlockFromURL(_x21, _x22, _x23) {
            return _appendBlockFromURL.apply(this, arguments);
          }

          return appendBlockFromURL;
        }()
      }]);

      return AppendBlobClient;
    }(BlobClient);
    /**
     * BlockBlobClient defines a set of operations applicable to block blobs.
     */


    exports.AppendBlobClient = AppendBlobClient;

    var BlockBlobClient = /*#__PURE__*/function (_BlobClient2) {
      _inherits(BlockBlobClient, _BlobClient2);

      var _super3 = _createSuper(BlockBlobClient);

      function BlockBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.

      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
      options) {
        var _this7;

        _classCallCheck(this, BlockBlobClient); // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.
        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);


        var pipeline;
        var url;
        options = options || {};

        if ((0, _Pipeline.isPipelineLike)(credentialOrPipelineOrContainerName)) {
          // (url: string, pipeline: Pipeline)
          url = urlOrConnectionString;
          pipeline = credentialOrPipelineOrContainerName;
        } else if (_coreHttp.isNode && credentialOrPipelineOrContainerName instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrPipelineOrContainerName)) {
          // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
          url = urlOrConnectionString;
          options = blobNameOrOptions;
          pipeline = (0, _Pipeline.newPipeline)(credentialOrPipelineOrContainerName, options);
        } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
          // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
          // The second parameter is undefined. Use anonymous credential.
          url = urlOrConnectionString;
          pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
        } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
          // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
          var containerName = credentialOrPipelineOrContainerName;
          var blobName = blobNameOrOptions;
          var extractedCreds = (0, _utils.extractConnectionStringParts)(urlOrConnectionString);

          if (extractedCreds.kind === "AccountConnString") {
            if (_coreHttp.isNode) {
              var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
              url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));

              if (!options.proxyOptions) {
                options.proxyOptions = (0, _coreHttp.getDefaultProxySettings)(extractedCreds.proxyUri);
              }

              pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
            } else {
              throw new Error("Account connection string is only supported in Node.js environment");
            }
          } else if (extractedCreds.kind === "SASConnString") {
            url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
            pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
          } else {
            throw new Error("Connection string must be either an Account connection string or a SAS connection string");
          }
        } else {
          throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        }

        _this7 = _super3.call(this, url, pipeline);
        _this7.blockBlobContext = new _operations.BlockBlob(_this7.storageClientContext);
        _this7._blobContext = new _operations.Blob(_this7.storageClientContext);
        return _this7;
      }
      /**
       * Creates a new BlockBlobClient object identical to the source but with the
       * specified snapshot timestamp.
       * Provide "" will remove the snapshot and return a URL to the base blob.
       *
       * @param snapshot - The snapshot timestamp.
       * @returns A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.
       */


      _createClass(BlockBlobClient, [{
        key: "withSnapshot",
        value: function withSnapshot(snapshot) {
          return new BlockBlobClient((0, _utils.setURLParameter)(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
        }
        /**
         * ONLY AVAILABLE IN NODE.JS RUNTIME.
         *
         * Quick query for a JSON or CSV formatted blob.
         *
         * Example usage (Node.js):
         *
         * ```js
         * // Query and convert a blob to a string
         * const queryBlockBlobResponse = await blockBlobClient.query("select * from BlobStorage");
         * const downloaded = (await streamToBuffer(queryBlockBlobResponse.readableStreamBody)).toString();
         * console.log("Query blob content:", downloaded);
         *
         * async function streamToBuffer(readableStream) {
         *   return new Promise((resolve, reject) => {
         *     const chunks = [];
         *     readableStream.on("data", (data) => {
         *       chunks.push(data instanceof Buffer ? data : Buffer.from(data));
         *     });
         *     readableStream.on("end", () => {
         *       resolve(Buffer.concat(chunks));
         *     });
         *     readableStream.on("error", reject);
         *   });
         * }
         * ```
         *
         * @param query -
         * @param options -
         */

      }, {
        key: "query",
        value: function () {
          var _query2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee30(_query) {
            var options,
                _a,
                _createSpan26,
                span,
                updatedOptions,
                response,
                _args30 = arguments;

            return _regeneratorRuntime().wrap(function _callee30$(_context30) {
              while (1) {
                switch (_context30.prev = _context30.next) {
                  case 0:
                    options = _args30.length > 1 && _args30[1] !== undefined ? _args30[1] : {};
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _createSpan26 = (0, _tracing.createSpan)("BlockBlobClient-query", options), span = _createSpan26.span, updatedOptions = _createSpan26.updatedOptions;
                    _context30.prev = 3;

                    if (_coreHttp.isNode) {
                      _context30.next = 6;
                      break;
                    }

                    throw new Error("This operation currently is only supported in Node.js.");

                  case 6:
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context30.next = 9;
                    return this._blobContext.query(Object.assign({
                      abortSignal: options.abortSignal,
                      queryRequest: {
                        queryType: "SQL",
                        expression: _query,
                        inputSerialization: (0, _utils.toQuerySerialization)(options.inputTextConfiguration),
                        outputSerialization: (0, _utils.toQuerySerialization)(options.outputTextConfiguration)
                      },
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      cpkInfo: options.customerProvidedKey
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 9:
                    response = _context30.sent;
                    return _context30.abrupt("return", new _BlobQueryResponse.BlobQueryResponse(response, {
                      abortSignal: options.abortSignal,
                      onProgress: options.onProgress,
                      onError: options.onError
                    }));

                  case 13:
                    _context30.prev = 13;
                    _context30.t0 = _context30["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context30.t0.message
                    });
                    throw _context30.t0;

                  case 17:
                    _context30.prev = 17;
                    span.end();
                    return _context30.finish(17);

                  case 20:
                  case "end":
                    return _context30.stop();
                }
              }
            }, _callee30, this, [[3, 13, 17, 20]]);
          }));

          function query(_x24) {
            return _query2.apply(this, arguments);
          }

          return query;
        }()
        /**
         * Creates a new block blob, or updates the content of an existing block blob.
         * Updating an existing block blob overwrites any existing metadata on the blob.
         * Partial updates are not supported; the content of the existing blob is
         * overwritten with the new content. To perform a partial update of a block blob's,
         * use {@link stageBlock} and {@link commitBlockList}.
         *
         * This is a non-parallel uploading method, please use {@link uploadFile},
         * {@link uploadStream} or {@link uploadBrowserData} for better performance
         * with concurrency uploading.
         *
         * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
         *
         * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function
         *                               which returns a new Readable stream whose offset is from data source beginning.
         * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
         *                               string including non non-Base64/Hex-encoded characters.
         * @param options - Options to the Block Blob Upload operation.
         * @returns Response data for the Block Blob Upload operation.
         *
         * Example usage:
         *
         * ```js
         * const content = "Hello world!";
         * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
         * ```
         */

      }, {
        key: "upload",
        value: function () {
          var _upload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee31(body, contentLength) {
            var options,
                _a,
                _b,
                _c,
                _createSpan27,
                span,
                updatedOptions,
                _args31 = arguments;

            return _regeneratorRuntime().wrap(function _callee31$(_context31) {
              while (1) {
                switch (_context31.prev = _context31.next) {
                  case 0:
                    options = _args31.length > 2 && _args31[2] !== undefined ? _args31[2] : {};
                    options.conditions = options.conditions || {};
                    _createSpan27 = (0, _tracing.createSpan)("BlockBlobClient-upload", options), span = _createSpan27.span, updatedOptions = _createSpan27.updatedOptions;
                    _context31.prev = 3;
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context31.next = 7;
                    return this.blockBlobContext.upload(contentLength, body, Object.assign({
                      abortSignal: options.abortSignal,
                      blobHttpHeaders: options.blobHTTPHeaders,
                      leaseAccessConditions: options.conditions,
                      metadata: options.metadata,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      requestOptions: {
                        onUploadProgress: options.onProgress
                      },
                      cpkInfo: options.customerProvidedKey,
                      encryptionScope: options.encryptionScope,
                      immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                      immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                      legalHold: options.legalHold,
                      tier: (0, _models.toAccessTier)(options.tier),
                      blobTagsString: (0, _utils.toBlobTagsString)(options.tags)
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    return _context31.abrupt("return", _context31.sent);

                  case 10:
                    _context31.prev = 10;
                    _context31.t0 = _context31["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context31.t0.message
                    });
                    throw _context31.t0;

                  case 14:
                    _context31.prev = 14;
                    span.end();
                    return _context31.finish(14);

                  case 17:
                  case "end":
                    return _context31.stop();
                }
              }
            }, _callee31, this, [[3, 10, 14, 17]]);
          }));

          function upload(_x25, _x26) {
            return _upload.apply(this, arguments);
          }

          return upload;
        }()
        /**
         * Creates a new Block Blob where the contents of the blob are read from a given URL.
         * This API is supported beginning with the 2020-04-08 version. Partial updates
         * are not supported with Put Blob from URL; the content of an existing blob is overwritten with
         * the content of the new blob.  To perform partial updates to a block blob’s contents using a
         * source URL, use {@link stageBlockFromURL} and {@link commitBlockList}.
         *
         * @param sourceURL - Specifies the URL of the blob. The value
         *                           may be a URL of up to 2 KB in length that specifies a blob.
         *                           The value should be URL-encoded as it would appear
         *                           in a request URI. The source blob must either be public
         *                           or must be authenticated via a shared access signature.
         *                           If the source blob is public, no authentication is required
         *                           to perform the operation. Here are some examples of source object URLs:
         *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob
         *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
         * @param options - Optional parameters.
         */

      }, {
        key: "syncUploadFromURL",
        value: function () {
          var _syncUploadFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee32(sourceURL) {
            var options,
                _a,
                _b,
                _c,
                _d,
                _e,
                _createSpan28,
                span,
                updatedOptions,
                _args32 = arguments;

            return _regeneratorRuntime().wrap(function _callee32$(_context32) {
              while (1) {
                switch (_context32.prev = _context32.next) {
                  case 0:
                    options = _args32.length > 1 && _args32[1] !== undefined ? _args32[1] : {};
                    options.conditions = options.conditions || {};
                    _createSpan28 = (0, _tracing.createSpan)("BlockBlobClient-syncUploadFromURL", options), span = _createSpan28.span, updatedOptions = _createSpan28.updatedOptions;
                    _context32.prev = 3;
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context32.next = 7;
                    return this.blockBlobContext.putBlobFromUrl(0, sourceURL, Object.assign(Object.assign(Object.assign({}, options), {
                      blobHttpHeaders: options.blobHTTPHeaders,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: options.conditions.tagConditions
                      }),
                      sourceModifiedAccessConditions: {
                        sourceIfMatch: (_a = options.sourceConditions) === null || _a === void 0 ? void 0 : _a.ifMatch,
                        sourceIfModifiedSince: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifModifiedSince,
                        sourceIfNoneMatch: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch,
                        sourceIfUnmodifiedSince: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifUnmodifiedSince,
                        sourceIfTags: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.tagConditions
                      },
                      cpkInfo: options.customerProvidedKey,
                      copySourceAuthorization: (0, _utils.httpAuthorizationToString)(options.sourceAuthorization),
                      tier: (0, _models.toAccessTier)(options.tier),
                      blobTagsString: (0, _utils.toBlobTagsString)(options.tags),
                      copySourceTags: options.copySourceTags
                    }), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    return _context32.abrupt("return", _context32.sent);

                  case 10:
                    _context32.prev = 10;
                    _context32.t0 = _context32["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context32.t0.message
                    });
                    throw _context32.t0;

                  case 14:
                    _context32.prev = 14;
                    span.end();
                    return _context32.finish(14);

                  case 17:
                  case "end":
                    return _context32.stop();
                }
              }
            }, _callee32, this, [[3, 10, 14, 17]]);
          }));

          function syncUploadFromURL(_x27) {
            return _syncUploadFromURL.apply(this, arguments);
          }

          return syncUploadFromURL;
        }()
        /**
         * Uploads the specified block to the block blob's "staging area" to be later
         * committed by a call to commitBlockList.
         * @see https://docs.microsoft.com/rest/api/storageservices/put-block
         *
         * @param blockId - A 64-byte value that is base64-encoded
         * @param body - Data to upload to the staging area.
         * @param contentLength - Number of bytes to upload.
         * @param options - Options to the Block Blob Stage Block operation.
         * @returns Response data for the Block Blob Stage Block operation.
         */

      }, {
        key: "stageBlock",
        value: function () {
          var _stageBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee33(blockId, body, contentLength) {
            var options,
                _createSpan29,
                span,
                updatedOptions,
                _args33 = arguments;

            return _regeneratorRuntime().wrap(function _callee33$(_context33) {
              while (1) {
                switch (_context33.prev = _context33.next) {
                  case 0:
                    options = _args33.length > 3 && _args33[3] !== undefined ? _args33[3] : {};
                    _createSpan29 = (0, _tracing.createSpan)("BlockBlobClient-stageBlock", options), span = _createSpan29.span, updatedOptions = _createSpan29.updatedOptions;
                    _context33.prev = 2;
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context33.next = 6;
                    return this.blockBlobContext.stageBlock(blockId, contentLength, body, Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      requestOptions: {
                        onUploadProgress: options.onProgress
                      },
                      transactionalContentMD5: options.transactionalContentMD5,
                      transactionalContentCrc64: options.transactionalContentCrc64,
                      cpkInfo: options.customerProvidedKey,
                      encryptionScope: options.encryptionScope
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 6:
                    return _context33.abrupt("return", _context33.sent);

                  case 9:
                    _context33.prev = 9;
                    _context33.t0 = _context33["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context33.t0.message
                    });
                    throw _context33.t0;

                  case 13:
                    _context33.prev = 13;
                    span.end();
                    return _context33.finish(13);

                  case 16:
                  case "end":
                    return _context33.stop();
                }
              }
            }, _callee33, this, [[2, 9, 13, 16]]);
          }));

          function stageBlock(_x28, _x29, _x30) {
            return _stageBlock.apply(this, arguments);
          }

          return stageBlock;
        }()
        /**
         * The Stage Block From URL operation creates a new block to be committed as part
         * of a blob where the contents are read from a URL.
         * This API is available starting in version 2018-03-28.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url
         *
         * @param blockId - A 64-byte value that is base64-encoded
         * @param sourceURL - Specifies the URL of the blob. The value
         *                           may be a URL of up to 2 KB in length that specifies a blob.
         *                           The value should be URL-encoded as it would appear
         *                           in a request URI. The source blob must either be public
         *                           or must be authenticated via a shared access signature.
         *                           If the source blob is public, no authentication is required
         *                           to perform the operation. Here are some examples of source object URLs:
         *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob
         *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
         * @param offset - From which position of the blob to download, greater than or equal to 0
         * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined
         * @param options - Options to the Block Blob Stage Block From URL operation.
         * @returns Response data for the Block Blob Stage Block From URL operation.
         */

      }, {
        key: "stageBlockFromURL",
        value: function () {
          var _stageBlockFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee34(blockId, sourceURL) {
            var offset,
                count,
                options,
                _createSpan30,
                span,
                updatedOptions,
                _args34 = arguments;

            return _regeneratorRuntime().wrap(function _callee34$(_context34) {
              while (1) {
                switch (_context34.prev = _context34.next) {
                  case 0:
                    offset = _args34.length > 2 && _args34[2] !== undefined ? _args34[2] : 0;
                    count = _args34.length > 3 ? _args34[3] : undefined;
                    options = _args34.length > 4 && _args34[4] !== undefined ? _args34[4] : {};
                    _createSpan30 = (0, _tracing.createSpan)("BlockBlobClient-stageBlockFromURL", options), span = _createSpan30.span, updatedOptions = _createSpan30.updatedOptions;
                    _context34.prev = 4;
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context34.next = 8;
                    return this.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      sourceContentMD5: options.sourceContentMD5,
                      sourceContentCrc64: options.sourceContentCrc64,
                      sourceRange: offset === 0 && !count ? undefined : (0, _Range.rangeToString)({
                        offset: offset,
                        count: count
                      }),
                      cpkInfo: options.customerProvidedKey,
                      encryptionScope: options.encryptionScope,
                      copySourceAuthorization: (0, _utils.httpAuthorizationToString)(options.sourceAuthorization)
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 8:
                    return _context34.abrupt("return", _context34.sent);

                  case 11:
                    _context34.prev = 11;
                    _context34.t0 = _context34["catch"](4);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context34.t0.message
                    });
                    throw _context34.t0;

                  case 15:
                    _context34.prev = 15;
                    span.end();
                    return _context34.finish(15);

                  case 18:
                  case "end":
                    return _context34.stop();
                }
              }
            }, _callee34, this, [[4, 11, 15, 18]]);
          }));

          function stageBlockFromURL(_x31, _x32) {
            return _stageBlockFromURL.apply(this, arguments);
          }

          return stageBlockFromURL;
        }()
        /**
         * Writes a blob by specifying the list of block IDs that make up the blob.
         * In order to be written as part of a blob, a block must have been successfully written
         * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to
         * update a blob by uploading only those blocks that have changed, then committing the new and existing
         * blocks together. Any blocks not specified in the block list and permanently deleted.
         * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list
         *
         * @param blocks -  Array of 64-byte value that is base64-encoded
         * @param options - Options to the Block Blob Commit Block List operation.
         * @returns Response data for the Block Blob Commit Block List operation.
         */

      }, {
        key: "commitBlockList",
        value: function () {
          var _commitBlockList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee35(blocks) {
            var options,
                _a,
                _b,
                _c,
                _createSpan31,
                span,
                updatedOptions,
                _args35 = arguments;

            return _regeneratorRuntime().wrap(function _callee35$(_context35) {
              while (1) {
                switch (_context35.prev = _context35.next) {
                  case 0:
                    options = _args35.length > 1 && _args35[1] !== undefined ? _args35[1] : {};
                    options.conditions = options.conditions || {};
                    _createSpan31 = (0, _tracing.createSpan)("BlockBlobClient-commitBlockList", options), span = _createSpan31.span, updatedOptions = _createSpan31.updatedOptions;
                    _context35.prev = 3;
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context35.next = 7;
                    return this.blockBlobContext.commitBlockList({
                      latest: blocks
                    }, Object.assign({
                      abortSignal: options.abortSignal,
                      blobHttpHeaders: options.blobHTTPHeaders,
                      leaseAccessConditions: options.conditions,
                      metadata: options.metadata,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      cpkInfo: options.customerProvidedKey,
                      encryptionScope: options.encryptionScope,
                      immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                      immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                      legalHold: options.legalHold,
                      tier: (0, _models.toAccessTier)(options.tier),
                      blobTagsString: (0, _utils.toBlobTagsString)(options.tags)
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    return _context35.abrupt("return", _context35.sent);

                  case 10:
                    _context35.prev = 10;
                    _context35.t0 = _context35["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context35.t0.message
                    });
                    throw _context35.t0;

                  case 14:
                    _context35.prev = 14;
                    span.end();
                    return _context35.finish(14);

                  case 17:
                  case "end":
                    return _context35.stop();
                }
              }
            }, _callee35, this, [[3, 10, 14, 17]]);
          }));

          function commitBlockList(_x33) {
            return _commitBlockList.apply(this, arguments);
          }

          return commitBlockList;
        }()
        /**
         * Returns the list of blocks that have been uploaded as part of a block blob
         * using the specified block list filter.
         * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list
         *
         * @param listType - Specifies whether to return the list of committed blocks,
         *                                        the list of uncommitted blocks, or both lists together.
         * @param options - Options to the Block Blob Get Block List operation.
         * @returns Response data for the Block Blob Get Block List operation.
         */

      }, {
        key: "getBlockList",
        value: function () {
          var _getBlockList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee36(listType) {
            var options,
                _a,
                _createSpan32,
                span,
                updatedOptions,
                res,
                _args36 = arguments;

            return _regeneratorRuntime().wrap(function _callee36$(_context36) {
              while (1) {
                switch (_context36.prev = _context36.next) {
                  case 0:
                    options = _args36.length > 1 && _args36[1] !== undefined ? _args36[1] : {};
                    _createSpan32 = (0, _tracing.createSpan)("BlockBlobClient-getBlockList", options), span = _createSpan32.span, updatedOptions = _createSpan32.updatedOptions;
                    _context36.prev = 2;
                    _context36.next = 5;
                    return this.blockBlobContext.getBlockList(listType, Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      })
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    res = _context36.sent;

                    if (!res.committedBlocks) {
                      res.committedBlocks = [];
                    }

                    if (!res.uncommittedBlocks) {
                      res.uncommittedBlocks = [];
                    }

                    return _context36.abrupt("return", res);

                  case 11:
                    _context36.prev = 11;
                    _context36.t0 = _context36["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context36.t0.message
                    });
                    throw _context36.t0;

                  case 15:
                    _context36.prev = 15;
                    span.end();
                    return _context36.finish(15);

                  case 18:
                  case "end":
                    return _context36.stop();
                }
              }
            }, _callee36, this, [[2, 11, 15, 18]]);
          }));

          function getBlockList(_x34) {
            return _getBlockList.apply(this, arguments);
          }

          return getBlockList;
        }() // High level functions

        /**
         * Uploads a Buffer(Node.js)/Blob(browsers)/ArrayBuffer/ArrayBufferView object to a BlockBlob.
         *
         * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is
         * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.
         * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}
         * to commit the block list.
         *
         * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is
         * `blobContentType`, enabling the browser to provide
         * functionality based on file type.
         *
         * @param data - Buffer(Node.js), Blob, ArrayBuffer or ArrayBufferView
         * @param options -
         */

      }, {
        key: "uploadData",
        value: function () {
          var _uploadData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee37(data) {
            var options,
                _createSpan33,
                span,
                updatedOptions,
                buffer,
                browserBlob,
                _args37 = arguments;

            return _regeneratorRuntime().wrap(function _callee37$(_context37) {
              while (1) {
                switch (_context37.prev = _context37.next) {
                  case 0:
                    options = _args37.length > 1 && _args37[1] !== undefined ? _args37[1] : {};
                    _createSpan33 = (0, _tracing.createSpan)("BlockBlobClient-uploadData", options), span = _createSpan33.span, updatedOptions = _createSpan33.updatedOptions;
                    _context37.prev = 2;

                    if (!_coreHttp.isNode) {
                      _context37.next = 8;
                      break;
                    }

                    if (data instanceof Buffer) {
                      buffer = data;
                    } else if (data instanceof ArrayBuffer) {
                      buffer = Buffer.from(data);
                    } else {
                      data = data;
                      buffer = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
                    }

                    return _context37.abrupt("return", this.uploadSeekableInternal(function (offset, size) {
                      return buffer.slice(offset, offset + size);
                    }, buffer.byteLength, updatedOptions));

                  case 8:
                    browserBlob = new Blob([data]);
                    return _context37.abrupt("return", this.uploadSeekableInternal(function (offset, size) {
                      return browserBlob.slice(offset, offset + size);
                    }, browserBlob.size, updatedOptions));

                  case 10:
                    _context37.next = 16;
                    break;

                  case 12:
                    _context37.prev = 12;
                    _context37.t0 = _context37["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context37.t0.message
                    });
                    throw _context37.t0;

                  case 16:
                    _context37.prev = 16;
                    span.end();
                    return _context37.finish(16);

                  case 19:
                  case "end":
                    return _context37.stop();
                }
              }
            }, _callee37, this, [[2, 12, 16, 19]]);
          }));

          function uploadData(_x35) {
            return _uploadData.apply(this, arguments);
          }

          return uploadData;
        }()
        /**
         * ONLY AVAILABLE IN BROWSERS.
         *
         * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.
         *
         * When buffer length lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.
         * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call
         * {@link commitBlockList} to commit the block list.
         *
         * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is
         * `blobContentType`, enabling the browser to provide
         * functionality based on file type.
         *
         * @deprecated Use {@link uploadData} instead.
         *
         * @param browserData - Blob, File, ArrayBuffer or ArrayBufferView
         * @param options - Options to upload browser data.
         * @returns Response data for the Blob Upload operation.
         */

      }, {
        key: "uploadBrowserData",
        value: function () {
          var _uploadBrowserData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee38(browserData) {
            var options,
                _createSpan34,
                span,
                updatedOptions,
                browserBlob,
                _args38 = arguments;

            return _regeneratorRuntime().wrap(function _callee38$(_context38) {
              while (1) {
                switch (_context38.prev = _context38.next) {
                  case 0:
                    options = _args38.length > 1 && _args38[1] !== undefined ? _args38[1] : {};
                    _createSpan34 = (0, _tracing.createSpan)("BlockBlobClient-uploadBrowserData", options), span = _createSpan34.span, updatedOptions = _createSpan34.updatedOptions;
                    _context38.prev = 2;
                    browserBlob = new Blob([browserData]);
                    _context38.next = 6;
                    return this.uploadSeekableInternal(function (offset, size) {
                      return browserBlob.slice(offset, offset + size);
                    }, browserBlob.size, updatedOptions);

                  case 6:
                    return _context38.abrupt("return", _context38.sent);

                  case 9:
                    _context38.prev = 9;
                    _context38.t0 = _context38["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context38.t0.message
                    });
                    throw _context38.t0;

                  case 13:
                    _context38.prev = 13;
                    span.end();
                    return _context38.finish(13);

                  case 16:
                  case "end":
                    return _context38.stop();
                }
              }
            }, _callee38, this, [[2, 9, 13, 16]]);
          }));

          function uploadBrowserData(_x36) {
            return _uploadBrowserData.apply(this, arguments);
          }

          return uploadBrowserData;
        }()
        /**
         *
         * Uploads data to block blob. Requires a bodyFactory as the data source,
         * which need to return a {@link HttpRequestBody} object with the offset and size provided.
         *
         * When data length is no more than the specified {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is
         * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.
         * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}
         * to commit the block list.
         *
         * @param bodyFactory -
         * @param size - size of the data to upload.
         * @param options - Options to Upload to Block Blob operation.
         * @returns Response data for the Blob Upload operation.
         */

      }, {
        key: "uploadSeekableInternal",
        value: function () {
          var _uploadSeekableInternal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee41(bodyFactory, size) {
            var _this8 = this;

            var options,
                _createSpan35,
                span,
                updatedOptions,
                _ret2,
                _args41 = arguments;

            return _regeneratorRuntime().wrap(function _callee41$(_context41) {
              while (1) {
                switch (_context41.prev = _context41.next) {
                  case 0:
                    options = _args41.length > 2 && _args41[2] !== undefined ? _args41[2] : {};

                    if (!options.blockSize) {
                      options.blockSize = 0;
                    }

                    if (!(options.blockSize < 0 || options.blockSize > _constants.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES)) {
                      _context41.next = 4;
                      break;
                    }

                    throw new RangeError("blockSize option must be >= 0 and <= ".concat(_constants.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES));

                  case 4:
                    if (options.maxSingleShotSize !== 0 && !options.maxSingleShotSize) {
                      options.maxSingleShotSize = _constants.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;
                    }

                    if (!(options.maxSingleShotSize < 0 || options.maxSingleShotSize > _constants.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES)) {
                      _context41.next = 7;
                      break;
                    }

                    throw new RangeError("maxSingleShotSize option must be >= 0 and <= ".concat(_constants.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES));

                  case 7:
                    if (!(options.blockSize === 0)) {
                      _context41.next = 11;
                      break;
                    }

                    if (!(size > _constants.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * _constants.BLOCK_BLOB_MAX_BLOCKS)) {
                      _context41.next = 10;
                      break;
                    }

                    throw new RangeError("".concat(size, " is too larger to upload to a block blob."));

                  case 10:
                    if (size > options.maxSingleShotSize) {
                      options.blockSize = Math.ceil(size / _constants.BLOCK_BLOB_MAX_BLOCKS);

                      if (options.blockSize < _constants.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {
                        options.blockSize = _constants.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
                      }
                    }

                  case 11:
                    if (!options.blobHTTPHeaders) {
                      options.blobHTTPHeaders = {};
                    }

                    if (!options.conditions) {
                      options.conditions = {};
                    }

                    _createSpan35 = (0, _tracing.createSpan)("BlockBlobClient-uploadSeekableInternal", options), span = _createSpan35.span, updatedOptions = _createSpan35.updatedOptions;
                    _context41.prev = 14;
                    return _context41.delegateYield( /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {
                      var numBlocks, blockList, blockIDPrefix, transferProgress, batch, _loop2, i;

                      return _regeneratorRuntime().wrap(function _callee40$(_context40) {
                        while (1) {
                          switch (_context40.prev = _context40.next) {
                            case 0:
                              if (!(size <= options.maxSingleShotSize)) {
                                _context40.next = 5;
                                break;
                              }

                              _context40.next = 3;
                              return _this8.upload(bodyFactory(0, size), size, updatedOptions);

                            case 3:
                              _context40.t0 = _context40.sent;
                              return _context40.abrupt("return", {
                                v: _context40.t0
                              });

                            case 5:
                              numBlocks = Math.floor((size - 1) / options.blockSize) + 1;

                              if (!(numBlocks > _constants.BLOCK_BLOB_MAX_BLOCKS)) {
                                _context40.next = 8;
                                break;
                              }

                              throw new RangeError("The buffer's size is too big or the BlockSize is too small;" + "the number of blocks must be <= ".concat(_constants.BLOCK_BLOB_MAX_BLOCKS));

                            case 8:
                              blockList = [];
                              blockIDPrefix = (0, _coreHttp.generateUuid)();
                              transferProgress = 0;
                              batch = new _Batch.Batch(options.concurrency);

                              _loop2 = function _loop2(i) {
                                batch.addOperation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {
                                  var blockID, start, end, contentLength;
                                  return _regeneratorRuntime().wrap(function _callee39$(_context39) {
                                    while (1) {
                                      switch (_context39.prev = _context39.next) {
                                        case 0:
                                          blockID = (0, _utils.generateBlockID)(blockIDPrefix, i);
                                          start = options.blockSize * i;
                                          end = i === numBlocks - 1 ? size : start + options.blockSize;
                                          contentLength = end - start;
                                          blockList.push(blockID);
                                          _context39.next = 7;
                                          return _this8.stageBlock(blockID, bodyFactory(start, contentLength), contentLength, {
                                            abortSignal: options.abortSignal,
                                            conditions: options.conditions,
                                            encryptionScope: options.encryptionScope,
                                            tracingOptions: updatedOptions.tracingOptions
                                          });

                                        case 7:
                                          // Update progress after block is successfully uploaded to server, in case of block trying
                                          // TODO: Hook with convenience layer progress event in finer level
                                          transferProgress += contentLength;

                                          if (options.onProgress) {
                                            options.onProgress({
                                              loadedBytes: transferProgress
                                            });
                                          }

                                        case 9:
                                        case "end":
                                          return _context39.stop();
                                      }
                                    }
                                  }, _callee39);
                                })));
                              };

                              for (i = 0; i < numBlocks; i++) {
                                _loop2(i);
                              }

                              _context40.next = 16;
                              return batch.do();

                            case 16:
                              return _context40.abrupt("return", {
                                v: _this8.commitBlockList(blockList, updatedOptions)
                              });

                            case 17:
                            case "end":
                              return _context40.stop();
                          }
                        }
                      }, _callee40);
                    })(), "t0", 16);

                  case 16:
                    _ret2 = _context41.t0;

                    if (!(_typeof(_ret2) === "object")) {
                      _context41.next = 19;
                      break;
                    }

                    return _context41.abrupt("return", _ret2.v);

                  case 19:
                    _context41.next = 25;
                    break;

                  case 21:
                    _context41.prev = 21;
                    _context41.t1 = _context41["catch"](14);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context41.t1.message
                    });
                    throw _context41.t1;

                  case 25:
                    _context41.prev = 25;
                    span.end();
                    return _context41.finish(25);

                  case 28:
                  case "end":
                    return _context41.stop();
                }
              }
            }, _callee41, null, [[14, 21, 25, 28]]);
          }));

          function uploadSeekableInternal(_x37, _x38) {
            return _uploadSeekableInternal.apply(this, arguments);
          }

          return uploadSeekableInternal;
        }()
        /**
         * ONLY AVAILABLE IN NODE.JS RUNTIME.
         *
         * Uploads a local file in blocks to a block blob.
         *
         * When file size lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.
         * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList
         * to commit the block list.
         *
         * @param filePath - Full path of local file
         * @param options - Options to Upload to Block Blob operation.
         * @returns Response data for the Blob Upload operation.
         */

      }, {
        key: "uploadFile",
        value: function () {
          var _uploadFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee42(filePath) {
            var options,
                _createSpan36,
                span,
                updatedOptions,
                size,
                _args42 = arguments;

            return _regeneratorRuntime().wrap(function _callee42$(_context42) {
              while (1) {
                switch (_context42.prev = _context42.next) {
                  case 0:
                    options = _args42.length > 1 && _args42[1] !== undefined ? _args42[1] : {};
                    _createSpan36 = (0, _tracing.createSpan)("BlockBlobClient-uploadFile", options), span = _createSpan36.span, updatedOptions = _createSpan36.updatedOptions;
                    _context42.prev = 2;
                    _context42.next = 5;
                    return (0, _utils2.fsStat)(filePath);

                  case 5:
                    size = _context42.sent.size;
                    _context42.next = 8;
                    return this.uploadSeekableInternal(function (offset, count) {
                      return function () {
                        return (0, _utils2.fsCreateReadStream)(filePath, {
                          autoClose: true,
                          end: count ? offset + count - 1 : Infinity,
                          start: offset
                        });
                      };
                    }, size, Object.assign(Object.assign({}, options), {
                      tracingOptions: Object.assign(Object.assign({}, options.tracingOptions), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))
                    }));

                  case 8:
                    return _context42.abrupt("return", _context42.sent);

                  case 11:
                    _context42.prev = 11;
                    _context42.t0 = _context42["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context42.t0.message
                    });
                    throw _context42.t0;

                  case 15:
                    _context42.prev = 15;
                    span.end();
                    return _context42.finish(15);

                  case 18:
                  case "end":
                    return _context42.stop();
                }
              }
            }, _callee42, this, [[2, 11, 15, 18]]);
          }));

          function uploadFile(_x39) {
            return _uploadFile.apply(this, arguments);
          }

          return uploadFile;
        }()
        /**
         * ONLY AVAILABLE IN NODE.JS RUNTIME.
         *
         * Uploads a Node.js Readable stream into block blob.
         *
         * PERFORMANCE IMPROVEMENT TIPS:
         * * Input stream highWaterMark is better to set a same value with bufferSize
         *    parameter, which will avoid Buffer.concat() operations.
         *
         * @param stream - Node.js Readable stream
         * @param bufferSize - Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB
         * @param maxConcurrency -  Max concurrency indicates the max number of buffers that can be allocated,
         *                                 positive correlation with max uploading concurrency. Default value is 5
         * @param options - Options to Upload Stream to Block Blob operation.
         * @returns Response data for the Blob Upload operation.
         */

      }, {
        key: "uploadStream",
        value: function () {
          var _uploadStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee44(stream) {
            var _this9 = this;

            var bufferSize,
                maxConcurrency,
                options,
                _createSpan37,
                span,
                updatedOptions,
                blockNum,
                _blockIDPrefix,
                _transferProgress,
                _blockList,
                scheduler,
                _args44 = arguments;

            return _regeneratorRuntime().wrap(function _callee44$(_context44) {
              while (1) {
                switch (_context44.prev = _context44.next) {
                  case 0:
                    bufferSize = _args44.length > 1 && _args44[1] !== undefined ? _args44[1] : _constants.DEFAULT_BLOCK_BUFFER_SIZE_BYTES;
                    maxConcurrency = _args44.length > 2 && _args44[2] !== undefined ? _args44[2] : 5;
                    options = _args44.length > 3 && _args44[3] !== undefined ? _args44[3] : {};

                    if (!options.blobHTTPHeaders) {
                      options.blobHTTPHeaders = {};
                    }

                    if (!options.conditions) {
                      options.conditions = {};
                    }

                    _createSpan37 = (0, _tracing.createSpan)("BlockBlobClient-uploadStream", options), span = _createSpan37.span, updatedOptions = _createSpan37.updatedOptions;
                    _context44.prev = 6;
                    blockNum = 0;
                    _blockIDPrefix = (0, _coreHttp.generateUuid)();
                    _transferProgress = 0;
                    _blockList = [];
                    scheduler = new _src.BufferScheduler(stream, bufferSize, maxConcurrency, /*#__PURE__*/function () {
                      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee43(body, length) {
                        var blockID;
                        return _regeneratorRuntime().wrap(function _callee43$(_context43) {
                          while (1) {
                            switch (_context43.prev = _context43.next) {
                              case 0:
                                blockID = (0, _utils.generateBlockID)(_blockIDPrefix, blockNum);

                                _blockList.push(blockID);

                                blockNum++;
                                _context43.next = 5;
                                return _this9.stageBlock(blockID, body, length, {
                                  conditions: options.conditions,
                                  encryptionScope: options.encryptionScope,
                                  tracingOptions: updatedOptions.tracingOptions
                                });

                              case 5:
                                // Update progress after block is successfully uploaded to server, in case of block trying
                                _transferProgress += length;

                                if (options.onProgress) {
                                  options.onProgress({
                                    loadedBytes: _transferProgress
                                  });
                                }

                              case 7:
                              case "end":
                                return _context43.stop();
                            }
                          }
                        }, _callee43);
                      }));

                      return function (_x41, _x42) {
                        return _ref4.apply(this, arguments);
                      };
                    }(), // concurrency should set a smaller value than maxConcurrency, which is helpful to
                    // reduce the possibility when a outgoing handler waits for stream data, in
                    // this situation, outgoing handlers are blocked.
                    // Outgoing queue shouldn't be empty.
                    Math.ceil(maxConcurrency / 4 * 3));
                    _context44.next = 14;
                    return scheduler.do();

                  case 14:
                    _context44.next = 16;
                    return this.commitBlockList(_blockList, Object.assign(Object.assign({}, options), {
                      tracingOptions: Object.assign(Object.assign({}, options.tracingOptions), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))
                    }));

                  case 16:
                    return _context44.abrupt("return", _context44.sent);

                  case 19:
                    _context44.prev = 19;
                    _context44.t0 = _context44["catch"](6);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context44.t0.message
                    });
                    throw _context44.t0;

                  case 23:
                    _context44.prev = 23;
                    span.end();
                    return _context44.finish(23);

                  case 26:
                  case "end":
                    return _context44.stop();
                }
              }
            }, _callee44, this, [[6, 19, 23, 26]]);
          }));

          function uploadStream(_x40) {
            return _uploadStream.apply(this, arguments);
          }

          return uploadStream;
        }()
      }]);

      return BlockBlobClient;
    }(BlobClient);
    /**
     * PageBlobClient defines a set of operations applicable to page blobs.
     */


    exports.BlockBlobClient = BlockBlobClient;

    var PageBlobClient = /*#__PURE__*/function (_BlobClient3) {
      _inherits(PageBlobClient, _BlobClient3);

      var _super4 = _createSuper(PageBlobClient);

      function PageBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.

      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
      options) {
        var _this10;

        _classCallCheck(this, PageBlobClient); // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.
        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);


        var pipeline;
        var url;
        options = options || {};

        if ((0, _Pipeline.isPipelineLike)(credentialOrPipelineOrContainerName)) {
          // (url: string, pipeline: Pipeline)
          url = urlOrConnectionString;
          pipeline = credentialOrPipelineOrContainerName;
        } else if (_coreHttp.isNode && credentialOrPipelineOrContainerName instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrPipelineOrContainerName)) {
          // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
          url = urlOrConnectionString;
          options = blobNameOrOptions;
          pipeline = (0, _Pipeline.newPipeline)(credentialOrPipelineOrContainerName, options);
        } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
          // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
          // The second parameter is undefined. Use anonymous credential.
          url = urlOrConnectionString;
          pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
        } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
          // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
          var containerName = credentialOrPipelineOrContainerName;
          var blobName = blobNameOrOptions;
          var extractedCreds = (0, _utils.extractConnectionStringParts)(urlOrConnectionString);

          if (extractedCreds.kind === "AccountConnString") {
            if (_coreHttp.isNode) {
              var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
              url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));

              if (!options.proxyOptions) {
                options.proxyOptions = (0, _coreHttp.getDefaultProxySettings)(extractedCreds.proxyUri);
              }

              pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
            } else {
              throw new Error("Account connection string is only supported in Node.js environment");
            }
          } else if (extractedCreds.kind === "SASConnString") {
            url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
            pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
          } else {
            throw new Error("Connection string must be either an Account connection string or a SAS connection string");
          }
        } else {
          throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        }

        _this10 = _super4.call(this, url, pipeline);
        _this10.pageBlobContext = new _operations.PageBlob(_this10.storageClientContext);
        return _this10;
      }
      /**
       * Creates a new PageBlobClient object identical to the source but with the
       * specified snapshot timestamp.
       * Provide "" will remove the snapshot and return a Client to the base blob.
       *
       * @param snapshot - The snapshot timestamp.
       * @returns A new PageBlobClient object identical to the source but with the specified snapshot timestamp.
       */


      _createClass(PageBlobClient, [{
        key: "withSnapshot",
        value: function withSnapshot(snapshot) {
          return new PageBlobClient((0, _utils.setURLParameter)(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
        }
        /**
         * Creates a page blob of the specified length. Call uploadPages to upload data
         * data to a page blob.
         * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
         *
         * @param size - size of the page blob.
         * @param options - Options to the Page Blob Create operation.
         * @returns Response data for the Page Blob Create operation.
         */

      }, {
        key: "create",
        value: function () {
          var _create2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee45(size) {
            var options,
                _a,
                _b,
                _c,
                _createSpan38,
                span,
                updatedOptions,
                _args45 = arguments;

            return _regeneratorRuntime().wrap(function _callee45$(_context45) {
              while (1) {
                switch (_context45.prev = _context45.next) {
                  case 0:
                    options = _args45.length > 1 && _args45[1] !== undefined ? _args45[1] : {};
                    options.conditions = options.conditions || {};
                    _createSpan38 = (0, _tracing.createSpan)("PageBlobClient-create", options), span = _createSpan38.span, updatedOptions = _createSpan38.updatedOptions;
                    _context45.prev = 3;
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context45.next = 7;
                    return this.pageBlobContext.create(0, size, Object.assign({
                      abortSignal: options.abortSignal,
                      blobHttpHeaders: options.blobHTTPHeaders,
                      blobSequenceNumber: options.blobSequenceNumber,
                      leaseAccessConditions: options.conditions,
                      metadata: options.metadata,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      cpkInfo: options.customerProvidedKey,
                      encryptionScope: options.encryptionScope,
                      immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                      immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                      legalHold: options.legalHold,
                      tier: (0, _models.toAccessTier)(options.tier),
                      blobTagsString: (0, _utils.toBlobTagsString)(options.tags)
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    return _context45.abrupt("return", _context45.sent);

                  case 10:
                    _context45.prev = 10;
                    _context45.t0 = _context45["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context45.t0.message
                    });
                    throw _context45.t0;

                  case 14:
                    _context45.prev = 14;
                    span.end();
                    return _context45.finish(14);

                  case 17:
                  case "end":
                    return _context45.stop();
                }
              }
            }, _callee45, this, [[3, 10, 14, 17]]);
          }));

          function create(_x43) {
            return _create2.apply(this, arguments);
          }

          return create;
        }()
        /**
         * Creates a page blob of the specified length. Call uploadPages to upload data
         * data to a page blob. If the blob with the same name already exists, the content
         * of the existing blob will remain unchanged.
         * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
         *
         * @param size - size of the page blob.
         * @param options -
         */

      }, {
        key: "createIfNotExists",
        value: function () {
          var _createIfNotExists2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee46(size) {
            var options,
                _a,
                _b,
                _createSpan39,
                span,
                updatedOptions,
                conditions,
                res,
                _args46 = arguments;

            return _regeneratorRuntime().wrap(function _callee46$(_context46) {
              while (1) {
                switch (_context46.prev = _context46.next) {
                  case 0:
                    options = _args46.length > 1 && _args46[1] !== undefined ? _args46[1] : {};
                    _createSpan39 = (0, _tracing.createSpan)("PageBlobClient-createIfNotExists", options), span = _createSpan39.span, updatedOptions = _createSpan39.updatedOptions;
                    _context46.prev = 2;
                    conditions = {
                      ifNoneMatch: _constants.ETagAny
                    };
                    _context46.next = 6;
                    return this.create(size, Object.assign(Object.assign({}, options), {
                      conditions: conditions,
                      tracingOptions: updatedOptions.tracingOptions
                    }));

                  case 6:
                    res = _context46.sent;
                    return _context46.abrupt("return", Object.assign(Object.assign({
                      succeeded: true
                    }, res), {
                      _response: res._response
                    }));

                  case 10:
                    _context46.prev = 10;
                    _context46.t0 = _context46["catch"](2);

                    if (!(((_a = _context46.t0.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "BlobAlreadyExists")) {
                      _context46.next = 15;
                      break;
                    }

                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: "Expected exception when creating a blob only if it does not already exist."
                    });
                    return _context46.abrupt("return", Object.assign(Object.assign({
                      succeeded: false
                    }, (_b = _context46.t0.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                      _response: _context46.t0.response
                    }));

                  case 15:
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context46.t0.message
                    });
                    throw _context46.t0;

                  case 17:
                    _context46.prev = 17;
                    span.end();
                    return _context46.finish(17);

                  case 20:
                  case "end":
                    return _context46.stop();
                }
              }
            }, _callee46, this, [[2, 10, 17, 20]]);
          }));

          function createIfNotExists(_x44) {
            return _createIfNotExists2.apply(this, arguments);
          }

          return createIfNotExists;
        }()
        /**
         * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.
         * @see https://docs.microsoft.com/rest/api/storageservices/put-page
         *
         * @param body - Data to upload
         * @param offset - Offset of destination page blob
         * @param count - Content length of the body, also number of bytes to be uploaded
         * @param options - Options to the Page Blob Upload Pages operation.
         * @returns Response data for the Page Blob Upload Pages operation.
         */

      }, {
        key: "uploadPages",
        value: function () {
          var _uploadPages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee47(body, offset, count) {
            var options,
                _a,
                _createSpan40,
                span,
                updatedOptions,
                _args47 = arguments;

            return _regeneratorRuntime().wrap(function _callee47$(_context47) {
              while (1) {
                switch (_context47.prev = _context47.next) {
                  case 0:
                    options = _args47.length > 3 && _args47[3] !== undefined ? _args47[3] : {};
                    options.conditions = options.conditions || {};
                    _createSpan40 = (0, _tracing.createSpan)("PageBlobClient-uploadPages", options), span = _createSpan40.span, updatedOptions = _createSpan40.updatedOptions;
                    _context47.prev = 3;
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context47.next = 7;
                    return this.pageBlobContext.uploadPages(count, body, Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      requestOptions: {
                        onUploadProgress: options.onProgress
                      },
                      range: (0, _Range.rangeToString)({
                        offset: offset,
                        count: count
                      }),
                      sequenceNumberAccessConditions: options.conditions,
                      transactionalContentMD5: options.transactionalContentMD5,
                      transactionalContentCrc64: options.transactionalContentCrc64,
                      cpkInfo: options.customerProvidedKey,
                      encryptionScope: options.encryptionScope
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 7:
                    return _context47.abrupt("return", _context47.sent);

                  case 10:
                    _context47.prev = 10;
                    _context47.t0 = _context47["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context47.t0.message
                    });
                    throw _context47.t0;

                  case 14:
                    _context47.prev = 14;
                    span.end();
                    return _context47.finish(14);

                  case 17:
                  case "end":
                    return _context47.stop();
                }
              }
            }, _callee47, this, [[3, 10, 14, 17]]);
          }));

          function uploadPages(_x45, _x46, _x47) {
            return _uploadPages.apply(this, arguments);
          }

          return uploadPages;
        }()
        /**
         * The Upload Pages operation writes a range of pages to a page blob where the
         * contents are read from a URL.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url
         *
         * @param sourceURL - Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication
         * @param sourceOffset - The source offset to copy from. Pass 0 to copy from the beginning of source page blob
         * @param destOffset - Offset of destination page blob
         * @param count - Number of bytes to be uploaded from source page blob
         * @param options -
         */

      }, {
        key: "uploadPagesFromURL",
        value: function () {
          var _uploadPagesFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee48(sourceURL, sourceOffset, destOffset, count) {
            var options,
                _a,
                _createSpan41,
                span,
                updatedOptions,
                _args48 = arguments;

            return _regeneratorRuntime().wrap(function _callee48$(_context48) {
              while (1) {
                switch (_context48.prev = _context48.next) {
                  case 0:
                    options = _args48.length > 4 && _args48[4] !== undefined ? _args48[4] : {};
                    options.conditions = options.conditions || {};
                    options.sourceConditions = options.sourceConditions || {};
                    _createSpan41 = (0, _tracing.createSpan)("PageBlobClient-uploadPagesFromURL", options), span = _createSpan41.span, updatedOptions = _createSpan41.updatedOptions;
                    _context48.prev = 4;
                    (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
                    _context48.next = 8;
                    return this.pageBlobContext.uploadPagesFromURL(sourceURL, (0, _Range.rangeToString)({
                      offset: sourceOffset,
                      count: count
                    }), 0, (0, _Range.rangeToString)({
                      offset: destOffset,
                      count: count
                    }), Object.assign({
                      abortSignal: options.abortSignal,
                      sourceContentMD5: options.sourceContentMD5,
                      sourceContentCrc64: options.sourceContentCrc64,
                      leaseAccessConditions: options.conditions,
                      sequenceNumberAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      sourceModifiedAccessConditions: {
                        sourceIfMatch: options.sourceConditions.ifMatch,
                        sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                        sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                        sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
                      },
                      cpkInfo: options.customerProvidedKey,
                      encryptionScope: options.encryptionScope,
                      copySourceAuthorization: (0, _utils.httpAuthorizationToString)(options.sourceAuthorization)
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 8:
                    return _context48.abrupt("return", _context48.sent);

                  case 11:
                    _context48.prev = 11;
                    _context48.t0 = _context48["catch"](4);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context48.t0.message
                    });
                    throw _context48.t0;

                  case 15:
                    _context48.prev = 15;
                    span.end();
                    return _context48.finish(15);

                  case 18:
                  case "end":
                    return _context48.stop();
                }
              }
            }, _callee48, this, [[4, 11, 15, 18]]);
          }));

          function uploadPagesFromURL(_x48, _x49, _x50, _x51) {
            return _uploadPagesFromURL.apply(this, arguments);
          }

          return uploadPagesFromURL;
        }()
        /**
         * Frees the specified pages from the page blob.
         * @see https://docs.microsoft.com/rest/api/storageservices/put-page
         *
         * @param offset - Starting byte position of the pages to clear.
         * @param count - Number of bytes to clear.
         * @param options - Options to the Page Blob Clear Pages operation.
         * @returns Response data for the Page Blob Clear Pages operation.
         */

      }, {
        key: "clearPages",
        value: function () {
          var _clearPages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee49() {
            var offset,
                count,
                options,
                _a,
                _createSpan42,
                span,
                updatedOptions,
                _args49 = arguments;

            return _regeneratorRuntime().wrap(function _callee49$(_context49) {
              while (1) {
                switch (_context49.prev = _context49.next) {
                  case 0:
                    offset = _args49.length > 0 && _args49[0] !== undefined ? _args49[0] : 0;
                    count = _args49.length > 1 ? _args49[1] : undefined;
                    options = _args49.length > 2 && _args49[2] !== undefined ? _args49[2] : {};
                    options.conditions = options.conditions || {};
                    _createSpan42 = (0, _tracing.createSpan)("PageBlobClient-clearPages", options), span = _createSpan42.span, updatedOptions = _createSpan42.updatedOptions;
                    _context49.prev = 5;
                    _context49.next = 8;
                    return this.pageBlobContext.clearPages(0, Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      range: (0, _Range.rangeToString)({
                        offset: offset,
                        count: count
                      }),
                      sequenceNumberAccessConditions: options.conditions,
                      cpkInfo: options.customerProvidedKey,
                      encryptionScope: options.encryptionScope
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 8:
                    return _context49.abrupt("return", _context49.sent);

                  case 11:
                    _context49.prev = 11;
                    _context49.t0 = _context49["catch"](5);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context49.t0.message
                    });
                    throw _context49.t0;

                  case 15:
                    _context49.prev = 15;
                    span.end();
                    return _context49.finish(15);

                  case 18:
                  case "end":
                    return _context49.stop();
                }
              }
            }, _callee49, this, [[5, 11, 15, 18]]);
          }));

          function clearPages() {
            return _clearPages.apply(this, arguments);
          }

          return clearPages;
        }()
        /**
         * Returns the list of valid page ranges for a page blob or snapshot of a page blob.
         * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
         *
         * @param offset - Starting byte position of the page ranges.
         * @param count - Number of bytes to get.
         * @param options - Options to the Page Blob Get Ranges operation.
         * @returns Response data for the Page Blob Get Ranges operation.
         */

      }, {
        key: "getPageRanges",
        value: function () {
          var _getPageRanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee50() {
            var offset,
                count,
                options,
                _a,
                _createSpan43,
                span,
                updatedOptions,
                _args50 = arguments;

            return _regeneratorRuntime().wrap(function _callee50$(_context50) {
              while (1) {
                switch (_context50.prev = _context50.next) {
                  case 0:
                    offset = _args50.length > 0 && _args50[0] !== undefined ? _args50[0] : 0;
                    count = _args50.length > 1 ? _args50[1] : undefined;
                    options = _args50.length > 2 && _args50[2] !== undefined ? _args50[2] : {};
                    options.conditions = options.conditions || {};
                    _createSpan43 = (0, _tracing.createSpan)("PageBlobClient-getPageRanges", options), span = _createSpan43.span, updatedOptions = _createSpan43.updatedOptions;
                    _context50.prev = 5;
                    _context50.next = 8;
                    return this.pageBlobContext.getPageRanges(Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      range: (0, _Range.rangeToString)({
                        offset: offset,
                        count: count
                      })
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))).then(_PageBlobRangeResponse.rangeResponseFromModel);

                  case 8:
                    return _context50.abrupt("return", _context50.sent);

                  case 11:
                    _context50.prev = 11;
                    _context50.t0 = _context50["catch"](5);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context50.t0.message
                    });
                    throw _context50.t0;

                  case 15:
                    _context50.prev = 15;
                    span.end();
                    return _context50.finish(15);

                  case 18:
                  case "end":
                    return _context50.stop();
                }
              }
            }, _callee50, this, [[5, 11, 15, 18]]);
          }));

          function getPageRanges() {
            return _getPageRanges.apply(this, arguments);
          }

          return getPageRanges;
        }()
        /**
         * getPageRangesSegment returns a single segment of page ranges starting from the
         * specified Marker. Use an empty Marker to start enumeration from the beginning.
         * After getting a segment, process it, and then call getPageRangesSegment again
         * (passing the the previously-returned Marker) to get the next segment.
         * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
         *
         * @param offset - Starting byte position of the page ranges.
         * @param count - Number of bytes to get.
         * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
         * @param options - Options to PageBlob Get Page Ranges Segment operation.
         */

      }, {
        key: "listPageRangesSegment",
        value: function () {
          var _listPageRangesSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee51() {
            var offset,
                count,
                marker,
                options,
                _a,
                _createSpan44,
                span,
                updatedOptions,
                _args51 = arguments;

            return _regeneratorRuntime().wrap(function _callee51$(_context51) {
              while (1) {
                switch (_context51.prev = _context51.next) {
                  case 0:
                    offset = _args51.length > 0 && _args51[0] !== undefined ? _args51[0] : 0;
                    count = _args51.length > 1 ? _args51[1] : undefined;
                    marker = _args51.length > 2 ? _args51[2] : undefined;
                    options = _args51.length > 3 && _args51[3] !== undefined ? _args51[3] : {};
                    _createSpan44 = (0, _tracing.createSpan)("PageBlobClient-getPageRangesSegment", options), span = _createSpan44.span, updatedOptions = _createSpan44.updatedOptions;
                    _context51.prev = 5;
                    _context51.next = 8;
                    return this.pageBlobContext.getPageRanges(Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      range: (0, _Range.rangeToString)({
                        offset: offset,
                        count: count
                      }),
                      marker: marker,
                      maxPageSize: options.maxPageSize
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 8:
                    return _context51.abrupt("return", _context51.sent);

                  case 11:
                    _context51.prev = 11;
                    _context51.t0 = _context51["catch"](5);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context51.t0.message
                    });
                    throw _context51.t0;

                  case 15:
                    _context51.prev = 15;
                    span.end();
                    return _context51.finish(15);

                  case 18:
                  case "end":
                    return _context51.stop();
                }
              }
            }, _callee51, this, [[5, 11, 15, 18]]);
          }));

          function listPageRangesSegment() {
            return _listPageRangesSegment.apply(this, arguments);
          }

          return listPageRangesSegment;
        }()
        /**
         * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesResponseModel}
         *
         * @param offset - Starting byte position of the page ranges.
         * @param count - Number of bytes to get.
         * @param marker - A string value that identifies the portion of
         *                          the get of page ranges to be returned with the next getting operation. The
         *                          operation returns the ContinuationToken value within the response body if the
         *                          getting operation did not return all page ranges remaining within the current page.
         *                          The ContinuationToken value can be used as the value for
         *                          the marker parameter in a subsequent call to request the next page of get
         *                          items. The marker value is opaque to the client.
         * @param options - Options to List Page Ranges operation.
         */

      }, {
        key: "listPageRangeItemSegments",
        value: function listPageRangeItemSegments() {
          var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var count = arguments.length > 1 ? arguments[1] : undefined;
          var marker = arguments.length > 2 ? arguments[2] : undefined;
          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
          return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function listPageRangeItemSegments_1() {
            var getPageRangeItemSegmentsResponse;
            return _regeneratorRuntime().wrap(function listPageRangeItemSegments_1$(_context52) {
              while (1) {
                switch (_context52.prev = _context52.next) {
                  case 0:
                    if (!(!!marker || marker === undefined)) {
                      _context52.next = 14;
                      break;
                    }

                  case 1:
                    _context52.next = 3;
                    return (0, _tslib.__await)(this.listPageRangesSegment(offset, count, marker, options));

                  case 3:
                    getPageRangeItemSegmentsResponse = _context52.sent;
                    marker = getPageRangeItemSegmentsResponse.continuationToken;
                    _context52.t0 = _tslib.__await;
                    _context52.next = 8;
                    return (0, _tslib.__await)(getPageRangeItemSegmentsResponse);

                  case 8:
                    _context52.t1 = _context52.sent;
                    _context52.next = 11;
                    return (0, _context52.t0)(_context52.t1);

                  case 11:
                    _context52.next = 13;
                    return _context52.sent;

                  case 13:
                    if (marker) {
                      _context52.next = 1;
                      break;
                    }

                  case 14:
                  case "end":
                    return _context52.stop();
                }
              }
            }, listPageRangeItemSegments_1, this);
          }));
        }
        /**
         * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects
         *
         * @param offset - Starting byte position of the page ranges.
         * @param count - Number of bytes to get.
         * @param options - Options to List Page Ranges operation.
         */

      }, {
        key: "listPageRangeItems",
        value: function listPageRangeItems() {
          var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var count = arguments.length > 1 ? arguments[1] : undefined;
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function listPageRangeItems_1() {
            var e_1, _a, marker, _b, _c, getPageRangesSegment;

            return _regeneratorRuntime().wrap(function listPageRangeItems_1$(_context53) {
              while (1) {
                switch (_context53.prev = _context53.next) {
                  case 0:
                    _context53.prev = 0;
                    _b = (0, _tslib.__asyncValues)(this.listPageRangeItemSegments(offset, count, marker, options));

                  case 2:
                    _context53.next = 4;
                    return (0, _tslib.__await)(_b.next());

                  case 4:
                    _c = _context53.sent;

                    if (_c.done) {
                      _context53.next = 14;
                      break;
                    }

                    getPageRangesSegment = _c.value;
                    _context53.t0 = _tslib.__await;
                    return _context53.delegateYield((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)((0, _utils.ExtractPageRangeInfoItems)(getPageRangesSegment))), "t1", 9);

                  case 9:
                    _context53.t2 = _context53.t1;
                    _context53.next = 12;
                    return (0, _context53.t0)(_context53.t2);

                  case 12:
                    _context53.next = 2;
                    break;

                  case 14:
                    _context53.next = 19;
                    break;

                  case 16:
                    _context53.prev = 16;
                    _context53.t3 = _context53["catch"](0);
                    e_1 = {
                      error: _context53.t3
                    };

                  case 19:
                    _context53.prev = 19;
                    _context53.prev = 20;

                    if (!(_c && !_c.done && (_a = _b.return))) {
                      _context53.next = 24;
                      break;
                    }

                    _context53.next = 24;
                    return (0, _tslib.__await)(_a.call(_b));

                  case 24:
                    _context53.prev = 24;

                    if (!e_1) {
                      _context53.next = 27;
                      break;
                    }

                    throw e_1.error;

                  case 27:
                    return _context53.finish(24);

                  case 28:
                    return _context53.finish(19);

                  case 29:
                  case "end":
                    return _context53.stop();
                }
              }
            }, listPageRangeItems_1, this, [[0, 16, 19, 29], [20,, 24, 28]]);
          }));
        }
        /**
         * Returns an async iterable iterator to list of page ranges for a page blob.
         * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
         *
         *  .byPage() returns an async iterable iterator to list of page ranges for a page blob.
         *
         * Example using `for await` syntax:
         *
         * ```js
         * // Get the pageBlobClient before you run these snippets,
         * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>").getPageBlobClient("<your-blob-name>");`
         * let i = 1;
         * for await (const pageRange of pageBlobClient.listPageRanges()) {
         *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
         * }
         * ```
         *
         * Example using `iter.next()`:
         *
         * ```js
         * let i = 1;
         * let iter = pageBlobClient.listPageRanges();
         * let pageRangeItem = await iter.next();
         * while (!pageRangeItem.done) {
         *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);
         *   pageRangeItem = await iter.next();
         * }
         * ```
         *
         * Example using `byPage()`:
         *
         * ```js
         * // passing optional maxPageSize in the page settings
         * let i = 1;
         * for await (const response of pageBlobClient.listPageRanges().byPage({ maxPageSize: 20 })) {
         *   for (const pageRange of response) {
         *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
         *   }
         * }
         * ```
         *
         * Example using paging with a marker:
         *
         * ```js
         * let i = 1;
         * let iterator = pageBlobClient.listPageRanges().byPage({ maxPageSize: 2 });
         * let response = (await iterator.next()).value;
         *
         * // Prints 2 page ranges
         * for (const pageRange of response) {
         *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
         * }
         *
         * // Gets next marker
         * let marker = response.continuationToken;
         *
         * // Passing next marker as continuationToken
         *
         * iterator = pageBlobClient.listPageRanges().byPage({ continuationToken: marker, maxPageSize: 10 });
         * response = (await iterator.next()).value;
         *
         * // Prints 10 page ranges
         * for (const blob of response) {
         *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
         * }
         * ```
         * @param offset - Starting byte position of the page ranges.
         * @param count - Number of bytes to get.
         * @param options - Options to the Page Blob Get Ranges operation.
         * @returns An asyncIterableIterator that supports paging.
         */

      }, {
        key: "listPageRanges",
        value: function listPageRanges() {
          var _this11 = this,
              _ref5;

          var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var count = arguments.length > 1 ? arguments[1] : undefined;
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          options.conditions = options.conditions || {}; // AsyncIterableIterator to iterate over blobs

          var iter = this.listPageRangeItems(offset, count, options);
          return _ref5 = {
            /**
             * The next method, part of the iteration protocol
             */
            next: function next() {
              return iter.next();
            }
          }, _defineProperty(_ref5, Symbol.asyncIterator, function () {
            return this;
          }), _defineProperty(_ref5, "byPage", function byPage() {
            var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return _this11.listPageRangeItemSegments(offset, count, settings.continuationToken, Object.assign({
              maxPageSize: settings.maxPageSize
            }, options));
          }), _ref5;
        }
        /**
         * Gets the collection of page ranges that differ between a specified snapshot and this page blob.
         * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
         *
         * @param offset - Starting byte position of the page blob
         * @param count - Number of bytes to get ranges diff.
         * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.
         * @param options - Options to the Page Blob Get Page Ranges Diff operation.
         * @returns Response data for the Page Blob Get Page Range Diff operation.
         */

      }, {
        key: "getPageRangesDiff",
        value: function () {
          var _getPageRangesDiff = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee52(offset, count, prevSnapshot) {
            var options,
                _a,
                _createSpan45,
                span,
                updatedOptions,
                _args54 = arguments;

            return _regeneratorRuntime().wrap(function _callee52$(_context54) {
              while (1) {
                switch (_context54.prev = _context54.next) {
                  case 0:
                    options = _args54.length > 3 && _args54[3] !== undefined ? _args54[3] : {};
                    options.conditions = options.conditions || {};
                    _createSpan45 = (0, _tracing.createSpan)("PageBlobClient-getPageRangesDiff", options), span = _createSpan45.span, updatedOptions = _createSpan45.updatedOptions;
                    _context54.prev = 3;
                    _context54.next = 6;
                    return this.pageBlobContext.getPageRangesDiff(Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      prevsnapshot: prevSnapshot,
                      range: (0, _Range.rangeToString)({
                        offset: offset,
                        count: count
                      })
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))).then(_PageBlobRangeResponse.rangeResponseFromModel);

                  case 6:
                    return _context54.abrupt("return", _context54.sent);

                  case 9:
                    _context54.prev = 9;
                    _context54.t0 = _context54["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context54.t0.message
                    });
                    throw _context54.t0;

                  case 13:
                    _context54.prev = 13;
                    span.end();
                    return _context54.finish(13);

                  case 16:
                  case "end":
                    return _context54.stop();
                }
              }
            }, _callee52, this, [[3, 9, 13, 16]]);
          }));

          function getPageRangesDiff(_x52, _x53, _x54) {
            return _getPageRangesDiff.apply(this, arguments);
          }

          return getPageRangesDiff;
        }()
        /**
         * getPageRangesDiffSegment returns a single segment of page ranges starting from the
         * specified Marker for difference between previous snapshot and the target page blob.
         * Use an empty Marker to start enumeration from the beginning.
         * After getting a segment, process it, and then call getPageRangesDiffSegment again
         * (passing the the previously-returned Marker) to get the next segment.
         * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
         *
         * @param offset - Starting byte position of the page ranges.
         * @param count - Number of bytes to get.
         * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.
         * @param marker - A string value that identifies the portion of the get to be returned with the next get operation.
         * @param options - Options to the Page Blob Get Page Ranges Diff operation.
         */

      }, {
        key: "listPageRangesDiffSegment",
        value: function () {
          var _listPageRangesDiffSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee53(offset, count, prevSnapshotOrUrl, marker, options) {
            var _a, _createSpan46, span, updatedOptions;

            return _regeneratorRuntime().wrap(function _callee53$(_context55) {
              while (1) {
                switch (_context55.prev = _context55.next) {
                  case 0:
                    _createSpan46 = (0, _tracing.createSpan)("PageBlobClient-getPageRangesDiffSegment", options), span = _createSpan46.span, updatedOptions = _createSpan46.updatedOptions;
                    _context55.prev = 1;
                    _context55.next = 4;
                    return this.pageBlobContext.getPageRangesDiff(Object.assign({
                      abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,
                      leaseAccessConditions: options === null || options === void 0 ? void 0 : options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.conditions), {
                        ifTags: (_a = options === null || options === void 0 ? void 0 : options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      prevsnapshot: prevSnapshotOrUrl,
                      range: (0, _Range.rangeToString)({
                        offset: offset,
                        count: count
                      }),
                      marker: marker,
                      maxPageSize: options === null || options === void 0 ? void 0 : options.maxPageSize
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 4:
                    return _context55.abrupt("return", _context55.sent);

                  case 7:
                    _context55.prev = 7;
                    _context55.t0 = _context55["catch"](1);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context55.t0.message
                    });
                    throw _context55.t0;

                  case 11:
                    _context55.prev = 11;
                    span.end();
                    return _context55.finish(11);

                  case 14:
                  case "end":
                    return _context55.stop();
                }
              }
            }, _callee53, this, [[1, 7, 11, 14]]);
          }));

          function listPageRangesDiffSegment(_x55, _x56, _x57, _x58, _x59) {
            return _listPageRangesDiffSegment.apply(this, arguments);
          }

          return listPageRangesDiffSegment;
        }()
        /**
         * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesDiffResponseModel}
         *
         *
         * @param offset - Starting byte position of the page ranges.
         * @param count - Number of bytes to get.
         * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.
         * @param marker - A string value that identifies the portion of
         *                          the get of page ranges to be returned with the next getting operation. The
         *                          operation returns the ContinuationToken value within the response body if the
         *                          getting operation did not return all page ranges remaining within the current page.
         *                          The ContinuationToken value can be used as the value for
         *                          the marker parameter in a subsequent call to request the next page of get
         *                          items. The marker value is opaque to the client.
         * @param options - Options to the Page Blob Get Page Ranges Diff operation.
         */

      }, {
        key: "listPageRangeDiffItemSegments",
        value: function listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker, options) {
          return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function listPageRangeDiffItemSegments_1() {
            var getPageRangeItemSegmentsResponse;
            return _regeneratorRuntime().wrap(function listPageRangeDiffItemSegments_1$(_context56) {
              while (1) {
                switch (_context56.prev = _context56.next) {
                  case 0:
                    if (!(!!marker || marker === undefined)) {
                      _context56.next = 14;
                      break;
                    }

                  case 1:
                    _context56.next = 3;
                    return (0, _tslib.__await)(this.listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker, options));

                  case 3:
                    getPageRangeItemSegmentsResponse = _context56.sent;
                    marker = getPageRangeItemSegmentsResponse.continuationToken;
                    _context56.t0 = _tslib.__await;
                    _context56.next = 8;
                    return (0, _tslib.__await)(getPageRangeItemSegmentsResponse);

                  case 8:
                    _context56.t1 = _context56.sent;
                    _context56.next = 11;
                    return (0, _context56.t0)(_context56.t1);

                  case 11:
                    _context56.next = 13;
                    return _context56.sent;

                  case 13:
                    if (marker) {
                      _context56.next = 1;
                      break;
                    }

                  case 14:
                  case "end":
                    return _context56.stop();
                }
              }
            }, listPageRangeDiffItemSegments_1, this);
          }));
        }
        /**
         * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects
         *
         * @param offset - Starting byte position of the page ranges.
         * @param count - Number of bytes to get.
         * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.
         * @param options - Options to the Page Blob Get Page Ranges Diff operation.
         */

      }, {
        key: "listPageRangeDiffItems",
        value: function listPageRangeDiffItems(offset, count, prevSnapshotOrUrl, options) {
          return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function listPageRangeDiffItems_1() {
            var e_2, _a, marker, _b, _c, getPageRangesSegment;

            return _regeneratorRuntime().wrap(function listPageRangeDiffItems_1$(_context57) {
              while (1) {
                switch (_context57.prev = _context57.next) {
                  case 0:
                    _context57.prev = 0;
                    _b = (0, _tslib.__asyncValues)(this.listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker, options));

                  case 2:
                    _context57.next = 4;
                    return (0, _tslib.__await)(_b.next());

                  case 4:
                    _c = _context57.sent;

                    if (_c.done) {
                      _context57.next = 14;
                      break;
                    }

                    getPageRangesSegment = _c.value;
                    _context57.t0 = _tslib.__await;
                    return _context57.delegateYield((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)((0, _utils.ExtractPageRangeInfoItems)(getPageRangesSegment))), "t1", 9);

                  case 9:
                    _context57.t2 = _context57.t1;
                    _context57.next = 12;
                    return (0, _context57.t0)(_context57.t2);

                  case 12:
                    _context57.next = 2;
                    break;

                  case 14:
                    _context57.next = 19;
                    break;

                  case 16:
                    _context57.prev = 16;
                    _context57.t3 = _context57["catch"](0);
                    e_2 = {
                      error: _context57.t3
                    };

                  case 19:
                    _context57.prev = 19;
                    _context57.prev = 20;

                    if (!(_c && !_c.done && (_a = _b.return))) {
                      _context57.next = 24;
                      break;
                    }

                    _context57.next = 24;
                    return (0, _tslib.__await)(_a.call(_b));

                  case 24:
                    _context57.prev = 24;

                    if (!e_2) {
                      _context57.next = 27;
                      break;
                    }

                    throw e_2.error;

                  case 27:
                    return _context57.finish(24);

                  case 28:
                    return _context57.finish(19);

                  case 29:
                  case "end":
                    return _context57.stop();
                }
              }
            }, listPageRangeDiffItems_1, this, [[0, 16, 19, 29], [20,, 24, 28]]);
          }));
        }
        /**
         * Returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.
         * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
         *
         *  .byPage() returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.
         *
         * Example using `for await` syntax:
         *
         * ```js
         * // Get the pageBlobClient before you run these snippets,
         * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>").getPageBlobClient("<your-blob-name>");`
         * let i = 1;
         * for await (const pageRange of pageBlobClient.listPageRangesDiff()) {
         *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
         * }
         * ```
         *
         * Example using `iter.next()`:
         *
         * ```js
         * let i = 1;
         * let iter = pageBlobClient.listPageRangesDiff();
         * let pageRangeItem = await iter.next();
         * while (!pageRangeItem.done) {
         *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);
         *   pageRangeItem = await iter.next();
         * }
         * ```
         *
         * Example using `byPage()`:
         *
         * ```js
         * // passing optional maxPageSize in the page settings
         * let i = 1;
         * for await (const response of pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 20 })) {
         *   for (const pageRange of response) {
         *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
         *   }
         * }
         * ```
         *
         * Example using paging with a marker:
         *
         * ```js
         * let i = 1;
         * let iterator = pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 2 });
         * let response = (await iterator.next()).value;
         *
         * // Prints 2 page ranges
         * for (const pageRange of response) {
         *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
         * }
         *
         * // Gets next marker
         * let marker = response.continuationToken;
         *
         * // Passing next marker as continuationToken
         *
         * iterator = pageBlobClient.listPageRangesDiff().byPage({ continuationToken: marker, maxPageSize: 10 });
         * response = (await iterator.next()).value;
         *
         * // Prints 10 page ranges
         * for (const blob of response) {
         *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
         * }
         * ```
         * @param offset - Starting byte position of the page ranges.
         * @param count - Number of bytes to get.
         * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.
         * @param options - Options to the Page Blob Get Ranges operation.
         * @returns An asyncIterableIterator that supports paging.
         */

      }, {
        key: "listPageRangesDiff",
        value: function listPageRangesDiff(offset, count, prevSnapshot) {
          var _this12 = this,
              _ref6;

          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
          options.conditions = options.conditions || {}; // AsyncIterableIterator to iterate over blobs

          var iter = this.listPageRangeDiffItems(offset, count, prevSnapshot, Object.assign({}, options));
          return _ref6 = {
            /**
             * The next method, part of the iteration protocol
             */
            next: function next() {
              return iter.next();
            }
          }, _defineProperty(_ref6, Symbol.asyncIterator, function () {
            return this;
          }), _defineProperty(_ref6, "byPage", function byPage() {
            var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return _this12.listPageRangeDiffItemSegments(offset, count, prevSnapshot, settings.continuationToken, Object.assign({
              maxPageSize: settings.maxPageSize
            }, options));
          }), _ref6;
        }
        /**
         * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.
         * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
         *
         * @param offset - Starting byte position of the page blob
         * @param count - Number of bytes to get ranges diff.
         * @param prevSnapshotUrl - URL of snapshot to retrieve the difference.
         * @param options - Options to the Page Blob Get Page Ranges Diff operation.
         * @returns Response data for the Page Blob Get Page Range Diff operation.
         */

      }, {
        key: "getPageRangesDiffForManagedDisks",
        value: function () {
          var _getPageRangesDiffForManagedDisks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee54(offset, count, prevSnapshotUrl) {
            var options,
                _a,
                _createSpan47,
                span,
                updatedOptions,
                _args58 = arguments;

            return _regeneratorRuntime().wrap(function _callee54$(_context58) {
              while (1) {
                switch (_context58.prev = _context58.next) {
                  case 0:
                    options = _args58.length > 3 && _args58[3] !== undefined ? _args58[3] : {};
                    options.conditions = options.conditions || {};
                    _createSpan47 = (0, _tracing.createSpan)("PageBlobClient-GetPageRangesDiffForManagedDisks", options), span = _createSpan47.span, updatedOptions = _createSpan47.updatedOptions;
                    _context58.prev = 3;
                    _context58.next = 6;
                    return this.pageBlobContext.getPageRangesDiff(Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      prevSnapshotUrl: prevSnapshotUrl,
                      range: (0, _Range.rangeToString)({
                        offset: offset,
                        count: count
                      })
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))).then(_PageBlobRangeResponse.rangeResponseFromModel);

                  case 6:
                    return _context58.abrupt("return", _context58.sent);

                  case 9:
                    _context58.prev = 9;
                    _context58.t0 = _context58["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context58.t0.message
                    });
                    throw _context58.t0;

                  case 13:
                    _context58.prev = 13;
                    span.end();
                    return _context58.finish(13);

                  case 16:
                  case "end":
                    return _context58.stop();
                }
              }
            }, _callee54, this, [[3, 9, 13, 16]]);
          }));

          function getPageRangesDiffForManagedDisks(_x60, _x61, _x62) {
            return _getPageRangesDiffForManagedDisks.apply(this, arguments);
          }

          return getPageRangesDiffForManagedDisks;
        }()
        /**
         * Resizes the page blob to the specified size (which must be a multiple of 512).
         * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties
         *
         * @param size - Target size
         * @param options - Options to the Page Blob Resize operation.
         * @returns Response data for the Page Blob Resize operation.
         */

      }, {
        key: "resize",
        value: function () {
          var _resize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee55(size) {
            var options,
                _a,
                _createSpan48,
                span,
                updatedOptions,
                _args59 = arguments;

            return _regeneratorRuntime().wrap(function _callee55$(_context59) {
              while (1) {
                switch (_context59.prev = _context59.next) {
                  case 0:
                    options = _args59.length > 1 && _args59[1] !== undefined ? _args59[1] : {};
                    options.conditions = options.conditions || {};
                    _createSpan48 = (0, _tracing.createSpan)("PageBlobClient-resize", options), span = _createSpan48.span, updatedOptions = _createSpan48.updatedOptions;
                    _context59.prev = 3;
                    _context59.next = 6;
                    return this.pageBlobContext.resize(size, Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      }),
                      encryptionScope: options.encryptionScope
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 6:
                    return _context59.abrupt("return", _context59.sent);

                  case 9:
                    _context59.prev = 9;
                    _context59.t0 = _context59["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context59.t0.message
                    });
                    throw _context59.t0;

                  case 13:
                    _context59.prev = 13;
                    span.end();
                    return _context59.finish(13);

                  case 16:
                  case "end":
                    return _context59.stop();
                }
              }
            }, _callee55, this, [[3, 9, 13, 16]]);
          }));

          function resize(_x63) {
            return _resize.apply(this, arguments);
          }

          return resize;
        }()
        /**
         * Sets a page blob's sequence number.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
         *
         * @param sequenceNumberAction - Indicates how the service should modify the blob's sequence number.
         * @param sequenceNumber - Required if sequenceNumberAction is max or update
         * @param options - Options to the Page Blob Update Sequence Number operation.
         * @returns Response data for the Page Blob Update Sequence Number operation.
         */

      }, {
        key: "updateSequenceNumber",
        value: function () {
          var _updateSequenceNumber = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee56(sequenceNumberAction, sequenceNumber) {
            var options,
                _a,
                _createSpan49,
                span,
                updatedOptions,
                _args60 = arguments;

            return _regeneratorRuntime().wrap(function _callee56$(_context60) {
              while (1) {
                switch (_context60.prev = _context60.next) {
                  case 0:
                    options = _args60.length > 2 && _args60[2] !== undefined ? _args60[2] : {};
                    options.conditions = options.conditions || {};
                    _createSpan49 = (0, _tracing.createSpan)("PageBlobClient-updateSequenceNumber", options), span = _createSpan49.span, updatedOptions = _createSpan49.updatedOptions;
                    _context60.prev = 3;
                    _context60.next = 6;
                    return this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, Object.assign({
                      abortSignal: options.abortSignal,
                      blobSequenceNumber: sequenceNumber,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      })
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 6:
                    return _context60.abrupt("return", _context60.sent);

                  case 9:
                    _context60.prev = 9;
                    _context60.t0 = _context60["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context60.t0.message
                    });
                    throw _context60.t0;

                  case 13:
                    _context60.prev = 13;
                    span.end();
                    return _context60.finish(13);

                  case 16:
                  case "end":
                    return _context60.stop();
                }
              }
            }, _callee56, this, [[3, 9, 13, 16]]);
          }));

          function updateSequenceNumber(_x64, _x65) {
            return _updateSequenceNumber.apply(this, arguments);
          }

          return updateSequenceNumber;
        }()
        /**
         * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.
         * The snapshot is copied such that only the differential changes between the previously
         * copied snapshot are transferred to the destination.
         * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.
         * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob
         * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots
         *
         * @param copySource - Specifies the name of the source page blob snapshot. For example,
         *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
         * @param options - Options to the Page Blob Copy Incremental operation.
         * @returns Response data for the Page Blob Copy Incremental operation.
         */

      }, {
        key: "startCopyIncremental",
        value: function () {
          var _startCopyIncremental = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee57(copySource) {
            var options,
                _a,
                _createSpan50,
                span,
                updatedOptions,
                _args61 = arguments;

            return _regeneratorRuntime().wrap(function _callee57$(_context61) {
              while (1) {
                switch (_context61.prev = _context61.next) {
                  case 0:
                    options = _args61.length > 1 && _args61[1] !== undefined ? _args61[1] : {};
                    _createSpan50 = (0, _tracing.createSpan)("PageBlobClient-startCopyIncremental", options), span = _createSpan50.span, updatedOptions = _createSpan50.updatedOptions;
                    _context61.prev = 2;
                    _context61.next = 5;
                    return this.pageBlobContext.copyIncremental(copySource, Object.assign({
                      abortSignal: options.abortSignal,
                      modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                      })
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    return _context61.abrupt("return", _context61.sent);

                  case 8:
                    _context61.prev = 8;
                    _context61.t0 = _context61["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context61.t0.message
                    });
                    throw _context61.t0;

                  case 12:
                    _context61.prev = 12;
                    span.end();
                    return _context61.finish(12);

                  case 15:
                  case "end":
                    return _context61.stop();
                }
              }
            }, _callee57, this, [[2, 8, 12, 15]]);
          }));

          function startCopyIncremental(_x66) {
            return _startCopyIncremental.apply(this, arguments);
          }

          return startCopyIncremental;
        }()
      }]);

      return PageBlobClient;
    }(BlobClient);

    exports.PageBlobClient = PageBlobClient;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "@azure/core-tracing": "../node_modules/@azure/core-tracing/dist-esm/src/index.js",
    "./BlobDownloadResponse": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.browser.js",
    "./BlobQueryResponse": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.browser.js",
    "./credentials/AnonymousCredential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js",
    "./credentials/StorageSharedKeyCredential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js",
    "./generated/src/operations": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js",
    "./models": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js",
    "./PageBlobRangeResponse": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js",
    "./Pipeline": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js",
    "./pollers/BlobStartCopyFromUrlPoller": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js",
    "./Range": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js",
    "./StorageClient": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js",
    "./utils/Batch": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js",
    "../../storage-common/src": "../node_modules/@azure/storage-blob/dist-esm/storage-common/src/index.browser.js",
    "./utils/constants": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js",
    "./utils/tracing": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js",
    "./utils/utils.common": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js",
    "./utils/utils.node": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js",
    "./sas/BlobSASSignatureValues": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js",
    "./BlobLeaseClient": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js",
    "buffer": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getBodyAsText = getBodyAsText;
    exports.utf8ByteLength = utf8ByteLength;

    var _utils = require("./utils/utils.browser");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function getBodyAsText(_x) {
      return _getBodyAsText.apply(this, arguments);
    }

    function _getBodyAsText() {
      _getBodyAsText = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(batchResponse) {
        var blob;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return batchResponse.blobBody;

              case 2:
                blob = _context.sent;
                return _context.abrupt("return", (0, _utils.blobToString)(blob));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _getBodyAsText.apply(this, arguments);
    }

    function utf8ByteLength(str) {
      return new Blob([str]).size;
    }
  }, {
    "./utils/utils.browser": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BatchResponseParser = void 0;

    var _coreHttp = require("@azure/core-http");

    var _constants = require("./utils/constants");

    var _BatchUtils = require("./BatchUtils");

    var _log = require("./log");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    var HTTP_HEADER_DELIMITER = ": ";
    var SPACE_DELIMITER = " ";
    var NOT_FOUND = -1;
    /**
     * Util class for parsing batch response.
     */

    var BatchResponseParser = /*#__PURE__*/function () {
      function BatchResponseParser(batchResponse, subRequests) {
        _classCallCheck(this, BatchResponseParser);

        if (!batchResponse || !batchResponse.contentType) {
          // In special case(reported), server may return invalid content-type which could not be parsed.
          throw new RangeError("batchResponse is malformed or doesn't contain valid content-type.");
        }

        if (!subRequests || subRequests.size === 0) {
          // This should be prevent during coding.
          throw new RangeError("Invalid state: subRequests is not provided or size is 0.");
        }

        this.batchResponse = batchResponse;
        this.subRequests = subRequests;
        this.responseBatchBoundary = this.batchResponse.contentType.split("=")[1];
        this.perResponsePrefix = "--".concat(this.responseBatchBoundary).concat(_constants.HTTP_LINE_ENDING);
        this.batchResponseEnding = "--".concat(this.responseBatchBoundary, "--");
      } // For example of response, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#response


      _createClass(BatchResponseParser, [{
        key: "parseBatchResponse",
        value: function () {
          var _parseBatchResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var responseBodyAsText, subResponses, subResponseCount, deserializedSubResponses, subResponsesSucceededCount, subResponsesFailedCount, index, subResponse, deserializedSubResponse, responseLines, subRespHeaderStartFound, subRespHeaderEndFound, subRespFailed, contentId, _iterator, _step, responseLine, tokens, _tokens;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!(this.batchResponse._response.status !== _constants.HTTPURLConnection.HTTP_ACCEPTED)) {
                      _context.next = 2;
                      break;
                    }

                    throw new Error("Invalid state: batch request failed with status: '".concat(this.batchResponse._response.status, "'."));

                  case 2:
                    _context.next = 4;
                    return (0, _BatchUtils.getBodyAsText)(this.batchResponse);

                  case 4:
                    responseBodyAsText = _context.sent;
                    subResponses = responseBodyAsText.split(this.batchResponseEnding)[0] // string after ending is useless
                    .split(this.perResponsePrefix).slice(1); // string before first response boundary is useless

                    subResponseCount = subResponses.length; // Defensive coding in case of potential error parsing.
                    // Note: subResponseCount == 1 is special case where sub request is invalid.
                    // We try to prevent such cases through early validation, e.g. validate sub request count >= 1.
                    // While in unexpected sub request invalid case, we allow sub response to be parsed and return to user.

                    if (!(subResponseCount !== this.subRequests.size && subResponseCount !== 1)) {
                      _context.next = 9;
                      break;
                    }

                    throw new Error("Invalid state: sub responses' count is not equal to sub requests' count.");

                  case 9:
                    deserializedSubResponses = new Array(subResponseCount);
                    subResponsesSucceededCount = 0;
                    subResponsesFailedCount = 0; // Parse sub subResponses.

                    index = 0;

                  case 13:
                    if (!(index < subResponseCount)) {
                      _context.next = 59;
                      break;
                    }

                    subResponse = subResponses[index];
                    deserializedSubResponse = {};
                    deserializedSubResponse.headers = new _coreHttp.HttpHeaders();
                    responseLines = subResponse.split("".concat(_constants.HTTP_LINE_ENDING));
                    subRespHeaderStartFound = false;
                    subRespHeaderEndFound = false;
                    subRespFailed = false;
                    contentId = NOT_FOUND;
                    _iterator = _createForOfIteratorHelper(responseLines);
                    _context.prev = 23;

                    _iterator.s();

                  case 25:
                    if ((_step = _iterator.n()).done) {
                      _context.next = 46;
                      break;
                    }

                    responseLine = _step.value;

                    if (subRespHeaderStartFound) {
                      _context.next = 31;
                      break;
                    } // Convention line to indicate content ID


                    if (responseLine.startsWith(_constants.HeaderConstants.CONTENT_ID)) {
                      contentId = parseInt(responseLine.split(HTTP_HEADER_DELIMITER)[1]);
                    } // Http version line with status code indicates the start of sub request's response.
                    // Example: HTTP/1.1 202 Accepted


                    if (responseLine.startsWith(_constants.HTTP_VERSION_1_1)) {
                      subRespHeaderStartFound = true;
                      tokens = responseLine.split(SPACE_DELIMITER);
                      deserializedSubResponse.status = parseInt(tokens[1]);
                      deserializedSubResponse.statusMessage = tokens.slice(2).join(SPACE_DELIMITER);
                    }

                    return _context.abrupt("continue", 44);

                  case 31:
                    if (!(responseLine.trim() === "")) {
                      _context.next = 34;
                      break;
                    } // Sub response's header start line already found, and the first empty line indicates header end line found.


                    if (!subRespHeaderEndFound) {
                      subRespHeaderEndFound = true;
                    }

                    return _context.abrupt("continue", 44);

                  case 34:
                    if (subRespHeaderEndFound) {
                      _context.next = 42;
                      break;
                    }

                    if (!(responseLine.indexOf(HTTP_HEADER_DELIMITER) === -1)) {
                      _context.next = 37;
                      break;
                    }

                    throw new Error("Invalid state: find non-empty line '".concat(responseLine, "' without HTTP header delimiter '").concat(HTTP_HEADER_DELIMITER, "'."));

                  case 37:
                    // Parse headers of sub response.
                    _tokens = responseLine.split(HTTP_HEADER_DELIMITER);
                    deserializedSubResponse.headers.set(_tokens[0], _tokens[1]);

                    if (_tokens[0] === _constants.HeaderConstants.X_MS_ERROR_CODE) {
                      deserializedSubResponse.errorCode = _tokens[1];
                      subRespFailed = true;
                    }

                    _context.next = 44;
                    break;

                  case 42:
                    // Assemble body of sub response.
                    if (!deserializedSubResponse.bodyAsText) {
                      deserializedSubResponse.bodyAsText = "";
                    }

                    deserializedSubResponse.bodyAsText += responseLine;

                  case 44:
                    _context.next = 25;
                    break;

                  case 46:
                    _context.next = 51;
                    break;

                  case 48:
                    _context.prev = 48;
                    _context.t0 = _context["catch"](23);

                    _iterator.e(_context.t0);

                  case 51:
                    _context.prev = 51;

                    _iterator.f();

                    return _context.finish(51);

                  case 54:
                    // Inner for end
                    // The response will contain the Content-ID header for each corresponding subrequest response to use for tracking.
                    // The Content-IDs are set to a valid index in the subrequests we sent. In the status code 202 path, we could expect it
                    // to be 1-1 mapping from the [0, subRequests.size) to the Content-IDs returned. If not, we simply don't return that
                    // unexpected subResponse in the parsed reponse and we can always look it up in the raw response for debugging purpose.
                    if (contentId !== NOT_FOUND && Number.isInteger(contentId) && contentId >= 0 && contentId < this.subRequests.size && deserializedSubResponses[contentId] === undefined) {
                      deserializedSubResponse._request = this.subRequests.get(contentId);
                      deserializedSubResponses[contentId] = deserializedSubResponse;
                    } else {
                      _log.logger.error("subResponses[".concat(index, "] is dropped as the Content-ID is not found or invalid, Content-ID: ").concat(contentId));
                    }

                    if (subRespFailed) {
                      subResponsesFailedCount++;
                    } else {
                      subResponsesSucceededCount++;
                    }

                  case 56:
                    index++;
                    _context.next = 13;
                    break;

                  case 59:
                    return _context.abrupt("return", {
                      subResponses: deserializedSubResponses,
                      subResponsesSucceededCount: subResponsesSucceededCount,
                      subResponsesFailedCount: subResponsesFailedCount
                    });

                  case 60:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[23, 48, 51, 54]]);
          }));

          function parseBatchResponse() {
            return _parseBatchResponse.apply(this, arguments);
          }

          return parseBatchResponse;
        }()
      }]);

      return BatchResponseParser;
    }();

    exports.BatchResponseParser = BatchResponseParser;
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "./utils/constants": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js",
    "./BatchUtils": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js",
    "./log": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Mutex = void 0;

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.


    var MutexLockStatus;

    (function (MutexLockStatus) {
      MutexLockStatus[MutexLockStatus["LOCKED"] = 0] = "LOCKED";
      MutexLockStatus[MutexLockStatus["UNLOCKED"] = 1] = "UNLOCKED";
    })(MutexLockStatus || (MutexLockStatus = {}));
    /**
     * An async mutex lock.
     */


    var Mutex = /*#__PURE__*/function () {
      function Mutex() {
        _classCallCheck(this, Mutex);
      }

      _createClass(Mutex, null, [{
        key: "lock",
        value:
        /**
         * Lock for a specific key. If the lock has been acquired by another customer, then
         * will wait until getting the lock.
         *
         * @param key - lock key
         */
        function () {
          var _lock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key) {
            var _this = this;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    return _context.abrupt("return", new Promise(function (resolve) {
                      if (_this.keys[key] === undefined || _this.keys[key] === MutexLockStatus.UNLOCKED) {
                        _this.keys[key] = MutexLockStatus.LOCKED;
                        resolve();
                      } else {
                        _this.onUnlockEvent(key, function () {
                          _this.keys[key] = MutexLockStatus.LOCKED;
                          resolve();
                        });
                      }
                    }));

                  case 1:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          function lock(_x) {
            return _lock.apply(this, arguments);
          }

          return lock;
        }()
        /**
         * Unlock a key.
         *
         * @param key -
         */

      }, {
        key: "unlock",
        value: function () {
          var _unlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key) {
            var _this2 = this;

            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    return _context2.abrupt("return", new Promise(function (resolve) {
                      if (_this2.keys[key] === MutexLockStatus.LOCKED) {
                        _this2.emitUnlockEvent(key);
                      }

                      delete _this2.keys[key];
                      resolve();
                    }));

                  case 1:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

          function unlock(_x2) {
            return _unlock.apply(this, arguments);
          }

          return unlock;
        }()
      }, {
        key: "onUnlockEvent",
        value: function onUnlockEvent(key, handler) {
          if (this.listeners[key] === undefined) {
            this.listeners[key] = [handler];
          } else {
            this.listeners[key].push(handler);
          }
        }
      }, {
        key: "emitUnlockEvent",
        value: function emitUnlockEvent(key) {
          var _this3 = this;

          if (this.listeners[key] !== undefined && this.listeners[key].length > 0) {
            var handler = this.listeners[key].shift();
            setImmediate(function () {
              handler.call(_this3);
            });
          }
        }
      }]);

      return Mutex;
    }();

    exports.Mutex = Mutex;
    Mutex.keys = {};
    Mutex.listeners = {};
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BlobBatch = void 0;

    var _coreHttp = require("@azure/core-http");

    var _coreTracing = require("@azure/core-tracing");

    var _AnonymousCredential = require("./credentials/AnonymousCredential");

    var _Clients = require("./Clients");

    var _Mutex = require("./utils/Mutex");

    var _Pipeline = require("./Pipeline");

    var _utils = require("./utils/utils.common");

    var _constants = require("./utils/constants");

    var _StorageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");

    var _tracing = require("./utils/tracing");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /**
     * A BlobBatch represents an aggregated set of operations on blobs.
     * Currently, only `delete` and `setAccessTier` are supported.
     */


    var BlobBatch = /*#__PURE__*/function () {
      function BlobBatch() {
        _classCallCheck(this, BlobBatch);

        this.batch = "batch";
        this.batchRequest = new InnerBatchRequest();
      }
      /**
       * Get the value of Content-Type for a batch request.
       * The value must be multipart/mixed with a batch boundary.
       * Example: multipart/mixed; boundary=batch_a81786c8-e301-4e42-a729-a32ca24ae252
       */


      _createClass(BlobBatch, [{
        key: "getMultiPartContentType",
        value: function getMultiPartContentType() {
          return this.batchRequest.getMultipartContentType();
        }
        /**
         * Get assembled HTTP request body for sub requests.
         */

      }, {
        key: "getHttpRequestBody",
        value: function getHttpRequestBody() {
          return this.batchRequest.getHttpRequestBody();
        }
        /**
         * Get sub requests that are added into the batch request.
         */

      }, {
        key: "getSubRequests",
        value: function getSubRequests() {
          return this.batchRequest.getSubRequests();
        }
      }, {
        key: "addSubRequestInternal",
        value: function () {
          var _addSubRequestInternal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(subRequest, assembleSubRequestFunc) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return _Mutex.Mutex.lock(this.batch);

                  case 2:
                    _context.prev = 2;
                    this.batchRequest.preAddSubRequest(subRequest);
                    _context.next = 6;
                    return assembleSubRequestFunc();

                  case 6:
                    this.batchRequest.postAddSubRequest(subRequest);

                  case 7:
                    _context.prev = 7;
                    _context.next = 10;
                    return _Mutex.Mutex.unlock(this.batch);

                  case 10:
                    return _context.finish(7);

                  case 11:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[2,, 7, 11]]);
          }));

          function addSubRequestInternal(_x, _x2) {
            return _addSubRequestInternal.apply(this, arguments);
          }

          return addSubRequestInternal;
        }()
      }, {
        key: "setBatchType",
        value: function setBatchType(batchType) {
          if (!this.batchType) {
            this.batchType = batchType;
          }

          if (this.batchType !== batchType) {
            throw new RangeError("BlobBatch only supports one operation type per batch and it already is being used for ".concat(this.batchType, " operations."));
          }
        }
      }, {
        key: "deleteBlob",
        value: function () {
          var _deleteBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(urlOrBlobClient, credentialOrOptions, options) {
            var _this = this;

            var url, credential, _createSpan, span, updatedOptions;

            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    if (!(typeof urlOrBlobClient === "string" && (_coreHttp.isNode && credentialOrOptions instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrOptions instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrOptions)))) {
                      _context3.next = 5;
                      break;
                    } // First overload


                    url = urlOrBlobClient;
                    credential = credentialOrOptions;
                    _context3.next = 12;
                    break;

                  case 5:
                    if (!(urlOrBlobClient instanceof _Clients.BlobClient)) {
                      _context3.next = 11;
                      break;
                    } // Second overload


                    url = urlOrBlobClient.url;
                    credential = urlOrBlobClient.credential;
                    options = credentialOrOptions;
                    _context3.next = 12;
                    break;

                  case 11:
                    throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");

                  case 12:
                    if (!options) {
                      options = {};
                    }

                    _createSpan = (0, _tracing.createSpan)("BatchDeleteRequest-addSubRequest", options), span = _createSpan.span, updatedOptions = _createSpan.updatedOptions;
                    _context3.prev = 14;
                    this.setBatchType("delete");
                    _context3.next = 18;
                    return this.addSubRequestInternal({
                      url: url,
                      credential: credential
                    }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
                      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              _context2.next = 2;
                              return new _Clients.BlobClient(url, _this.batchRequest.createPipeline(credential)).delete(updatedOptions);

                            case 2:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2);
                    })));

                  case 18:
                    _context3.next = 24;
                    break;

                  case 20:
                    _context3.prev = 20;
                    _context3.t0 = _context3["catch"](14);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context3.t0.message
                    });
                    throw _context3.t0;

                  case 24:
                    _context3.prev = 24;
                    span.end();
                    return _context3.finish(24);

                  case 27:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this, [[14, 20, 24, 27]]);
          }));

          function deleteBlob(_x3, _x4, _x5) {
            return _deleteBlob.apply(this, arguments);
          }

          return deleteBlob;
        }()
      }, {
        key: "setBlobAccessTier",
        value: function () {
          var _setBlobAccessTier = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(urlOrBlobClient, credentialOrTier, tierOrOptions, options) {
            var _this2 = this;

            var url, credential, tier, _createSpan2, span, updatedOptions;

            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    if (!(typeof urlOrBlobClient === "string" && (_coreHttp.isNode && credentialOrTier instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrTier instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrTier)))) {
                      _context5.next = 6;
                      break;
                    } // First overload


                    url = urlOrBlobClient;
                    credential = credentialOrTier;
                    tier = tierOrOptions;
                    _context5.next = 14;
                    break;

                  case 6:
                    if (!(urlOrBlobClient instanceof _Clients.BlobClient)) {
                      _context5.next = 13;
                      break;
                    } // Second overload


                    url = urlOrBlobClient.url;
                    credential = urlOrBlobClient.credential;
                    tier = credentialOrTier;
                    options = tierOrOptions;
                    _context5.next = 14;
                    break;

                  case 13:
                    throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");

                  case 14:
                    if (!options) {
                      options = {};
                    }

                    _createSpan2 = (0, _tracing.createSpan)("BatchSetTierRequest-addSubRequest", options), span = _createSpan2.span, updatedOptions = _createSpan2.updatedOptions;
                    _context5.prev = 16;
                    this.setBatchType("setAccessTier");
                    _context5.next = 20;
                    return this.addSubRequestInternal({
                      url: url,
                      credential: credential
                    }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
                      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              _context4.next = 2;
                              return new _Clients.BlobClient(url, _this2.batchRequest.createPipeline(credential)).setAccessTier(tier, updatedOptions);

                            case 2:
                            case "end":
                              return _context4.stop();
                          }
                        }
                      }, _callee4);
                    })));

                  case 20:
                    _context5.next = 26;
                    break;

                  case 22:
                    _context5.prev = 22;
                    _context5.t0 = _context5["catch"](16);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context5.t0.message
                    });
                    throw _context5.t0;

                  case 26:
                    _context5.prev = 26;
                    span.end();
                    return _context5.finish(26);

                  case 29:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this, [[16, 22, 26, 29]]);
          }));

          function setBlobAccessTier(_x6, _x7, _x8, _x9) {
            return _setBlobAccessTier.apply(this, arguments);
          }

          return setBlobAccessTier;
        }()
      }]);

      return BlobBatch;
    }();
    /**
     * Inner batch request class which is responsible for assembling and serializing sub requests.
     * See https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#request-body for how requests are assembled.
     */


    exports.BlobBatch = BlobBatch;

    var InnerBatchRequest = /*#__PURE__*/function () {
      function InnerBatchRequest() {
        _classCallCheck(this, InnerBatchRequest);

        this.operationCount = 0;
        this.body = "";
        var tempGuid = (0, _coreHttp.generateUuid)(); // batch_{batchid}

        this.boundary = "batch_".concat(tempGuid); // --batch_{batchid}
        // Content-Type: application/http
        // Content-Transfer-Encoding: binary

        this.subRequestPrefix = "--".concat(this.boundary).concat(_constants.HTTP_LINE_ENDING).concat(_constants.HeaderConstants.CONTENT_TYPE, ": application/http").concat(_constants.HTTP_LINE_ENDING).concat(_constants.HeaderConstants.CONTENT_TRANSFER_ENCODING, ": binary"); // multipart/mixed; boundary=batch_{batchid}

        this.multipartContentType = "multipart/mixed; boundary=".concat(this.boundary); // --batch_{batchid}--

        this.batchRequestEnding = "--".concat(this.boundary, "--");
        this.subRequests = new Map();
      }
      /**
       * Create pipeline to assemble sub requests. The idea here is to use existing
       * credential and serialization/deserialization components, with additional policies to
       * filter unnecessary headers, assemble sub requests into request's body
       * and intercept request from going to wire.
       * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
       */


      _createClass(InnerBatchRequest, [{
        key: "createPipeline",
        value: function createPipeline(credential) {
          var isAnonymousCreds = credential instanceof _AnonymousCredential.AnonymousCredential;
          var policyFactoryLength = 3 + (isAnonymousCreds ? 0 : 1); // [deserializationPolicy, BatchHeaderFilterPolicyFactory, (Optional)Credential, BatchRequestAssemblePolicyFactory]

          var factories = new Array(policyFactoryLength);
          factories[0] = (0, _coreHttp.deserializationPolicy)(); // Default deserializationPolicy is provided by protocol layer

          factories[1] = new BatchHeaderFilterPolicyFactory(); // Use batch header filter policy to exclude unnecessary headers

          if (!isAnonymousCreds) {
            factories[2] = (0, _coreHttp.isTokenCredential)(credential) ? (0, _utils.attachCredential)((0, _coreHttp.bearerTokenAuthenticationPolicy)(credential, _constants.StorageOAuthScopes), credential) : credential;
          }

          factories[policyFactoryLength - 1] = new BatchRequestAssemblePolicyFactory(this); // Use batch assemble policy to assemble request and intercept request from going to wire

          return new _Pipeline.Pipeline(factories, {});
        }
      }, {
        key: "appendSubRequestToBody",
        value: function appendSubRequestToBody(request) {
          // Start to assemble sub request
          this.body += [this.subRequestPrefix, "".concat(_constants.HeaderConstants.CONTENT_ID, ": ").concat(this.operationCount), "", "".concat(request.method.toString(), " ").concat((0, _utils.getURLPathAndQuery)(request.url), " ").concat(_constants.HTTP_VERSION_1_1).concat(_constants.HTTP_LINE_ENDING) // sub request start line with method
          ].join(_constants.HTTP_LINE_ENDING);

          var _iterator = _createForOfIteratorHelper(request.headers.headersArray()),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var header = _step.value;
              this.body += "".concat(header.name, ": ").concat(header.value).concat(_constants.HTTP_LINE_ENDING);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          this.body += _constants.HTTP_LINE_ENDING; // sub request's headers need be ending with an empty line
          // No body to assemble for current batch request support
          // End to assemble sub request
        }
      }, {
        key: "preAddSubRequest",
        value: function preAddSubRequest(subRequest) {
          if (this.operationCount >= _constants.BATCH_MAX_REQUEST) {
            throw new RangeError("Cannot exceed ".concat(_constants.BATCH_MAX_REQUEST, " sub requests in a single batch"));
          } // Fast fail if url for sub request is invalid


          var path = (0, _utils.getURLPath)(subRequest.url);

          if (!path || path === "") {
            throw new RangeError("Invalid url for sub request: '".concat(subRequest.url, "'"));
          }
        }
      }, {
        key: "postAddSubRequest",
        value: function postAddSubRequest(subRequest) {
          this.subRequests.set(this.operationCount, subRequest);
          this.operationCount++;
        } // Return the http request body with assembling the ending line to the sub request body.

      }, {
        key: "getHttpRequestBody",
        value: function getHttpRequestBody() {
          return "".concat(this.body).concat(this.batchRequestEnding).concat(_constants.HTTP_LINE_ENDING);
        }
      }, {
        key: "getMultipartContentType",
        value: function getMultipartContentType() {
          return this.multipartContentType;
        }
      }, {
        key: "getSubRequests",
        value: function getSubRequests() {
          return this.subRequests;
        }
      }]);

      return InnerBatchRequest;
    }();

    var BatchRequestAssemblePolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
      _inherits(BatchRequestAssemblePolicy, _BaseRequestPolicy);

      var _super = _createSuper(BatchRequestAssemblePolicy);

      function BatchRequestAssemblePolicy(batchRequest, nextPolicy, options) {
        var _this3;

        _classCallCheck(this, BatchRequestAssemblePolicy);

        _this3 = _super.call(this, nextPolicy, options);
        _this3.dummyResponse = {
          request: new _coreHttp.WebResource(),
          status: 200,
          headers: new _coreHttp.HttpHeaders()
        };
        _this3.batchRequest = batchRequest;
        return _this3;
      }

      _createClass(BatchRequestAssemblePolicy, [{
        key: "sendRequest",
        value: function () {
          var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(request) {
            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    _context6.next = 2;
                    return this.batchRequest.appendSubRequestToBody(request);

                  case 2:
                    return _context6.abrupt("return", this.dummyResponse);

                  case 3:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          function sendRequest(_x10) {
            return _sendRequest.apply(this, arguments);
          }

          return sendRequest;
        }()
      }]);

      return BatchRequestAssemblePolicy;
    }(_coreHttp.BaseRequestPolicy);

    var BatchRequestAssemblePolicyFactory = /*#__PURE__*/function () {
      function BatchRequestAssemblePolicyFactory(batchRequest) {
        _classCallCheck(this, BatchRequestAssemblePolicyFactory);

        this.batchRequest = batchRequest;
      }

      _createClass(BatchRequestAssemblePolicyFactory, [{
        key: "create",
        value: function create(nextPolicy, options) {
          return new BatchRequestAssemblePolicy(this.batchRequest, nextPolicy, options);
        }
      }]);

      return BatchRequestAssemblePolicyFactory;
    }();

    var BatchHeaderFilterPolicy = /*#__PURE__*/function (_BaseRequestPolicy2) {
      _inherits(BatchHeaderFilterPolicy, _BaseRequestPolicy2);

      var _super2 = _createSuper(BatchHeaderFilterPolicy); // The base class has a protected constructor. Adding a public one to enable constructing of this class.

      /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/


      function BatchHeaderFilterPolicy(nextPolicy, options) {
        _classCallCheck(this, BatchHeaderFilterPolicy);

        return _super2.call(this, nextPolicy, options);
      }

      _createClass(BatchHeaderFilterPolicy, [{
        key: "sendRequest",
        value: function () {
          var _sendRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(request) {
            var xMsHeaderName, _iterator2, _step2, header;

            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    xMsHeaderName = "";
                    _iterator2 = _createForOfIteratorHelper(request.headers.headersArray());

                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                        header = _step2.value;

                        if ((0, _utils.iEqual)(header.name, _constants.HeaderConstants.X_MS_VERSION)) {
                          xMsHeaderName = header.name;
                        }
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }

                    if (xMsHeaderName !== "") {
                      request.headers.remove(xMsHeaderName); // The subrequests should not have the x-ms-version header.
                    }

                    return _context7.abrupt("return", this._nextPolicy.sendRequest(request));

                  case 5:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));

          function sendRequest(_x11) {
            return _sendRequest2.apply(this, arguments);
          }

          return sendRequest;
        }()
      }]);

      return BatchHeaderFilterPolicy;
    }(_coreHttp.BaseRequestPolicy);

    var BatchHeaderFilterPolicyFactory = /*#__PURE__*/function () {
      function BatchHeaderFilterPolicyFactory() {
        _classCallCheck(this, BatchHeaderFilterPolicyFactory);
      }

      _createClass(BatchHeaderFilterPolicyFactory, [{
        key: "create",
        value: function create(nextPolicy, options) {
          return new BatchHeaderFilterPolicy(nextPolicy, options);
        }
      }]);

      return BatchHeaderFilterPolicyFactory;
    }();
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "@azure/core-tracing": "../node_modules/@azure/core-tracing/dist-esm/src/index.js",
    "./credentials/AnonymousCredential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js",
    "./Clients": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js",
    "./utils/Mutex": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js",
    "./Pipeline": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js",
    "./utils/utils.common": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js",
    "./utils/constants": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js",
    "./credentials/StorageSharedKeyCredential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js",
    "./utils/tracing": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BlobBatchClient = void 0;

    var _BatchResponseParser = require("./BatchResponseParser");

    var _BatchUtils = require("./BatchUtils");

    var _BlobBatch = require("./BlobBatch");

    var _coreTracing = require("@azure/core-tracing");

    var _tracing = require("./utils/tracing");

    var _operations = require("./generated/src/operations");

    var _AnonymousCredential = require("./credentials/AnonymousCredential");

    var _storageClientContext = require("./generated/src/storageClientContext");

    var _Pipeline = require("./Pipeline");

    var _utils = require("./utils/utils.common");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    /**
     * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
     */


    var BlobBatchClient = /*#__PURE__*/function () {
      function BlobBatchClient(url, credentialOrPipeline, // Legacy, no fix for eslint error without breaking. Disable it for this interface.

      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
      options) {
        _classCallCheck(this, BlobBatchClient);

        var pipeline;

        if ((0, _Pipeline.isPipelineLike)(credentialOrPipeline)) {
          pipeline = credentialOrPipeline;
        } else if (!credentialOrPipeline) {
          // no credential provided
          pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
        } else {
          pipeline = (0, _Pipeline.newPipeline)(credentialOrPipeline, options);
        }

        var storageClientContext = new _storageClientContext.StorageClientContext(url, pipeline.toServiceClientOptions());
        var path = (0, _utils.getURLPath)(url);

        if (path && path !== "/") {
          // Container scoped.
          this.serviceOrContainerContext = new _operations.Container(storageClientContext);
        } else {
          this.serviceOrContainerContext = new _operations.Service(storageClientContext);
        }
      }
      /**
       * Creates a {@link BlobBatch}.
       * A BlobBatch represents an aggregated set of operations on blobs.
       */


      _createClass(BlobBatchClient, [{
        key: "createBatch",
        value: function createBatch() {
          return new _BlobBatch.BlobBatch();
        }
      }, {
        key: "deleteBlobs",
        value: function () {
          var _deleteBlobs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(urlsOrBlobClients, credentialOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.

          /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
          options) {
            var batch, _iterator, _step, urlOrBlobClient;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    batch = new _BlobBatch.BlobBatch();
                    _iterator = _createForOfIteratorHelper(urlsOrBlobClients);
                    _context.prev = 2;

                    _iterator.s();

                  case 4:
                    if ((_step = _iterator.n()).done) {
                      _context.next = 15;
                      break;
                    }

                    urlOrBlobClient = _step.value;

                    if (!(typeof urlOrBlobClient === "string")) {
                      _context.next = 11;
                      break;
                    }

                    _context.next = 9;
                    return batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);

                  case 9:
                    _context.next = 13;
                    break;

                  case 11:
                    _context.next = 13;
                    return batch.deleteBlob(urlOrBlobClient, credentialOrOptions);

                  case 13:
                    _context.next = 4;
                    break;

                  case 15:
                    _context.next = 20;
                    break;

                  case 17:
                    _context.prev = 17;
                    _context.t0 = _context["catch"](2);

                    _iterator.e(_context.t0);

                  case 20:
                    _context.prev = 20;

                    _iterator.f();

                    return _context.finish(20);

                  case 23:
                    return _context.abrupt("return", this.submitBatch(batch));

                  case 24:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[2, 17, 20, 23]]);
          }));

          function deleteBlobs(_x, _x2, _x3) {
            return _deleteBlobs.apply(this, arguments);
          }

          return deleteBlobs;
        }()
      }, {
        key: "setBlobsAccessTier",
        value: function () {
          var _setBlobsAccessTier = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(urlsOrBlobClients, credentialOrTier, tierOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.

          /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
          options) {
            var batch, _iterator2, _step2, urlOrBlobClient;

            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    batch = new _BlobBatch.BlobBatch();
                    _iterator2 = _createForOfIteratorHelper(urlsOrBlobClients);
                    _context2.prev = 2;

                    _iterator2.s();

                  case 4:
                    if ((_step2 = _iterator2.n()).done) {
                      _context2.next = 15;
                      break;
                    }

                    urlOrBlobClient = _step2.value;

                    if (!(typeof urlOrBlobClient === "string")) {
                      _context2.next = 11;
                      break;
                    }

                    _context2.next = 9;
                    return batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);

                  case 9:
                    _context2.next = 13;
                    break;

                  case 11:
                    _context2.next = 13;
                    return batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);

                  case 13:
                    _context2.next = 4;
                    break;

                  case 15:
                    _context2.next = 20;
                    break;

                  case 17:
                    _context2.prev = 17;
                    _context2.t0 = _context2["catch"](2);

                    _iterator2.e(_context2.t0);

                  case 20:
                    _context2.prev = 20;

                    _iterator2.f();

                    return _context2.finish(20);

                  case 23:
                    return _context2.abrupt("return", this.submitBatch(batch));

                  case 24:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this, [[2, 17, 20, 23]]);
          }));

          function setBlobsAccessTier(_x4, _x5, _x6, _x7) {
            return _setBlobsAccessTier.apply(this, arguments);
          }

          return setBlobsAccessTier;
        }()
        /**
         * Submit batch request which consists of multiple subrequests.
         *
         * Get `blobBatchClient` and other details before running the snippets.
         * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`
         *
         * Example usage:
         *
         * ```js
         * let batchRequest = new BlobBatch();
         * await batchRequest.deleteBlob(urlInString0, credential0);
         * await batchRequest.deleteBlob(urlInString1, credential1, {
         *  deleteSnapshots: "include"
         * });
         * const batchResp = await blobBatchClient.submitBatch(batchRequest);
         * console.log(batchResp.subResponsesSucceededCount);
         * ```
         *
         * Example using a lease:
         *
         * ```js
         * let batchRequest = new BlobBatch();
         * await batchRequest.setBlobAccessTier(blockBlobClient0, "Cool");
         * await batchRequest.setBlobAccessTier(blockBlobClient1, "Cool", {
         *  conditions: { leaseId: leaseId }
         * });
         * const batchResp = await blobBatchClient.submitBatch(batchRequest);
         * console.log(batchResp.subResponsesSucceededCount);
         * ```
         *
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
         *
         * @param batchRequest - A set of Delete or SetTier operations.
         * @param options -
         */

      }, {
        key: "submitBatch",
        value: function () {
          var _submitBatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(batchRequest) {
            var options,
                _createSpan,
                span,
                updatedOptions,
                batchRequestBody,
                rawBatchResponse,
                batchResponseParser,
                responseSummary,
                res,
                _args3 = arguments;

            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};

                    if (!(!batchRequest || batchRequest.getSubRequests().size === 0)) {
                      _context3.next = 3;
                      break;
                    }

                    throw new RangeError("Batch request should contain one or more sub requests.");

                  case 3:
                    _createSpan = (0, _tracing.createSpan)("BlobBatchClient-submitBatch", options), span = _createSpan.span, updatedOptions = _createSpan.updatedOptions;
                    _context3.prev = 4;
                    batchRequestBody = batchRequest.getHttpRequestBody(); // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.

                    _context3.next = 8;
                    return this.serviceOrContainerContext.submitBatch((0, _BatchUtils.utf8ByteLength)(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign(Object.assign({}, options), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 8:
                    rawBatchResponse = _context3.sent; // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).

                    batchResponseParser = new _BatchResponseParser.BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());
                    _context3.next = 12;
                    return batchResponseParser.parseBatchResponse();

                  case 12:
                    responseSummary = _context3.sent;
                    res = {
                      _response: rawBatchResponse._response,
                      contentType: rawBatchResponse.contentType,
                      errorCode: rawBatchResponse.errorCode,
                      requestId: rawBatchResponse.requestId,
                      clientRequestId: rawBatchResponse.clientRequestId,
                      version: rawBatchResponse.version,
                      subResponses: responseSummary.subResponses,
                      subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,
                      subResponsesFailedCount: responseSummary.subResponsesFailedCount
                    };
                    return _context3.abrupt("return", res);

                  case 17:
                    _context3.prev = 17;
                    _context3.t0 = _context3["catch"](4);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context3.t0.message
                    });
                    throw _context3.t0;

                  case 21:
                    _context3.prev = 21;
                    span.end();
                    return _context3.finish(21);

                  case 24:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this, [[4, 17, 21, 24]]);
          }));

          function submitBatch(_x8) {
            return _submitBatch.apply(this, arguments);
          }

          return submitBatch;
        }()
      }]);

      return BlobBatchClient;
    }();

    exports.BlobBatchClient = BlobBatchClient;
  }, {
    "./BatchResponseParser": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js",
    "./BatchUtils": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js",
    "./BlobBatch": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js",
    "@azure/core-tracing": "../node_modules/@azure/core-tracing/dist-esm/src/index.js",
    "./utils/tracing": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js",
    "./generated/src/operations": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js",
    "./credentials/AnonymousCredential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js",
    "./generated/src/storageClientContext": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClientContext.js",
    "./Pipeline": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js",
    "./utils/utils.common": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js": [function (require, module, exports) {
    var define;
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ContainerClient = void 0;

    var _tslib = require("tslib");

    var _coreHttp = require("@azure/core-http");

    var _coreTracing = require("@azure/core-tracing");

    var _AnonymousCredential = require("./credentials/AnonymousCredential");

    var _StorageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");

    var _operations = require("./generated/src/operations");

    var _Pipeline = require("./Pipeline");

    var _StorageClient2 = require("./StorageClient");

    var _tracing = require("./utils/tracing");

    var _utils = require("./utils/utils.common");

    var _BlobSASSignatureValues = require("./sas/BlobSASSignatureValues");

    var _BlobLeaseClient = require("./BlobLeaseClient");

    var _Clients = require("./Clients");

    var _BlobBatchClient = require("./BlobBatchClient");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * A ContainerClient represents a URL to the Azure Storage container allowing you to manipulate its blobs.
     */


    var ContainerClient = /*#__PURE__*/function (_StorageClient) {
      _inherits(ContainerClient, _StorageClient);

      var _super = _createSuper(ContainerClient);

      function ContainerClient(urlOrConnectionString, credentialOrPipelineOrContainerName, // Legacy, no fix for eslint error without breaking. Disable it for this interface.

      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
      options) {
        var _this;

        _classCallCheck(this, ContainerClient);

        var pipeline;
        var url;
        options = options || {};

        if ((0, _Pipeline.isPipelineLike)(credentialOrPipelineOrContainerName)) {
          // (url: string, pipeline: Pipeline)
          url = urlOrConnectionString;
          pipeline = credentialOrPipelineOrContainerName;
        } else if (_coreHttp.isNode && credentialOrPipelineOrContainerName instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrPipelineOrContainerName)) {
          // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
          url = urlOrConnectionString;
          pipeline = (0, _Pipeline.newPipeline)(credentialOrPipelineOrContainerName, options);
        } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
          // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
          // The second parameter is undefined. Use anonymous credential.
          url = urlOrConnectionString;
          pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
        } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string") {
          // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
          var containerName = credentialOrPipelineOrContainerName;
          var extractedCreds = (0, _utils.extractConnectionStringParts)(urlOrConnectionString);

          if (extractedCreds.kind === "AccountConnString") {
            if (_coreHttp.isNode) {
              var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
              url = (0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName));

              if (!options.proxyOptions) {
                options.proxyOptions = (0, _coreHttp.getDefaultProxySettings)(extractedCreds.proxyUri);
              }

              pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
            } else {
              throw new Error("Account connection string is only supported in Node.js environment");
            }
          } else if (extractedCreds.kind === "SASConnString") {
            url = (0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)) + "?" + extractedCreds.accountSas;
            pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
          } else {
            throw new Error("Connection string must be either an Account connection string or a SAS connection string");
          }
        } else {
          throw new Error("Expecting non-empty strings for containerName parameter");
        }

        _this = _super.call(this, url, pipeline);
        _this._containerName = _this.getContainerNameFromUrl();
        _this.containerContext = new _operations.Container(_this.storageClientContext);
        return _this;
      }
      /**
       * The name of the container.
       */


      _createClass(ContainerClient, [{
        key: "containerName",
        get: function get() {
          return this._containerName;
        }
        /**
         * Creates a new container under the specified account. If the container with
         * the same name already exists, the operation fails.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
         *
         * @param options - Options to Container Create operation.
         *
         *
         * Example usage:
         *
         * ```js
         * const containerClient = blobServiceClient.getContainerClient("<container name>");
         * const createContainerResponse = await containerClient.create();
         * console.log("Container was created successfully", createContainerResponse.requestId);
         * ```
         */

      }, {
        key: "create",
        value: function () {
          var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var options,
                _createSpan,
                span,
                updatedOptions,
                _args = arguments;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
                    _createSpan = (0, _tracing.createSpan)("ContainerClient-create", options), span = _createSpan.span, updatedOptions = _createSpan.updatedOptions;
                    _context.prev = 2;
                    _context.next = 5;
                    return this.containerContext.create(Object.assign(Object.assign({}, options), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    return _context.abrupt("return", _context.sent);

                  case 8:
                    _context.prev = 8;
                    _context.t0 = _context["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context.t0.message
                    });
                    throw _context.t0;

                  case 12:
                    _context.prev = 12;
                    span.end();
                    return _context.finish(12);

                  case 15:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[2, 8, 12, 15]]);
          }));

          function create() {
            return _create.apply(this, arguments);
          }

          return create;
        }()
        /**
         * Creates a new container under the specified account. If the container with
         * the same name already exists, it is not changed.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
         *
         * @param options -
         */

      }, {
        key: "createIfNotExists",
        value: function () {
          var _createIfNotExists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var options,
                _a,
                _b,
                _createSpan2,
                span,
                updatedOptions,
                res,
                _args2 = arguments;

            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
                    _createSpan2 = (0, _tracing.createSpan)("ContainerClient-createIfNotExists", options), span = _createSpan2.span, updatedOptions = _createSpan2.updatedOptions;
                    _context2.prev = 2;
                    _context2.next = 5;
                    return this.create(updatedOptions);

                  case 5:
                    res = _context2.sent;
                    return _context2.abrupt("return", Object.assign(Object.assign({
                      succeeded: true
                    }, res), {
                      _response: res._response
                    }));

                  case 9:
                    _context2.prev = 9;
                    _context2.t0 = _context2["catch"](2);

                    if (!(((_a = _context2.t0.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "ContainerAlreadyExists")) {
                      _context2.next = 14;
                      break;
                    }

                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: "Expected exception when creating a container only if it does not already exist."
                    });
                    return _context2.abrupt("return", Object.assign(Object.assign({
                      succeeded: false
                    }, (_b = _context2.t0.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                      _response: _context2.t0.response
                    }));

                  case 14:
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context2.t0.message
                    });
                    throw _context2.t0;

                  case 16:
                    _context2.prev = 16;
                    span.end();
                    return _context2.finish(16);

                  case 19:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this, [[2, 9, 16, 19]]);
          }));

          function createIfNotExists() {
            return _createIfNotExists.apply(this, arguments);
          }

          return createIfNotExists;
        }()
        /**
         * Returns true if the Azure container resource represented by this client exists; false otherwise.
         *
         * NOTE: use this function with care since an existing container might be deleted by other clients or
         * applications. Vice versa new containers with the same name might be added by other clients or
         * applications after this function completes.
         *
         * @param options -
         */

      }, {
        key: "exists",
        value: function () {
          var _exists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var options,
                _createSpan3,
                span,
                updatedOptions,
                _args3 = arguments;

            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
                    _createSpan3 = (0, _tracing.createSpan)("ContainerClient-exists", options), span = _createSpan3.span, updatedOptions = _createSpan3.updatedOptions;
                    _context3.prev = 2;
                    _context3.next = 5;
                    return this.getProperties({
                      abortSignal: options.abortSignal,
                      tracingOptions: updatedOptions.tracingOptions
                    });

                  case 5:
                    return _context3.abrupt("return", true);

                  case 8:
                    _context3.prev = 8;
                    _context3.t0 = _context3["catch"](2);

                    if (!(_context3.t0.statusCode === 404)) {
                      _context3.next = 13;
                      break;
                    }

                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: "Expected exception when checking container existence"
                    });
                    return _context3.abrupt("return", false);

                  case 13:
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context3.t0.message
                    });
                    throw _context3.t0;

                  case 15:
                    _context3.prev = 15;
                    span.end();
                    return _context3.finish(15);

                  case 18:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this, [[2, 8, 15, 18]]);
          }));

          function exists() {
            return _exists.apply(this, arguments);
          }

          return exists;
        }()
        /**
         * Creates a {@link BlobClient}
         *
         * @param blobName - A blob name
         * @returns A new BlobClient object for the given blob name.
         */

      }, {
        key: "getBlobClient",
        value: function getBlobClient(blobName) {
          return new _Clients.BlobClient((0, _utils.appendToURLPath)(this.url, encodeURIComponent(blobName)), this.pipeline);
        }
        /**
         * Creates an {@link AppendBlobClient}
         *
         * @param blobName - An append blob name
         */

      }, {
        key: "getAppendBlobClient",
        value: function getAppendBlobClient(blobName) {
          return new _Clients.AppendBlobClient((0, _utils.appendToURLPath)(this.url, encodeURIComponent(blobName)), this.pipeline);
        }
        /**
         * Creates a {@link BlockBlobClient}
         *
         * @param blobName - A block blob name
         *
         *
         * Example usage:
         *
         * ```js
         * const content = "Hello world!";
         *
         * const blockBlobClient = containerClient.getBlockBlobClient("<blob name>");
         * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
         * ```
         */

      }, {
        key: "getBlockBlobClient",
        value: function getBlockBlobClient(blobName) {
          return new _Clients.BlockBlobClient((0, _utils.appendToURLPath)(this.url, encodeURIComponent(blobName)), this.pipeline);
        }
        /**
         * Creates a {@link PageBlobClient}
         *
         * @param blobName - A page blob name
         */

      }, {
        key: "getPageBlobClient",
        value: function getPageBlobClient(blobName) {
          return new _Clients.PageBlobClient((0, _utils.appendToURLPath)(this.url, encodeURIComponent(blobName)), this.pipeline);
        }
        /**
         * Returns all user-defined metadata and system properties for the specified
         * container. The data returned does not include the container's list of blobs.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties
         *
         * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
         * they originally contained uppercase characters. This differs from the metadata keys returned by
         * the `listContainers` method of {@link BlobServiceClient} using the `includeMetadata` option, which
         * will retain their original casing.
         *
         * @param options - Options to Container Get Properties operation.
         */

      }, {
        key: "getProperties",
        value: function () {
          var _getProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
            var options,
                _createSpan4,
                span,
                updatedOptions,
                _args4 = arguments;

            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};

                    if (!options.conditions) {
                      options.conditions = {};
                    }

                    _createSpan4 = (0, _tracing.createSpan)("ContainerClient-getProperties", options), span = _createSpan4.span, updatedOptions = _createSpan4.updatedOptions;
                    _context4.prev = 3;
                    _context4.next = 6;
                    return this.containerContext.getProperties(Object.assign(Object.assign({
                      abortSignal: options.abortSignal
                    }, options.conditions), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 6:
                    return _context4.abrupt("return", _context4.sent);

                  case 9:
                    _context4.prev = 9;
                    _context4.t0 = _context4["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context4.t0.message
                    });
                    throw _context4.t0;

                  case 13:
                    _context4.prev = 13;
                    span.end();
                    return _context4.finish(13);

                  case 16:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this, [[3, 9, 13, 16]]);
          }));

          function getProperties() {
            return _getProperties.apply(this, arguments);
          }

          return getProperties;
        }()
        /**
         * Marks the specified container for deletion. The container and any blobs
         * contained within it are later deleted during garbage collection.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
         *
         * @param options - Options to Container Delete operation.
         */

      }, {
        key: "delete",
        value: function () {
          var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
            var options,
                _createSpan5,
                span,
                updatedOptions,
                _args5 = arguments;

            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    options = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};

                    if (!options.conditions) {
                      options.conditions = {};
                    }

                    _createSpan5 = (0, _tracing.createSpan)("ContainerClient-delete", options), span = _createSpan5.span, updatedOptions = _createSpan5.updatedOptions;
                    _context5.prev = 3;
                    _context5.next = 6;
                    return this.containerContext.delete(Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: options.conditions
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 6:
                    return _context5.abrupt("return", _context5.sent);

                  case 9:
                    _context5.prev = 9;
                    _context5.t0 = _context5["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context5.t0.message
                    });
                    throw _context5.t0;

                  case 13:
                    _context5.prev = 13;
                    span.end();
                    return _context5.finish(13);

                  case 16:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this, [[3, 9, 13, 16]]);
          }));

          function _delete() {
            return _delete2.apply(this, arguments);
          }

          return _delete;
        }()
        /**
         * Marks the specified container for deletion if it exists. The container and any blobs
         * contained within it are later deleted during garbage collection.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
         *
         * @param options - Options to Container Delete operation.
         */

      }, {
        key: "deleteIfExists",
        value: function () {
          var _deleteIfExists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
            var options,
                _a,
                _b,
                _createSpan6,
                span,
                updatedOptions,
                res,
                _args6 = arguments;

            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    options = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};
                    _createSpan6 = (0, _tracing.createSpan)("ContainerClient-deleteIfExists", options), span = _createSpan6.span, updatedOptions = _createSpan6.updatedOptions;
                    _context6.prev = 2;
                    _context6.next = 5;
                    return this.delete(updatedOptions);

                  case 5:
                    res = _context6.sent;
                    return _context6.abrupt("return", Object.assign(Object.assign({
                      succeeded: true
                    }, res), {
                      _response: res._response
                    }));

                  case 9:
                    _context6.prev = 9;
                    _context6.t0 = _context6["catch"](2);

                    if (!(((_a = _context6.t0.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "ContainerNotFound")) {
                      _context6.next = 14;
                      break;
                    }

                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: "Expected exception when deleting a container only if it exists."
                    });
                    return _context6.abrupt("return", Object.assign(Object.assign({
                      succeeded: false
                    }, (_b = _context6.t0.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                      _response: _context6.t0.response
                    }));

                  case 14:
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context6.t0.message
                    });
                    throw _context6.t0;

                  case 16:
                    _context6.prev = 16;
                    span.end();
                    return _context6.finish(16);

                  case 19:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this, [[2, 9, 16, 19]]);
          }));

          function deleteIfExists() {
            return _deleteIfExists.apply(this, arguments);
          }

          return deleteIfExists;
        }()
        /**
         * Sets one or more user-defined name-value pairs for the specified container.
         *
         * If no option provided, or no metadata defined in the parameter, the container
         * metadata will be removed.
         *
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata
         *
         * @param metadata - Replace existing metadata with this value.
         *                            If no value provided the existing metadata will be removed.
         * @param options - Options to Container Set Metadata operation.
         */

      }, {
        key: "setMetadata",
        value: function () {
          var _setMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(metadata) {
            var options,
                _createSpan7,
                span,
                updatedOptions,
                _args7 = arguments;

            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    options = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};

                    if (!options.conditions) {
                      options.conditions = {};
                    }

                    if (!options.conditions.ifUnmodifiedSince) {
                      _context7.next = 4;
                      break;
                    }

                    throw new RangeError("the IfUnmodifiedSince must have their default values because they are ignored by the blob service");

                  case 4:
                    _createSpan7 = (0, _tracing.createSpan)("ContainerClient-setMetadata", options), span = _createSpan7.span, updatedOptions = _createSpan7.updatedOptions;
                    _context7.prev = 5;
                    _context7.next = 8;
                    return this.containerContext.setMetadata(Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions,
                      metadata: metadata,
                      modifiedAccessConditions: options.conditions
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 8:
                    return _context7.abrupt("return", _context7.sent);

                  case 11:
                    _context7.prev = 11;
                    _context7.t0 = _context7["catch"](5);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context7.t0.message
                    });
                    throw _context7.t0;

                  case 15:
                    _context7.prev = 15;
                    span.end();
                    return _context7.finish(15);

                  case 18:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this, [[5, 11, 15, 18]]);
          }));

          function setMetadata(_x) {
            return _setMetadata.apply(this, arguments);
          }

          return setMetadata;
        }()
        /**
         * Gets the permissions for the specified container. The permissions indicate
         * whether container data may be accessed publicly.
         *
         * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.
         * For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will get "2018-12-31T03:44:23.882Z".
         *
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl
         *
         * @param options - Options to Container Get Access Policy operation.
         */

      }, {
        key: "getAccessPolicy",
        value: function () {
          var _getAccessPolicy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
            var options,
                _createSpan8,
                span,
                updatedOptions,
                response,
                res,
                _iterator,
                _step,
                identifier,
                accessPolicy,
                _args8 = arguments;

            return _regeneratorRuntime().wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    options = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};

                    if (!options.conditions) {
                      options.conditions = {};
                    }

                    _createSpan8 = (0, _tracing.createSpan)("ContainerClient-getAccessPolicy", options), span = _createSpan8.span, updatedOptions = _createSpan8.updatedOptions;
                    _context8.prev = 3;
                    _context8.next = 6;
                    return this.containerContext.getAccessPolicy(Object.assign({
                      abortSignal: options.abortSignal,
                      leaseAccessConditions: options.conditions
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 6:
                    response = _context8.sent;
                    res = {
                      _response: response._response,
                      blobPublicAccess: response.blobPublicAccess,
                      date: response.date,
                      etag: response.etag,
                      errorCode: response.errorCode,
                      lastModified: response.lastModified,
                      requestId: response.requestId,
                      clientRequestId: response.clientRequestId,
                      signedIdentifiers: [],
                      version: response.version
                    };
                    _iterator = _createForOfIteratorHelper(response);

                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done;) {
                        identifier = _step.value;
                        accessPolicy = undefined;

                        if (identifier.accessPolicy) {
                          accessPolicy = {
                            permissions: identifier.accessPolicy.permissions
                          };

                          if (identifier.accessPolicy.expiresOn) {
                            accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);
                          }

                          if (identifier.accessPolicy.startsOn) {
                            accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);
                          }
                        }

                        res.signedIdentifiers.push({
                          accessPolicy: accessPolicy,
                          id: identifier.id
                        });
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }

                    return _context8.abrupt("return", res);

                  case 13:
                    _context8.prev = 13;
                    _context8.t0 = _context8["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context8.t0.message
                    });
                    throw _context8.t0;

                  case 17:
                    _context8.prev = 17;
                    span.end();
                    return _context8.finish(17);

                  case 20:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this, [[3, 13, 17, 20]]);
          }));

          function getAccessPolicy() {
            return _getAccessPolicy.apply(this, arguments);
          }

          return getAccessPolicy;
        }()
        /**
         * Sets the permissions for the specified container. The permissions indicate
         * whether blobs in a container may be accessed publicly.
         *
         * When you set permissions for a container, the existing permissions are replaced.
         * If no access or containerAcl provided, the existing container ACL will be
         * removed.
         *
         * When you establish a stored access policy on a container, it may take up to 30 seconds to take effect.
         * During this interval, a shared access signature that is associated with the stored access policy will
         * fail with status code 403 (Forbidden), until the access policy becomes active.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl
         *
         * @param access - The level of public access to data in the container.
         * @param containerAcl - Array of elements each having a unique Id and details of the access policy.
         * @param options - Options to Container Set Access Policy operation.
         */

      }, {
        key: "setAccessPolicy",
        value: function () {
          var _setAccessPolicy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(access, containerAcl) {
            var options,
                _createSpan9,
                span,
                updatedOptions,
                acl,
                _iterator2,
                _step2,
                identifier,
                _args9 = arguments;

            return _regeneratorRuntime().wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    options = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : {};
                    options.conditions = options.conditions || {};
                    _createSpan9 = (0, _tracing.createSpan)("ContainerClient-setAccessPolicy", options), span = _createSpan9.span, updatedOptions = _createSpan9.updatedOptions;
                    _context9.prev = 3;
                    acl = [];
                    _iterator2 = _createForOfIteratorHelper(containerAcl || []);

                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                        identifier = _step2.value;
                        acl.push({
                          accessPolicy: {
                            expiresOn: identifier.accessPolicy.expiresOn ? (0, _utils.truncatedISO8061Date)(identifier.accessPolicy.expiresOn) : "",
                            permissions: identifier.accessPolicy.permissions,
                            startsOn: identifier.accessPolicy.startsOn ? (0, _utils.truncatedISO8061Date)(identifier.accessPolicy.startsOn) : ""
                          },
                          id: identifier.id
                        });
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }

                    _context9.next = 9;
                    return this.containerContext.setAccessPolicy(Object.assign({
                      abortSignal: options.abortSignal,
                      access: access,
                      containerAcl: acl,
                      leaseAccessConditions: options.conditions,
                      modifiedAccessConditions: options.conditions
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 9:
                    return _context9.abrupt("return", _context9.sent);

                  case 12:
                    _context9.prev = 12;
                    _context9.t0 = _context9["catch"](3);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context9.t0.message
                    });
                    throw _context9.t0;

                  case 16:
                    _context9.prev = 16;
                    span.end();
                    return _context9.finish(16);

                  case 19:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9, this, [[3, 12, 16, 19]]);
          }));

          function setAccessPolicy(_x2, _x3) {
            return _setAccessPolicy.apply(this, arguments);
          }

          return setAccessPolicy;
        }()
        /**
         * Get a {@link BlobLeaseClient} that manages leases on the container.
         *
         * @param proposeLeaseId - Initial proposed lease Id.
         * @returns A new BlobLeaseClient object for managing leases on the container.
         */

      }, {
        key: "getBlobLeaseClient",
        value: function getBlobLeaseClient(proposeLeaseId) {
          return new _BlobLeaseClient.BlobLeaseClient(this, proposeLeaseId);
        }
        /**
         * Creates a new block blob, or updates the content of an existing block blob.
         *
         * Updating an existing block blob overwrites any existing metadata on the blob.
         * Partial updates are not supported; the content of the existing blob is
         * overwritten with the new content. To perform a partial update of a block blob's,
         * use {@link BlockBlobClient.stageBlock} and {@link BlockBlobClient.commitBlockList}.
         *
         * This is a non-parallel uploading method, please use {@link BlockBlobClient.uploadFile},
         * {@link BlockBlobClient.uploadStream} or {@link BlockBlobClient.uploadBrowserData} for better
         * performance with concurrency uploading.
         *
         * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
         *
         * @param blobName - Name of the block blob to create or update.
         * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function
         *                               which returns a new Readable stream whose offset is from data source beginning.
         * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
         *                               string including non non-Base64/Hex-encoded characters.
         * @param options - Options to configure the Block Blob Upload operation.
         * @returns Block Blob upload response data and the corresponding BlockBlobClient instance.
         */

      }, {
        key: "uploadBlockBlob",
        value: function () {
          var _uploadBlockBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(blobName, body, contentLength) {
            var options,
                _createSpan10,
                span,
                updatedOptions,
                blockBlobClient,
                response,
                _args10 = arguments;

            return _regeneratorRuntime().wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    options = _args10.length > 3 && _args10[3] !== undefined ? _args10[3] : {};
                    _createSpan10 = (0, _tracing.createSpan)("ContainerClient-uploadBlockBlob", options), span = _createSpan10.span, updatedOptions = _createSpan10.updatedOptions;
                    _context10.prev = 2;
                    blockBlobClient = this.getBlockBlobClient(blobName);
                    _context10.next = 6;
                    return blockBlobClient.upload(body, contentLength, updatedOptions);

                  case 6:
                    response = _context10.sent;
                    return _context10.abrupt("return", {
                      blockBlobClient: blockBlobClient,
                      response: response
                    });

                  case 10:
                    _context10.prev = 10;
                    _context10.t0 = _context10["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context10.t0.message
                    });
                    throw _context10.t0;

                  case 14:
                    _context10.prev = 14;
                    span.end();
                    return _context10.finish(14);

                  case 17:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10, this, [[2, 10, 14, 17]]);
          }));

          function uploadBlockBlob(_x4, _x5, _x6) {
            return _uploadBlockBlob.apply(this, arguments);
          }

          return uploadBlockBlob;
        }()
        /**
         * Marks the specified blob or snapshot for deletion. The blob is later deleted
         * during garbage collection. Note that in order to delete a blob, you must delete
         * all of its snapshots. You can delete both at the same time with the Delete
         * Blob operation.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
         *
         * @param blobName -
         * @param options - Options to Blob Delete operation.
         * @returns Block blob deletion response data.
         */

      }, {
        key: "deleteBlob",
        value: function () {
          var _deleteBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(blobName) {
            var options,
                _createSpan11,
                span,
                updatedOptions,
                blobClient,
                _args11 = arguments;

            return _regeneratorRuntime().wrap(function _callee11$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    options = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};
                    _createSpan11 = (0, _tracing.createSpan)("ContainerClient-deleteBlob", options), span = _createSpan11.span, updatedOptions = _createSpan11.updatedOptions;
                    _context11.prev = 2;
                    blobClient = this.getBlobClient(blobName);

                    if (options.versionId) {
                      blobClient = blobClient.withVersion(options.versionId);
                    }

                    _context11.next = 7;
                    return blobClient.delete(updatedOptions);

                  case 7:
                    return _context11.abrupt("return", _context11.sent);

                  case 10:
                    _context11.prev = 10;
                    _context11.t0 = _context11["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context11.t0.message
                    });
                    throw _context11.t0;

                  case 14:
                    _context11.prev = 14;
                    span.end();
                    return _context11.finish(14);

                  case 17:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee11, this, [[2, 10, 14, 17]]);
          }));

          function deleteBlob(_x7) {
            return _deleteBlob.apply(this, arguments);
          }

          return deleteBlob;
        }()
        /**
         * listBlobFlatSegment returns a single segment of blobs starting from the
         * specified Marker. Use an empty Marker to start enumeration from the beginning.
         * After getting a segment, process it, and then call listBlobsFlatSegment again
         * (passing the the previously-returned Marker) to get the next segment.
         * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs
         *
         * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
         * @param options - Options to Container List Blob Flat Segment operation.
         */

      }, {
        key: "listBlobFlatSegment",
        value: function () {
          var _listBlobFlatSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(marker) {
            var options,
                _createSpan12,
                span,
                updatedOptions,
                response,
                wrappedResponse,
                _args12 = arguments;

            return _regeneratorRuntime().wrap(function _callee12$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    options = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};
                    _createSpan12 = (0, _tracing.createSpan)("ContainerClient-listBlobFlatSegment", options), span = _createSpan12.span, updatedOptions = _createSpan12.updatedOptions;
                    _context12.prev = 2;
                    _context12.next = 5;
                    return this.containerContext.listBlobFlatSegment(Object.assign(Object.assign({
                      marker: marker
                    }, options), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    response = _context12.sent;
                    response.segment.blobItems = [];

                    if (response.segment["Blob"] !== undefined) {
                      response.segment.blobItems = (0, _utils.ProcessBlobItems)(response.segment["Blob"]);
                    }

                    wrappedResponse = Object.assign(Object.assign({}, response), {
                      _response: Object.assign(Object.assign({}, response._response), {
                        parsedBody: (0, _utils.ConvertInternalResponseOfListBlobFlat)(response._response.parsedBody)
                      }),
                      segment: Object.assign(Object.assign({}, response.segment), {
                        blobItems: response.segment.blobItems.map(function (blobItemInteral) {
                          var blobItem = Object.assign(Object.assign({}, blobItemInteral), {
                            name: (0, _utils.BlobNameToString)(blobItemInteral.name),
                            tags: (0, _utils.toTags)(blobItemInteral.blobTags),
                            objectReplicationSourceProperties: (0, _utils.parseObjectReplicationRecord)(blobItemInteral.objectReplicationMetadata)
                          });
                          return blobItem;
                        })
                      })
                    });
                    return _context12.abrupt("return", wrappedResponse);

                  case 12:
                    _context12.prev = 12;
                    _context12.t0 = _context12["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context12.t0.message
                    });
                    throw _context12.t0;

                  case 16:
                    _context12.prev = 16;
                    span.end();
                    return _context12.finish(16);

                  case 19:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee12, this, [[2, 12, 16, 19]]);
          }));

          function listBlobFlatSegment(_x8) {
            return _listBlobFlatSegment.apply(this, arguments);
          }

          return listBlobFlatSegment;
        }()
        /**
         * listBlobHierarchySegment returns a single segment of blobs starting from
         * the specified Marker. Use an empty Marker to start enumeration from the
         * beginning. After getting a segment, process it, and then call listBlobsHierarchicalSegment
         * again (passing the the previously-returned Marker) to get the next segment.
         * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs
         *
         * @param delimiter - The character or string used to define the virtual hierarchy
         * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
         * @param options - Options to Container List Blob Hierarchy Segment operation.
         */

      }, {
        key: "listBlobHierarchySegment",
        value: function () {
          var _listBlobHierarchySegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(delimiter, marker) {
            var options,
                _a,
                _createSpan13,
                span,
                updatedOptions,
                response,
                wrappedResponse,
                _args13 = arguments;

            return _regeneratorRuntime().wrap(function _callee13$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    options = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : {};
                    _createSpan13 = (0, _tracing.createSpan)("ContainerClient-listBlobHierarchySegment", options), span = _createSpan13.span, updatedOptions = _createSpan13.updatedOptions;
                    _context13.prev = 2;
                    _context13.next = 5;
                    return this.containerContext.listBlobHierarchySegment(delimiter, Object.assign(Object.assign({
                      marker: marker
                    }, options), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    response = _context13.sent;
                    response.segment.blobItems = [];

                    if (response.segment["Blob"] !== undefined) {
                      response.segment.blobItems = (0, _utils.ProcessBlobItems)(response.segment["Blob"]);
                    }

                    response.segment.blobPrefixes = [];

                    if (response.segment["BlobPrefix"] !== undefined) {
                      response.segment.blobPrefixes = (0, _utils.ProcessBlobPrefixes)(response.segment["BlobPrefix"]);
                    }

                    wrappedResponse = Object.assign(Object.assign({}, response), {
                      _response: Object.assign(Object.assign({}, response._response), {
                        parsedBody: (0, _utils.ConvertInternalResponseOfListBlobHierarchy)(response._response.parsedBody)
                      }),
                      segment: Object.assign(Object.assign({}, response.segment), {
                        blobItems: response.segment.blobItems.map(function (blobItemInteral) {
                          var blobItem = Object.assign(Object.assign({}, blobItemInteral), {
                            name: (0, _utils.BlobNameToString)(blobItemInteral.name),
                            tags: (0, _utils.toTags)(blobItemInteral.blobTags),
                            objectReplicationSourceProperties: (0, _utils.parseObjectReplicationRecord)(blobItemInteral.objectReplicationMetadata)
                          });
                          return blobItem;
                        }),
                        blobPrefixes: (_a = response.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map(function (blobPrefixInternal) {
                          var blobPrefix = {
                            name: (0, _utils.BlobNameToString)(blobPrefixInternal.name)
                          };
                          return blobPrefix;
                        })
                      })
                    });
                    return _context13.abrupt("return", wrappedResponse);

                  case 14:
                    _context13.prev = 14;
                    _context13.t0 = _context13["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context13.t0.message
                    });
                    throw _context13.t0;

                  case 18:
                    _context13.prev = 18;
                    span.end();
                    return _context13.finish(18);

                  case 21:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee13, this, [[2, 14, 18, 21]]);
          }));

          function listBlobHierarchySegment(_x9, _x10) {
            return _listBlobHierarchySegment.apply(this, arguments);
          }

          return listBlobHierarchySegment;
        }()
        /**
         * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse
         *
         * @param marker - A string value that identifies the portion of
         *                          the list of blobs to be returned with the next listing operation. The
         *                          operation returns the ContinuationToken value within the response body if the
         *                          listing operation did not return all blobs remaining to be listed
         *                          with the current page. The ContinuationToken value can be used as the value for
         *                          the marker parameter in a subsequent call to request the next page of list
         *                          items. The marker value is opaque to the client.
         * @param options - Options to list blobs operation.
         */

      }, {
        key: "listSegments",
        value: function listSegments(marker) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function listSegments_1() {
            var listBlobsFlatSegmentResponse;
            return _regeneratorRuntime().wrap(function listSegments_1$(_context14) {
              while (1) {
                switch (_context14.prev = _context14.next) {
                  case 0:
                    if (!(!!marker || marker === undefined)) {
                      _context14.next = 14;
                      break;
                    }

                  case 1:
                    _context14.next = 3;
                    return (0, _tslib.__await)(this.listBlobFlatSegment(marker, options));

                  case 3:
                    listBlobsFlatSegmentResponse = _context14.sent;
                    marker = listBlobsFlatSegmentResponse.continuationToken;
                    _context14.t0 = _tslib.__await;
                    _context14.next = 8;
                    return (0, _tslib.__await)(listBlobsFlatSegmentResponse);

                  case 8:
                    _context14.t1 = _context14.sent;
                    _context14.next = 11;
                    return (0, _context14.t0)(_context14.t1);

                  case 11:
                    _context14.next = 13;
                    return _context14.sent;

                  case 13:
                    if (marker) {
                      _context14.next = 1;
                      break;
                    }

                  case 14:
                  case "end":
                    return _context14.stop();
                }
              }
            }, listSegments_1, this);
          }));
        }
        /**
         * Returns an AsyncIterableIterator of {@link BlobItem} objects
         *
         * @param options - Options to list blobs operation.
         */

      }, {
        key: "listItems",
        value: function listItems() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function listItems_1() {
            var e_1, _a, marker, _b, _c, listBlobsFlatSegmentResponse;

            return _regeneratorRuntime().wrap(function listItems_1$(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    _context15.prev = 0;
                    _b = (0, _tslib.__asyncValues)(this.listSegments(marker, options));

                  case 2:
                    _context15.next = 4;
                    return (0, _tslib.__await)(_b.next());

                  case 4:
                    _c = _context15.sent;

                    if (_c.done) {
                      _context15.next = 14;
                      break;
                    }

                    listBlobsFlatSegmentResponse = _c.value;
                    _context15.t0 = _tslib.__await;
                    return _context15.delegateYield((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)(listBlobsFlatSegmentResponse.segment.blobItems)), "t1", 9);

                  case 9:
                    _context15.t2 = _context15.t1;
                    _context15.next = 12;
                    return (0, _context15.t0)(_context15.t2);

                  case 12:
                    _context15.next = 2;
                    break;

                  case 14:
                    _context15.next = 19;
                    break;

                  case 16:
                    _context15.prev = 16;
                    _context15.t3 = _context15["catch"](0);
                    e_1 = {
                      error: _context15.t3
                    };

                  case 19:
                    _context15.prev = 19;
                    _context15.prev = 20;

                    if (!(_c && !_c.done && (_a = _b.return))) {
                      _context15.next = 24;
                      break;
                    }

                    _context15.next = 24;
                    return (0, _tslib.__await)(_a.call(_b));

                  case 24:
                    _context15.prev = 24;

                    if (!e_1) {
                      _context15.next = 27;
                      break;
                    }

                    throw e_1.error;

                  case 27:
                    return _context15.finish(24);

                  case 28:
                    return _context15.finish(19);

                  case 29:
                  case "end":
                    return _context15.stop();
                }
              }
            }, listItems_1, this, [[0, 16, 19, 29], [20,, 24, 28]]);
          }));
        }
        /**
         * Returns an async iterable iterator to list all the blobs
         * under the specified account.
         *
         * .byPage() returns an async iterable iterator to list the blobs in pages.
         *
         * Example using `for await` syntax:
         *
         * ```js
         * // Get the containerClient before you run these snippets,
         * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>");`
         * let i = 1;
         * for await (const blob of containerClient.listBlobsFlat()) {
         *   console.log(`Blob ${i++}: ${blob.name}`);
         * }
         * ```
         *
         * Example using `iter.next()`:
         *
         * ```js
         * let i = 1;
         * let iter = containerClient.listBlobsFlat();
         * let blobItem = await iter.next();
         * while (!blobItem.done) {
         *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
         *   blobItem = await iter.next();
         * }
         * ```
         *
         * Example using `byPage()`:
         *
         * ```js
         * // passing optional maxPageSize in the page settings
         * let i = 1;
         * for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {
         *   for (const blob of response.segment.blobItems) {
         *     console.log(`Blob ${i++}: ${blob.name}`);
         *   }
         * }
         * ```
         *
         * Example using paging with a marker:
         *
         * ```js
         * let i = 1;
         * let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });
         * let response = (await iterator.next()).value;
         *
         * // Prints 2 blob names
         * for (const blob of response.segment.blobItems) {
         *   console.log(`Blob ${i++}: ${blob.name}`);
         * }
         *
         * // Gets next marker
         * let marker = response.continuationToken;
         *
         * // Passing next marker as continuationToken
         *
         * iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });
         * response = (await iterator.next()).value;
         *
         * // Prints 10 blob names
         * for (const blob of response.segment.blobItems) {
         *   console.log(`Blob ${i++}: ${blob.name}`);
         * }
         * ```
         *
         * @param options - Options to list blobs.
         * @returns An asyncIterableIterator that supports paging.
         */

      }, {
        key: "listBlobsFlat",
        value: function listBlobsFlat() {
          var _this2 = this,
              _ref;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var include = [];

          if (options.includeCopy) {
            include.push("copy");
          }

          if (options.includeDeleted) {
            include.push("deleted");
          }

          if (options.includeMetadata) {
            include.push("metadata");
          }

          if (options.includeSnapshots) {
            include.push("snapshots");
          }

          if (options.includeVersions) {
            include.push("versions");
          }

          if (options.includeUncommitedBlobs) {
            include.push("uncommittedblobs");
          }

          if (options.includeTags) {
            include.push("tags");
          }

          if (options.includeDeletedWithVersions) {
            include.push("deletedwithversions");
          }

          if (options.includeImmutabilityPolicy) {
            include.push("immutabilitypolicy");
          }

          if (options.includeLegalHold) {
            include.push("legalhold");
          }

          if (options.prefix === "") {
            options.prefix = undefined;
          }

          var updatedOptions = Object.assign(Object.assign({}, options), include.length > 0 ? {
            include: include
          } : {}); // AsyncIterableIterator to iterate over blobs

          var iter = this.listItems(updatedOptions);
          return _ref = {
            /**
             * The next method, part of the iteration protocol
             */
            next: function next() {
              return iter.next();
            }
          }, _defineProperty(_ref, Symbol.asyncIterator, function () {
            return this;
          }), _defineProperty(_ref, "byPage", function byPage() {
            var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return _this2.listSegments(settings.continuationToken, Object.assign({
              maxPageSize: settings.maxPageSize
            }, updatedOptions));
          }), _ref;
        }
        /**
         * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse
         *
         * @param delimiter - The character or string used to define the virtual hierarchy
         * @param marker - A string value that identifies the portion of
         *                          the list of blobs to be returned with the next listing operation. The
         *                          operation returns the ContinuationToken value within the response body if the
         *                          listing operation did not return all blobs remaining to be listed
         *                          with the current page. The ContinuationToken value can be used as the value for
         *                          the marker parameter in a subsequent call to request the next page of list
         *                          items. The marker value is opaque to the client.
         * @param options - Options to list blobs operation.
         */

      }, {
        key: "listHierarchySegments",
        value: function listHierarchySegments(delimiter, marker) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function listHierarchySegments_1() {
            var listBlobsHierarchySegmentResponse;
            return _regeneratorRuntime().wrap(function listHierarchySegments_1$(_context16) {
              while (1) {
                switch (_context16.prev = _context16.next) {
                  case 0:
                    if (!(!!marker || marker === undefined)) {
                      _context16.next = 14;
                      break;
                    }

                  case 1:
                    _context16.next = 3;
                    return (0, _tslib.__await)(this.listBlobHierarchySegment(delimiter, marker, options));

                  case 3:
                    listBlobsHierarchySegmentResponse = _context16.sent;
                    marker = listBlobsHierarchySegmentResponse.continuationToken;
                    _context16.t0 = _tslib.__await;
                    _context16.next = 8;
                    return (0, _tslib.__await)(listBlobsHierarchySegmentResponse);

                  case 8:
                    _context16.t1 = _context16.sent;
                    _context16.next = 11;
                    return (0, _context16.t0)(_context16.t1);

                  case 11:
                    _context16.next = 13;
                    return _context16.sent;

                  case 13:
                    if (marker) {
                      _context16.next = 1;
                      break;
                    }

                  case 14:
                  case "end":
                    return _context16.stop();
                }
              }
            }, listHierarchySegments_1, this);
          }));
        }
        /**
         * Returns an AsyncIterableIterator for {@link BlobPrefix} and {@link BlobItem} objects.
         *
         * @param delimiter - The character or string used to define the virtual hierarchy
         * @param options - Options to list blobs operation.
         */

      }, {
        key: "listItemsByHierarchy",
        value: function listItemsByHierarchy(delimiter) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function listItemsByHierarchy_1() {
            var e_2, _a, marker, _b, _c, listBlobsHierarchySegmentResponse, segment, _iterator3, _step3, prefix, _iterator4, _step4, blob;

            return _regeneratorRuntime().wrap(function listItemsByHierarchy_1$(_context17) {
              while (1) {
                switch (_context17.prev = _context17.next) {
                  case 0:
                    _context17.prev = 0;
                    _b = (0, _tslib.__asyncValues)(this.listHierarchySegments(delimiter, marker, options));

                  case 2:
                    _context17.next = 4;
                    return (0, _tslib.__await)(_b.next());

                  case 4:
                    _c = _context17.sent;

                    if (_c.done) {
                      _context17.next = 49;
                      break;
                    }

                    listBlobsHierarchySegmentResponse = _c.value;
                    segment = listBlobsHierarchySegmentResponse.segment;

                    if (!segment.blobPrefixes) {
                      _context17.next = 28;
                      break;
                    }

                    _iterator3 = _createForOfIteratorHelper(segment.blobPrefixes);
                    _context17.prev = 10;

                    _iterator3.s();

                  case 12:
                    if ((_step3 = _iterator3.n()).done) {
                      _context17.next = 20;
                      break;
                    }

                    prefix = _step3.value;
                    _context17.next = 16;
                    return (0, _tslib.__await)(Object.assign({
                      kind: "prefix"
                    }, prefix));

                  case 16:
                    _context17.next = 18;
                    return _context17.sent;

                  case 18:
                    _context17.next = 12;
                    break;

                  case 20:
                    _context17.next = 25;
                    break;

                  case 22:
                    _context17.prev = 22;
                    _context17.t0 = _context17["catch"](10);

                    _iterator3.e(_context17.t0);

                  case 25:
                    _context17.prev = 25;

                    _iterator3.f();

                    return _context17.finish(25);

                  case 28:
                    _iterator4 = _createForOfIteratorHelper(segment.blobItems);
                    _context17.prev = 29;

                    _iterator4.s();

                  case 31:
                    if ((_step4 = _iterator4.n()).done) {
                      _context17.next = 39;
                      break;
                    }

                    blob = _step4.value;
                    _context17.next = 35;
                    return (0, _tslib.__await)(Object.assign({
                      kind: "blob"
                    }, blob));

                  case 35:
                    _context17.next = 37;
                    return _context17.sent;

                  case 37:
                    _context17.next = 31;
                    break;

                  case 39:
                    _context17.next = 44;
                    break;

                  case 41:
                    _context17.prev = 41;
                    _context17.t1 = _context17["catch"](29);

                    _iterator4.e(_context17.t1);

                  case 44:
                    _context17.prev = 44;

                    _iterator4.f();

                    return _context17.finish(44);

                  case 47:
                    _context17.next = 2;
                    break;

                  case 49:
                    _context17.next = 54;
                    break;

                  case 51:
                    _context17.prev = 51;
                    _context17.t2 = _context17["catch"](0);
                    e_2 = {
                      error: _context17.t2
                    };

                  case 54:
                    _context17.prev = 54;
                    _context17.prev = 55;

                    if (!(_c && !_c.done && (_a = _b.return))) {
                      _context17.next = 59;
                      break;
                    }

                    _context17.next = 59;
                    return (0, _tslib.__await)(_a.call(_b));

                  case 59:
                    _context17.prev = 59;

                    if (!e_2) {
                      _context17.next = 62;
                      break;
                    }

                    throw e_2.error;

                  case 62:
                    return _context17.finish(59);

                  case 63:
                    return _context17.finish(54);

                  case 64:
                  case "end":
                    return _context17.stop();
                }
              }
            }, listItemsByHierarchy_1, this, [[0, 51, 54, 64], [10, 22, 25, 28], [29, 41, 44, 47], [55,, 59, 63]]);
          }));
        }
        /**
         * Returns an async iterable iterator to list all the blobs by hierarchy.
         * under the specified account.
         *
         * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.
         *
         * Example using `for await` syntax:
         *
         * ```js
         * for await (const item of containerClient.listBlobsByHierarchy("/")) {
         *   if (item.kind === "prefix") {
         *     console.log(`\tBlobPrefix: ${item.name}`);
         *   } else {
         *     console.log(`\tBlobItem: name - ${item.name}`);
         *   }
         * }
         * ```
         *
         * Example using `iter.next()`:
         *
         * ```js
         * let iter = containerClient.listBlobsByHierarchy("/", { prefix: "prefix1/" });
         * let entity = await iter.next();
         * while (!entity.done) {
         *   let item = entity.value;
         *   if (item.kind === "prefix") {
         *     console.log(`\tBlobPrefix: ${item.name}`);
         *   } else {
         *     console.log(`\tBlobItem: name - ${item.name}`);
         *   }
         *   entity = await iter.next();
         * }
         * ```
         *
         * Example using `byPage()`:
         *
         * ```js
         * console.log("Listing blobs by hierarchy by page");
         * for await (const response of containerClient.listBlobsByHierarchy("/").byPage()) {
         *   const segment = response.segment;
         *   if (segment.blobPrefixes) {
         *     for (const prefix of segment.blobPrefixes) {
         *       console.log(`\tBlobPrefix: ${prefix.name}`);
         *     }
         *   }
         *   for (const blob of response.segment.blobItems) {
         *     console.log(`\tBlobItem: name - ${blob.name}`);
         *   }
         * }
         * ```
         *
         * Example using paging with a max page size:
         *
         * ```js
         * console.log("Listing blobs by hierarchy by page, specifying a prefix and a max page size");
         *
         * let i = 1;
         * for await (const response of containerClient
         *   .listBlobsByHierarchy("/", { prefix: "prefix2/sub1/" })
         *   .byPage({ maxPageSize: 2 })) {
         *   console.log(`Page ${i++}`);
         *   const segment = response.segment;
         *
         *   if (segment.blobPrefixes) {
         *     for (const prefix of segment.blobPrefixes) {
         *       console.log(`\tBlobPrefix: ${prefix.name}`);
         *     }
         *   }
         *
         *   for (const blob of response.segment.blobItems) {
         *     console.log(`\tBlobItem: name - ${blob.name}`);
         *   }
         * }
         * ```
         *
         * @param delimiter - The character or string used to define the virtual hierarchy
         * @param options - Options to list blobs operation.
         */

      }, {
        key: "listBlobsByHierarchy",
        value: function listBlobsByHierarchy(delimiter) {
          var _this3 = this,
              _ref2;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          if (delimiter === "") {
            throw new RangeError("delimiter should contain one or more characters");
          }

          var include = [];

          if (options.includeCopy) {
            include.push("copy");
          }

          if (options.includeDeleted) {
            include.push("deleted");
          }

          if (options.includeMetadata) {
            include.push("metadata");
          }

          if (options.includeSnapshots) {
            include.push("snapshots");
          }

          if (options.includeVersions) {
            include.push("versions");
          }

          if (options.includeUncommitedBlobs) {
            include.push("uncommittedblobs");
          }

          if (options.includeTags) {
            include.push("tags");
          }

          if (options.includeDeletedWithVersions) {
            include.push("deletedwithversions");
          }

          if (options.includeImmutabilityPolicy) {
            include.push("immutabilitypolicy");
          }

          if (options.includeLegalHold) {
            include.push("legalhold");
          }

          if (options.prefix === "") {
            options.prefix = undefined;
          }

          var updatedOptions = Object.assign(Object.assign({}, options), include.length > 0 ? {
            include: include
          } : {}); // AsyncIterableIterator to iterate over blob prefixes and blobs

          var iter = this.listItemsByHierarchy(delimiter, updatedOptions);
          return _ref2 = {
            /**
             * The next method, part of the iteration protocol
             */
            next: function next() {
              return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
                return _regeneratorRuntime().wrap(function _callee14$(_context18) {
                  while (1) {
                    switch (_context18.prev = _context18.next) {
                      case 0:
                        return _context18.abrupt("return", iter.next());

                      case 1:
                      case "end":
                        return _context18.stop();
                    }
                  }
                }, _callee14);
              }))();
            }
          }, _defineProperty(_ref2, Symbol.asyncIterator, function () {
            return this;
          }), _defineProperty(_ref2, "byPage", function byPage() {
            var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return _this3.listHierarchySegments(delimiter, settings.continuationToken, Object.assign({
              maxPageSize: settings.maxPageSize
            }, updatedOptions));
          }), _ref2;
        }
        /**
         * The Filter Blobs operation enables callers to list blobs in the container whose tags
         * match a given search expression.
         *
         * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.
         *                                        The given expression must evaluate to true for a blob to be returned in the results.
         *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
         *                                        however, only a subset of the OData filter syntax is supported in the Blob service.
         * @param marker - A string value that identifies the portion of
         *                          the list of blobs to be returned with the next listing operation. The
         *                          operation returns the continuationToken value within the response body if the
         *                          listing operation did not return all blobs remaining to be listed
         *                          with the current page. The continuationToken value can be used as the value for
         *                          the marker parameter in a subsequent call to request the next page of list
         *                          items. The marker value is opaque to the client.
         * @param options - Options to find blobs by tags.
         */

      }, {
        key: "findBlobsByTagsSegment",
        value: function () {
          var _findBlobsByTagsSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(tagFilterSqlExpression, marker) {
            var options,
                _createSpan14,
                span,
                updatedOptions,
                response,
                wrappedResponse,
                _args19 = arguments;

            return _regeneratorRuntime().wrap(function _callee15$(_context19) {
              while (1) {
                switch (_context19.prev = _context19.next) {
                  case 0:
                    options = _args19.length > 2 && _args19[2] !== undefined ? _args19[2] : {};
                    _createSpan14 = (0, _tracing.createSpan)("ContainerClient-findBlobsByTagsSegment", options), span = _createSpan14.span, updatedOptions = _createSpan14.updatedOptions;
                    _context19.prev = 2;
                    _context19.next = 5;
                    return this.containerContext.filterBlobs(Object.assign({
                      abortSignal: options.abortSignal,
                      where: tagFilterSqlExpression,
                      marker: marker,
                      maxPageSize: options.maxPageSize
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    response = _context19.sent;
                    wrappedResponse = Object.assign(Object.assign({}, response), {
                      _response: response._response,
                      blobs: response.blobs.map(function (blob) {
                        var _a;

                        var tagValue = "";

                        if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) {
                          tagValue = blob.tags.blobTagSet[0].value;
                        }

                        return Object.assign(Object.assign({}, blob), {
                          tags: (0, _utils.toTags)(blob.tags),
                          tagValue: tagValue
                        });
                      })
                    });
                    return _context19.abrupt("return", wrappedResponse);

                  case 10:
                    _context19.prev = 10;
                    _context19.t0 = _context19["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context19.t0.message
                    });
                    throw _context19.t0;

                  case 14:
                    _context19.prev = 14;
                    span.end();
                    return _context19.finish(14);

                  case 17:
                  case "end":
                    return _context19.stop();
                }
              }
            }, _callee15, this, [[2, 10, 14, 17]]);
          }));

          function findBlobsByTagsSegment(_x11, _x12) {
            return _findBlobsByTagsSegment.apply(this, arguments);
          }

          return findBlobsByTagsSegment;
        }()
        /**
         * Returns an AsyncIterableIterator for ContainerFindBlobsByTagsSegmentResponse.
         *
         * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
         *                                         The given expression must evaluate to true for a blob to be returned in the results.
         *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
         *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
         * @param marker - A string value that identifies the portion of
         *                          the list of blobs to be returned with the next listing operation. The
         *                          operation returns the continuationToken value within the response body if the
         *                          listing operation did not return all blobs remaining to be listed
         *                          with the current page. The continuationToken value can be used as the value for
         *                          the marker parameter in a subsequent call to request the next page of list
         *                          items. The marker value is opaque to the client.
         * @param options - Options to find blobs by tags.
         */

      }, {
        key: "findBlobsByTagsSegments",
        value: function findBlobsByTagsSegments(tagFilterSqlExpression, marker) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function findBlobsByTagsSegments_1() {
            var response;
            return _regeneratorRuntime().wrap(function findBlobsByTagsSegments_1$(_context20) {
              while (1) {
                switch (_context20.prev = _context20.next) {
                  case 0:
                    if (!(!!marker || marker === undefined)) {
                      _context20.next = 11;
                      break;
                    }

                  case 1:
                    _context20.next = 3;
                    return (0, _tslib.__await)(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));

                  case 3:
                    response = _context20.sent;
                    response.blobs = response.blobs || [];
                    marker = response.continuationToken;
                    _context20.next = 8;
                    return (0, _tslib.__await)(response);

                  case 8:
                    _context20.next = 10;
                    return _context20.sent;

                  case 10:
                    if (marker) {
                      _context20.next = 1;
                      break;
                    }

                  case 11:
                  case "end":
                    return _context20.stop();
                }
              }
            }, findBlobsByTagsSegments_1, this);
          }));
        }
        /**
         * Returns an AsyncIterableIterator for blobs.
         *
         * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
         *                                         The given expression must evaluate to true for a blob to be returned in the results.
         *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
         *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
         * @param options - Options to findBlobsByTagsItems.
         */

      }, {
        key: "findBlobsByTagsItems",
        value: function findBlobsByTagsItems(tagFilterSqlExpression) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function findBlobsByTagsItems_1() {
            var e_3, _a, marker, _b, _c, segment;

            return _regeneratorRuntime().wrap(function findBlobsByTagsItems_1$(_context21) {
              while (1) {
                switch (_context21.prev = _context21.next) {
                  case 0:
                    _context21.prev = 0;
                    _b = (0, _tslib.__asyncValues)(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options));

                  case 2:
                    _context21.next = 4;
                    return (0, _tslib.__await)(_b.next());

                  case 4:
                    _c = _context21.sent;

                    if (_c.done) {
                      _context21.next = 14;
                      break;
                    }

                    segment = _c.value;
                    _context21.t0 = _tslib.__await;
                    return _context21.delegateYield((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)(segment.blobs)), "t1", 9);

                  case 9:
                    _context21.t2 = _context21.t1;
                    _context21.next = 12;
                    return (0, _context21.t0)(_context21.t2);

                  case 12:
                    _context21.next = 2;
                    break;

                  case 14:
                    _context21.next = 19;
                    break;

                  case 16:
                    _context21.prev = 16;
                    _context21.t3 = _context21["catch"](0);
                    e_3 = {
                      error: _context21.t3
                    };

                  case 19:
                    _context21.prev = 19;
                    _context21.prev = 20;

                    if (!(_c && !_c.done && (_a = _b.return))) {
                      _context21.next = 24;
                      break;
                    }

                    _context21.next = 24;
                    return (0, _tslib.__await)(_a.call(_b));

                  case 24:
                    _context21.prev = 24;

                    if (!e_3) {
                      _context21.next = 27;
                      break;
                    }

                    throw e_3.error;

                  case 27:
                    return _context21.finish(24);

                  case 28:
                    return _context21.finish(19);

                  case 29:
                  case "end":
                    return _context21.stop();
                }
              }
            }, findBlobsByTagsItems_1, this, [[0, 16, 19, 29], [20,, 24, 28]]);
          }));
        }
        /**
         * Returns an async iterable iterator to find all blobs with specified tag
         * under the specified container.
         *
         * .byPage() returns an async iterable iterator to list the blobs in pages.
         *
         * Example using `for await` syntax:
         *
         * ```js
         * let i = 1;
         * for await (const blob of containerClient.findBlobsByTags("tagkey='tagvalue'")) {
         *   console.log(`Blob ${i++}: ${blob.name}`);
         * }
         * ```
         *
         * Example using `iter.next()`:
         *
         * ```js
         * let i = 1;
         * const iter = containerClient.findBlobsByTags("tagkey='tagvalue'");
         * let blobItem = await iter.next();
         * while (!blobItem.done) {
         *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
         *   blobItem = await iter.next();
         * }
         * ```
         *
         * Example using `byPage()`:
         *
         * ```js
         * // passing optional maxPageSize in the page settings
         * let i = 1;
         * for await (const response of containerClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 20 })) {
         *   if (response.blobs) {
         *     for (const blob of response.blobs) {
         *       console.log(`Blob ${i++}: ${blob.name}`);
         *     }
         *   }
         * }
         * ```
         *
         * Example using paging with a marker:
         *
         * ```js
         * let i = 1;
         * let iterator = containerClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 2 });
         * let response = (await iterator.next()).value;
         *
         * // Prints 2 blob names
         * if (response.blobs) {
         *   for (const blob of response.blobs) {
         *     console.log(`Blob ${i++}: ${blob.name}`);
         *   }
         * }
         *
         * // Gets next marker
         * let marker = response.continuationToken;
         * // Passing next marker as continuationToken
         * iterator = containerClient
         *   .findBlobsByTags("tagkey='tagvalue'")
         *   .byPage({ continuationToken: marker, maxPageSize: 10 });
         * response = (await iterator.next()).value;
         *
         * // Prints blob names
         * if (response.blobs) {
         *   for (const blob of response.blobs) {
         *      console.log(`Blob ${i++}: ${blob.name}`);
         *   }
         * }
         * ```
         *
         * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
         *                                         The given expression must evaluate to true for a blob to be returned in the results.
         *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
         *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
         * @param options - Options to find blobs by tags.
         */

      }, {
        key: "findBlobsByTags",
        value: function findBlobsByTags(tagFilterSqlExpression) {
          var _this4 = this,
              _ref3;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // AsyncIterableIterator to iterate over blobs

          var listSegmentOptions = Object.assign({}, options);
          var iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
          return _ref3 = {
            /**
             * The next method, part of the iteration protocol
             */
            next: function next() {
              return iter.next();
            }
          }, _defineProperty(_ref3, Symbol.asyncIterator, function () {
            return this;
          }), _defineProperty(_ref3, "byPage", function byPage() {
            var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return _this4.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({
              maxPageSize: settings.maxPageSize
            }, listSegmentOptions));
          }), _ref3;
        }
      }, {
        key: "getContainerNameFromUrl",
        value: function getContainerNameFromUrl() {
          var containerName;

          try {
            //  URL may look like the following
            // "https://myaccount.blob.core.windows.net/mycontainer?sasString";
            // "https://myaccount.blob.core.windows.net/mycontainer";
            // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername`
            // http://localhost:10001/devstoreaccount1/containername
            var parsedUrl = _coreHttp.URLBuilder.parse(this.url);

            if (parsedUrl.getHost().split(".")[1] === "blob") {
              // "https://myaccount.blob.core.windows.net/containername".
              // "https://customdomain.com/containername".
              // .getPath() -> /containername
              containerName = parsedUrl.getPath().split("/")[1];
            } else if ((0, _utils.isIpEndpointStyle)(parsedUrl)) {
              // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername
              // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername
              // .getPath() -> /devstoreaccount1/containername
              containerName = parsedUrl.getPath().split("/")[2];
            } else {
              // "https://customdomain.com/containername".
              // .getPath() -> /containername
              containerName = parsedUrl.getPath().split("/")[1];
            } // decode the encoded containerName - to get all the special characters that might be present in it


            containerName = decodeURIComponent(containerName);

            if (!containerName) {
              throw new Error("Provided containerName is invalid.");
            }

            return containerName;
          } catch (error) {
            throw new Error("Unable to extract containerName with provided information.");
          }
        }
        /**
         * Only available for ContainerClient constructed with a shared key credential.
         *
         * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties
         * and parameters passed in. The SAS is signed by the shared key credential of the client.
         *
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
         *
         * @param options - Optional parameters.
         * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
         */

      }, {
        key: "generateSasUrl",
        value: function generateSasUrl(options) {
          var _this5 = this;

          return new Promise(function (resolve) {
            if (!(_this5.credential instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential)) {
              throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
            }

            var sas = (0, _BlobSASSignatureValues.generateBlobSASQueryParameters)(Object.assign({
              containerName: _this5._containerName
            }, options), _this5.credential).toString();
            resolve((0, _utils.appendToURLQuery)(_this5.url, sas));
          });
        }
        /**
         * Creates a BlobBatchClient object to conduct batch operations.
         *
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
         *
         * @returns A new BlobBatchClient object for this container.
         */

      }, {
        key: "getBlobBatchClient",
        value: function getBlobBatchClient() {
          return new _BlobBatchClient.BlobBatchClient(this.url, this.pipeline);
        }
      }]);

      return ContainerClient;
    }(_StorageClient2.StorageClient);

    exports.ContainerClient = ContainerClient;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "@azure/core-tracing": "../node_modules/@azure/core-tracing/dist-esm/src/index.js",
    "./credentials/AnonymousCredential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js",
    "./credentials/StorageSharedKeyCredential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js",
    "./generated/src/operations": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js",
    "./Pipeline": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js",
    "./StorageClient": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js",
    "./utils/tracing": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js",
    "./utils/utils.common": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js",
    "./sas/BlobSASSignatureValues": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js",
    "./BlobLeaseClient": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js",
    "./Clients": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js",
    "./BlobBatchClient": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js"
  }],
  "../node_modules/@azure/core-paging/dist-esm/src/models.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@azure/core-paging/dist-esm/src/getPagedAsyncIterator.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getPagedAsyncIterator = getPagedAsyncIterator;

    var _tslib = require("tslib");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }
    /**
     * returns an async iterator that iterates over results. It also has a `byPage`
     * method that returns pages of items at once.
     *
     * @param pagedResult - an object that specifies how to get pages.
     * @returns a paged async iterator that iterates over results.
     */


    function getPagedAsyncIterator(pagedResult) {
      var _ref2;

      var _a;

      var iter = getItemAsyncIterator(pagedResult);
      return _ref2 = {
        next: function next() {
          return iter.next();
        }
      }, _defineProperty(_ref2, Symbol.asyncIterator, function () {
        return this;
      }), _defineProperty(_ref2, "byPage", (_a = pagedResult === null || pagedResult === void 0 ? void 0 : pagedResult.byPage) !== null && _a !== void 0 ? _a : function (settings) {
        var _ref = settings !== null && settings !== void 0 ? settings : {},
            continuationToken = _ref.continuationToken,
            maxPageSize = _ref.maxPageSize;

        return getPageAsyncIterator(pagedResult, {
          pageLink: continuationToken,
          maxPageSize: maxPageSize
        });
      }), _ref2;
    }

    function getItemAsyncIterator(pagedResult) {
      return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function getItemAsyncIterator_1() {
        var e_1, _a, pages, firstVal, pages_1, pages_1_1, page;

        return _regeneratorRuntime().wrap(function getItemAsyncIterator_1$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                pages = getPageAsyncIterator(pagedResult);
                _context.next = 3;
                return (0, _tslib.__await)(pages.next());

              case 3:
                firstVal = _context.sent;

                if (Array.isArray(firstVal.value)) {
                  _context.next = 16;
                  break;
                }

                _context.next = 7;
                return (0, _tslib.__await)(firstVal.value);

              case 7:
                _context.next = 9;
                return _context.sent;

              case 9:
                _context.t0 = _tslib.__await;
                return _context.delegateYield((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)(pages)), "t1", 11);

              case 11:
                _context.t2 = _context.t1;
                _context.next = 14;
                return (0, _context.t0)(_context.t2);

              case 14:
                _context.next = 50;
                break;

              case 16:
                _context.t3 = _tslib.__await;
                return _context.delegateYield((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)(firstVal.value)), "t4", 18);

              case 18:
                _context.t5 = _context.t4;
                _context.next = 21;
                return (0, _context.t3)(_context.t5);

              case 21:
                _context.prev = 21;
                pages_1 = (0, _tslib.__asyncValues)(pages);

              case 23:
                _context.next = 25;
                return (0, _tslib.__await)(pages_1.next());

              case 25:
                pages_1_1 = _context.sent;

                if (pages_1_1.done) {
                  _context.next = 35;
                  break;
                }

                page = pages_1_1.value; // pages is of type `AsyncIterableIterator<TPage>` so `page` is of type `TPage`. In this branch,
                // it must be the case that `TPage = TElement[]`

                _context.t6 = _tslib.__await;
                return _context.delegateYield((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)(page)), "t7", 30);

              case 30:
                _context.t8 = _context.t7;
                _context.next = 33;
                return (0, _context.t6)(_context.t8);

              case 33:
                _context.next = 23;
                break;

              case 35:
                _context.next = 40;
                break;

              case 37:
                _context.prev = 37;
                _context.t9 = _context["catch"](21);
                e_1 = {
                  error: _context.t9
                };

              case 40:
                _context.prev = 40;
                _context.prev = 41;

                if (!(pages_1_1 && !pages_1_1.done && (_a = pages_1.return))) {
                  _context.next = 45;
                  break;
                }

                _context.next = 45;
                return (0, _tslib.__await)(_a.call(pages_1));

              case 45:
                _context.prev = 45;

                if (!e_1) {
                  _context.next = 48;
                  break;
                }

                throw e_1.error;

              case 48:
                return _context.finish(45);

              case 49:
                return _context.finish(40);

              case 50:
              case "end":
                return _context.stop();
            }
          }
        }, getItemAsyncIterator_1, null, [[21, 37, 40, 50], [41,, 45, 49]]);
      }));
    }

    function getPageAsyncIterator(pagedResult) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function getPageAsyncIterator_1() {
        var pageLink, maxPageSize, response;
        return _regeneratorRuntime().wrap(function getPageAsyncIterator_1$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                pageLink = options.pageLink, maxPageSize = options.maxPageSize;
                _context2.next = 3;
                return (0, _tslib.__await)(pagedResult.getPage(pageLink !== null && pageLink !== void 0 ? pageLink : pagedResult.firstPageLink, maxPageSize));

              case 3:
                response = _context2.sent;
                _context2.next = 6;
                return (0, _tslib.__await)(response.page);

              case 6:
                _context2.next = 8;
                return _context2.sent;

              case 8:
                if (!response.nextPageLink) {
                  _context2.next = 18;
                  break;
                }

                _context2.next = 11;
                return (0, _tslib.__await)(pagedResult.getPage(response.nextPageLink, maxPageSize));

              case 11:
                response = _context2.sent;
                _context2.next = 14;
                return (0, _tslib.__await)(response.page);

              case 14:
                _context2.next = 16;
                return _context2.sent;

              case 16:
                _context2.next = 8;
                break;

              case 18:
              case "end":
                return _context2.stop();
            }
          }
        }, getPageAsyncIterator_1);
      }));
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js"
  }],
  "../node_modules/@azure/core-paging/dist-esm/src/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _models = require("./models");

    Object.keys(_models).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _models[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _models[key];
        }
      });
    });

    var _getPagedAsyncIterator = require("./getPagedAsyncIterator");

    Object.keys(_getPagedAsyncIterator).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _getPagedAsyncIterator[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _getPagedAsyncIterator[key];
        }
      });
    });
  }, {
    "./models": "../node_modules/@azure/core-paging/dist-esm/src/models.js",
    "./getPagedAsyncIterator": "../node_modules/@azure/core-paging/dist-esm/src/getPagedAsyncIterator.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AccountSASPermissions = void 0;

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value
     * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the
     * values are set, this should be serialized with toString and set as the permissions field on an
     * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but
     * the order of the permissions is particular and this class guarantees correctness.
     */


    var AccountSASPermissions = /*#__PURE__*/function () {
      function AccountSASPermissions() {
        _classCallCheck(this, AccountSASPermissions);
        /**
         * Permission to read resources and list queues and tables granted.
         */


        this.read = false;
        /**
         * Permission to write resources granted.
         */

        this.write = false;
        /**
         * Permission to create blobs and files granted.
         */

        this.delete = false;
        /**
         * Permission to delete versions granted.
         */

        this.deleteVersion = false;
        /**
         * Permission to list blob containers, blobs, shares, directories, and files granted.
         */

        this.list = false;
        /**
         * Permission to add messages, table entities, and append to blobs granted.
         */

        this.add = false;
        /**
         * Permission to create blobs and files granted.
         */

        this.create = false;
        /**
         * Permissions to update messages and table entities granted.
         */

        this.update = false;
        /**
         * Permission to get and delete messages granted.
         */

        this.process = false;
        /**
         * Specfies Tag access granted.
         */

        this.tag = false;
        /**
         * Permission to filter blobs.
         */

        this.filter = false;
        /**
         * Permission to set immutability policy.
         */

        this.setImmutabilityPolicy = false;
        /**
         * Specifies that Permanent Delete is permitted.
         */

        this.permanentDelete = false;
      }
      /**
       * Parse initializes the AccountSASPermissions fields from a string.
       *
       * @param permissions -
       */


      _createClass(AccountSASPermissions, [{
        key: "toString",
        value:
        /**
         * Produces the SAS permissions string for an Azure Storage account.
         * Call this method to set AccountSASSignatureValues Permissions field.
         *
         * Using this method will guarantee the resource types are in
         * an order accepted by the service.
         *
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
         *
         */
        function toString() {
          // The order of the characters should be as specified here to ensure correctness:
          // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
          // Use a string array instead of string concatenating += operator for performance
          var permissions = [];

          if (this.read) {
            permissions.push("r");
          }

          if (this.write) {
            permissions.push("w");
          }

          if (this.delete) {
            permissions.push("d");
          }

          if (this.deleteVersion) {
            permissions.push("x");
          }

          if (this.filter) {
            permissions.push("f");
          }

          if (this.tag) {
            permissions.push("t");
          }

          if (this.list) {
            permissions.push("l");
          }

          if (this.add) {
            permissions.push("a");
          }

          if (this.create) {
            permissions.push("c");
          }

          if (this.update) {
            permissions.push("u");
          }

          if (this.process) {
            permissions.push("p");
          }

          if (this.setImmutabilityPolicy) {
            permissions.push("i");
          }

          if (this.permanentDelete) {
            permissions.push("y");
          }

          return permissions.join("");
        }
      }], [{
        key: "parse",
        value: function parse(permissions) {
          var accountSASPermissions = new AccountSASPermissions();

          var _iterator = _createForOfIteratorHelper(permissions),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var c = _step.value;

              switch (c) {
                case "r":
                  accountSASPermissions.read = true;
                  break;

                case "w":
                  accountSASPermissions.write = true;
                  break;

                case "d":
                  accountSASPermissions.delete = true;
                  break;

                case "x":
                  accountSASPermissions.deleteVersion = true;
                  break;

                case "l":
                  accountSASPermissions.list = true;
                  break;

                case "a":
                  accountSASPermissions.add = true;
                  break;

                case "c":
                  accountSASPermissions.create = true;
                  break;

                case "u":
                  accountSASPermissions.update = true;
                  break;

                case "p":
                  accountSASPermissions.process = true;
                  break;

                case "t":
                  accountSASPermissions.tag = true;
                  break;

                case "f":
                  accountSASPermissions.filter = true;
                  break;

                case "i":
                  accountSASPermissions.setImmutabilityPolicy = true;
                  break;

                case "y":
                  accountSASPermissions.permanentDelete = true;
                  break;

                default:
                  throw new RangeError("Invalid permission character: ".concat(c));
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          return accountSASPermissions;
        }
        /**
         * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it
         * and boolean values for them.
         *
         * @param permissionLike -
         */

      }, {
        key: "from",
        value: function from(permissionLike) {
          var accountSASPermissions = new AccountSASPermissions();

          if (permissionLike.read) {
            accountSASPermissions.read = true;
          }

          if (permissionLike.write) {
            accountSASPermissions.write = true;
          }

          if (permissionLike.delete) {
            accountSASPermissions.delete = true;
          }

          if (permissionLike.deleteVersion) {
            accountSASPermissions.deleteVersion = true;
          }

          if (permissionLike.filter) {
            accountSASPermissions.filter = true;
          }

          if (permissionLike.tag) {
            accountSASPermissions.tag = true;
          }

          if (permissionLike.list) {
            accountSASPermissions.list = true;
          }

          if (permissionLike.add) {
            accountSASPermissions.add = true;
          }

          if (permissionLike.create) {
            accountSASPermissions.create = true;
          }

          if (permissionLike.update) {
            accountSASPermissions.update = true;
          }

          if (permissionLike.process) {
            accountSASPermissions.process = true;
          }

          if (permissionLike.setImmutabilityPolicy) {
            accountSASPermissions.setImmutabilityPolicy = true;
          }

          if (permissionLike.permanentDelete) {
            accountSASPermissions.permanentDelete = true;
          }

          return accountSASPermissions;
        }
      }]);

      return AccountSASPermissions;
    }();

    exports.AccountSASPermissions = AccountSASPermissions;
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AccountSASResourceTypes = void 0;

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value
     * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the
     * values are set, this should be serialized with toString and set as the resources field on an
     * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but
     * the order of the resources is particular and this class guarantees correctness.
     */


    var AccountSASResourceTypes = /*#__PURE__*/function () {
      function AccountSASResourceTypes() {
        _classCallCheck(this, AccountSASResourceTypes);
        /**
         * Permission to access service level APIs granted.
         */


        this.service = false;
        /**
         * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.
         */

        this.container = false;
        /**
         * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.
         */

        this.object = false;
      }
      /**
       * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an
       * Error if it encounters a character that does not correspond to a valid resource type.
       *
       * @param resourceTypes -
       */


      _createClass(AccountSASResourceTypes, [{
        key: "toString",
        value:
        /**
         * Converts the given resource types to a string.
         *
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
         *
         */
        function toString() {
          var resourceTypes = [];

          if (this.service) {
            resourceTypes.push("s");
          }

          if (this.container) {
            resourceTypes.push("c");
          }

          if (this.object) {
            resourceTypes.push("o");
          }

          return resourceTypes.join("");
        }
      }], [{
        key: "parse",
        value: function parse(resourceTypes) {
          var accountSASResourceTypes = new AccountSASResourceTypes();

          var _iterator = _createForOfIteratorHelper(resourceTypes),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var c = _step.value;

              switch (c) {
                case "s":
                  accountSASResourceTypes.service = true;
                  break;

                case "c":
                  accountSASResourceTypes.container = true;
                  break;

                case "o":
                  accountSASResourceTypes.object = true;
                  break;

                default:
                  throw new RangeError("Invalid resource type: ".concat(c));
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          return accountSASResourceTypes;
        }
      }]);

      return AccountSASResourceTypes;
    }();

    exports.AccountSASResourceTypes = AccountSASResourceTypes;
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AccountSASServices = void 0;

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    } // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value
     * to true means that any SAS which uses these permissions will grant access to that service. Once all the
     * values are set, this should be serialized with toString and set as the services field on an
     * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but
     * the order of the services is particular and this class guarantees correctness.
     */


    var AccountSASServices = /*#__PURE__*/function () {
      function AccountSASServices() {
        _classCallCheck(this, AccountSASServices);
        /**
         * Permission to access blob resources granted.
         */


        this.blob = false;
        /**
         * Permission to access file resources granted.
         */

        this.file = false;
        /**
         * Permission to access queue resources granted.
         */

        this.queue = false;
        /**
         * Permission to access table resources granted.
         */

        this.table = false;
      }
      /**
       * Creates an {@link AccountSASServices} from the specified services string. This method will throw an
       * Error if it encounters a character that does not correspond to a valid service.
       *
       * @param services -
       */


      _createClass(AccountSASServices, [{
        key: "toString",
        value:
        /**
         * Converts the given services to a string.
         *
         */
        function toString() {
          var services = [];

          if (this.blob) {
            services.push("b");
          }

          if (this.table) {
            services.push("t");
          }

          if (this.queue) {
            services.push("q");
          }

          if (this.file) {
            services.push("f");
          }

          return services.join("");
        }
      }], [{
        key: "parse",
        value: function parse(services) {
          var accountSASServices = new AccountSASServices();

          var _iterator = _createForOfIteratorHelper(services),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var c = _step.value;

              switch (c) {
                case "b":
                  accountSASServices.blob = true;
                  break;

                case "f":
                  accountSASServices.file = true;
                  break;

                case "q":
                  accountSASServices.queue = true;
                  break;

                case "t":
                  accountSASServices.table = true;
                  break;

                default:
                  throw new RangeError("Invalid service character: ".concat(c));
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          return accountSASServices;
        }
      }]);

      return AccountSASServices;
    }();

    exports.AccountSASServices = AccountSASServices;
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.generateAccountSASQueryParameters = generateAccountSASQueryParameters;

    var _AccountSASPermissions = require("./AccountSASPermissions");

    var _AccountSASResourceTypes = require("./AccountSASResourceTypes");

    var _AccountSASServices = require("./AccountSASServices");

    var _SasIPRange = require("./SasIPRange");

    var _SASQueryParameters = require("./SASQueryParameters");

    var _constants = require("../utils/constants");

    var _utils = require("../utils/utils.common"); // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.

    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual
     * REST request.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
     *
     * @param accountSASSignatureValues -
     * @param sharedKeyCredential -
     */


    function generateAccountSASQueryParameters(accountSASSignatureValues, sharedKeyCredential) {
      var version = accountSASSignatureValues.version ? accountSASSignatureValues.version : _constants.SERVICE_VERSION;

      if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.setImmutabilityPolicy && version < "2020-08-04") {
        throw RangeError("'version' must be >= '2020-08-04' when provided 'i' permission.");
      }

      if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.deleteVersion && version < "2019-10-10") {
        throw RangeError("'version' must be >= '2019-10-10' when provided 'x' permission.");
      }

      if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.permanentDelete && version < "2019-10-10") {
        throw RangeError("'version' must be >= '2019-10-10' when provided 'y' permission.");
      }

      if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.tag && version < "2019-12-12") {
        throw RangeError("'version' must be >= '2019-12-12' when provided 't' permission.");
      }

      if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.filter && version < "2019-12-12") {
        throw RangeError("'version' must be >= '2019-12-12' when provided 'f' permission.");
      }

      if (accountSASSignatureValues.encryptionScope && version < "2020-12-06") {
        throw RangeError("'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.");
      }

      var parsedPermissions = _AccountSASPermissions.AccountSASPermissions.parse(accountSASSignatureValues.permissions.toString());

      var parsedServices = _AccountSASServices.AccountSASServices.parse(accountSASSignatureValues.services).toString();

      var parsedResourceTypes = _AccountSASResourceTypes.AccountSASResourceTypes.parse(accountSASSignatureValues.resourceTypes).toString();

      var stringToSign;

      if (version >= "2020-12-06") {
        stringToSign = [sharedKeyCredential.accountName, parsedPermissions, parsedServices, parsedResourceTypes, accountSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(accountSASSignatureValues.startsOn, false) : "", (0, _utils.truncatedISO8061Date)(accountSASSignatureValues.expiresOn, false), accountSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(accountSASSignatureValues.ipRange) : "", accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : "", version, accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : "", "" // Account SAS requires an additional newline character
        ].join("\n");
      } else {
        stringToSign = [sharedKeyCredential.accountName, parsedPermissions, parsedServices, parsedResourceTypes, accountSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(accountSASSignatureValues.startsOn, false) : "", (0, _utils.truncatedISO8061Date)(accountSASSignatureValues.expiresOn, false), accountSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(accountSASSignatureValues.ipRange) : "", accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : "", version, "" // Account SAS requires an additional newline character
        ].join("\n");
      }

      var signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
      return new _SASQueryParameters.SASQueryParameters(version, signature, parsedPermissions.toString(), parsedServices, parsedResourceTypes, accountSASSignatureValues.protocol, accountSASSignatureValues.startsOn, accountSASSignatureValues.expiresOn, accountSASSignatureValues.ipRange, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, accountSASSignatureValues.encryptionScope);
    }
  }, {
    "./AccountSASPermissions": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js",
    "./AccountSASResourceTypes": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js",
    "./AccountSASServices": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js",
    "./SasIPRange": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js",
    "./SASQueryParameters": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js",
    "../utils/constants": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js",
    "../utils/utils.common": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BlobServiceClient = void 0;

    var _tslib = require("tslib");

    var _coreHttp = require("@azure/core-http");

    var _coreTracing = require("@azure/core-tracing");

    var _operations = require("./generated/src/operations");

    var _Pipeline = require("./Pipeline");

    var _ContainerClient = require("./ContainerClient");

    var _utils = require("./utils/utils.common");

    var _StorageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");

    var _AnonymousCredential = require("./credentials/AnonymousCredential");

    require("@azure/core-paging");

    var _tracing = require("./utils/tracing");

    var _BlobBatchClient = require("./BlobBatchClient");

    var _StorageClient2 = require("./StorageClient");

    var _AccountSASPermissions = require("./sas/AccountSASPermissions");

    var _AccountSASSignatureValues = require("./sas/AccountSASSignatureValues");

    var _AccountSASServices = require("./sas/AccountSASServices");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      };

      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * A BlobServiceClient represents a Client to the Azure Storage Blob service allowing you
     * to manipulate blob containers.
     */


    var BlobServiceClient = /*#__PURE__*/function (_StorageClient) {
      _inherits(BlobServiceClient, _StorageClient);

      var _super = _createSuper(BlobServiceClient);

      function BlobServiceClient(url, credentialOrPipeline, // Legacy, no fix for eslint error without breaking. Disable it for this interface.

      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
      options) {
        var _this;

        _classCallCheck(this, BlobServiceClient);

        var pipeline;

        if ((0, _Pipeline.isPipelineLike)(credentialOrPipeline)) {
          pipeline = credentialOrPipeline;
        } else if (_coreHttp.isNode && credentialOrPipeline instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipeline instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrPipeline)) {
          pipeline = (0, _Pipeline.newPipeline)(credentialOrPipeline, options);
        } else {
          // The second parameter is undefined. Use anonymous credential
          pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
        }

        _this = _super.call(this, url, pipeline);
        _this.serviceContext = new _operations.Service(_this.storageClientContext);
        return _this;
      }
      /**
       *
       * Creates an instance of BlobServiceClient from connection string.
       *
       * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.
       *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]
       *                                  Account connection string example -
       *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
       *                                  SAS connection string example -
       *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
       * @param options - Optional. Options to configure the HTTP pipeline.
       */


      _createClass(BlobServiceClient, [{
        key: "getContainerClient",
        value:
        /**
         * Creates a {@link ContainerClient} object
         *
         * @param containerName - A container name
         * @returns A new ContainerClient object for the given container name.
         *
         * Example usage:
         *
         * ```js
         * const containerClient = blobServiceClient.getContainerClient("<container name>");
         * ```
         */
        function getContainerClient(containerName) {
          return new _ContainerClient.ContainerClient((0, _utils.appendToURLPath)(this.url, encodeURIComponent(containerName)), this.pipeline);
        }
        /**
         * Create a Blob container.
         *
         * @param containerName - Name of the container to create.
         * @param options - Options to configure Container Create operation.
         * @returns Container creation response and the corresponding container client.
         */

      }, {
        key: "createContainer",
        value: function () {
          var _createContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(containerName) {
            var options,
                _createSpan,
                span,
                updatedOptions,
                containerClient,
                containerCreateResponse,
                _args = arguments;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                    _createSpan = (0, _tracing.createSpan)("BlobServiceClient-createContainer", options), span = _createSpan.span, updatedOptions = _createSpan.updatedOptions;
                    _context.prev = 2;
                    containerClient = this.getContainerClient(containerName);
                    _context.next = 6;
                    return containerClient.create(updatedOptions);

                  case 6:
                    containerCreateResponse = _context.sent;
                    return _context.abrupt("return", {
                      containerClient: containerClient,
                      containerCreateResponse: containerCreateResponse
                    });

                  case 10:
                    _context.prev = 10;
                    _context.t0 = _context["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context.t0.message
                    });
                    throw _context.t0;

                  case 14:
                    _context.prev = 14;
                    span.end();
                    return _context.finish(14);

                  case 17:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[2, 10, 14, 17]]);
          }));

          function createContainer(_x) {
            return _createContainer.apply(this, arguments);
          }

          return createContainer;
        }()
        /**
         * Deletes a Blob container.
         *
         * @param containerName - Name of the container to delete.
         * @param options - Options to configure Container Delete operation.
         * @returns Container deletion response.
         */

      }, {
        key: "deleteContainer",
        value: function () {
          var _deleteContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(containerName) {
            var options,
                _createSpan2,
                span,
                updatedOptions,
                containerClient,
                _args2 = arguments;

            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                    _createSpan2 = (0, _tracing.createSpan)("BlobServiceClient-deleteContainer", options), span = _createSpan2.span, updatedOptions = _createSpan2.updatedOptions;
                    _context2.prev = 2;
                    containerClient = this.getContainerClient(containerName);
                    _context2.next = 6;
                    return containerClient.delete(updatedOptions);

                  case 6:
                    return _context2.abrupt("return", _context2.sent);

                  case 9:
                    _context2.prev = 9;
                    _context2.t0 = _context2["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context2.t0.message
                    });
                    throw _context2.t0;

                  case 13:
                    _context2.prev = 13;
                    span.end();
                    return _context2.finish(13);

                  case 16:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this, [[2, 9, 13, 16]]);
          }));

          function deleteContainer(_x2) {
            return _deleteContainer.apply(this, arguments);
          }

          return deleteContainer;
        }()
        /**
         * Restore a previously deleted Blob container.
         * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.
         *
         * @param deletedContainerName - Name of the previously deleted container.
         * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.
         * @param options - Options to configure Container Restore operation.
         * @returns Container deletion response.
         */

      }, {
        key: "undeleteContainer",
        value: function () {
          var _undeleteContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(deletedContainerName, deletedContainerVersion) {
            var options,
                _createSpan3,
                span,
                updatedOptions,
                containerClient,
                containerContext,
                containerUndeleteResponse,
                _args3 = arguments;

            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};
                    _createSpan3 = (0, _tracing.createSpan)("BlobServiceClient-undeleteContainer", options), span = _createSpan3.span, updatedOptions = _createSpan3.updatedOptions;
                    _context3.prev = 2;
                    containerClient = this.getContainerClient(options.destinationContainerName || deletedContainerName); // Hack to access a protected member.

                    containerContext = new _operations.Container(containerClient["storageClientContext"]);
                    _context3.next = 7;
                    return containerContext.restore(Object.assign({
                      deletedContainerName: deletedContainerName,
                      deletedContainerVersion: deletedContainerVersion
                    }, updatedOptions));

                  case 7:
                    containerUndeleteResponse = _context3.sent;
                    return _context3.abrupt("return", {
                      containerClient: containerClient,
                      containerUndeleteResponse: containerUndeleteResponse
                    });

                  case 11:
                    _context3.prev = 11;
                    _context3.t0 = _context3["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context3.t0.message
                    });
                    throw _context3.t0;

                  case 15:
                    _context3.prev = 15;
                    span.end();
                    return _context3.finish(15);

                  case 18:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this, [[2, 11, 15, 18]]);
          }));

          function undeleteContainer(_x3, _x4) {
            return _undeleteContainer.apply(this, arguments);
          }

          return undeleteContainer;
        }()
        /**
         * Rename an existing Blob Container.
         *
         * @param sourceContainerName - The name of the source container.
         * @param destinationContainerName - The new name of the container.
         * @param options - Options to configure Container Rename operation.
         */

        /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */
        // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.

      }, {
        key: "renameContainer",
        value: function () {
          var _renameContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(sourceContainerName, destinationContainerName) {
            var options,
                _a,
                _createSpan4,
                span,
                updatedOptions,
                containerClient,
                containerContext,
                containerRenameResponse,
                _args4 = arguments;

            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};
                    _createSpan4 = (0, _tracing.createSpan)("BlobServiceClient-renameContainer", options), span = _createSpan4.span, updatedOptions = _createSpan4.updatedOptions;
                    _context4.prev = 2;
                    containerClient = this.getContainerClient(destinationContainerName); // Hack to access a protected member.

                    containerContext = new _operations.Container(containerClient["storageClientContext"]);
                    _context4.next = 7;
                    return containerContext.rename(sourceContainerName, Object.assign(Object.assign({}, updatedOptions), {
                      sourceLeaseId: (_a = options.sourceCondition) === null || _a === void 0 ? void 0 : _a.leaseId
                    }));

                  case 7:
                    containerRenameResponse = _context4.sent;
                    return _context4.abrupt("return", {
                      containerClient: containerClient,
                      containerRenameResponse: containerRenameResponse
                    });

                  case 11:
                    _context4.prev = 11;
                    _context4.t0 = _context4["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context4.t0.message
                    });
                    throw _context4.t0;

                  case 15:
                    _context4.prev = 15;
                    span.end();
                    return _context4.finish(15);

                  case 18:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this, [[2, 11, 15, 18]]);
          }));

          function renameContainer(_x5, _x6) {
            return _renameContainer.apply(this, arguments);
          }

          return renameContainer;
        }()
        /**
         * Gets the properties of a storage account’s Blob service, including properties
         * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
         *
         * @param options - Options to the Service Get Properties operation.
         * @returns Response data for the Service Get Properties operation.
         */

      }, {
        key: "getProperties",
        value: function () {
          var _getProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
            var options,
                _createSpan5,
                span,
                updatedOptions,
                _args5 = arguments;

            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    options = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
                    _createSpan5 = (0, _tracing.createSpan)("BlobServiceClient-getProperties", options), span = _createSpan5.span, updatedOptions = _createSpan5.updatedOptions;
                    _context5.prev = 2;
                    _context5.next = 5;
                    return this.serviceContext.getProperties(Object.assign({
                      abortSignal: options.abortSignal
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    return _context5.abrupt("return", _context5.sent);

                  case 8:
                    _context5.prev = 8;
                    _context5.t0 = _context5["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context5.t0.message
                    });
                    throw _context5.t0;

                  case 12:
                    _context5.prev = 12;
                    span.end();
                    return _context5.finish(12);

                  case 15:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this, [[2, 8, 12, 15]]);
          }));

          function getProperties() {
            return _getProperties.apply(this, arguments);
          }

          return getProperties;
        }()
        /**
         * Sets properties for a storage account’s Blob service endpoint, including properties
         * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties
         *
         * @param properties -
         * @param options - Options to the Service Set Properties operation.
         * @returns Response data for the Service Set Properties operation.
         */

      }, {
        key: "setProperties",
        value: function () {
          var _setProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(properties) {
            var options,
                _createSpan6,
                span,
                updatedOptions,
                _args6 = arguments;

            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};
                    _createSpan6 = (0, _tracing.createSpan)("BlobServiceClient-setProperties", options), span = _createSpan6.span, updatedOptions = _createSpan6.updatedOptions;
                    _context6.prev = 2;
                    _context6.next = 5;
                    return this.serviceContext.setProperties(properties, Object.assign({
                      abortSignal: options.abortSignal
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    return _context6.abrupt("return", _context6.sent);

                  case 8:
                    _context6.prev = 8;
                    _context6.t0 = _context6["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context6.t0.message
                    });
                    throw _context6.t0;

                  case 12:
                    _context6.prev = 12;
                    span.end();
                    return _context6.finish(12);

                  case 15:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this, [[2, 8, 12, 15]]);
          }));

          function setProperties(_x7) {
            return _setProperties.apply(this, arguments);
          }

          return setProperties;
        }()
        /**
         * Retrieves statistics related to replication for the Blob service. It is only
         * available on the secondary location endpoint when read-access geo-redundant
         * replication is enabled for the storage account.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats
         *
         * @param options - Options to the Service Get Statistics operation.
         * @returns Response data for the Service Get Statistics operation.
         */

      }, {
        key: "getStatistics",
        value: function () {
          var _getStatistics = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
            var options,
                _createSpan7,
                span,
                updatedOptions,
                _args7 = arguments;

            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    options = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};
                    _createSpan7 = (0, _tracing.createSpan)("BlobServiceClient-getStatistics", options), span = _createSpan7.span, updatedOptions = _createSpan7.updatedOptions;
                    _context7.prev = 2;
                    _context7.next = 5;
                    return this.serviceContext.getStatistics(Object.assign({
                      abortSignal: options.abortSignal
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    return _context7.abrupt("return", _context7.sent);

                  case 8:
                    _context7.prev = 8;
                    _context7.t0 = _context7["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context7.t0.message
                    });
                    throw _context7.t0;

                  case 12:
                    _context7.prev = 12;
                    span.end();
                    return _context7.finish(12);

                  case 15:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this, [[2, 8, 12, 15]]);
          }));

          function getStatistics() {
            return _getStatistics.apply(this, arguments);
          }

          return getStatistics;
        }()
        /**
         * The Get Account Information operation returns the sku name and account kind
         * for the specified account.
         * The Get Account Information operation is available on service versions beginning
         * with version 2018-03-28.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information
         *
         * @param options - Options to the Service Get Account Info operation.
         * @returns Response data for the Service Get Account Info operation.
         */

      }, {
        key: "getAccountInfo",
        value: function () {
          var _getAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
            var options,
                _createSpan8,
                span,
                updatedOptions,
                _args8 = arguments;

            return _regeneratorRuntime().wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    options = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};
                    _createSpan8 = (0, _tracing.createSpan)("BlobServiceClient-getAccountInfo", options), span = _createSpan8.span, updatedOptions = _createSpan8.updatedOptions;
                    _context8.prev = 2;
                    _context8.next = 5;
                    return this.serviceContext.getAccountInfo(Object.assign({
                      abortSignal: options.abortSignal
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    return _context8.abrupt("return", _context8.sent);

                  case 8:
                    _context8.prev = 8;
                    _context8.t0 = _context8["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context8.t0.message
                    });
                    throw _context8.t0;

                  case 12:
                    _context8.prev = 12;
                    span.end();
                    return _context8.finish(12);

                  case 15:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this, [[2, 8, 12, 15]]);
          }));

          function getAccountInfo() {
            return _getAccountInfo.apply(this, arguments);
          }

          return getAccountInfo;
        }()
        /**
         * Returns a list of the containers under the specified account.
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2
         *
         * @param marker - A string value that identifies the portion of
         *                        the list of containers to be returned with the next listing operation. The
         *                        operation returns the continuationToken value within the response body if the
         *                        listing operation did not return all containers remaining to be listed
         *                        with the current page. The continuationToken value can be used as the value for
         *                        the marker parameter in a subsequent call to request the next page of list
         *                        items. The marker value is opaque to the client.
         * @param options - Options to the Service List Container Segment operation.
         * @returns Response data for the Service List Container Segment operation.
         */

      }, {
        key: "listContainersSegment",
        value: function () {
          var _listContainersSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(marker) {
            var options,
                _createSpan9,
                span,
                updatedOptions,
                _args9 = arguments;

            return _regeneratorRuntime().wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};
                    _createSpan9 = (0, _tracing.createSpan)("BlobServiceClient-listContainersSegment", options), span = _createSpan9.span, updatedOptions = _createSpan9.updatedOptions;
                    _context9.prev = 2;
                    _context9.next = 5;
                    return this.serviceContext.listContainersSegment(Object.assign(Object.assign(Object.assign({
                      abortSignal: options.abortSignal,
                      marker: marker
                    }, options), {
                      include: typeof options.include === "string" ? [options.include] : options.include
                    }), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    return _context9.abrupt("return", _context9.sent);

                  case 8:
                    _context9.prev = 8;
                    _context9.t0 = _context9["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context9.t0.message
                    });
                    throw _context9.t0;

                  case 12:
                    _context9.prev = 12;
                    span.end();
                    return _context9.finish(12);

                  case 15:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9, this, [[2, 8, 12, 15]]);
          }));

          function listContainersSegment(_x8) {
            return _listContainersSegment.apply(this, arguments);
          }

          return listContainersSegment;
        }()
        /**
         * The Filter Blobs operation enables callers to list blobs across all containers whose tags
         * match a given search expression. Filter blobs searches across all containers within a
         * storage account but can be scoped within the expression to a single container.
         *
         * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.
         *                                        The given expression must evaluate to true for a blob to be returned in the results.
         *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
         *                                        however, only a subset of the OData filter syntax is supported in the Blob service.
         * @param marker - A string value that identifies the portion of
         *                          the list of blobs to be returned with the next listing operation. The
         *                          operation returns the continuationToken value within the response body if the
         *                          listing operation did not return all blobs remaining to be listed
         *                          with the current page. The continuationToken value can be used as the value for
         *                          the marker parameter in a subsequent call to request the next page of list
         *                          items. The marker value is opaque to the client.
         * @param options - Options to find blobs by tags.
         */

      }, {
        key: "findBlobsByTagsSegment",
        value: function () {
          var _findBlobsByTagsSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(tagFilterSqlExpression, marker) {
            var options,
                _createSpan10,
                span,
                updatedOptions,
                response,
                wrappedResponse,
                _args10 = arguments;

            return _regeneratorRuntime().wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    options = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : {};
                    _createSpan10 = (0, _tracing.createSpan)("BlobServiceClient-findBlobsByTagsSegment", options), span = _createSpan10.span, updatedOptions = _createSpan10.updatedOptions;
                    _context10.prev = 2;
                    _context10.next = 5;
                    return this.serviceContext.filterBlobs(Object.assign({
                      abortSignal: options.abortSignal,
                      where: tagFilterSqlExpression,
                      marker: marker,
                      maxPageSize: options.maxPageSize
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    response = _context10.sent;
                    wrappedResponse = Object.assign(Object.assign({}, response), {
                      _response: response._response,
                      blobs: response.blobs.map(function (blob) {
                        var _a;

                        var tagValue = "";

                        if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) {
                          tagValue = blob.tags.blobTagSet[0].value;
                        }

                        return Object.assign(Object.assign({}, blob), {
                          tags: (0, _utils.toTags)(blob.tags),
                          tagValue: tagValue
                        });
                      })
                    });
                    return _context10.abrupt("return", wrappedResponse);

                  case 10:
                    _context10.prev = 10;
                    _context10.t0 = _context10["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context10.t0.message
                    });
                    throw _context10.t0;

                  case 14:
                    _context10.prev = 14;
                    span.end();
                    return _context10.finish(14);

                  case 17:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10, this, [[2, 10, 14, 17]]);
          }));

          function findBlobsByTagsSegment(_x9, _x10) {
            return _findBlobsByTagsSegment.apply(this, arguments);
          }

          return findBlobsByTagsSegment;
        }()
        /**
         * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.
         *
         * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
         *                                         The given expression must evaluate to true for a blob to be returned in the results.
         *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
         *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
         * @param marker - A string value that identifies the portion of
         *                          the list of blobs to be returned with the next listing operation. The
         *                          operation returns the continuationToken value within the response body if the
         *                          listing operation did not return all blobs remaining to be listed
         *                          with the current page. The continuationToken value can be used as the value for
         *                          the marker parameter in a subsequent call to request the next page of list
         *                          items. The marker value is opaque to the client.
         * @param options - Options to find blobs by tags.
         */

      }, {
        key: "findBlobsByTagsSegments",
        value: function findBlobsByTagsSegments(tagFilterSqlExpression, marker) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function findBlobsByTagsSegments_1() {
            var response;
            return _regeneratorRuntime().wrap(function findBlobsByTagsSegments_1$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    if (!(!!marker || marker === undefined)) {
                      _context11.next = 11;
                      break;
                    }

                  case 1:
                    _context11.next = 3;
                    return (0, _tslib.__await)(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));

                  case 3:
                    response = _context11.sent;
                    response.blobs = response.blobs || [];
                    marker = response.continuationToken;
                    _context11.next = 8;
                    return (0, _tslib.__await)(response);

                  case 8:
                    _context11.next = 10;
                    return _context11.sent;

                  case 10:
                    if (marker) {
                      _context11.next = 1;
                      break;
                    }

                  case 11:
                  case "end":
                    return _context11.stop();
                }
              }
            }, findBlobsByTagsSegments_1, this);
          }));
        }
        /**
         * Returns an AsyncIterableIterator for blobs.
         *
         * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
         *                                         The given expression must evaluate to true for a blob to be returned in the results.
         *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
         *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
         * @param options - Options to findBlobsByTagsItems.
         */

      }, {
        key: "findBlobsByTagsItems",
        value: function findBlobsByTagsItems(tagFilterSqlExpression) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function findBlobsByTagsItems_1() {
            var e_1, _a, marker, _b, _c, segment;

            return _regeneratorRuntime().wrap(function findBlobsByTagsItems_1$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    _context12.prev = 0;
                    _b = (0, _tslib.__asyncValues)(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options));

                  case 2:
                    _context12.next = 4;
                    return (0, _tslib.__await)(_b.next());

                  case 4:
                    _c = _context12.sent;

                    if (_c.done) {
                      _context12.next = 14;
                      break;
                    }

                    segment = _c.value;
                    _context12.t0 = _tslib.__await;
                    return _context12.delegateYield((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)(segment.blobs)), "t1", 9);

                  case 9:
                    _context12.t2 = _context12.t1;
                    _context12.next = 12;
                    return (0, _context12.t0)(_context12.t2);

                  case 12:
                    _context12.next = 2;
                    break;

                  case 14:
                    _context12.next = 19;
                    break;

                  case 16:
                    _context12.prev = 16;
                    _context12.t3 = _context12["catch"](0);
                    e_1 = {
                      error: _context12.t3
                    };

                  case 19:
                    _context12.prev = 19;
                    _context12.prev = 20;

                    if (!(_c && !_c.done && (_a = _b.return))) {
                      _context12.next = 24;
                      break;
                    }

                    _context12.next = 24;
                    return (0, _tslib.__await)(_a.call(_b));

                  case 24:
                    _context12.prev = 24;

                    if (!e_1) {
                      _context12.next = 27;
                      break;
                    }

                    throw e_1.error;

                  case 27:
                    return _context12.finish(24);

                  case 28:
                    return _context12.finish(19);

                  case 29:
                  case "end":
                    return _context12.stop();
                }
              }
            }, findBlobsByTagsItems_1, this, [[0, 16, 19, 29], [20,, 24, 28]]);
          }));
        }
        /**
         * Returns an async iterable iterator to find all blobs with specified tag
         * under the specified account.
         *
         * .byPage() returns an async iterable iterator to list the blobs in pages.
         *
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
         *
         * Example using `for await` syntax:
         *
         * ```js
         * let i = 1;
         * for await (const blob of blobServiceClient.findBlobsByTags("tagkey='tagvalue'")) {
         *   console.log(`Blob ${i++}: ${container.name}`);
         * }
         * ```
         *
         * Example using `iter.next()`:
         *
         * ```js
         * let i = 1;
         * const iter = blobServiceClient.findBlobsByTags("tagkey='tagvalue'");
         * let blobItem = await iter.next();
         * while (!blobItem.done) {
         *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
         *   blobItem = await iter.next();
         * }
         * ```
         *
         * Example using `byPage()`:
         *
         * ```js
         * // passing optional maxPageSize in the page settings
         * let i = 1;
         * for await (const response of blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 20 })) {
         *   if (response.blobs) {
         *     for (const blob of response.blobs) {
         *       console.log(`Blob ${i++}: ${blob.name}`);
         *     }
         *   }
         * }
         * ```
         *
         * Example using paging with a marker:
         *
         * ```js
         * let i = 1;
         * let iterator = blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 2 });
         * let response = (await iterator.next()).value;
         *
         * // Prints 2 blob names
         * if (response.blobs) {
         *   for (const blob of response.blobs) {
         *     console.log(`Blob ${i++}: ${blob.name}`);
         *   }
         * }
         *
         * // Gets next marker
         * let marker = response.continuationToken;
         * // Passing next marker as continuationToken
         * iterator = blobServiceClient
         *   .findBlobsByTags("tagkey='tagvalue'")
         *   .byPage({ continuationToken: marker, maxPageSize: 10 });
         * response = (await iterator.next()).value;
         *
         * // Prints blob names
         * if (response.blobs) {
         *   for (const blob of response.blobs) {
         *      console.log(`Blob ${i++}: ${blob.name}`);
         *   }
         * }
         * ```
         *
         * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
         *                                         The given expression must evaluate to true for a blob to be returned in the results.
         *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
         *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
         * @param options - Options to find blobs by tags.
         */

      }, {
        key: "findBlobsByTags",
        value: function findBlobsByTags(tagFilterSqlExpression) {
          var _this2 = this,
              _ref;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // AsyncIterableIterator to iterate over blobs

          var listSegmentOptions = Object.assign({}, options);
          var iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
          return _ref = {
            /**
             * The next method, part of the iteration protocol
             */
            next: function next() {
              return iter.next();
            }
          }, _defineProperty(_ref, Symbol.asyncIterator, function () {
            return this;
          }), _defineProperty(_ref, "byPage", function byPage() {
            var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return _this2.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({
              maxPageSize: settings.maxPageSize
            }, listSegmentOptions));
          }), _ref;
        }
        /**
         * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses
         *
         * @param marker - A string value that identifies the portion of
         *                        the list of containers to be returned with the next listing operation. The
         *                        operation returns the continuationToken value within the response body if the
         *                        listing operation did not return all containers remaining to be listed
         *                        with the current page. The continuationToken value can be used as the value for
         *                        the marker parameter in a subsequent call to request the next page of list
         *                        items. The marker value is opaque to the client.
         * @param options - Options to list containers operation.
         */

      }, {
        key: "listSegments",
        value: function listSegments(marker) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function listSegments_1() {
            var listContainersSegmentResponse;
            return _regeneratorRuntime().wrap(function listSegments_1$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    if (!(!!marker || marker === undefined)) {
                      _context13.next = 15;
                      break;
                    }

                  case 1:
                    _context13.next = 3;
                    return (0, _tslib.__await)(this.listContainersSegment(marker, options));

                  case 3:
                    listContainersSegmentResponse = _context13.sent;
                    listContainersSegmentResponse.containerItems = listContainersSegmentResponse.containerItems || [];
                    marker = listContainersSegmentResponse.continuationToken;
                    _context13.t0 = _tslib.__await;
                    _context13.next = 9;
                    return (0, _tslib.__await)(listContainersSegmentResponse);

                  case 9:
                    _context13.t1 = _context13.sent;
                    _context13.next = 12;
                    return (0, _context13.t0)(_context13.t1);

                  case 12:
                    _context13.next = 14;
                    return _context13.sent;

                  case 14:
                    if (marker) {
                      _context13.next = 1;
                      break;
                    }

                  case 15:
                  case "end":
                    return _context13.stop();
                }
              }
            }, listSegments_1, this);
          }));
        }
        /**
         * Returns an AsyncIterableIterator for Container Items
         *
         * @param options - Options to list containers operation.
         */

      }, {
        key: "listItems",
        value: function listItems() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function listItems_1() {
            var e_2, _a, marker, _b, _c, segment;

            return _regeneratorRuntime().wrap(function listItems_1$(_context14) {
              while (1) {
                switch (_context14.prev = _context14.next) {
                  case 0:
                    _context14.prev = 0;
                    _b = (0, _tslib.__asyncValues)(this.listSegments(marker, options));

                  case 2:
                    _context14.next = 4;
                    return (0, _tslib.__await)(_b.next());

                  case 4:
                    _c = _context14.sent;

                    if (_c.done) {
                      _context14.next = 14;
                      break;
                    }

                    segment = _c.value;
                    _context14.t0 = _tslib.__await;
                    return _context14.delegateYield((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)(segment.containerItems)), "t1", 9);

                  case 9:
                    _context14.t2 = _context14.t1;
                    _context14.next = 12;
                    return (0, _context14.t0)(_context14.t2);

                  case 12:
                    _context14.next = 2;
                    break;

                  case 14:
                    _context14.next = 19;
                    break;

                  case 16:
                    _context14.prev = 16;
                    _context14.t3 = _context14["catch"](0);
                    e_2 = {
                      error: _context14.t3
                    };

                  case 19:
                    _context14.prev = 19;
                    _context14.prev = 20;

                    if (!(_c && !_c.done && (_a = _b.return))) {
                      _context14.next = 24;
                      break;
                    }

                    _context14.next = 24;
                    return (0, _tslib.__await)(_a.call(_b));

                  case 24:
                    _context14.prev = 24;

                    if (!e_2) {
                      _context14.next = 27;
                      break;
                    }

                    throw e_2.error;

                  case 27:
                    return _context14.finish(24);

                  case 28:
                    return _context14.finish(19);

                  case 29:
                  case "end":
                    return _context14.stop();
                }
              }
            }, listItems_1, this, [[0, 16, 19, 29], [20,, 24, 28]]);
          }));
        }
        /**
         * Returns an async iterable iterator to list all the containers
         * under the specified account.
         *
         * .byPage() returns an async iterable iterator to list the containers in pages.
         *
         * Example using `for await` syntax:
         *
         * ```js
         * let i = 1;
         * for await (const container of blobServiceClient.listContainers()) {
         *   console.log(`Container ${i++}: ${container.name}`);
         * }
         * ```
         *
         * Example using `iter.next()`:
         *
         * ```js
         * let i = 1;
         * const iter = blobServiceClient.listContainers();
         * let containerItem = await iter.next();
         * while (!containerItem.done) {
         *   console.log(`Container ${i++}: ${containerItem.value.name}`);
         *   containerItem = await iter.next();
         * }
         * ```
         *
         * Example using `byPage()`:
         *
         * ```js
         * // passing optional maxPageSize in the page settings
         * let i = 1;
         * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {
         *   if (response.containerItems) {
         *     for (const container of response.containerItems) {
         *       console.log(`Container ${i++}: ${container.name}`);
         *     }
         *   }
         * }
         * ```
         *
         * Example using paging with a marker:
         *
         * ```js
         * let i = 1;
         * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });
         * let response = (await iterator.next()).value;
         *
         * // Prints 2 container names
         * if (response.containerItems) {
         *   for (const container of response.containerItems) {
         *     console.log(`Container ${i++}: ${container.name}`);
         *   }
         * }
         *
         * // Gets next marker
         * let marker = response.continuationToken;
         * // Passing next marker as continuationToken
         * iterator = blobServiceClient
         *   .listContainers()
         *   .byPage({ continuationToken: marker, maxPageSize: 10 });
         * response = (await iterator.next()).value;
         *
         * // Prints 10 container names
         * if (response.containerItems) {
         *   for (const container of response.containerItems) {
         *      console.log(`Container ${i++}: ${container.name}`);
         *   }
         * }
         * ```
         *
         * @param options - Options to list containers.
         * @returns An asyncIterableIterator that supports paging.
         */

      }, {
        key: "listContainers",
        value: function listContainers() {
          var _this3 = this,
              _ref2;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          if (options.prefix === "") {
            options.prefix = undefined;
          }

          var include = [];

          if (options.includeDeleted) {
            include.push("deleted");
          }

          if (options.includeMetadata) {
            include.push("metadata");
          }

          if (options.includeSystem) {
            include.push("system");
          } // AsyncIterableIterator to iterate over containers


          var listSegmentOptions = Object.assign(Object.assign({}, options), include.length > 0 ? {
            include: include
          } : {});
          var iter = this.listItems(listSegmentOptions);
          return _ref2 = {
            /**
             * The next method, part of the iteration protocol
             */
            next: function next() {
              return iter.next();
            }
          }, _defineProperty(_ref2, Symbol.asyncIterator, function () {
            return this;
          }), _defineProperty(_ref2, "byPage", function byPage() {
            var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return _this3.listSegments(settings.continuationToken, Object.assign({
              maxPageSize: settings.maxPageSize
            }, listSegmentOptions));
          }), _ref2;
        }
        /**
         * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).
         *
         * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
         * bearer token authentication.
         *
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key
         *
         * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time
         * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time
         */

      }, {
        key: "getUserDelegationKey",
        value: function () {
          var _getUserDelegationKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(startsOn, expiresOn) {
            var options,
                _createSpan11,
                span,
                updatedOptions,
                response,
                userDelegationKey,
                res,
                _args15 = arguments;

            return _regeneratorRuntime().wrap(function _callee11$(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    options = _args15.length > 2 && _args15[2] !== undefined ? _args15[2] : {};
                    _createSpan11 = (0, _tracing.createSpan)("BlobServiceClient-getUserDelegationKey", options), span = _createSpan11.span, updatedOptions = _createSpan11.updatedOptions;
                    _context15.prev = 2;
                    _context15.next = 5;
                    return this.serviceContext.getUserDelegationKey({
                      startsOn: (0, _utils.truncatedISO8061Date)(startsOn, false),
                      expiresOn: (0, _utils.truncatedISO8061Date)(expiresOn, false)
                    }, Object.assign({
                      abortSignal: options.abortSignal
                    }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)));

                  case 5:
                    response = _context15.sent;
                    userDelegationKey = {
                      signedObjectId: response.signedObjectId,
                      signedTenantId: response.signedTenantId,
                      signedStartsOn: new Date(response.signedStartsOn),
                      signedExpiresOn: new Date(response.signedExpiresOn),
                      signedService: response.signedService,
                      signedVersion: response.signedVersion,
                      value: response.value
                    };
                    res = Object.assign({
                      _response: response._response,
                      requestId: response.requestId,
                      clientRequestId: response.clientRequestId,
                      version: response.version,
                      date: response.date,
                      errorCode: response.errorCode
                    }, userDelegationKey);
                    return _context15.abrupt("return", res);

                  case 11:
                    _context15.prev = 11;
                    _context15.t0 = _context15["catch"](2);
                    span.setStatus({
                      code: _coreTracing.SpanStatusCode.ERROR,
                      message: _context15.t0.message
                    });
                    throw _context15.t0;

                  case 15:
                    _context15.prev = 15;
                    span.end();
                    return _context15.finish(15);

                  case 18:
                  case "end":
                    return _context15.stop();
                }
              }
            }, _callee11, this, [[2, 11, 15, 18]]);
          }));

          function getUserDelegationKey(_x11, _x12) {
            return _getUserDelegationKey.apply(this, arguments);
          }

          return getUserDelegationKey;
        }()
        /**
         * Creates a BlobBatchClient object to conduct batch operations.
         *
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
         *
         * @returns A new BlobBatchClient object for this service.
         */

      }, {
        key: "getBlobBatchClient",
        value: function getBlobBatchClient() {
          return new _BlobBatchClient.BlobBatchClient(this.url, this.pipeline);
        }
        /**
         * Only available for BlobServiceClient constructed with a shared key credential.
         *
         * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties
         * and parameters passed in. The SAS is signed by the shared key credential of the client.
         *
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas
         *
         * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.
         * @param permissions - Specifies the list of permissions to be associated with the SAS.
         * @param resourceTypes - Specifies the resource types associated with the shared access signature.
         * @param options - Optional parameters.
         * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
         */

      }, {
        key: "generateAccountSasUrl",
        value: function generateAccountSasUrl(expiresOn) {
          var permissions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _AccountSASPermissions.AccountSASPermissions.parse("r");
          var resourceTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "sco";
          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

          if (!(this.credential instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential)) {
            throw RangeError("Can only generate the account SAS when the client is initialized with a shared key credential");
          }

          if (expiresOn === undefined) {
            var now = new Date();
            expiresOn = new Date(now.getTime() + 3600 * 1000);
          }

          var sas = (0, _AccountSASSignatureValues.generateAccountSASQueryParameters)(Object.assign({
            permissions: permissions,
            expiresOn: expiresOn,
            resourceTypes: resourceTypes,
            services: _AccountSASServices.AccountSASServices.parse("b").toString()
          }, options), this.credential).toString();
          return (0, _utils.appendToURLQuery)(this.url, sas);
        }
      }], [{
        key: "fromConnectionString",
        value: function fromConnectionString(connectionString, // Legacy, no fix for eslint error without breaking. Disable it for this interface.

        /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
        options) {
          options = options || {};
          var extractedCreds = (0, _utils.extractConnectionStringParts)(connectionString);

          if (extractedCreds.kind === "AccountConnString") {
            if (_coreHttp.isNode) {
              var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);

              if (!options.proxyOptions) {
                options.proxyOptions = (0, _coreHttp.getDefaultProxySettings)(extractedCreds.proxyUri);
              }

              var pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
              return new BlobServiceClient(extractedCreds.url, pipeline);
            } else {
              throw new Error("Account connection string is only supported in Node.js environment");
            }
          } else if (extractedCreds.kind === "SASConnString") {
            var _pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);

            return new BlobServiceClient(extractedCreds.url + "?" + extractedCreds.accountSas, _pipeline);
          } else {
            throw new Error("Connection string must be either an Account connection string or a SAS connection string");
          }
        }
      }]);

      return BlobServiceClient;
    }(_StorageClient2.StorageClient);

    exports.BlobServiceClient = BlobServiceClient;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "@azure/core-tracing": "../node_modules/@azure/core-tracing/dist-esm/src/index.js",
    "./generated/src/operations": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js",
    "./Pipeline": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js",
    "./ContainerClient": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js",
    "./utils/utils.common": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js",
    "./credentials/StorageSharedKeyCredential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js",
    "./credentials/AnonymousCredential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js",
    "@azure/core-paging": "../node_modules/@azure/core-paging/dist-esm/src/index.js",
    "./utils/tracing": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js",
    "./BlobBatchClient": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js",
    "./StorageClient": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js",
    "./sas/AccountSASPermissions": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js",
    "./sas/AccountSASSignatureValues": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js",
    "./sas/AccountSASServices": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js"
  }],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponse.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  }, {}],
  "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      RestError: true,
      BlockBlobTier: true,
      PremiumPageBlobTier: true,
      logger: true
    };
    Object.defineProperty(exports, "BlockBlobTier", {
      enumerable: true,
      get: function () {
        return _models.BlockBlobTier;
      }
    });
    Object.defineProperty(exports, "PremiumPageBlobTier", {
      enumerable: true,
      get: function () {
        return _models.PremiumPageBlobTier;
      }
    });
    Object.defineProperty(exports, "RestError", {
      enumerable: true,
      get: function () {
        return _coreHttp.RestError;
      }
    });
    Object.defineProperty(exports, "logger", {
      enumerable: true,
      get: function () {
        return _log.logger;
      }
    });

    var _coreHttp = require("@azure/core-http");

    var _BlobServiceClient = require("./BlobServiceClient");

    Object.keys(_BlobServiceClient).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _BlobServiceClient[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _BlobServiceClient[key];
        }
      });
    });

    var _Clients = require("./Clients");

    Object.keys(_Clients).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _Clients[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _Clients[key];
        }
      });
    });

    var _ContainerClient = require("./ContainerClient");

    Object.keys(_ContainerClient).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _ContainerClient[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _ContainerClient[key];
        }
      });
    });

    var _BlobLeaseClient = require("./BlobLeaseClient");

    Object.keys(_BlobLeaseClient).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _BlobLeaseClient[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _BlobLeaseClient[key];
        }
      });
    });

    var _BlobBatch = require("./BlobBatch");

    Object.keys(_BlobBatch).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _BlobBatch[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _BlobBatch[key];
        }
      });
    });

    var _BlobBatchClient = require("./BlobBatchClient");

    Object.keys(_BlobBatchClient).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _BlobBatchClient[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _BlobBatchClient[key];
        }
      });
    });

    var _BatchResponse = require("./BatchResponse");

    Object.keys(_BatchResponse).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _BatchResponse[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _BatchResponse[key];
        }
      });
    });

    var _StorageBrowserPolicyFactory = require("./StorageBrowserPolicyFactory");

    Object.keys(_StorageBrowserPolicyFactory).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _StorageBrowserPolicyFactory[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _StorageBrowserPolicyFactory[key];
        }
      });
    });

    var _AnonymousCredential = require("./credentials/AnonymousCredential");

    Object.keys(_AnonymousCredential).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _AnonymousCredential[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _AnonymousCredential[key];
        }
      });
    });

    var _Credential = require("./credentials/Credential");

    Object.keys(_Credential).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _Credential[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _Credential[key];
        }
      });
    });

    var _models = require("./models");

    var _Pipeline = require("./Pipeline");

    Object.keys(_Pipeline).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _Pipeline[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _Pipeline[key];
        }
      });
    });

    var _AnonymousCredentialPolicy = require("./policies/AnonymousCredentialPolicy");

    Object.keys(_AnonymousCredentialPolicy).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _AnonymousCredentialPolicy[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _AnonymousCredentialPolicy[key];
        }
      });
    });

    var _CredentialPolicy = require("./policies/CredentialPolicy");

    Object.keys(_CredentialPolicy).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _CredentialPolicy[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _CredentialPolicy[key];
        }
      });
    });

    var _StorageRetryPolicyFactory = require("./StorageRetryPolicyFactory");

    Object.keys(_StorageRetryPolicyFactory).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _StorageRetryPolicyFactory[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _StorageRetryPolicyFactory[key];
        }
      });
    });

    var _generatedModels = require("./generatedModels");

    Object.keys(_generatedModels).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _generatedModels[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
          return _generatedModels[key];
        }
      });
    });

    var _log = require("./log");
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "./BlobServiceClient": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js",
    "./Clients": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js",
    "./ContainerClient": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js",
    "./BlobLeaseClient": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js",
    "./BlobBatch": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js",
    "./BlobBatchClient": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js",
    "./BatchResponse": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponse.js",
    "./StorageBrowserPolicyFactory": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js",
    "./credentials/AnonymousCredential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js",
    "./credentials/Credential": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js",
    "./models": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js",
    "./Pipeline": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js",
    "./policies/AnonymousCredentialPolicy": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js",
    "./policies/CredentialPolicy": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js",
    "./StorageRetryPolicyFactory": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js",
    "./generatedModels": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js",
    "./log": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js"
  }],
  "../node_modules/engine.io-parser/build/esm/commons.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PACKET_TYPES_REVERSE = exports.PACKET_TYPES = exports.ERROR_PACKET = void 0;
    const PACKET_TYPES = Object.create(null); // no Map = no polyfill

    exports.PACKET_TYPES = PACKET_TYPES;
    PACKET_TYPES["open"] = "0";
    PACKET_TYPES["close"] = "1";
    PACKET_TYPES["ping"] = "2";
    PACKET_TYPES["pong"] = "3";
    PACKET_TYPES["message"] = "4";
    PACKET_TYPES["upgrade"] = "5";
    PACKET_TYPES["noop"] = "6";
    const PACKET_TYPES_REVERSE = Object.create(null);
    exports.PACKET_TYPES_REVERSE = PACKET_TYPES_REVERSE;
    Object.keys(PACKET_TYPES).forEach(key => {
      PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
    });
    const ERROR_PACKET = {
      type: "error",
      data: "parser error"
    };
    exports.ERROR_PACKET = ERROR_PACKET;
  }, {}],
  "../node_modules/engine.io-parser/build/esm/encodePacket.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _commons = require("./commons.js");

    const withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]";
    const withNativeArrayBuffer = typeof ArrayBuffer === "function"; // ArrayBuffer.isView method is not defined in IE10

    const isView = obj => {
      return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;
    };

    const encodePacket = (_ref7, supportsBinary, callback) => {
      let {
        type,
        data
      } = _ref7;

      if (withNativeBlob && data instanceof Blob) {
        if (supportsBinary) {
          return callback(data);
        } else {
          return encodeBlobAsBase64(data, callback);
        }
      } else if (withNativeArrayBuffer && (data instanceof ArrayBuffer || isView(data))) {
        if (supportsBinary) {
          return callback(data);
        } else {
          return encodeBlobAsBase64(new Blob([data]), callback);
        }
      } // plain string


      return callback(_commons.PACKET_TYPES[type] + (data || ""));
    };

    const encodeBlobAsBase64 = (data, callback) => {
      const fileReader = new FileReader();

      fileReader.onload = function () {
        const content = fileReader.result.split(",")[1];
        callback("b" + content);
      };

      return fileReader.readAsDataURL(data);
    };

    var _default = encodePacket;
    exports.default = _default;
  }, {
    "./commons.js": "../node_modules/engine.io-parser/build/esm/commons.js"
  }],
  "../node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.encode = exports.decode = void 0;
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; // Use a lookup table to find the index.

    const lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);

    for (let i = 0; i < chars.length; i++) {
      lookup[chars.charCodeAt(i)] = i;
    }

    const encode = arraybuffer => {
      let bytes = new Uint8Array(arraybuffer),
          i,
          len = bytes.length,
          base64 = '';

      for (i = 0; i < len; i += 3) {
        base64 += chars[bytes[i] >> 2];
        base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
        base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
        base64 += chars[bytes[i + 2] & 63];
      }

      if (len % 3 === 2) {
        base64 = base64.substring(0, base64.length - 1) + '=';
      } else if (len % 3 === 1) {
        base64 = base64.substring(0, base64.length - 2) + '==';
      }

      return base64;
    };

    exports.encode = encode;

    const decode = base64 => {
      let bufferLength = base64.length * 0.75,
          len = base64.length,
          i,
          p = 0,
          encoded1,
          encoded2,
          encoded3,
          encoded4;

      if (base64[base64.length - 1] === '=') {
        bufferLength--;

        if (base64[base64.length - 2] === '=') {
          bufferLength--;
        }
      }

      const arraybuffer = new ArrayBuffer(bufferLength),
            bytes = new Uint8Array(arraybuffer);

      for (i = 0; i < len; i += 4) {
        encoded1 = lookup[base64.charCodeAt(i)];
        encoded2 = lookup[base64.charCodeAt(i + 1)];
        encoded3 = lookup[base64.charCodeAt(i + 2)];
        encoded4 = lookup[base64.charCodeAt(i + 3)];
        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
      }

      return arraybuffer;
    };

    exports.decode = decode;
  }, {}],
  "../node_modules/engine.io-parser/build/esm/decodePacket.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _commons = require("./commons.js");

    var _base64Arraybuffer = require("./contrib/base64-arraybuffer.js");

    const withNativeArrayBuffer = typeof ArrayBuffer === "function";

    const decodePacket = (encodedPacket, binaryType) => {
      if (typeof encodedPacket !== "string") {
        return {
          type: "message",
          data: mapBinary(encodedPacket, binaryType)
        };
      }

      const type = encodedPacket.charAt(0);

      if (type === "b") {
        return {
          type: "message",
          data: decodeBase64Packet(encodedPacket.substring(1), binaryType)
        };
      }

      const packetType = _commons.PACKET_TYPES_REVERSE[type];

      if (!packetType) {
        return _commons.ERROR_PACKET;
      }

      return encodedPacket.length > 1 ? {
        type: _commons.PACKET_TYPES_REVERSE[type],
        data: encodedPacket.substring(1)
      } : {
        type: _commons.PACKET_TYPES_REVERSE[type]
      };
    };

    const decodeBase64Packet = (data, binaryType) => {
      if (withNativeArrayBuffer) {
        const decoded = (0, _base64Arraybuffer.decode)(data);
        return mapBinary(decoded, binaryType);
      } else {
        return {
          base64: true,
          data
        }; // fallback for old browsers
      }
    };

    const mapBinary = (data, binaryType) => {
      switch (binaryType) {
        case "blob":
          return data instanceof ArrayBuffer ? new Blob([data]) : data;

        case "arraybuffer":
        default:
          return data;
        // assuming the data is already an ArrayBuffer
      }
    };

    var _default = decodePacket;
    exports.default = _default;
  }, {
    "./commons.js": "../node_modules/engine.io-parser/build/esm/commons.js",
    "./contrib/base64-arraybuffer.js": "../node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js"
  }],
  "../node_modules/engine.io-parser/build/esm/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "decodePacket", {
      enumerable: true,
      get: function () {
        return _decodePacket.default;
      }
    });
    exports.decodePayload = void 0;
    Object.defineProperty(exports, "encodePacket", {
      enumerable: true,
      get: function () {
        return _encodePacket.default;
      }
    });
    exports.protocol = exports.encodePayload = void 0;

    var _encodePacket = _interopRequireDefault(require("./encodePacket.js"));

    var _decodePacket = _interopRequireDefault(require("./decodePacket.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    const SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text

    const encodePayload = (packets, callback) => {
      // some packets may be added to the array while encoding, so the initial length must be saved
      const length = packets.length;
      const encodedPackets = new Array(length);
      let count = 0;
      packets.forEach((packet, i) => {
        // force base64 encoding for binary packets
        (0, _encodePacket.default)(packet, false, encodedPacket => {
          encodedPackets[i] = encodedPacket;

          if (++count === length) {
            callback(encodedPackets.join(SEPARATOR));
          }
        });
      });
    };

    exports.encodePayload = encodePayload;

    const decodePayload = (encodedPayload, binaryType) => {
      const encodedPackets = encodedPayload.split(SEPARATOR);
      const packets = [];

      for (let i = 0; i < encodedPackets.length; i++) {
        const decodedPacket = (0, _decodePacket.default)(encodedPackets[i], binaryType);
        packets.push(decodedPacket);

        if (decodedPacket.type === "error") {
          break;
        }
      }

      return packets;
    };

    exports.decodePayload = decodePayload;
    const protocol = 4;
    exports.protocol = protocol;
  }, {
    "./encodePacket.js": "../node_modules/engine.io-parser/build/esm/encodePacket.browser.js",
    "./decodePacket.js": "../node_modules/engine.io-parser/build/esm/decodePacket.browser.js"
  }],
  "../node_modules/@socket.io/component-emitter/index.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Emitter = Emitter;
    /**
     * Initialize a new `Emitter`.
     *
     * @api public
     */

    function Emitter(obj) {
      if (obj) return mixin(obj);
    }
    /**
     * Mixin the emitter properties.
     *
     * @param {Object} obj
     * @return {Object}
     * @api private
     */


    function mixin(obj) {
      for (var key in Emitter.prototype) {
        obj[key] = Emitter.prototype[key];
      }

      return obj;
    }
    /**
     * Listen on the given `event` with `fn`.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */


    Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
      this._callbacks = this._callbacks || {};
      (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
      return this;
    };
    /**
     * Adds an `event` listener that will be invoked a single
     * time then automatically removed.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */


    Emitter.prototype.once = function (event, fn) {
      function on() {
        this.off(event, on);
        fn.apply(this, arguments);
      }

      on.fn = fn;
      this.on(event, on);
      return this;
    };
    /**
     * Remove the given callback for `event` or all
     * registered callbacks.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */


    Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
      this._callbacks = this._callbacks || {}; // all

      if (0 == arguments.length) {
        this._callbacks = {};
        return this;
      } // specific event


      var callbacks = this._callbacks['$' + event];
      if (!callbacks) return this; // remove all handlers

      if (1 == arguments.length) {
        delete this._callbacks['$' + event];
        return this;
      } // remove specific handler


      var cb;

      for (var i = 0; i < callbacks.length; i++) {
        cb = callbacks[i];

        if (cb === fn || cb.fn === fn) {
          callbacks.splice(i, 1);
          break;
        }
      } // Remove event specific arrays for event types that no
      // one is subscribed for to avoid memory leak.


      if (callbacks.length === 0) {
        delete this._callbacks['$' + event];
      }

      return this;
    };
    /**
     * Emit `event` with the given args.
     *
     * @param {String} event
     * @param {Mixed} ...
     * @return {Emitter}
     */


    Emitter.prototype.emit = function (event) {
      this._callbacks = this._callbacks || {};
      var args = new Array(arguments.length - 1),
          callbacks = this._callbacks['$' + event];

      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }

      if (callbacks) {
        callbacks = callbacks.slice(0);

        for (var i = 0, len = callbacks.length; i < len; ++i) {
          callbacks[i].apply(this, args);
        }
      }

      return this;
    }; // alias used for reserved events (protected method)


    Emitter.prototype.emitReserved = Emitter.prototype.emit;
    /**
     * Return array of callbacks for `event`.
     *
     * @param {String} event
     * @return {Array}
     * @api public
     */

    Emitter.prototype.listeners = function (event) {
      this._callbacks = this._callbacks || {};
      return this._callbacks['$' + event] || [];
    };
    /**
     * Check if this emitter has `event` handlers.
     *
     * @param {String} event
     * @return {Boolean}
     * @api public
     */


    Emitter.prototype.hasListeners = function (event) {
      return !!this.listeners(event).length;
    };
  }, {}],
  "../node_modules/engine.io-client/build/esm/globalThis.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.globalThisShim = void 0;

    const globalThisShim = (() => {
      if (typeof self !== "undefined") {
        return self;
      } else if (typeof window !== "undefined") {
        return window;
      } else {
        return Function("return this")();
      }
    })();

    exports.globalThisShim = globalThisShim;
  }, {}],
  "../node_modules/engine.io-client/build/esm/util.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.byteLength = byteLength;
    exports.installTimerFunctions = installTimerFunctions;
    exports.pick = pick;

    var _globalThis = require("./globalThis.js");

    function pick(obj) {
      for (var _len2 = arguments.length, attr = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        attr[_key2 - 1] = arguments[_key2];
      }

      return attr.reduce((acc, k) => {
        if (obj.hasOwnProperty(k)) {
          acc[k] = obj[k];
        }

        return acc;
      }, {});
    } // Keep a reference to the real timeout functions so they can be used when overridden


    const NATIVE_SET_TIMEOUT = setTimeout;
    const NATIVE_CLEAR_TIMEOUT = clearTimeout;

    function installTimerFunctions(obj, opts) {
      if (opts.useNativeTimers) {
        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(_globalThis.globalThisShim);
        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(_globalThis.globalThisShim);
      } else {
        obj.setTimeoutFn = setTimeout.bind(_globalThis.globalThisShim);
        obj.clearTimeoutFn = clearTimeout.bind(_globalThis.globalThisShim);
      }
    } // base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)


    const BASE64_OVERHEAD = 1.33; // we could also have used `new Blob([obj]).size`, but it isn't supported in IE9

    function byteLength(obj) {
      if (typeof obj === "string") {
        return utf8Length(obj);
      } // arraybuffer or blob


      return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);
    }

    function utf8Length(str) {
      let c = 0,
          length = 0;

      for (let i = 0, l = str.length; i < l; i++) {
        c = str.charCodeAt(i);

        if (c < 0x80) {
          length += 1;
        } else if (c < 0x800) {
          length += 2;
        } else if (c < 0xd800 || c >= 0xe000) {
          length += 3;
        } else {
          i++;
          length += 4;
        }
      }

      return length;
    }
  }, {
    "./globalThis.js": "../node_modules/engine.io-client/build/esm/globalThis.browser.js"
  }],
  "../node_modules/engine.io-client/build/esm/transport.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Transport = void 0;

    var _engine = require("engine.io-parser");

    var _componentEmitter = require("@socket.io/component-emitter");

    var _util = require("./util.js");

    class TransportError extends Error {
      constructor(reason, description, context) {
        super(reason);
        this.description = description;
        this.context = context;
        this.type = "TransportError";
      }

    }

    class Transport extends _componentEmitter.Emitter {
      /**
       * Transport abstract constructor.
       *
       * @param {Object} options.
       * @api private
       */
      constructor(opts) {
        super();
        this.writable = false;
        (0, _util.installTimerFunctions)(this, opts);
        this.opts = opts;
        this.query = opts.query;
        this.readyState = "";
        this.socket = opts.socket;
      }
      /**
       * Emits an error.
       *
       * @param {String} reason
       * @param description
       * @param context - the error context
       * @return {Transport} for chaining
       * @api protected
       */


      onError(reason, description, context) {
        super.emitReserved("error", new TransportError(reason, description, context));
        return this;
      }
      /**
       * Opens the transport.
       *
       * @api public
       */


      open() {
        if ("closed" === this.readyState || "" === this.readyState) {
          this.readyState = "opening";
          this.doOpen();
        }

        return this;
      }
      /**
       * Closes the transport.
       *
       * @api public
       */


      close() {
        if ("opening" === this.readyState || "open" === this.readyState) {
          this.doClose();
          this.onClose();
        }

        return this;
      }
      /**
       * Sends multiple packets.
       *
       * @param {Array} packets
       * @api public
       */


      send(packets) {
        if ("open" === this.readyState) {
          this.write(packets);
        } else {// this might happen if the transport was silently closed in the beforeunload event handler
        }
      }
      /**
       * Called upon open
       *
       * @api protected
       */


      onOpen() {
        this.readyState = "open";
        this.writable = true;
        super.emitReserved("open");
      }
      /**
       * Called with data.
       *
       * @param {String} data
       * @api protected
       */


      onData(data) {
        const packet = (0, _engine.decodePacket)(data, this.socket.binaryType);
        this.onPacket(packet);
      }
      /**
       * Called with a decoded packet.
       *
       * @api protected
       */


      onPacket(packet) {
        super.emitReserved("packet", packet);
      }
      /**
       * Called upon close.
       *
       * @api protected
       */


      onClose(details) {
        this.readyState = "closed";
        super.emitReserved("close", details);
      }

    }

    exports.Transport = Transport;
  }, {
    "engine.io-parser": "../node_modules/engine.io-parser/build/esm/index.js",
    "@socket.io/component-emitter": "../node_modules/@socket.io/component-emitter/index.mjs",
    "./util.js": "../node_modules/engine.io-client/build/esm/util.js"
  }],
  "../node_modules/engine.io-client/build/esm/contrib/yeast.js": [function (require, module, exports) {
    // imported from https://github.com/unshiftio/yeast
    'use strict';

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.decode = decode;
    exports.encode = encode;
    exports.yeast = yeast;
    const alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),
          length = 64,
          map = {};
    let seed = 0,
        i = 0,
        prev;
    /**
     * Return a string representing the specified number.
     *
     * @param {Number} num The number to convert.
     * @returns {String} The string representation of the number.
     * @api public
     */

    function encode(num) {
      let encoded = '';

      do {
        encoded = alphabet[num % length] + encoded;
        num = Math.floor(num / length);
      } while (num > 0);

      return encoded;
    }
    /**
     * Return the integer value specified by the given string.
     *
     * @param {String} str The string to convert.
     * @returns {Number} The integer value represented by the string.
     * @api public
     */


    function decode(str) {
      let decoded = 0;

      for (i = 0; i < str.length; i++) {
        decoded = decoded * length + map[str.charAt(i)];
      }

      return decoded;
    }
    /**
     * Yeast: A tiny growing id generator.
     *
     * @returns {String} A unique id.
     * @api public
     */


    function yeast() {
      const now = encode(+new Date());
      if (now !== prev) return seed = 0, prev = now;
      return now + '.' + encode(seed++);
    } //
    // Map each character to its index.
    //


    for (; i < length; i++) map[alphabet[i]] = i;
  }, {}],
  "../node_modules/engine.io-client/build/esm/contrib/parseqs.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.decode = decode;
    exports.encode = encode; // imported from https://github.com/galkn/querystring

    /**
     * Compiles a querystring
     * Returns string representation of the object
     *
     * @param {Object}
     * @api private
     */

    function encode(obj) {
      let str = '';

      for (let i in obj) {
        if (obj.hasOwnProperty(i)) {
          if (str.length) str += '&';
          str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
        }
      }

      return str;
    }
    /**
     * Parses a simple querystring into an object
     *
     * @param {String} qs
     * @api private
     */


    function decode(qs) {
      let qry = {};
      let pairs = qs.split('&');

      for (let i = 0, l = pairs.length; i < l; i++) {
        let pair = pairs[i].split('=');
        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
      }

      return qry;
    }
  }, {}],
  "../node_modules/engine.io-client/build/esm/contrib/has-cors.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.hasCORS = void 0; // imported from https://github.com/component/has-cors

    let value = false;

    try {
      value = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();
    } catch (err) {// if XMLHttp support is disabled in IE then it will throw
      // when trying to create
    }

    const hasCORS = value;
    exports.hasCORS = hasCORS;
  }, {}],
  "../node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.XHR = XHR;

    var _hasCors = require("../contrib/has-cors.js");

    var _globalThis = require("../globalThis.js"); // browser shim for xmlhttprequest module


    function XHR(opts) {
      const xdomain = opts.xdomain; // XMLHttpRequest can be disabled on IE

      try {
        if ("undefined" !== typeof XMLHttpRequest && (!xdomain || _hasCors.hasCORS)) {
          return new XMLHttpRequest();
        }
      } catch (e) {}

      if (!xdomain) {
        try {
          return new _globalThis.globalThisShim[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
        } catch (e) {}
      }
    }
  }, {
    "../contrib/has-cors.js": "../node_modules/engine.io-client/build/esm/contrib/has-cors.js",
    "../globalThis.js": "../node_modules/engine.io-client/build/esm/globalThis.browser.js"
  }],
  "../node_modules/engine.io-client/build/esm/transports/polling.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Request = exports.Polling = void 0;

    var _transport = require("../transport.js");

    var _yeast = require("../contrib/yeast.js");

    var _parseqs = require("../contrib/parseqs.js");

    var _engine = require("engine.io-parser");

    var _xmlhttprequest = require("./xmlhttprequest.js");

    var _componentEmitter = require("@socket.io/component-emitter");

    var _util = require("../util.js");

    var _globalThis = require("../globalThis.js");

    function empty() {}

    const hasXHR2 = function () {
      const xhr = new _xmlhttprequest.XHR({
        xdomain: false
      });
      return null != xhr.responseType;
    }();

    class Polling extends _transport.Transport {
      /**
       * XHR Polling constructor.
       *
       * @param {Object} opts
       * @api public
       */
      constructor(opts) {
        super(opts);
        this.polling = false;

        if (typeof location !== "undefined") {
          const isSSL = "https:" === location.protocol;
          let port = location.port; // some user agents have empty `location.port`

          if (!port) {
            port = isSSL ? "443" : "80";
          }

          this.xd = typeof location !== "undefined" && opts.hostname !== location.hostname || port !== opts.port;
          this.xs = opts.secure !== isSSL;
        }
        /**
         * XHR supports binary
         */


        const forceBase64 = opts && opts.forceBase64;
        this.supportsBinary = hasXHR2 && !forceBase64;
      }
      /**
       * Transport name.
       */


      get name() {
        return "polling";
      }
      /**
       * Opens the socket (triggers polling). We write a PING message to determine
       * when the transport is open.
       *
       * @api private
       */


      doOpen() {
        this.poll();
      }
      /**
       * Pauses polling.
       *
       * @param {Function} callback upon buffers are flushed and transport is paused
       * @api private
       */


      pause(onPause) {
        this.readyState = "pausing";

        const pause = () => {
          this.readyState = "paused";
          onPause();
        };

        if (this.polling || !this.writable) {
          let total = 0;

          if (this.polling) {
            total++;
            this.once("pollComplete", function () {
              --total || pause();
            });
          }

          if (!this.writable) {
            total++;
            this.once("drain", function () {
              --total || pause();
            });
          }
        } else {
          pause();
        }
      }
      /**
       * Starts polling cycle.
       *
       * @api public
       */


      poll() {
        this.polling = true;
        this.doPoll();
        this.emitReserved("poll");
      }
      /**
       * Overloads onData to detect payloads.
       *
       * @api private
       */


      onData(data) {
        const callback = packet => {
          // if its the first message we consider the transport open
          if ("opening" === this.readyState && packet.type === "open") {
            this.onOpen();
          } // if its a close packet, we close the ongoing requests


          if ("close" === packet.type) {
            this.onClose({
              description: "transport closed by the server"
            });
            return false;
          } // otherwise bypass onData and handle the message


          this.onPacket(packet);
        }; // decode payload


        (0, _engine.decodePayload)(data, this.socket.binaryType).forEach(callback); // if an event did not trigger closing

        if ("closed" !== this.readyState) {
          // if we got data we're not polling
          this.polling = false;
          this.emitReserved("pollComplete");

          if ("open" === this.readyState) {
            this.poll();
          } else {}
        }
      }
      /**
       * For polling, send a close packet.
       *
       * @api private
       */


      doClose() {
        const close = () => {
          this.write([{
            type: "close"
          }]);
        };

        if ("open" === this.readyState) {
          close();
        } else {
          // in case we're trying to close while
          // handshaking is in progress (GH-164)
          this.once("open", close);
        }
      }
      /**
       * Writes a packets payload.
       *
       * @param {Array} data packets
       * @param {Function} drain callback
       * @api private
       */


      write(packets) {
        this.writable = false;
        (0, _engine.encodePayload)(packets, data => {
          this.doWrite(data, () => {
            this.writable = true;
            this.emitReserved("drain");
          });
        });
      }
      /**
       * Generates uri for connection.
       *
       * @api private
       */


      uri() {
        let query = this.query || {};
        const schema = this.opts.secure ? "https" : "http";
        let port = ""; // cache busting is forced

        if (false !== this.opts.timestampRequests) {
          query[this.opts.timestampParam] = (0, _yeast.yeast)();
        }

        if (!this.supportsBinary && !query.sid) {
          query.b64 = 1;
        } // avoid port if default for schema


        if (this.opts.port && ("https" === schema && Number(this.opts.port) !== 443 || "http" === schema && Number(this.opts.port) !== 80)) {
          port = ":" + this.opts.port;
        }

        const encodedQuery = (0, _parseqs.encode)(query);
        const ipv6 = this.opts.hostname.indexOf(":") !== -1;
        return schema + "://" + (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? "?" + encodedQuery : "");
      }
      /**
       * Creates a request.
       *
       * @param {String} method
       * @api private
       */


      request() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        Object.assign(opts, {
          xd: this.xd,
          xs: this.xs
        }, this.opts);
        return new Request(this.uri(), opts);
      }
      /**
       * Sends data.
       *
       * @param {String} data to send.
       * @param {Function} called upon flush.
       * @api private
       */


      doWrite(data, fn) {
        const req = this.request({
          method: "POST",
          data: data
        });
        req.on("success", fn);
        req.on("error", (xhrStatus, context) => {
          this.onError("xhr post error", xhrStatus, context);
        });
      }
      /**
       * Starts a poll cycle.
       *
       * @api private
       */


      doPoll() {
        const req = this.request();
        req.on("data", this.onData.bind(this));
        req.on("error", (xhrStatus, context) => {
          this.onError("xhr poll error", xhrStatus, context);
        });
        this.pollXhr = req;
      }

    }

    exports.Polling = Polling;

    class Request extends _componentEmitter.Emitter {
      /**
       * Request constructor
       *
       * @param {Object} options
       * @api public
       */
      constructor(uri, opts) {
        super();
        (0, _util.installTimerFunctions)(this, opts);
        this.opts = opts;
        this.method = opts.method || "GET";
        this.uri = uri;
        this.async = false !== opts.async;
        this.data = undefined !== opts.data ? opts.data : null;
        this.create();
      }
      /**
       * Creates the XHR object and sends the request.
       *
       * @api private
       */


      create() {
        const opts = (0, _util.pick)(this.opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
        opts.xdomain = !!this.opts.xd;
        opts.xscheme = !!this.opts.xs;
        const xhr = this.xhr = new _xmlhttprequest.XHR(opts);

        try {
          xhr.open(this.method, this.uri, this.async);

          try {
            if (this.opts.extraHeaders) {
              xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);

              for (let i in this.opts.extraHeaders) {
                if (this.opts.extraHeaders.hasOwnProperty(i)) {
                  xhr.setRequestHeader(i, this.opts.extraHeaders[i]);
                }
              }
            }
          } catch (e) {}

          if ("POST" === this.method) {
            try {
              xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
            } catch (e) {}
          }

          try {
            xhr.setRequestHeader("Accept", "*/*");
          } catch (e) {} // ie6 check


          if ("withCredentials" in xhr) {
            xhr.withCredentials = this.opts.withCredentials;
          }

          if (this.opts.requestTimeout) {
            xhr.timeout = this.opts.requestTimeout;
          }

          xhr.onreadystatechange = () => {
            if (4 !== xhr.readyState) return;

            if (200 === xhr.status || 1223 === xhr.status) {
              this.onLoad();
            } else {
              // make sure the `error` event handler that's user-set
              // does not throw in the same tick and gets caught here
              this.setTimeoutFn(() => {
                this.onError(typeof xhr.status === "number" ? xhr.status : 0);
              }, 0);
            }
          };

          xhr.send(this.data);
        } catch (e) {
          // Need to defer since .create() is called directly from the constructor
          // and thus the 'error' event can only be only bound *after* this exception
          // occurs.  Therefore, also, we cannot throw here at all.
          this.setTimeoutFn(() => {
            this.onError(e);
          }, 0);
          return;
        }

        if (typeof document !== "undefined") {
          this.index = Request.requestsCount++;
          Request.requests[this.index] = this;
        }
      }
      /**
       * Called upon error.
       *
       * @api private
       */


      onError(err) {
        this.emitReserved("error", err, this.xhr);
        this.cleanup(true);
      }
      /**
       * Cleans up house.
       *
       * @api private
       */


      cleanup(fromError) {
        if ("undefined" === typeof this.xhr || null === this.xhr) {
          return;
        }

        this.xhr.onreadystatechange = empty;

        if (fromError) {
          try {
            this.xhr.abort();
          } catch (e) {}
        }

        if (typeof document !== "undefined") {
          delete Request.requests[this.index];
        }

        this.xhr = null;
      }
      /**
       * Called upon load.
       *
       * @api private
       */


      onLoad() {
        const data = this.xhr.responseText;

        if (data !== null) {
          this.emitReserved("data", data);
          this.emitReserved("success");
          this.cleanup();
        }
      }
      /**
       * Aborts the request.
       *
       * @api public
       */


      abort() {
        this.cleanup();
      }

    }

    exports.Request = Request;
    Request.requestsCount = 0;
    Request.requests = {};
    /**
     * Aborts pending requests when unloading the window. This is needed to prevent
     * memory leaks (e.g. when using IE) and to ensure that no spurious error is
     * emitted.
     */

    if (typeof document !== "undefined") {
      // @ts-ignore
      if (typeof attachEvent === "function") {
        // @ts-ignore
        attachEvent("onunload", unloadHandler);
      } else if (typeof addEventListener === "function") {
        const terminationEvent = "onpagehide" in _globalThis.globalThisShim ? "pagehide" : "unload";
        addEventListener(terminationEvent, unloadHandler, false);
      }
    }

    function unloadHandler() {
      for (let i in Request.requests) {
        if (Request.requests.hasOwnProperty(i)) {
          Request.requests[i].abort();
        }
      }
    }
  }, {
    "../transport.js": "../node_modules/engine.io-client/build/esm/transport.js",
    "../contrib/yeast.js": "../node_modules/engine.io-client/build/esm/contrib/yeast.js",
    "../contrib/parseqs.js": "../node_modules/engine.io-client/build/esm/contrib/parseqs.js",
    "engine.io-parser": "../node_modules/engine.io-parser/build/esm/index.js",
    "./xmlhttprequest.js": "../node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js",
    "@socket.io/component-emitter": "../node_modules/@socket.io/component-emitter/index.mjs",
    "../util.js": "../node_modules/engine.io-client/build/esm/util.js",
    "../globalThis.js": "../node_modules/engine.io-client/build/esm/globalThis.browser.js"
  }],
  "../node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.usingBrowserWebSocket = exports.nextTick = exports.defaultBinaryType = exports.WebSocket = void 0;

    var _globalThis = require("../globalThis.js");

    const nextTick = (() => {
      const isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";

      if (isPromiseAvailable) {
        return cb => Promise.resolve().then(cb);
      } else {
        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);
      }
    })();

    exports.nextTick = nextTick;
    const WebSocket = _globalThis.globalThisShim.WebSocket || _globalThis.globalThisShim.MozWebSocket;
    exports.WebSocket = WebSocket;
    const usingBrowserWebSocket = true;
    exports.usingBrowserWebSocket = usingBrowserWebSocket;
    const defaultBinaryType = "arraybuffer";
    exports.defaultBinaryType = defaultBinaryType;
  }, {
    "../globalThis.js": "../node_modules/engine.io-client/build/esm/globalThis.browser.js"
  }],
  "../node_modules/engine.io-client/build/esm/transports/websocket.js": [function (require, module, exports) {
    var Buffer = require("buffer").Buffer;

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WS = void 0;

    var _transport = require("../transport.js");

    var _parseqs = require("../contrib/parseqs.js");

    var _yeast = require("../contrib/yeast.js");

    var _util = require("../util.js");

    var _websocketConstructor = require("./websocket-constructor.js");

    var _engine = require("engine.io-parser"); // detect ReactNative environment


    const isReactNative = typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";

    class WS extends _transport.Transport {
      /**
       * WebSocket transport constructor.
       *
       * @api {Object} connection options
       * @api public
       */
      constructor(opts) {
        super(opts);
        this.supportsBinary = !opts.forceBase64;
      }
      /**
       * Transport name.
       *
       * @api public
       */


      get name() {
        return "websocket";
      }
      /**
       * Opens socket.
       *
       * @api private
       */


      doOpen() {
        if (!this.check()) {
          // let probe timeout
          return;
        }

        const uri = this.uri();
        const protocols = this.opts.protocols; // React Native only supports the 'headers' option, and will print a warning if anything else is passed

        const opts = isReactNative ? {} : (0, _util.pick)(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");

        if (this.opts.extraHeaders) {
          opts.headers = this.opts.extraHeaders;
        }

        try {
          this.ws = _websocketConstructor.usingBrowserWebSocket && !isReactNative ? protocols ? new _websocketConstructor.WebSocket(uri, protocols) : new _websocketConstructor.WebSocket(uri) : new _websocketConstructor.WebSocket(uri, protocols, opts);
        } catch (err) {
          return this.emitReserved("error", err);
        }

        this.ws.binaryType = this.socket.binaryType || _websocketConstructor.defaultBinaryType;
        this.addEventListeners();
      }
      /**
       * Adds event listeners to the socket
       *
       * @api private
       */


      addEventListeners() {
        this.ws.onopen = () => {
          if (this.opts.autoUnref) {
            this.ws._socket.unref();
          }

          this.onOpen();
        };

        this.ws.onclose = closeEvent => this.onClose({
          description: "websocket connection closed",
          context: closeEvent
        });

        this.ws.onmessage = ev => this.onData(ev.data);

        this.ws.onerror = e => this.onError("websocket error", e);
      }
      /**
       * Writes data to socket.
       *
       * @param {Array} array of packets.
       * @api private
       */


      write(packets) {
        this.writable = false; // encodePacket efficient as it uses WS framing
        // no need for encodePayload

        for (let i = 0; i < packets.length; i++) {
          const packet = packets[i];
          const lastPacket = i === packets.length - 1;
          (0, _engine.encodePacket)(packet, this.supportsBinary, data => {
            // always create a new object (GH-437)
            const opts = {};

            if (!_websocketConstructor.usingBrowserWebSocket) {
              if (packet.options) {
                opts.compress = packet.options.compress;
              }

              if (this.opts.perMessageDeflate) {
                const len = // @ts-ignore
                "string" === typeof data ? Buffer.byteLength(data) : data.length;

                if (len < this.opts.perMessageDeflate.threshold) {
                  opts.compress = false;
                }
              }
            } // Sometimes the websocket has already been closed but the browser didn't
            // have a chance of informing us about it yet, in that case send will
            // throw an error


            try {
              if (_websocketConstructor.usingBrowserWebSocket) {
                // TypeError is thrown when passing the second argument on Safari
                this.ws.send(data);
              } else {
                this.ws.send(data, opts);
              }
            } catch (e) {}

            if (lastPacket) {
              // fake drain
              // defer to next tick to allow Socket to clear writeBuffer
              (0, _websocketConstructor.nextTick)(() => {
                this.writable = true;
                this.emitReserved("drain");
              }, this.setTimeoutFn);
            }
          });
        }
      }
      /**
       * Closes socket.
       *
       * @api private
       */


      doClose() {
        if (typeof this.ws !== "undefined") {
          this.ws.close();
          this.ws = null;
        }
      }
      /**
       * Generates uri for connection.
       *
       * @api private
       */


      uri() {
        let query = this.query || {};
        const schema = this.opts.secure ? "wss" : "ws";
        let port = ""; // avoid port if default for schema

        if (this.opts.port && ("wss" === schema && Number(this.opts.port) !== 443 || "ws" === schema && Number(this.opts.port) !== 80)) {
          port = ":" + this.opts.port;
        } // append timestamp to URI


        if (this.opts.timestampRequests) {
          query[this.opts.timestampParam] = (0, _yeast.yeast)();
        } // communicate binary support capabilities


        if (!this.supportsBinary) {
          query.b64 = 1;
        }

        const encodedQuery = (0, _parseqs.encode)(query);
        const ipv6 = this.opts.hostname.indexOf(":") !== -1;
        return schema + "://" + (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? "?" + encodedQuery : "");
      }
      /**
       * Feature detection for WebSocket.
       *
       * @return {Boolean} whether this transport is available.
       * @api public
       */


      check() {
        return !!_websocketConstructor.WebSocket;
      }

    }

    exports.WS = WS;
  }, {
    "../transport.js": "../node_modules/engine.io-client/build/esm/transport.js",
    "../contrib/parseqs.js": "../node_modules/engine.io-client/build/esm/contrib/parseqs.js",
    "../contrib/yeast.js": "../node_modules/engine.io-client/build/esm/contrib/yeast.js",
    "../util.js": "../node_modules/engine.io-client/build/esm/util.js",
    "./websocket-constructor.js": "../node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js",
    "engine.io-parser": "../node_modules/engine.io-parser/build/esm/index.js",
    "buffer": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js"
  }],
  "../node_modules/engine.io-client/build/esm/transports/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.transports = void 0;

    var _polling = require("./polling.js");

    var _websocket = require("./websocket.js");

    const transports = {
      websocket: _websocket.WS,
      polling: _polling.Polling
    };
    exports.transports = transports;
  }, {
    "./polling.js": "../node_modules/engine.io-client/build/esm/transports/polling.js",
    "./websocket.js": "../node_modules/engine.io-client/build/esm/transports/websocket.js"
  }],
  "../node_modules/engine.io-client/build/esm/contrib/parseuri.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.parse = parse; // imported from https://github.com/galkn/parseuri

    /**
     * Parses an URI
     *
     * @author Steven Levithan <stevenlevithan.com> (MIT license)
     * @api private
     */

    const re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
    const parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];

    function parse(str) {
      const src = str,
            b = str.indexOf('['),
            e = str.indexOf(']');

      if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
      }

      let m = re.exec(str || ''),
          uri = {},
          i = 14;

      while (i--) {
        uri[parts[i]] = m[i] || '';
      }

      if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
      }

      uri.pathNames = pathNames(uri, uri['path']);
      uri.queryKey = queryKey(uri, uri['query']);
      return uri;
    }

    function pathNames(obj, path) {
      const regx = /\/{2,9}/g,
            names = path.replace(regx, "/").split("/");

      if (path.substr(0, 1) == '/' || path.length === 0) {
        names.splice(0, 1);
      }

      if (path.substr(path.length - 1, 1) == '/') {
        names.splice(names.length - 1, 1);
      }

      return names;
    }

    function queryKey(uri, query) {
      const data = {};
      query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {
        if ($1) {
          data[$1] = $2;
        }
      });
      return data;
    }
  }, {}],
  "../node_modules/engine.io-client/build/esm/socket.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Socket = void 0;

    var _index = require("./transports/index.js");

    var _util = require("./util.js");

    var _parseqs = require("./contrib/parseqs.js");

    var _parseuri = require("./contrib/parseuri.js");

    var _componentEmitter = require("@socket.io/component-emitter");

    var _engine = require("engine.io-parser");

    class Socket extends _componentEmitter.Emitter {
      /**
       * Socket constructor.
       *
       * @param {String|Object} uri or options
       * @param {Object} opts - options
       * @api public
       */
      constructor(uri) {
        let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        super();

        if (uri && "object" === typeof uri) {
          opts = uri;
          uri = null;
        }

        if (uri) {
          uri = (0, _parseuri.parse)(uri);
          opts.hostname = uri.host;
          opts.secure = uri.protocol === "https" || uri.protocol === "wss";
          opts.port = uri.port;
          if (uri.query) opts.query = uri.query;
        } else if (opts.host) {
          opts.hostname = (0, _parseuri.parse)(opts.host).host;
        }

        (0, _util.installTimerFunctions)(this, opts);
        this.secure = null != opts.secure ? opts.secure : typeof location !== "undefined" && "https:" === location.protocol;

        if (opts.hostname && !opts.port) {
          // if no port is specified manually, use the protocol default
          opts.port = this.secure ? "443" : "80";
        }

        this.hostname = opts.hostname || (typeof location !== "undefined" ? location.hostname : "localhost");
        this.port = opts.port || (typeof location !== "undefined" && location.port ? location.port : this.secure ? "443" : "80");
        this.transports = opts.transports || ["polling", "websocket"];
        this.readyState = "";
        this.writeBuffer = [];
        this.prevBufferLen = 0;
        this.opts = Object.assign({
          path: "/engine.io",
          agent: false,
          withCredentials: false,
          upgrade: true,
          timestampParam: "t",
          rememberUpgrade: false,
          rejectUnauthorized: true,
          perMessageDeflate: {
            threshold: 1024
          },
          transportOptions: {},
          closeOnBeforeunload: true
        }, opts);
        this.opts.path = this.opts.path.replace(/\/$/, "") + "/";

        if (typeof this.opts.query === "string") {
          this.opts.query = (0, _parseqs.decode)(this.opts.query);
        } // set on handshake


        this.id = null;
        this.upgrades = null;
        this.pingInterval = null;
        this.pingTimeout = null; // set on heartbeat

        this.pingTimeoutTimer = null;

        if (typeof addEventListener === "function") {
          if (this.opts.closeOnBeforeunload) {
            // Firefox closes the connection when the "beforeunload" event is emitted but not Chrome. This event listener
            // ensures every browser behaves the same (no "disconnect" event at the Socket.IO level when the page is
            // closed/reloaded)
            addEventListener("beforeunload", () => {
              if (this.transport) {
                // silently close the transport
                this.transport.removeAllListeners();
                this.transport.close();
              }
            }, false);
          }

          if (this.hostname !== "localhost") {
            this.offlineEventListener = () => {
              this.onClose("transport close", {
                description: "network connection lost"
              });
            };

            addEventListener("offline", this.offlineEventListener, false);
          }
        }

        this.open();
      }
      /**
       * Creates transport of the given type.
       *
       * @param {String} transport name
       * @return {Transport}
       * @api private
       */


      createTransport(name) {
        const query = Object.assign({}, this.opts.query); // append engine.io protocol identifier

        query.EIO = _engine.protocol; // transport name

        query.transport = name; // session id if we already have one

        if (this.id) query.sid = this.id;
        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {
          query,
          socket: this,
          hostname: this.hostname,
          secure: this.secure,
          port: this.port
        });
        return new _index.transports[name](opts);
      }
      /**
       * Initializes transport to use and starts probe.
       *
       * @api private
       */


      open() {
        let transport;

        if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1) {
          transport = "websocket";
        } else if (0 === this.transports.length) {
          // Emit error on next tick so it can be listened to
          this.setTimeoutFn(() => {
            this.emitReserved("error", "No transports available");
          }, 0);
          return;
        } else {
          transport = this.transports[0];
        }

        this.readyState = "opening"; // Retry with the next transport if the transport is disabled (jsonp: false)

        try {
          transport = this.createTransport(transport);
        } catch (e) {
          this.transports.shift();
          this.open();
          return;
        }

        transport.open();
        this.setTransport(transport);
      }
      /**
       * Sets the current transport. Disables the existing one (if any).
       *
       * @api private
       */


      setTransport(transport) {
        if (this.transport) {
          this.transport.removeAllListeners();
        } // set up transport


        this.transport = transport; // set up transport listeners

        transport.on("drain", this.onDrain.bind(this)).on("packet", this.onPacket.bind(this)).on("error", this.onError.bind(this)).on("close", reason => this.onClose("transport close", reason));
      }
      /**
       * Probes a transport.
       *
       * @param {String} transport name
       * @api private
       */


      probe(name) {
        let transport = this.createTransport(name);
        let failed = false;
        Socket.priorWebsocketSuccess = false;

        const onTransportOpen = () => {
          if (failed) return;
          transport.send([{
            type: "ping",
            data: "probe"
          }]);
          transport.once("packet", msg => {
            if (failed) return;

            if ("pong" === msg.type && "probe" === msg.data) {
              this.upgrading = true;
              this.emitReserved("upgrading", transport);
              if (!transport) return;
              Socket.priorWebsocketSuccess = "websocket" === transport.name;
              this.transport.pause(() => {
                if (failed) return;
                if ("closed" === this.readyState) return;
                cleanup();
                this.setTransport(transport);
                transport.send([{
                  type: "upgrade"
                }]);
                this.emitReserved("upgrade", transport);
                transport = null;
                this.upgrading = false;
                this.flush();
              });
            } else {
              const err = new Error("probe error"); // @ts-ignore

              err.transport = transport.name;
              this.emitReserved("upgradeError", err);
            }
          });
        };

        function freezeTransport() {
          if (failed) return; // Any callback called by transport should be ignored since now

          failed = true;
          cleanup();
          transport.close();
          transport = null;
        } // Handle any error that happens while probing


        const onerror = err => {
          const error = new Error("probe error: " + err); // @ts-ignore

          error.transport = transport.name;
          freezeTransport();
          this.emitReserved("upgradeError", error);
        };

        function onTransportClose() {
          onerror("transport closed");
        } // When the socket is closed while we're probing


        function onclose() {
          onerror("socket closed");
        } // When the socket is upgraded while we're probing


        function onupgrade(to) {
          if (transport && to.name !== transport.name) {
            freezeTransport();
          }
        } // Remove all listeners on the transport and on self


        const cleanup = () => {
          transport.removeListener("open", onTransportOpen);
          transport.removeListener("error", onerror);
          transport.removeListener("close", onTransportClose);
          this.off("close", onclose);
          this.off("upgrading", onupgrade);
        };

        transport.once("open", onTransportOpen);
        transport.once("error", onerror);
        transport.once("close", onTransportClose);
        this.once("close", onclose);
        this.once("upgrading", onupgrade);
        transport.open();
      }
      /**
       * Called when connection is deemed open.
       *
       * @api private
       */


      onOpen() {
        this.readyState = "open";
        Socket.priorWebsocketSuccess = "websocket" === this.transport.name;
        this.emitReserved("open");
        this.flush(); // we check for `readyState` in case an `open`
        // listener already closed the socket

        if ("open" === this.readyState && this.opts.upgrade && this.transport.pause) {
          let i = 0;
          const l = this.upgrades.length;

          for (; i < l; i++) {
            this.probe(this.upgrades[i]);
          }
        }
      }
      /**
       * Handles a packet.
       *
       * @api private
       */


      onPacket(packet) {
        if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
          this.emitReserved("packet", packet); // Socket is live - any packet counts

          this.emitReserved("heartbeat");

          switch (packet.type) {
            case "open":
              this.onHandshake(JSON.parse(packet.data));
              break;

            case "ping":
              this.resetPingTimeout();
              this.sendPacket("pong");
              this.emitReserved("ping");
              this.emitReserved("pong");
              break;

            case "error":
              const err = new Error("server error"); // @ts-ignore

              err.code = packet.data;
              this.onError(err);
              break;

            case "message":
              this.emitReserved("data", packet.data);
              this.emitReserved("message", packet.data);
              break;
          }
        } else {}
      }
      /**
       * Called upon handshake completion.
       *
       * @param {Object} data - handshake obj
       * @api private
       */


      onHandshake(data) {
        this.emitReserved("handshake", data);
        this.id = data.sid;
        this.transport.query.sid = data.sid;
        this.upgrades = this.filterUpgrades(data.upgrades);
        this.pingInterval = data.pingInterval;
        this.pingTimeout = data.pingTimeout;
        this.maxPayload = data.maxPayload;
        this.onOpen(); // In case open handler closes socket

        if ("closed" === this.readyState) return;
        this.resetPingTimeout();
      }
      /**
       * Sets and resets ping timeout timer based on server pings.
       *
       * @api private
       */


      resetPingTimeout() {
        this.clearTimeoutFn(this.pingTimeoutTimer);
        this.pingTimeoutTimer = this.setTimeoutFn(() => {
          this.onClose("ping timeout");
        }, this.pingInterval + this.pingTimeout);

        if (this.opts.autoUnref) {
          this.pingTimeoutTimer.unref();
        }
      }
      /**
       * Called on `drain` event
       *
       * @api private
       */


      onDrain() {
        this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important
        // for example, when upgrading, upgrade packet is sent over,
        // and a nonzero prevBufferLen could cause problems on `drain`

        this.prevBufferLen = 0;

        if (0 === this.writeBuffer.length) {
          this.emitReserved("drain");
        } else {
          this.flush();
        }
      }
      /**
       * Flush write buffers.
       *
       * @api private
       */


      flush() {
        if ("closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
          const packets = this.getWritablePackets();
          this.transport.send(packets); // keep track of current length of writeBuffer
          // splice writeBuffer and callbackBuffer on `drain`

          this.prevBufferLen = packets.length;
          this.emitReserved("flush");
        }
      }
      /**
       * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP
       * long-polling)
       *
       * @private
       */


      getWritablePackets() {
        const shouldCheckPayloadSize = this.maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1;

        if (!shouldCheckPayloadSize) {
          return this.writeBuffer;
        }

        let payloadSize = 1; // first packet type

        for (let i = 0; i < this.writeBuffer.length; i++) {
          const data = this.writeBuffer[i].data;

          if (data) {
            payloadSize += (0, _util.byteLength)(data);
          }

          if (i > 0 && payloadSize > this.maxPayload) {
            return this.writeBuffer.slice(0, i);
          }

          payloadSize += 2; // separator + packet type
        }

        return this.writeBuffer;
      }
      /**
       * Sends a message.
       *
       * @param {String} message.
       * @param {Function} callback function.
       * @param {Object} options.
       * @return {Socket} for chaining.
       * @api public
       */


      write(msg, options, fn) {
        this.sendPacket("message", msg, options, fn);
        return this;
      }

      send(msg, options, fn) {
        this.sendPacket("message", msg, options, fn);
        return this;
      }
      /**
       * Sends a packet.
       *
       * @param {String} packet type.
       * @param {String} data.
       * @param {Object} options.
       * @param {Function} callback function.
       * @api private
       */


      sendPacket(type, data, options, fn) {
        if ("function" === typeof data) {
          fn = data;
          data = undefined;
        }

        if ("function" === typeof options) {
          fn = options;
          options = null;
        }

        if ("closing" === this.readyState || "closed" === this.readyState) {
          return;
        }

        options = options || {};
        options.compress = false !== options.compress;
        const packet = {
          type: type,
          data: data,
          options: options
        };
        this.emitReserved("packetCreate", packet);
        this.writeBuffer.push(packet);
        if (fn) this.once("flush", fn);
        this.flush();
      }
      /**
       * Closes the connection.
       *
       * @api public
       */


      close() {
        const close = () => {
          this.onClose("forced close");
          this.transport.close();
        };

        const cleanupAndClose = () => {
          this.off("upgrade", cleanupAndClose);
          this.off("upgradeError", cleanupAndClose);
          close();
        };

        const waitForUpgrade = () => {
          // wait for upgrade to finish since we can't send packets while pausing a transport
          this.once("upgrade", cleanupAndClose);
          this.once("upgradeError", cleanupAndClose);
        };

        if ("opening" === this.readyState || "open" === this.readyState) {
          this.readyState = "closing";

          if (this.writeBuffer.length) {
            this.once("drain", () => {
              if (this.upgrading) {
                waitForUpgrade();
              } else {
                close();
              }
            });
          } else if (this.upgrading) {
            waitForUpgrade();
          } else {
            close();
          }
        }

        return this;
      }
      /**
       * Called upon transport error
       *
       * @api private
       */


      onError(err) {
        Socket.priorWebsocketSuccess = false;
        this.emitReserved("error", err);
        this.onClose("transport error", err);
      }
      /**
       * Called upon transport close.
       *
       * @api private
       */


      onClose(reason, description) {
        if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
          // clear timers
          this.clearTimeoutFn(this.pingTimeoutTimer); // stop event from firing again for transport

          this.transport.removeAllListeners("close"); // ensure transport won't stay open

          this.transport.close(); // ignore further transport communication

          this.transport.removeAllListeners();

          if (typeof removeEventListener === "function") {
            removeEventListener("offline", this.offlineEventListener, false);
          } // set ready state


          this.readyState = "closed"; // clear session id

          this.id = null; // emit close event

          this.emitReserved("close", reason, description); // clean buffers after, so users can still
          // grab the buffers on `close` event

          this.writeBuffer = [];
          this.prevBufferLen = 0;
        }
      }
      /**
       * Filters upgrades, returning only those matching client transports.
       *
       * @param {Array} server upgrades
       * @api private
       *
       */


      filterUpgrades(upgrades) {
        const filteredUpgrades = [];
        let i = 0;
        const j = upgrades.length;

        for (; i < j; i++) {
          if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);
        }

        return filteredUpgrades;
      }

    }

    exports.Socket = Socket;
    Socket.protocol = _engine.protocol;
  }, {
    "./transports/index.js": "../node_modules/engine.io-client/build/esm/transports/index.js",
    "./util.js": "../node_modules/engine.io-client/build/esm/util.js",
    "./contrib/parseqs.js": "../node_modules/engine.io-client/build/esm/contrib/parseqs.js",
    "./contrib/parseuri.js": "../node_modules/engine.io-client/build/esm/contrib/parseuri.js",
    "@socket.io/component-emitter": "../node_modules/@socket.io/component-emitter/index.mjs",
    "engine.io-parser": "../node_modules/engine.io-parser/build/esm/index.js"
  }],
  "../node_modules/engine.io-client/build/esm/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Socket", {
      enumerable: true,
      get: function () {
        return _socket.Socket;
      }
    });
    Object.defineProperty(exports, "Transport", {
      enumerable: true,
      get: function () {
        return _transport.Transport;
      }
    });
    Object.defineProperty(exports, "installTimerFunctions", {
      enumerable: true,
      get: function () {
        return _util.installTimerFunctions;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function () {
        return _parseuri.parse;
      }
    });
    exports.protocol = void 0;
    Object.defineProperty(exports, "transports", {
      enumerable: true,
      get: function () {
        return _index.transports;
      }
    });

    var _socket = require("./socket.js");

    var _transport = require("./transport.js");

    var _index = require("./transports/index.js");

    var _util = require("./util.js");

    var _parseuri = require("./contrib/parseuri.js");

    const protocol = _socket.Socket.protocol;
    exports.protocol = protocol;
  }, {
    "./socket.js": "../node_modules/engine.io-client/build/esm/socket.js",
    "./transport.js": "../node_modules/engine.io-client/build/esm/transport.js",
    "./transports/index.js": "../node_modules/engine.io-client/build/esm/transports/index.js",
    "./util.js": "../node_modules/engine.io-client/build/esm/util.js",
    "./contrib/parseuri.js": "../node_modules/engine.io-client/build/esm/contrib/parseuri.js"
  }],
  "../node_modules/socket.io-client/build/esm/url.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.url = url;

    var _engine = require("engine.io-client");
    /**
     * URL parser.
     *
     * @param uri - url
     * @param path - the request path of the connection
     * @param loc - An object meant to mimic window.location.
     *        Defaults to window.location.
     * @public
     */


    function url(uri) {
      let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      let loc = arguments.length > 2 ? arguments[2] : undefined;
      let obj = uri; // default to window.location

      loc = loc || typeof location !== "undefined" && location;
      if (null == uri) uri = loc.protocol + "//" + loc.host; // relative path support

      if (typeof uri === "string") {
        if ("/" === uri.charAt(0)) {
          if ("/" === uri.charAt(1)) {
            uri = loc.protocol + uri;
          } else {
            uri = loc.host + uri;
          }
        }

        if (!/^(https?|wss?):\/\//.test(uri)) {
          if ("undefined" !== typeof loc) {
            uri = loc.protocol + "//" + uri;
          } else {
            uri = "https://" + uri;
          }
        } // parse


        obj = (0, _engine.parse)(uri);
      } // make sure we treat `localhost:80` and `localhost` equally


      if (!obj.port) {
        if (/^(http|ws)$/.test(obj.protocol)) {
          obj.port = "80";
        } else if (/^(http|ws)s$/.test(obj.protocol)) {
          obj.port = "443";
        }
      }

      obj.path = obj.path || "/";
      const ipv6 = obj.host.indexOf(":") !== -1;
      const host = ipv6 ? "[" + obj.host + "]" : obj.host; // define unique id

      obj.id = obj.protocol + "://" + host + ":" + obj.port + path; // define href

      obj.href = obj.protocol + "://" + host + (loc && loc.port === obj.port ? "" : ":" + obj.port);
      return obj;
    }
  }, {
    "engine.io-client": "../node_modules/engine.io-client/build/esm/index.js"
  }],
  "../node_modules/socket.io-client/node_modules/socket.io-parser/build/esm/is-binary.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.hasBinary = hasBinary;
    exports.isBinary = isBinary;
    const withNativeArrayBuffer = typeof ArrayBuffer === "function";

    const isView = obj => {
      return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
    };

    const toString = Object.prototype.toString;
    const withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && toString.call(Blob) === "[object BlobConstructor]";
    const withNativeFile = typeof File === "function" || typeof File !== "undefined" && toString.call(File) === "[object FileConstructor]";
    /**
     * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.
     *
     * @private
     */

    function isBinary(obj) {
      return withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)) || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File;
    }

    function hasBinary(obj, toJSON) {
      if (!obj || typeof obj !== "object") {
        return false;
      }

      if (Array.isArray(obj)) {
        for (let i = 0, l = obj.length; i < l; i++) {
          if (hasBinary(obj[i])) {
            return true;
          }
        }

        return false;
      }

      if (isBinary(obj)) {
        return true;
      }

      if (obj.toJSON && typeof obj.toJSON === "function" && arguments.length === 1) {
        return hasBinary(obj.toJSON(), true);
      }

      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
          return true;
        }
      }

      return false;
    }
  }, {}],
  "../node_modules/socket.io-client/node_modules/socket.io-parser/build/esm/binary.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.deconstructPacket = deconstructPacket;
    exports.reconstructPacket = reconstructPacket;

    var _isBinary = require("./is-binary.js");
    /**
     * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.
     *
     * @param {Object} packet - socket.io event packet
     * @return {Object} with deconstructed packet and list of buffers
     * @public
     */


    function deconstructPacket(packet) {
      const buffers = [];
      const packetData = packet.data;
      const pack = packet;
      pack.data = _deconstructPacket(packetData, buffers);
      pack.attachments = buffers.length; // number of binary 'attachments'

      return {
        packet: pack,
        buffers: buffers
      };
    }

    function _deconstructPacket(data, buffers) {
      if (!data) return data;

      if ((0, _isBinary.isBinary)(data)) {
        const placeholder = {
          _placeholder: true,
          num: buffers.length
        };
        buffers.push(data);
        return placeholder;
      } else if (Array.isArray(data)) {
        const newData = new Array(data.length);

        for (let i = 0; i < data.length; i++) {
          newData[i] = _deconstructPacket(data[i], buffers);
        }

        return newData;
      } else if (typeof data === "object" && !(data instanceof Date)) {
        const newData = {};

        for (const key in data) {
          if (Object.prototype.hasOwnProperty.call(data, key)) {
            newData[key] = _deconstructPacket(data[key], buffers);
          }
        }

        return newData;
      }

      return data;
    }
    /**
     * Reconstructs a binary packet from its placeholder packet and buffers
     *
     * @param {Object} packet - event packet with placeholders
     * @param {Array} buffers - binary buffers to put in placeholder positions
     * @return {Object} reconstructed packet
     * @public
     */


    function reconstructPacket(packet, buffers) {
      packet.data = _reconstructPacket(packet.data, buffers);
      packet.attachments = undefined; // no longer useful

      return packet;
    }

    function _reconstructPacket(data, buffers) {
      if (!data) return data;

      if (data && data._placeholder === true) {
        const isIndexValid = typeof data.num === "number" && data.num >= 0 && data.num < buffers.length;

        if (isIndexValid) {
          return buffers[data.num]; // appropriate buffer (should be natural order anyway)
        } else {
          throw new Error("illegal attachments");
        }
      } else if (Array.isArray(data)) {
        for (let i = 0; i < data.length; i++) {
          data[i] = _reconstructPacket(data[i], buffers);
        }
      } else if (typeof data === "object") {
        for (const key in data) {
          if (Object.prototype.hasOwnProperty.call(data, key)) {
            data[key] = _reconstructPacket(data[key], buffers);
          }
        }
      }

      return data;
    }
  }, {
    "./is-binary.js": "../node_modules/socket.io-client/node_modules/socket.io-parser/build/esm/is-binary.js"
  }],
  "../node_modules/socket.io-client/node_modules/socket.io-parser/build/esm/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.protocol = exports.PacketType = exports.Encoder = exports.Decoder = void 0;

    var _componentEmitter = require("@socket.io/component-emitter");

    var _binary = require("./binary.js");

    var _isBinary = require("./is-binary.js");
    /**
     * Protocol version.
     *
     * @public
     */


    const protocol = 5;
    exports.protocol = protocol;
    var PacketType;
    exports.PacketType = PacketType;

    (function (PacketType) {
      PacketType[PacketType["CONNECT"] = 0] = "CONNECT";
      PacketType[PacketType["DISCONNECT"] = 1] = "DISCONNECT";
      PacketType[PacketType["EVENT"] = 2] = "EVENT";
      PacketType[PacketType["ACK"] = 3] = "ACK";
      PacketType[PacketType["CONNECT_ERROR"] = 4] = "CONNECT_ERROR";
      PacketType[PacketType["BINARY_EVENT"] = 5] = "BINARY_EVENT";
      PacketType[PacketType["BINARY_ACK"] = 6] = "BINARY_ACK";
    })(PacketType || (exports.PacketType = PacketType = {}));
    /**
     * A socket.io Encoder instance
     */


    class Encoder {
      /**
       * Encoder constructor
       *
       * @param {function} replacer - custom replacer to pass down to JSON.parse
       */
      constructor(replacer) {
        this.replacer = replacer;
      }
      /**
       * Encode a packet as a single string if non-binary, or as a
       * buffer sequence, depending on packet type.
       *
       * @param {Object} obj - packet object
       */


      encode(obj) {
        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
          if ((0, _isBinary.hasBinary)(obj)) {
            obj.type = obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK;
            return this.encodeAsBinary(obj);
          }
        }

        return [this.encodeAsString(obj)];
      }
      /**
       * Encode packet as string.
       */


      encodeAsString(obj) {
        // first is type
        let str = "" + obj.type; // attachments if we have them

        if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {
          str += obj.attachments + "-";
        } // if we have a namespace other than `/`
        // we append it followed by a comma `,`


        if (obj.nsp && "/" !== obj.nsp) {
          str += obj.nsp + ",";
        } // immediately followed by the id


        if (null != obj.id) {
          str += obj.id;
        } // json data


        if (null != obj.data) {
          str += JSON.stringify(obj.data, this.replacer);
        }

        return str;
      }
      /**
       * Encode packet as 'buffer sequence' by removing blobs, and
       * deconstructing packet into object with placeholders and
       * a list of buffers.
       */


      encodeAsBinary(obj) {
        const deconstruction = (0, _binary.deconstructPacket)(obj);
        const pack = this.encodeAsString(deconstruction.packet);
        const buffers = deconstruction.buffers;
        buffers.unshift(pack); // add packet info to beginning of data list

        return buffers; // write all the buffers
      }

    }
    /**
     * A socket.io Decoder instance
     *
     * @return {Object} decoder
     */


    exports.Encoder = Encoder;

    class Decoder extends _componentEmitter.Emitter {
      /**
       * Decoder constructor
       *
       * @param {function} reviver - custom reviver to pass down to JSON.stringify
       */
      constructor(reviver) {
        super();
        this.reviver = reviver;
      }
      /**
       * Decodes an encoded packet string into packet JSON.
       *
       * @param {String} obj - encoded packet
       */


      add(obj) {
        let packet;

        if (typeof obj === "string") {
          if (this.reconstructor) {
            throw new Error("got plaintext data when reconstructing a packet");
          }

          packet = this.decodeString(obj);

          if (packet.type === PacketType.BINARY_EVENT || packet.type === PacketType.BINARY_ACK) {
            // binary packet's json
            this.reconstructor = new BinaryReconstructor(packet); // no attachments, labeled binary but no binary data to follow

            if (packet.attachments === 0) {
              super.emitReserved("decoded", packet);
            }
          } else {
            // non-binary full packet
            super.emitReserved("decoded", packet);
          }
        } else if ((0, _isBinary.isBinary)(obj) || obj.base64) {
          // raw binary data
          if (!this.reconstructor) {
            throw new Error("got binary data when not reconstructing a packet");
          } else {
            packet = this.reconstructor.takeBinaryData(obj);

            if (packet) {
              // received final buffer
              this.reconstructor = null;
              super.emitReserved("decoded", packet);
            }
          }
        } else {
          throw new Error("Unknown type: " + obj);
        }
      }
      /**
       * Decode a packet String (JSON data)
       *
       * @param {String} str
       * @return {Object} packet
       */


      decodeString(str) {
        let i = 0; // look up type

        const p = {
          type: Number(str.charAt(0))
        };

        if (PacketType[p.type] === undefined) {
          throw new Error("unknown packet type " + p.type);
        } // look up attachments if type binary


        if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {
          const start = i + 1;

          while (str.charAt(++i) !== "-" && i != str.length) {}

          const buf = str.substring(start, i);

          if (buf != Number(buf) || str.charAt(i) !== "-") {
            throw new Error("Illegal attachments");
          }

          p.attachments = Number(buf);
        } // look up namespace (if any)


        if ("/" === str.charAt(i + 1)) {
          const start = i + 1;

          while (++i) {
            const c = str.charAt(i);
            if ("," === c) break;
            if (i === str.length) break;
          }

          p.nsp = str.substring(start, i);
        } else {
          p.nsp = "/";
        } // look up id


        const next = str.charAt(i + 1);

        if ("" !== next && Number(next) == next) {
          const start = i + 1;

          while (++i) {
            const c = str.charAt(i);

            if (null == c || Number(c) != c) {
              --i;
              break;
            }

            if (i === str.length) break;
          }

          p.id = Number(str.substring(start, i + 1));
        } // look up json data


        if (str.charAt(++i)) {
          const payload = this.tryParse(str.substr(i));

          if (Decoder.isPayloadValid(p.type, payload)) {
            p.data = payload;
          } else {
            throw new Error("invalid payload");
          }
        }

        return p;
      }

      tryParse(str) {
        try {
          return JSON.parse(str, this.reviver);
        } catch (e) {
          return false;
        }
      }

      static isPayloadValid(type, payload) {
        switch (type) {
          case PacketType.CONNECT:
            return typeof payload === "object";

          case PacketType.DISCONNECT:
            return payload === undefined;

          case PacketType.CONNECT_ERROR:
            return typeof payload === "string" || typeof payload === "object";

          case PacketType.EVENT:
          case PacketType.BINARY_EVENT:
            return Array.isArray(payload) && payload.length > 0;

          case PacketType.ACK:
          case PacketType.BINARY_ACK:
            return Array.isArray(payload);
        }
      }
      /**
       * Deallocates a parser's resources
       */


      destroy() {
        if (this.reconstructor) {
          this.reconstructor.finishedReconstruction();
        }
      }

    }
    /**
     * A manager of a binary event's 'buffer sequence'. Should
     * be constructed whenever a packet of type BINARY_EVENT is
     * decoded.
     *
     * @param {Object} packet
     * @return {BinaryReconstructor} initialized reconstructor
     */


    exports.Decoder = Decoder;

    class BinaryReconstructor {
      constructor(packet) {
        this.packet = packet;
        this.buffers = [];
        this.reconPack = packet;
      }
      /**
       * Method to be called when binary data received from connection
       * after a BINARY_EVENT packet.
       *
       * @param {Buffer | ArrayBuffer} binData - the raw binary data received
       * @return {null | Object} returns null if more binary data is expected or
       *   a reconstructed packet object if all buffers have been received.
       */


      takeBinaryData(binData) {
        this.buffers.push(binData);

        if (this.buffers.length === this.reconPack.attachments) {
          // done with buffer list
          const packet = (0, _binary.reconstructPacket)(this.reconPack, this.buffers);
          this.finishedReconstruction();
          return packet;
        }

        return null;
      }
      /**
       * Cleans up binary packet reconstruction variables.
       */


      finishedReconstruction() {
        this.reconPack = null;
        this.buffers = [];
      }

    }
  }, {
    "@socket.io/component-emitter": "../node_modules/@socket.io/component-emitter/index.mjs",
    "./binary.js": "../node_modules/socket.io-client/node_modules/socket.io-parser/build/esm/binary.js",
    "./is-binary.js": "../node_modules/socket.io-client/node_modules/socket.io-parser/build/esm/is-binary.js"
  }],
  "../node_modules/socket.io-client/build/esm/on.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.on = on;

    function on(obj, ev, fn) {
      obj.on(ev, fn);
      return function subDestroy() {
        obj.off(ev, fn);
      };
    }
  }, {}],
  "../node_modules/socket.io-client/build/esm/socket.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Socket = void 0;

    var _socket = require("socket.io-parser");

    var _on = require("./on.js");

    var _componentEmitter = require("@socket.io/component-emitter");
    /**
     * Internal events.
     * These events can't be emitted by the user.
     */


    const RESERVED_EVENTS = Object.freeze({
      connect: 1,
      connect_error: 1,
      disconnect: 1,
      disconnecting: 1,
      // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
      newListener: 1,
      removeListener: 1
    });

    class Socket extends _componentEmitter.Emitter {
      /**
       * `Socket` constructor.
       *
       * @public
       */
      constructor(io, nsp, opts) {
        super();
        this.connected = false;
        this.receiveBuffer = [];
        this.sendBuffer = [];
        this.ids = 0;
        this.acks = {};
        this.flags = {};
        this.io = io;
        this.nsp = nsp;

        if (opts && opts.auth) {
          this.auth = opts.auth;
        }

        if (this.io._autoConnect) this.open();
      }
      /**
       * Whether the socket is currently disconnected
       */


      get disconnected() {
        return !this.connected;
      }
      /**
       * Subscribe to open, close and packet events
       *
       * @private
       */


      subEvents() {
        if (this.subs) return;
        const io = this.io;
        this.subs = [(0, _on.on)(io, "open", this.onopen.bind(this)), (0, _on.on)(io, "packet", this.onpacket.bind(this)), (0, _on.on)(io, "error", this.onerror.bind(this)), (0, _on.on)(io, "close", this.onclose.bind(this))];
      }
      /**
       * Whether the Socket will try to reconnect when its Manager connects or reconnects
       */


      get active() {
        return !!this.subs;
      }
      /**
       * "Opens" the socket.
       *
       * @public
       */


      connect() {
        if (this.connected) return this;
        this.subEvents();
        if (!this.io["_reconnecting"]) this.io.open(); // ensure open

        if ("open" === this.io._readyState) this.onopen();
        return this;
      }
      /**
       * Alias for connect()
       */


      open() {
        return this.connect();
      }
      /**
       * Sends a `message` event.
       *
       * @return self
       * @public
       */


      send() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        args.unshift("message");
        this.emit.apply(this, args);
        return this;
      }
      /**
       * Override `emit`.
       * If the event is in `events`, it's emitted normally.
       *
       * @return self
       * @public
       */


      emit(ev) {
        if (RESERVED_EVENTS.hasOwnProperty(ev)) {
          throw new Error('"' + ev + '" is a reserved event name');
        }

        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }

        args.unshift(ev);
        const packet = {
          type: _socket.PacketType.EVENT,
          data: args
        };
        packet.options = {};
        packet.options.compress = this.flags.compress !== false; // event ack callback

        if ("function" === typeof args[args.length - 1]) {
          const id = this.ids++;
          const ack = args.pop();

          this._registerAckCallback(id, ack);

          packet.id = id;
        }

        const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;
        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);

        if (discardPacket) {} else if (this.connected) {
          this.notifyOutgoingListeners(packet);
          this.packet(packet);
        } else {
          this.sendBuffer.push(packet);
        }

        this.flags = {};
        return this;
      }
      /**
       * @private
       */


      _registerAckCallback(id, ack) {
        var _this13 = this;

        const timeout = this.flags.timeout;

        if (timeout === undefined) {
          this.acks[id] = ack;
          return;
        } // @ts-ignore


        const timer = this.io.setTimeoutFn(() => {
          delete this.acks[id];

          for (let i = 0; i < this.sendBuffer.length; i++) {
            if (this.sendBuffer[i].id === id) {
              this.sendBuffer.splice(i, 1);
            }
          }

          ack.call(this, new Error("operation has timed out"));
        }, timeout);

        this.acks[id] = function () {
          // @ts-ignore
          _this13.io.clearTimeoutFn(timer);

          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }

          ack.apply(_this13, [null, ...args]);
        };
      }
      /**
       * Sends a packet.
       *
       * @param packet
       * @private
       */


      packet(packet) {
        packet.nsp = this.nsp;

        this.io._packet(packet);
      }
      /**
       * Called upon engine `open`.
       *
       * @private
       */


      onopen() {
        if (typeof this.auth == "function") {
          this.auth(data => {
            this.packet({
              type: _socket.PacketType.CONNECT,
              data
            });
          });
        } else {
          this.packet({
            type: _socket.PacketType.CONNECT,
            data: this.auth
          });
        }
      }
      /**
       * Called upon engine or manager `error`.
       *
       * @param err
       * @private
       */


      onerror(err) {
        if (!this.connected) {
          this.emitReserved("connect_error", err);
        }
      }
      /**
       * Called upon engine `close`.
       *
       * @param reason
       * @param description
       * @private
       */


      onclose(reason, description) {
        this.connected = false;
        delete this.id;
        this.emitReserved("disconnect", reason, description);
      }
      /**
       * Called with socket packet.
       *
       * @param packet
       * @private
       */


      onpacket(packet) {
        const sameNamespace = packet.nsp === this.nsp;
        if (!sameNamespace) return;

        switch (packet.type) {
          case _socket.PacketType.CONNECT:
            if (packet.data && packet.data.sid) {
              const id = packet.data.sid;
              this.onconnect(id);
            } else {
              this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
            }

            break;

          case _socket.PacketType.EVENT:
          case _socket.PacketType.BINARY_EVENT:
            this.onevent(packet);
            break;

          case _socket.PacketType.ACK:
          case _socket.PacketType.BINARY_ACK:
            this.onack(packet);
            break;

          case _socket.PacketType.DISCONNECT:
            this.ondisconnect();
            break;

          case _socket.PacketType.CONNECT_ERROR:
            this.destroy();
            const err = new Error(packet.data.message); // @ts-ignore

            err.data = packet.data.data;
            this.emitReserved("connect_error", err);
            break;
        }
      }
      /**
       * Called upon a server event.
       *
       * @param packet
       * @private
       */


      onevent(packet) {
        const args = packet.data || [];

        if (null != packet.id) {
          args.push(this.ack(packet.id));
        }

        if (this.connected) {
          this.emitEvent(args);
        } else {
          this.receiveBuffer.push(Object.freeze(args));
        }
      }

      emitEvent(args) {
        if (this._anyListeners && this._anyListeners.length) {
          const listeners = this._anyListeners.slice();

          for (const listener of listeners) {
            listener.apply(this, args);
          }
        }

        super.emit.apply(this, args);
      }
      /**
       * Produces an ack callback to emit with an event.
       *
       * @private
       */


      ack(id) {
        const self = this;
        let sent = false;
        return function () {
          // prevent double callbacks
          if (sent) return;
          sent = true;

          for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            args[_key6] = arguments[_key6];
          }

          self.packet({
            type: _socket.PacketType.ACK,
            id: id,
            data: args
          });
        };
      }
      /**
       * Called upon a server acknowlegement.
       *
       * @param packet
       * @private
       */


      onack(packet) {
        const ack = this.acks[packet.id];

        if ("function" === typeof ack) {
          ack.apply(this, packet.data);
          delete this.acks[packet.id];
        } else {}
      }
      /**
       * Called upon server connect.
       *
       * @private
       */


      onconnect(id) {
        this.id = id;
        this.connected = true;
        this.emitBuffered();
        this.emitReserved("connect");
      }
      /**
       * Emit buffered events (received and emitted).
       *
       * @private
       */


      emitBuffered() {
        this.receiveBuffer.forEach(args => this.emitEvent(args));
        this.receiveBuffer = [];
        this.sendBuffer.forEach(packet => {
          this.notifyOutgoingListeners(packet);
          this.packet(packet);
        });
        this.sendBuffer = [];
      }
      /**
       * Called upon server disconnect.
       *
       * @private
       */


      ondisconnect() {
        this.destroy();
        this.onclose("io server disconnect");
      }
      /**
       * Called upon forced client/server side disconnections,
       * this method ensures the manager stops tracking us and
       * that reconnections don't get triggered for this.
       *
       * @private
       */


      destroy() {
        if (this.subs) {
          // clean subscriptions to avoid reconnections
          this.subs.forEach(subDestroy => subDestroy());
          this.subs = undefined;
        }

        this.io["_destroy"](this);
      }
      /**
       * Disconnects the socket manually.
       *
       * @return self
       * @public
       */


      disconnect() {
        if (this.connected) {
          this.packet({
            type: _socket.PacketType.DISCONNECT
          });
        } // remove socket from pool


        this.destroy();

        if (this.connected) {
          // fire events
          this.onclose("io client disconnect");
        }

        return this;
      }
      /**
       * Alias for disconnect()
       *
       * @return self
       * @public
       */


      close() {
        return this.disconnect();
      }
      /**
       * Sets the compress flag.
       *
       * @param compress - if `true`, compresses the sending data
       * @return self
       * @public
       */


      compress(compress) {
        this.flags.compress = compress;
        return this;
      }
      /**
       * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
       * ready to send messages.
       *
       * @returns self
       * @public
       */


      get volatile() {
        this.flags.volatile = true;
        return this;
      }
      /**
       * Sets a modifier for a subsequent event emission that the callback will be called with an error when the
       * given number of milliseconds have elapsed without an acknowledgement from the server:
       *
       * ```
       * socket.timeout(5000).emit("my-event", (err) => {
       *   if (err) {
       *     // the server did not acknowledge the event in the given delay
       *   }
       * });
       * ```
       *
       * @returns self
       * @public
       */


      timeout(timeout) {
        this.flags.timeout = timeout;
        return this;
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback.
       *
       * @param listener
       * @public
       */


      onAny(listener) {
        this._anyListeners = this._anyListeners || [];

        this._anyListeners.push(listener);

        return this;
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback. The listener is added to the beginning of the listeners array.
       *
       * @param listener
       * @public
       */


      prependAny(listener) {
        this._anyListeners = this._anyListeners || [];

        this._anyListeners.unshift(listener);

        return this;
      }
      /**
       * Removes the listener that will be fired when any event is emitted.
       *
       * @param listener
       * @public
       */


      offAny(listener) {
        if (!this._anyListeners) {
          return this;
        }

        if (listener) {
          const listeners = this._anyListeners;

          for (let i = 0; i < listeners.length; i++) {
            if (listener === listeners[i]) {
              listeners.splice(i, 1);
              return this;
            }
          }
        } else {
          this._anyListeners = [];
        }

        return this;
      }
      /**
       * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
       * e.g. to remove listeners.
       *
       * @public
       */


      listenersAny() {
        return this._anyListeners || [];
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback.
       *
       * @param listener
       *
       * <pre><code>
       *
       * socket.onAnyOutgoing((event, ...args) => {
       *   console.log(event);
       * });
       *
       * </pre></code>
       *
       * @public
       */


      onAnyOutgoing(listener) {
        this._anyOutgoingListeners = this._anyOutgoingListeners || [];

        this._anyOutgoingListeners.push(listener);

        return this;
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback. The listener is added to the beginning of the listeners array.
       *
       * @param listener
       *
       * <pre><code>
       *
       * socket.prependAnyOutgoing((event, ...args) => {
       *   console.log(event);
       * });
       *
       * </pre></code>
       *
       * @public
       */


      prependAnyOutgoing(listener) {
        this._anyOutgoingListeners = this._anyOutgoingListeners || [];

        this._anyOutgoingListeners.unshift(listener);

        return this;
      }
      /**
       * Removes the listener that will be fired when any event is emitted.
       *
       * @param listener
       *
       * <pre><code>
       *
       * const handler = (event, ...args) => {
       *   console.log(event);
       * }
       *
       * socket.onAnyOutgoing(handler);
       *
       * // then later
       * socket.offAnyOutgoing(handler);
       *
       * </pre></code>
       *
       * @public
       */


      offAnyOutgoing(listener) {
        if (!this._anyOutgoingListeners) {
          return this;
        }

        if (listener) {
          const listeners = this._anyOutgoingListeners;

          for (let i = 0; i < listeners.length; i++) {
            if (listener === listeners[i]) {
              listeners.splice(i, 1);
              return this;
            }
          }
        } else {
          this._anyOutgoingListeners = [];
        }

        return this;
      }
      /**
       * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
       * e.g. to remove listeners.
       *
       * @public
       */


      listenersAnyOutgoing() {
        return this._anyOutgoingListeners || [];
      }
      /**
       * Notify the listeners for each packet sent
       *
       * @param packet
       *
       * @private
       */


      notifyOutgoingListeners(packet) {
        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
          const listeners = this._anyOutgoingListeners.slice();

          for (const listener of listeners) {
            listener.apply(this, packet.data);
          }
        }
      }

    }

    exports.Socket = Socket;
  }, {
    "socket.io-parser": "../node_modules/socket.io-client/node_modules/socket.io-parser/build/esm/index.js",
    "./on.js": "../node_modules/socket.io-client/build/esm/on.js",
    "@socket.io/component-emitter": "../node_modules/@socket.io/component-emitter/index.mjs"
  }],
  "../node_modules/socket.io-client/build/esm/contrib/backo2.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Backoff = Backoff;
    /**
     * Initialize backoff timer with `opts`.
     *
     * - `min` initial timeout in milliseconds [100]
     * - `max` max timeout [10000]
     * - `jitter` [0]
     * - `factor` [2]
     *
     * @param {Object} opts
     * @api public
     */

    function Backoff(opts) {
      opts = opts || {};
      this.ms = opts.min || 100;
      this.max = opts.max || 10000;
      this.factor = opts.factor || 2;
      this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
      this.attempts = 0;
    }
    /**
     * Return the backoff duration.
     *
     * @return {Number}
     * @api public
     */


    Backoff.prototype.duration = function () {
      var ms = this.ms * Math.pow(this.factor, this.attempts++);

      if (this.jitter) {
        var rand = Math.random();
        var deviation = Math.floor(rand * this.jitter * ms);
        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
      }

      return Math.min(ms, this.max) | 0;
    };
    /**
     * Reset the number of attempts.
     *
     * @api public
     */


    Backoff.prototype.reset = function () {
      this.attempts = 0;
    };
    /**
     * Set the minimum duration
     *
     * @api public
     */


    Backoff.prototype.setMin = function (min) {
      this.ms = min;
    };
    /**
     * Set the maximum duration
     *
     * @api public
     */


    Backoff.prototype.setMax = function (max) {
      this.max = max;
    };
    /**
     * Set the jitter
     *
     * @api public
     */


    Backoff.prototype.setJitter = function (jitter) {
      this.jitter = jitter;
    };
  }, {}],
  "../node_modules/socket.io-client/build/esm/manager.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Manager = void 0;

    var _engine = require("engine.io-client");

    var _socket = require("./socket.js");

    var parser = _interopRequireWildcard(require("socket.io-parser"));

    var _on = require("./on.js");

    var _backo = require("./contrib/backo2.js");

    var _componentEmitter = require("@socket.io/component-emitter");

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function (nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj.default = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    class Manager extends _componentEmitter.Emitter {
      constructor(uri, opts) {
        var _a;

        super();
        this.nsps = {};
        this.subs = [];

        if (uri && "object" === typeof uri) {
          opts = uri;
          uri = undefined;
        }

        opts = opts || {};
        opts.path = opts.path || "/socket.io";
        this.opts = opts;
        (0, _engine.installTimerFunctions)(this, opts);
        this.reconnection(opts.reconnection !== false);
        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
        this.reconnectionDelay(opts.reconnectionDelay || 1000);
        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);
        this.backoff = new _backo.Backoff({
          min: this.reconnectionDelay(),
          max: this.reconnectionDelayMax(),
          jitter: this.randomizationFactor()
        });
        this.timeout(null == opts.timeout ? 20000 : opts.timeout);
        this._readyState = "closed";
        this.uri = uri;

        const _parser = opts.parser || parser;

        this.encoder = new _parser.Encoder();
        this.decoder = new _parser.Decoder();
        this._autoConnect = opts.autoConnect !== false;
        if (this._autoConnect) this.open();
      }

      reconnection(v) {
        if (!arguments.length) return this._reconnection;
        this._reconnection = !!v;
        return this;
      }

      reconnectionAttempts(v) {
        if (v === undefined) return this._reconnectionAttempts;
        this._reconnectionAttempts = v;
        return this;
      }

      reconnectionDelay(v) {
        var _a;

        if (v === undefined) return this._reconnectionDelay;
        this._reconnectionDelay = v;
        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);
        return this;
      }

      randomizationFactor(v) {
        var _a;

        if (v === undefined) return this._randomizationFactor;
        this._randomizationFactor = v;
        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);
        return this;
      }

      reconnectionDelayMax(v) {
        var _a;

        if (v === undefined) return this._reconnectionDelayMax;
        this._reconnectionDelayMax = v;
        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);
        return this;
      }

      timeout(v) {
        if (!arguments.length) return this._timeout;
        this._timeout = v;
        return this;
      }
      /**
       * Starts trying to reconnect if reconnection is enabled and we have not
       * started reconnecting yet
       *
       * @private
       */


      maybeReconnectOnOpen() {
        // Only try to reconnect if it's the first time we're connecting
        if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {
          // keeps reconnection from firing twice for the same reconnection loop
          this.reconnect();
        }
      }
      /**
       * Sets the current transport `socket`.
       *
       * @param {Function} fn - optional, callback
       * @return self
       * @public
       */


      open(fn) {
        if (~this._readyState.indexOf("open")) return this;
        this.engine = new _engine.Socket(this.uri, this.opts);
        const socket = this.engine;
        const self = this;
        this._readyState = "opening";
        this.skipReconnect = false; // emit `open`

        const openSubDestroy = (0, _on.on)(socket, "open", function () {
          self.onopen();
          fn && fn();
        }); // emit `error`

        const errorSub = (0, _on.on)(socket, "error", err => {
          self.cleanup();
          self._readyState = "closed";
          this.emitReserved("error", err);

          if (fn) {
            fn(err);
          } else {
            // Only do this if there is no fn to handle the error
            self.maybeReconnectOnOpen();
          }
        });

        if (false !== this._timeout) {
          const timeout = this._timeout;

          if (timeout === 0) {
            openSubDestroy(); // prevents a race condition with the 'open' event
          } // set timer


          const timer = this.setTimeoutFn(() => {
            openSubDestroy();
            socket.close(); // @ts-ignore

            socket.emit("error", new Error("timeout"));
          }, timeout);

          if (this.opts.autoUnref) {
            timer.unref();
          }

          this.subs.push(function subDestroy() {
            clearTimeout(timer);
          });
        }

        this.subs.push(openSubDestroy);
        this.subs.push(errorSub);
        return this;
      }
      /**
       * Alias for open()
       *
       * @return self
       * @public
       */


      connect(fn) {
        return this.open(fn);
      }
      /**
       * Called upon transport open.
       *
       * @private
       */


      onopen() {
        // clear old subs
        this.cleanup(); // mark as open

        this._readyState = "open";
        this.emitReserved("open"); // add new subs

        const socket = this.engine;
        this.subs.push((0, _on.on)(socket, "ping", this.onping.bind(this)), (0, _on.on)(socket, "data", this.ondata.bind(this)), (0, _on.on)(socket, "error", this.onerror.bind(this)), (0, _on.on)(socket, "close", this.onclose.bind(this)), (0, _on.on)(this.decoder, "decoded", this.ondecoded.bind(this)));
      }
      /**
       * Called upon a ping.
       *
       * @private
       */


      onping() {
        this.emitReserved("ping");
      }
      /**
       * Called with data.
       *
       * @private
       */


      ondata(data) {
        this.decoder.add(data);
      }
      /**
       * Called when parser fully decodes a packet.
       *
       * @private
       */


      ondecoded(packet) {
        this.emitReserved("packet", packet);
      }
      /**
       * Called upon socket error.
       *
       * @private
       */


      onerror(err) {
        this.emitReserved("error", err);
      }
      /**
       * Creates a new socket for the given `nsp`.
       *
       * @return {Socket}
       * @public
       */


      socket(nsp, opts) {
        let socket = this.nsps[nsp];

        if (!socket) {
          socket = new _socket.Socket(this, nsp, opts);
          this.nsps[nsp] = socket;
        }

        return socket;
      }
      /**
       * Called upon a socket close.
       *
       * @param socket
       * @private
       */


      _destroy(socket) {
        const nsps = Object.keys(this.nsps);

        for (const nsp of nsps) {
          const socket = this.nsps[nsp];

          if (socket.active) {
            return;
          }
        }

        this._close();
      }
      /**
       * Writes a packet.
       *
       * @param packet
       * @private
       */


      _packet(packet) {
        const encodedPackets = this.encoder.encode(packet);

        for (let i = 0; i < encodedPackets.length; i++) {
          this.engine.write(encodedPackets[i], packet.options);
        }
      }
      /**
       * Clean up transport subscriptions and packet buffer.
       *
       * @private
       */


      cleanup() {
        this.subs.forEach(subDestroy => subDestroy());
        this.subs.length = 0;
        this.decoder.destroy();
      }
      /**
       * Close the current socket.
       *
       * @private
       */


      _close() {
        this.skipReconnect = true;
        this._reconnecting = false;
        this.onclose("forced close");
        if (this.engine) this.engine.close();
      }
      /**
       * Alias for close()
       *
       * @private
       */


      disconnect() {
        return this._close();
      }
      /**
       * Called upon engine close.
       *
       * @private
       */


      onclose(reason, description) {
        this.cleanup();
        this.backoff.reset();
        this._readyState = "closed";
        this.emitReserved("close", reason, description);

        if (this._reconnection && !this.skipReconnect) {
          this.reconnect();
        }
      }
      /**
       * Attempt a reconnection.
       *
       * @private
       */


      reconnect() {
        if (this._reconnecting || this.skipReconnect) return this;
        const self = this;

        if (this.backoff.attempts >= this._reconnectionAttempts) {
          this.backoff.reset();
          this.emitReserved("reconnect_failed");
          this._reconnecting = false;
        } else {
          const delay = this.backoff.duration();
          this._reconnecting = true;
          const timer = this.setTimeoutFn(() => {
            if (self.skipReconnect) return;
            this.emitReserved("reconnect_attempt", self.backoff.attempts); // check again for the case socket closed in above events

            if (self.skipReconnect) return;
            self.open(err => {
              if (err) {
                self._reconnecting = false;
                self.reconnect();
                this.emitReserved("reconnect_error", err);
              } else {
                self.onreconnect();
              }
            });
          }, delay);

          if (this.opts.autoUnref) {
            timer.unref();
          }

          this.subs.push(function subDestroy() {
            clearTimeout(timer);
          });
        }
      }
      /**
       * Called upon successful reconnect.
       *
       * @private
       */


      onreconnect() {
        const attempt = this.backoff.attempts;
        this._reconnecting = false;
        this.backoff.reset();
        this.emitReserved("reconnect", attempt);
      }

    }

    exports.Manager = Manager;
  }, {
    "engine.io-client": "../node_modules/engine.io-client/build/esm/index.js",
    "./socket.js": "../node_modules/socket.io-client/build/esm/socket.js",
    "socket.io-parser": "../node_modules/socket.io-client/node_modules/socket.io-parser/build/esm/index.js",
    "./on.js": "../node_modules/socket.io-client/build/esm/on.js",
    "./contrib/backo2.js": "../node_modules/socket.io-client/build/esm/contrib/backo2.js",
    "@socket.io/component-emitter": "../node_modules/@socket.io/component-emitter/index.mjs"
  }],
  "../node_modules/socket.io-client/build/esm/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Manager", {
      enumerable: true,
      get: function () {
        return _manager.Manager;
      }
    });
    Object.defineProperty(exports, "Socket", {
      enumerable: true,
      get: function () {
        return _socket.Socket;
      }
    });
    exports.default = exports.connect = exports.io = lookup;
    Object.defineProperty(exports, "protocol", {
      enumerable: true,
      get: function () {
        return _socket2.protocol;
      }
    });

    var _url = require("./url.js");

    var _manager = require("./manager.js");

    var _socket = require("./socket.js");

    var _socket2 = require("socket.io-parser");
    /**
     * Managers cache.
     */


    const cache = {};

    function lookup(uri, opts) {
      if (typeof uri === "object") {
        opts = uri;
        uri = undefined;
      }

      opts = opts || {};
      const parsed = (0, _url.url)(uri, opts.path || "/socket.io");
      const source = parsed.source;
      const id = parsed.id;
      const path = parsed.path;
      const sameNamespace = cache[id] && path in cache[id]["nsps"];
      const newConnection = opts.forceNew || opts["force new connection"] || false === opts.multiplex || sameNamespace;
      let io;

      if (newConnection) {
        io = new _manager.Manager(source, opts);
      } else {
        if (!cache[id]) {
          cache[id] = new _manager.Manager(source, opts);
        }

        io = cache[id];
      }

      if (parsed.query && !opts.query) {
        opts.query = parsed.queryKey;
      }

      return io.socket(parsed.path, opts);
    } // so that "lookup" can be used both as a function (e.g. `io(...)`) and as a
    // namespace (e.g. `io.connect(...)`), for backward compatibility


    Object.assign(lookup, {
      Manager: _manager.Manager,
      Socket: _socket.Socket,
      io: lookup,
      connect: lookup
    });
    /**
     * Protocol version.
     *
     * @public
     */
  }, {
    "./url.js": "../node_modules/socket.io-client/build/esm/url.js",
    "./manager.js": "../node_modules/socket.io-client/build/esm/manager.js",
    "./socket.js": "../node_modules/socket.io-client/build/esm/socket.js",
    "socket.io-parser": "../node_modules/socket.io-client/node_modules/socket.io-parser/build/esm/index.js"
  }],
  "azure.js": [function (require, module, exports) {
    console.log("azure.js");

    var _require = require("@azure/core-http"),
        disableResponseDecompressionPolicy = _require.disableResponseDecompressionPolicy;

    var _require2 = require("http"),
        ClientRequest = _require2.ClientRequest;

    require("regenerator-runtime/runtime");

    var _require3 = require("@azure/storage-blob"),
        BlobServiceClient = _require3.BlobServiceClient;

    var _require4 = require('socket.io-client'),
        io = _require4.io;

    var _require5 = require("process"),
        send = _require5.send;

    var socket = io('http://localhost:3000');
    socket.on('connect', function () {
      console.log('you connected with id: ' + socket.id);
    });

    function sendURL(_url) {
      socket.emit('event', _url);
    } //html element variables


    var selectButton = document.getElementById("selectButton");

    var _fileInput = document.getElementById("fileInput");

    var ab1 = document.getElementById("ab1");
    var dummyButton = document.getElementById("dummyButton");
    var formButton = document.getElementById("formButton"); // ab1.value="";

    _fileInput.value = ""; //Shared Access Signature URL

    var SASurl = "https://databsetut.blob.core.windows.net/container?sp=racwdl&st=2022-07-04T16:11:24Z&se=2022-07-31T00:11:24Z&sip=0.0.0.0-255.255.255.255&spr=https&sv=2021-06-08&sr=c&sig=bY3flFzPoTIqrKCCWZsYyBAvti0yXCavh%2BboTxEigY8%3D"; //lets create a blob service client

    var container = "container";
    var blobServiceClient = new BlobServiceClient(SASurl);
    var containerClient = blobServiceClient.getContainerClient(container);
    var blockBlobClient = ""; //lets write a function to upload an array of blobs

    function uploadBlob() {
      console.log(_fileInput.files[0].name); //identify the file        

      var blockBlobClient = containerClient.getBlockBlobClient(_fileInput.files[0].name); // console.log(blockBlobClient.url)    
      // blobUrl=blockBlobClient.url;     
      //upload file

      ab1.value = blockBlobClient.url;
      console.log(ab1.value);
      sendURL(ab1.value);
      blockBlobClient.uploadBrowserData(_fileInput.input); // ab1.value="";
      // _fileInput.value="";
    } //html upload methods


    selectButton.addEventListener("click", function () {
      return _fileInput.click();
    });

    _fileInput.addEventListener("change", uploadBlob); // _fileInput.addEventListener("change", ()=>{document.getElementById("ab1").value=blockBlobClient.url;});


    dummyButton.addEventListener("click", function () {
      return formButton.click();
    });
  }, {
    "@azure/core-http": "../node_modules/@azure/core-http/dist-esm/src/coreHttp.js",
    "http": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/stream-http/index.js",
    "regenerator-runtime/runtime": "../node_modules/regenerator-runtime/runtime.js",
    "@azure/storage-blob": "../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.browser.js",
    "socket.io-client": "../node_modules/socket.io-client/build/esm/index.js",
    "process": "../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process/browser.js"
  }],
  "../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js": [function (require, module, exports) {
    var global = arguments[3];
    var OVERLAY_ID = '__parcel__error__overlay__';
    var OldModule = module.bundle.Module;

    function Module(moduleName) {
      OldModule.call(this, moduleName);
      this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function (fn) {
          this._acceptCallbacks.push(fn || function () {});
        },
        dispose: function (fn) {
          this._disposeCallbacks.push(fn);
        }
      };
      module.bundle.hotData = null;
    }

    module.bundle.Module = Module;
    var checkedAssets, assetsToAccept;
    var parent = module.bundle.parent;

    if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
      var hostname = "" || location.hostname;
      var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
      var ws = new WebSocket(protocol + '://' + hostname + ':' + "61212" + '/');

      ws.onmessage = function (event) {
        checkedAssets = {};
        assetsToAccept = [];
        var data = JSON.parse(event.data);

        if (data.type === 'update') {
          var handled = false;
          data.assets.forEach(function (asset) {
            if (!asset.isNew) {
              var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

              if (didAccept) {
                handled = true;
              }
            }
          }); // Enable HMR for CSS by default.

          handled = handled || data.assets.every(function (asset) {
            return asset.type === 'css' && asset.generated.js;
          });

          if (handled) {
            console.clear();
            data.assets.forEach(function (asset) {
              hmrApply(global.parcelRequire, asset);
            });
            assetsToAccept.forEach(function (v) {
              hmrAcceptRun(v[0], v[1]);
            });
          } else if (location.reload) {
            // `location` global exists in a web worker context but lacks `.reload()` function.
            location.reload();
          }
        }

        if (data.type === 'reload') {
          ws.close();

          ws.onclose = function () {
            location.reload();
          };
        }

        if (data.type === 'error-resolved') {
          console.log('[parcel] ✨ Error resolved');
          removeErrorOverlay();
        }

        if (data.type === 'error') {
          console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
          removeErrorOverlay();
          var overlay = createErrorOverlay(data);
          document.body.appendChild(overlay);
        }
      };
    }

    function removeErrorOverlay() {
      var overlay = document.getElementById(OVERLAY_ID);

      if (overlay) {
        overlay.remove();
      }
    }

    function createErrorOverlay(data) {
      var overlay = document.createElement('div');
      overlay.id = OVERLAY_ID; // html encode message and stack trace

      var message = document.createElement('div');
      var stackTrace = document.createElement('pre');
      message.innerText = data.error.message;
      stackTrace.innerText = data.error.stack;
      overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
      return overlay;
    }

    function getParents(bundle, id) {
      var modules = bundle.modules;

      if (!modules) {
        return [];
      }

      var parents = [];
      var k, d, dep;

      for (k in modules) {
        for (d in modules[k][1]) {
          dep = modules[k][1][d];

          if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
            parents.push(k);
          }
        }
      }

      if (bundle.parent) {
        parents = parents.concat(getParents(bundle.parent, id));
      }

      return parents;
    }

    function hmrApply(bundle, asset) {
      var modules = bundle.modules;

      if (!modules) {
        return;
      }

      if (modules[asset.id] || !bundle.parent) {
        var fn = new Function('require', 'module', 'exports', asset.generated.js);
        asset.isNew = !modules[asset.id];
        modules[asset.id] = [fn, asset.deps];
      } else if (bundle.parent) {
        hmrApply(bundle.parent, asset);
      }
    }

    function hmrAcceptCheck(bundle, id) {
      var modules = bundle.modules;

      if (!modules) {
        return;
      }

      if (!modules[id] && bundle.parent) {
        return hmrAcceptCheck(bundle.parent, id);
      }

      if (checkedAssets[id]) {
        return;
      }

      checkedAssets[id] = true;
      var cached = bundle.cache[id];
      assetsToAccept.push([bundle, id]);

      if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        return true;
      }

      return getParents(global.parcelRequire, id).some(function (id) {
        return hmrAcceptCheck(global.parcelRequire, id);
      });
    }

    function hmrAcceptRun(bundle, id) {
      var cached = bundle.cache[id];
      bundle.hotData = {};

      if (cached) {
        cached.hot.data = bundle.hotData;
      }

      if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
        cached.hot._disposeCallbacks.forEach(function (cb) {
          cb(bundle.hotData);
        });
      }

      delete bundle.cache[id];
      bundle(id);
      cached = bundle.cache[id];

      if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        cached.hot._acceptCallbacks.forEach(function (cb) {
          cb();
        });

        return true;
      }
    }
  }, {}]
}, {}, ["../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js", "azure.js"], null);
},{"process":"node_modules/process/browser.js","buffer":"node_modules/node-libs-browser/node_modules/buffer/index.js"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "53045" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","dist/azure.js"], null)
//# sourceMappingURL=/azure.f56de615.js.map